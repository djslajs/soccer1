/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 72);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var bind = __webpack_require__(22);
var isBuffer = __webpack_require__(47);

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge() /* obj1, obj2, obj3, ... */{
  var result = {};
  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function deepMerge() /* obj1, obj2, obj3, ... */{
  var result = {};
  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(60);
} else {
  module.exports = __webpack_require__(59);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(30);

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(54);
} else {
  module.exports = __webpack_require__(53);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavLink = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _reactRouter = __webpack_require__(56);

Object.keys(_reactRouter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _reactRouter[key];
    }
  });
});

var _inheritsLoose2 = __webpack_require__(14);

var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);

var _react = __webpack_require__(2);

var _react2 = _interopRequireDefault(_react);

var _history = __webpack_require__(24);

var _propTypes = __webpack_require__(10);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _tinyWarning = __webpack_require__(7);

var _tinyWarning2 = _interopRequireDefault(_tinyWarning);

var _extends2 = __webpack_require__(8);

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutPropertiesLoose2 = __webpack_require__(15);

var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);

var _tinyInvariant = __webpack_require__(12);

var _tinyInvariant2 = _interopRequireDefault(_tinyInvariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The public API for a <Router> that uses HTML5 history.
 */

var BrowserRouter =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose3.default)(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = (0, _history.createBrowserHistory)(_this.props);
    return _this;
  }

  var _proto = BrowserRouter.prototype;

  _proto.render = function render() {
    return _react2.default.createElement(_reactRouter.Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return BrowserRouter;
}(_react2.default.Component);

if (process.env.NODE_ENV !== "production") {
  BrowserRouter.propTypes = {
    basename: _propTypes2.default.string,
    children: _propTypes2.default.node,
    forceRefresh: _propTypes2.default.bool,
    getUserConfirmation: _propTypes2.default.func,
    keyLength: _propTypes2.default.number
  };

  BrowserRouter.prototype.componentDidMount = function () {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") : void 0;
  };
}

/**
 * The public API for a <Router> that uses window.location.hash.
 */

var HashRouter =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose3.default)(HashRouter, _React$Component);

  function HashRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = (0, _history.createHashHistory)(_this.props);
    return _this;
  }

  var _proto = HashRouter.prototype;

  _proto.render = function render() {
    return _react2.default.createElement(_reactRouter.Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return HashRouter;
}(_react2.default.Component);

if (process.env.NODE_ENV !== "production") {
  HashRouter.propTypes = {
    basename: _propTypes2.default.string,
    children: _propTypes2.default.node,
    getUserConfirmation: _propTypes2.default.func,
    hashType: _propTypes2.default.oneOf(["hashbang", "noslash", "slash"])
  };

  HashRouter.prototype.componentDidMount = function () {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") : void 0;
  };
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
/**
 * The public API for rendering a history-aware <a>.
 */

var Link =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose3.default)(Link, _React$Component);

  function Link() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Link.prototype;

  _proto.handleClick = function handleClick(event, history) {
    try {
      if (this.props.onClick) this.props.onClick(event);
    } catch (ex) {
      event.preventDefault();
      throw ex;
    }

    if (!event.defaultPrevented && // onClick prevented default
    event.button === 0 && ( // ignore everything but left clicks
    !this.props.target || this.props.target === "_self") && // let browser handle "target=_blank" etc.
    !isModifiedEvent(event) // ignore clicks with modifier keys
    ) {
        event.preventDefault();
        var method = this.props.replace ? history.replace : history.push;
        method(this.props.to);
      }
  };

  _proto.render = function render() {
    var _this = this;

    var _this$props = this.props,
        innerRef = _this$props.innerRef,
        replace = _this$props.replace,
        to = _this$props.to,
        rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props, ["innerRef", "replace", "to"]); // eslint-disable-line no-unused-vars


    return _react2.default.createElement(_reactRouter.__RouterContext.Consumer, null, function (context) {
      !context ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, "You should not use <Link> outside a <Router>") : (0, _tinyInvariant2.default)(false) : void 0;
      var location = typeof to === "string" ? (0, _history.createLocation)(to, null, null, context.location) : to;
      var href = location ? context.history.createHref(location) : "";
      return _react2.default.createElement("a", (0, _extends3.default)({}, rest, {
        onClick: function onClick(event) {
          return _this.handleClick(event, context.history);
        },
        href: href,
        ref: innerRef
      }));
    });
  };

  return Link;
}(_react2.default.Component);

if (process.env.NODE_ENV !== "production") {
  var toType = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]);
  var innerRefType = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.shape({
    current: _propTypes2.default.any
  })]);
  Link.propTypes = {
    innerRef: innerRefType,
    onClick: _propTypes2.default.func,
    replace: _propTypes2.default.bool,
    target: _propTypes2.default.string,
    to: toType.isRequired
  };
}

function joinClassnames() {
  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
    classnames[_key] = arguments[_key];
  }

  return classnames.filter(function (i) {
    return i;
  }).join(" ");
}
/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

function NavLink(_ref) {
  var _ref$ariaCurrent = _ref["aria-current"],
      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
      _ref$activeClassName = _ref.activeClassName,
      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
      activeStyle = _ref.activeStyle,
      classNameProp = _ref.className,
      exact = _ref.exact,
      isActiveProp = _ref.isActive,
      locationProp = _ref.location,
      strict = _ref.strict,
      styleProp = _ref.style,
      to = _ref.to,
      rest = (0, _objectWithoutPropertiesLoose3.default)(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "strict", "style", "to"]);

  var path = (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === "object" ? to.pathname : to; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
  return _react2.default.createElement(_reactRouter.__RouterContext.Consumer, null, function (context) {
    !context ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, "You should not use <NavLink> outside a <Router>") : (0, _tinyInvariant2.default)(false) : void 0;
    var pathToMatch = locationProp ? locationProp.pathname : context.location.pathname;
    var match = escapedPath ? (0, _reactRouter.matchPath)(pathToMatch, {
      path: escapedPath,
      exact: exact,
      strict: strict
    }) : null;
    var isActive = !!(isActiveProp ? isActiveProp(match, context.location) : match);
    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
    var style = isActive ? (0, _extends3.default)({}, styleProp, activeStyle) : styleProp;
    return _react2.default.createElement(Link, (0, _extends3.default)({
      "aria-current": isActive && ariaCurrent || null,
      className: className,
      style: style,
      to: to
    }, rest));
  });
}

if (process.env.NODE_ENV !== "production") {
  var ariaCurrentType = _propTypes2.default.oneOf(["page", "step", "location", "date", "time", "true"]);
  NavLink.propTypes = (0, _extends3.default)({}, Link.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: _propTypes2.default.string,
    activeStyle: _propTypes2.default.object,
    className: _propTypes2.default.string,
    exact: _propTypes2.default.bool,
    isActive: _propTypes2.default.func,
    location: _propTypes2.default.object,
    strict: _propTypes2.default.bool,
    style: _propTypes2.default.object
  });
}

exports.BrowserRouter = BrowserRouter;
exports.HashRouter = HashRouter;
exports.Link = Link;
exports.NavLink = NavLink;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var isProduction = process.env.NODE_ENV === 'production';
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }

    var text = "Warning: " + message;

    if (typeof console !== 'undefined') {
      console.warn(text);
    }

    try {
      throw Error(text);
    } catch (x) {}
  }
}

exports.default = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _extends;
function _extends() {
  exports.default = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var printWarning = function printWarning() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret = __webpack_require__(11);
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof(typeSpecs[typeSpecName]) + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + (typeof error === 'undefined' ? 'undefined' : _typeof(error)) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function () {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

module.exports = checkPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = __webpack_require__(5);

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(50)(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(49)();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var isProduction = process.env.NODE_ENV === 'production';
var prefix = 'Invariant failed';
function invariant(condition, message) {
  if (condition) {
    return;
  }

  if (isProduction) {
    throw new Error(prefix);
  } else {
    throw new Error(prefix + ": " + (message || ''));
  }
}

exports.default = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _inheritsLoose;
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _objectWithoutPropertiesLoose;
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);
var settle = __webpack_require__(36);
var buildURL = __webpack_require__(23);
var parseHeaders = __webpack_require__(43);
var isURLSameOrigin = __webpack_require__(41);
var createError = __webpack_require__(19);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(39);

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(35);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });

  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  utils.forEach(['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath'], function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  return config;
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(1);
var normalizeHeaderName = __webpack_require__(42);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  // Only Node.JS has a process variable that is of [[Class]] process
  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(16);
  } else if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(16);
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {/* Ignore */}
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);

function encode(val) {
  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends2 = __webpack_require__(8);

var _extends3 = _interopRequireDefault(_extends2);

var _resolvePathname = __webpack_require__(61);

var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

var _valueEqual = __webpack_require__(67);

var _valueEqual2 = _interopRequireDefault(_valueEqual);

var _tinyWarning = __webpack_require__(7);

var _tinyWarning2 = _interopRequireDefault(_tinyWarning);

var _tinyInvariant = __webpack_require__(12);

var _tinyInvariant2 = _interopRequireDefault(_tinyInvariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
}
function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
}
function hasBasename(path, prefix) {
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
}
function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}
function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}
function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
}
function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;
  var path = pathname || '/';
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
  return path;
}

function createLocation(path, state, key, currentLocation) {
  var location;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = parsePath(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = (0, _extends3.default)({}, path);
    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
}
function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
}

function createTransitionManager() {
  var prompt = null;

  function setPrompt(nextPrompt) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(prompt == null, 'A history supports only one prompt at a time') : void 0;
    prompt = nextPrompt;
    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  }

  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : void 0;
          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }

  var listeners = [];

  function appendListener(fn) {
    var isActive = true;

    function listener() {
      if (isActive) fn.apply(void 0, arguments);
    }

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(void 0, args);
    });
  }

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function getConfirmation(message, callback) {
  callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
  return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

function isExtraneousPopstateEvent(event) {
  event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, 'Browser history needs a DOM') : (0, _tinyInvariant2.default)(false) : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props,
      _props$forceRefresh = _props.forceRefresh,
      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

  function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;
    var path = pathname + search + hash;
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : void 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path, state, key);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0, _extends3.default)(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (isExtraneousPopstateEvent(event)) return;
    handlePop(getDOMLocation(event.state));
  }

  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }

  var forceNextPop = false;

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key]; // Public interface

  function createHref(location) {
    return basename + createPath(location);
  }

  function push(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : void 0;
        window.location.href = href;
      }
    });
  }

  function replace(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : void 0;
        window.location.replace(href);
      }
    });
  }

  function go(n) {
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash
  },
  slash: {
    encodePath: addLeadingSlash,
    decodePath: addLeadingSlash
  }
};

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}

function pushHashPath(path) {
  window.location.hash = path;
}

function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');
  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
}

function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, 'Hash history needs a DOM') : (0, _tinyInvariant2.default)(false) : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$hashType = _props.hashType,
      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  function getDOMLocation() {
    var path = decodePath(getHashPath());
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : void 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0, _extends3.default)(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  var forceNextPop = false;
  var ignorePath = null;

  function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;
      handlePop(location);
    }
  }

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  } // Ensure the hash is encoded properly before doing anything else.


  var path = getHashPath();
  var encodedPath = encodePath(path);
  if (path !== encodedPath) replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)]; // Public interface

  function createHref(location) {
    return '#' + encodePath(basename + createPath(location));
  }

  function push(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(state === undefined, 'Hash history cannot push state; it is ignored') : void 0;
    var action = 'PUSH';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
        nextPaths.push(path);
        allPaths = nextPaths;
        setState({
          action: action,
          location: location
        });
      } else {
        process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : void 0;
        setState();
      }
    });
  }

  function replace(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored') : void 0;
    var action = 'REPLACE';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1) allPaths[prevIndex] = path;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */

function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      getUserConfirmation = _props.getUserConfirmation,
      _props$initialEntries = _props.initialEntries,
      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
      _props$initialIndex = _props.initialIndex,
      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0, _extends3.default)(history, nextState);

    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
  }); // Public interface

  var createHref = createPath;

  function push(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);

      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }

  function replace(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      history.entries[history.index] = location;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = 'POP';
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    return transitionManager.setPrompt(prompt);
  }

  function listen(listener) {
    return transitionManager.appendListener(listener);
  }

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };
  return history;
}

exports.createBrowserHistory = createBrowserHistory;
exports.createHashHistory = createHashHistory;
exports.createMemoryHistory = createMemoryHistory;
exports.createLocation = createLocation;
exports.locationsAreEqual = locationsAreEqual;
exports.parsePath = parsePath;
exports.createPath = createPath;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _warnAboutDeprecatedESMImport = __webpack_require__(55);

var _warnAboutDeprecatedESMImport2 = _interopRequireDefault(_warnAboutDeprecatedESMImport);

var _reactRouterDom = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _warnAboutDeprecatedESMImport2.default)("NavLink");

exports.default = _reactRouterDom.NavLink;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(65);
} else {
  module.exports = __webpack_require__(64);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(52);
} else {
  module.exports = __webpack_require__(51);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(2);

var _react2 = _interopRequireDefault(_react);

var _axios = __webpack_require__(3);

var _axios2 = _interopRequireDefault(_axios);

var _reactRouterDom = __webpack_require__(6);

var _Home = __webpack_require__(68);

var _Home2 = _interopRequireDefault(_Home);

var _TeamDetail = __webpack_require__(71);

var _TeamDetail2 = _interopRequireDefault(_TeamDetail);

var _Player = __webpack_require__(69);

var _Player2 = _interopRequireDefault(_Player);

var _PlayerDetail = __webpack_require__(70);

var _PlayerDetail2 = _interopRequireDefault(_PlayerDetail);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var App = function (_Component) {
  _inherits(App, _Component);

  function App() {
    _classCallCheck(this, App);

    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
  }

  _createClass(App, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactRouterDom.BrowserRouter,
        null,
        _react2.default.createElement(
          'div',
          { className: 'container' },
          _react2.default.createElement(
            'div',
            { className: 'content' },
            _react2.default.createElement(
              _reactRouterDom.Switch,
              null,
              _react2.default.createElement(_reactRouterDom.Route, { exact: true, path: "/", component: _Home2.default }),
              _react2.default.createElement(_reactRouterDom.Route, { path: "/detail/:tno", component: _TeamDetail2.default }),
              _react2.default.createElement(_reactRouterDom.Route, { path: "/player/:tno", component: _Player2.default }),
              _react2.default.createElement(_reactRouterDom.Route, { path: "/player_detail/:tno/:pno", component: _PlayerDetail2.default })
            )
          )
        )
      );
    }
  }]);

  return App;
}(_react.Component);

exports.default = App;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

module.exports = _inheritsLoose;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);
var bind = __webpack_require__(22);
var Axios = __webpack_require__(32);
var mergeConfig = __webpack_require__(20);
var defaults = __webpack_require__(21);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(17);
axios.CancelToken = __webpack_require__(31);
axios.isCancel = __webpack_require__(18);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(44);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(17);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);
var buildURL = __webpack_require__(23);
var InterceptorManager = __webpack_require__(33);
var dispatchRequest = __webpack_require__(34);
var mergeConfig = __webpack_require__(20);

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);
  config.method = config.method ? config.method.toLowerCase() : 'get';

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);
var transformData = __webpack_require__(37);
var isCancel = __webpack_require__(18);
var defaults = __webpack_require__(21);
var isAbsoluteURL = __webpack_require__(40);
var combineURLs = __webpack_require__(38);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(config.data, config.headers, config.transformRequest);

  // Flatten headers
  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});

  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(response.data, response.headers, config.transformResponse);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function () {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(19);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);

module.exports = utils.isStandardBrowserEnv() ?

// Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },

    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },

    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() :

// Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return (/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url)
  );
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);

module.exports = utils.isStandardBrowserEnv() ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;

  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */
  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href);

    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);

  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */
  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() :

// Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(1);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var key = '__global_unique_id__';

module.exports = function () {
  return global[key] = (global[key] || 0) + 1;
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

var ReactIs = __webpack_require__(5);
var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};

var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};

var TYPE_STATICS = {};
TYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;

function getStatics(component) {
    if (ReactIs.isMemo(component)) {
        return MEMO_STATICS;
    }
    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
}

module.exports = hoistNonReactStatics;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

module.exports = function isBuffer(obj) {
  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__(2);

var _react2 = _interopRequireDefault(_react);

var _inheritsLoose2 = __webpack_require__(29);

var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);

var _propTypes = __webpack_require__(10);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _gud = __webpack_require__(45);

var _gud2 = _interopRequireDefault(_gud);

var _tinyWarning = __webpack_require__(7);

var _tinyWarning2 = _interopRequireDefault(_tinyWarning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_SIGNED_31_BIT_INT = 1073741823;

function objectIs(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function createEventEmitter(value) {
  var handlers = [];
  return {
    on: function on(handler) {
      handlers.push(handler);
    },
    off: function off(handler) {
      handlers = handlers.filter(function (h) {
        return h !== handler;
      });
    },
    get: function get() {
      return value;
    },
    set: function set(newValue, changedBits) {
      value = newValue;
      handlers.forEach(function (handler) {
        return handler(value, changedBits);
      });
    }
  };
}

function onlyChild(children) {
  return Array.isArray(children) ? children[0] : children;
}

function createReactContext(defaultValue, calculateChangedBits) {
  var _Provider$childContex, _Consumer$contextType;

  var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';

  var Provider =
  /*#__PURE__*/
  function (_Component) {
    (0, _inheritsLoose3.default)(Provider, _Component);

    function Provider() {
      var _this;

      _this = _Component.apply(this, arguments) || this;
      _this.emitter = createEventEmitter(_this.props.value);
      return _this;
    }

    var _proto = Provider.prototype;

    _proto.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
    };

    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        var oldValue = this.props.value;
        var newValue = nextProps.value;
        var changedBits;

        if (objectIs(oldValue, newValue)) {
          changedBits = 0;
        } else {
          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

          if (process.env.NODE_ENV !== 'production') {
            (0, _tinyWarning2.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
          }

          changedBits |= 0;

          if (changedBits !== 0) {
            this.emitter.set(nextProps.value, changedBits);
          }
        }
      }
    };

    _proto.render = function render() {
      return this.props.children;
    };

    return Provider;
  }(_react.Component);

  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);

  var Consumer =
  /*#__PURE__*/
  function (_Component2) {
    (0, _inheritsLoose3.default)(Consumer, _Component2);

    function Consumer() {
      var _this2;

      _this2 = _Component2.apply(this, arguments) || this;
      _this2.state = {
        value: _this2.getValue()
      };

      _this2.onUpdate = function (newValue, changedBits) {
        var observedBits = _this2.observedBits | 0;

        if ((observedBits & changedBits) !== 0) {
          _this2.setState({
            value: _this2.getValue()
          });
        }
      };

      return _this2;
    }

    var _proto2 = Consumer.prototype;

    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var observedBits = nextProps.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentDidMount = function componentDidMount() {
      if (this.context[contextProp]) {
        this.context[contextProp].on(this.onUpdate);
      }

      var observedBits = this.props.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentWillUnmount = function componentWillUnmount() {
      if (this.context[contextProp]) {
        this.context[contextProp].off(this.onUpdate);
      }
    };

    _proto2.getValue = function getValue() {
      if (this.context[contextProp]) {
        return this.context[contextProp].get();
      } else {
        return defaultValue;
      }
    };

    _proto2.render = function render() {
      return onlyChild(this.props.children)(this.state.value);
    };

    return Consumer;
  }(_react.Component);

  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);
  return {
    Provider: Provider,
    Consumer: Consumer
  };
}

var index = _react2.default.createContext || createReactContext;

exports.default = index;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(11);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ReactIs = __webpack_require__(5);
var assign = __webpack_require__(4);

var ReactPropTypesSecret = __webpack_require__(11);
var checkPropTypes = __webpack_require__(9);

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function printWarning() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] &&
          // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.8.6
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};if(process.env.NODE_ENV!=="production"){(function(){'use strict';var React=__webpack_require__(2);var _assign=__webpack_require__(4);var checkPropTypes=__webpack_require__(9);var scheduler=__webpack_require__(26);var tracing=__webpack_require__(66);/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */var validateFormat=function validateFormat(){};{validateFormat=function validateFormat(format){if(format===undefined){throw new Error('invariant requires an error message argument');}};}function invariant(condition,format,a,b,c,d,e,f){validateFormat(format);if(!condition){var error=void 0;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment '+'for the full error message and additional helpful warnings.');}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;// we don't care about invariant's own frame
throw error;}}// Relying on the `invariant()` implementation lets us
// preserve the format and params in the www builds.
!React?invariant(false,'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.'):void 0;var invokeGuardedCallbackImpl=function invokeGuardedCallbackImpl(name,func,context,a,b,c,d,e,f){var funcArgs=Array.prototype.slice.call(arguments,3);try{func.apply(context,funcArgs);}catch(error){this.onError(error);}};{// In DEV mode, we swap out invokeGuardedCallback for a special version
// that plays more nicely with the browser's DevTools. The idea is to preserve
// "Pause on exceptions" behavior. Because React wraps all user-provided
// functions in invokeGuardedCallback, and the production version of
// invokeGuardedCallback uses a try-catch, all user exceptions are treated
// like caught exceptions, and the DevTools won't pause unless the developer
// takes the extra step of enabling pause on caught exceptions. This is
// unintuitive, though, because even though React has caught the error, from
// the developer's perspective, the error is uncaught.
//
// To preserve the expected "Pause on exceptions" behavior, we don't use a
// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
// DOM node, and call the user-provided callback from inside an event handler
// for that fake event. If the callback throws, the error is "captured" using
// a global event handler. But because the error happens in a different
// event loop context, it does not interrupt the normal program flow.
// Effectively, this gives us try-catch behavior without actually using
// try-catch. Neat!
// Check that the browser supports the APIs we need to implement our special
// DEV version of invokeGuardedCallback
if(typeof window!=='undefined'&&typeof window.dispatchEvent==='function'&&typeof document!=='undefined'&&typeof document.createEvent==='function'){var fakeNode=document.createElement('react');var invokeGuardedCallbackDev=function invokeGuardedCallbackDev(name,func,context,a,b,c,d,e,f){// If document doesn't exist we know for sure we will crash in this method
// when we call document.createEvent(). However this can cause confusing
// errors: https://github.com/facebookincubator/create-react-app/issues/3482
// So we preemptively throw with a better message instead.
!(typeof document!=='undefined')?invariant(false,'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.'):void 0;var evt=document.createEvent('Event');// Keeps track of whether the user-provided callback threw an error. We
// set this to true at the beginning, then set it to false right after
// calling the function. If the function errors, `didError` will never be
// set to false. This strategy works even if the browser is flaky and
// fails to call our global error handler, because it doesn't rely on
// the error event at all.
var didError=true;// Keeps track of the value of window.event so that we can reset it
// during the callback to let user code access window.event in the
// browsers that support it.
var windowEvent=window.event;// Keeps track of the descriptor of window.event to restore it after event
// dispatching: https://github.com/facebook/react/issues/13688
var windowEventDescriptor=Object.getOwnPropertyDescriptor(window,'event');// Create an event handler for our fake event. We will synchronously
// dispatch our fake event using `dispatchEvent`. Inside the handler, we
// call the user-provided callback.
var funcArgs=Array.prototype.slice.call(arguments,3);function callCallback(){// We immediately remove the callback from event listeners so that
// nested `invokeGuardedCallback` calls do not clash. Otherwise, a
// nested call would trigger the fake event handlers of any call higher
// in the stack.
fakeNode.removeEventListener(evtType,callCallback,false);// We check for window.hasOwnProperty('event') to prevent the
// window.event assignment in both IE <= 10 as they throw an error
// "Member not found" in strict mode, and in Firefox which does not
// support window.event.
if(typeof window.event!=='undefined'&&window.hasOwnProperty('event')){window.event=windowEvent;}func.apply(context,funcArgs);didError=false;}// Create a global error event handler. We use this to capture the value
// that was thrown. It's possible that this error handler will fire more
// than once; for example, if non-React code also calls `dispatchEvent`
// and a handler for that event throws. We should be resilient to most of
// those cases. Even if our error event handler fires more than once, the
// last error event is always used. If the callback actually does error,
// we know that the last error event is the correct one, because it's not
// possible for anything else to have happened in between our callback
// erroring and the code that follows the `dispatchEvent` call below. If
// the callback doesn't error, but the error event was fired, we know to
// ignore it because `didError` will be false, as described above.
var error=void 0;// Use this to track whether the error event is ever called.
var didSetError=false;var isCrossOriginError=false;function handleWindowError(event){error=event.error;didSetError=true;if(error===null&&event.colno===0&&event.lineno===0){isCrossOriginError=true;}if(event.defaultPrevented){// Some other error handler has prevented default.
// Browsers silence the error report if this happens.
// We'll remember this to later decide whether to log it or not.
if(error!=null&&(typeof error==='undefined'?'undefined':_typeof(error))==='object'){try{error._suppressLogging=true;}catch(inner){// Ignore.
}}}}// Create a fake event type.
var evtType='react-'+(name?name:'invokeguardedcallback');// Attach our event handlers
window.addEventListener('error',handleWindowError);fakeNode.addEventListener(evtType,callCallback,false);// Synchronously dispatch our fake event. If the user-provided function
// errors, it will trigger our global error handler.
evt.initEvent(evtType,false,false);fakeNode.dispatchEvent(evt);if(windowEventDescriptor){Object.defineProperty(window,'event',windowEventDescriptor);}if(didError){if(!didSetError){// The callback errored, but the error event never fired.
error=new Error('An error was thrown inside one of your components, but React '+"doesn't know what it was. This is likely due to browser "+'flakiness. React does its best to preserve the "Pause on '+'exceptions" behavior of the DevTools, which requires some '+"DEV-mode only tricks. It's possible that these don't work in "+'your browser. Try triggering the error in production mode, '+'or switching to a modern browser. If you suspect that this is '+'actually an issue with React, please file an issue.');}else if(isCrossOriginError){error=new Error("A cross-origin error was thrown. React doesn't have access to "+'the actual error object in development. '+'See https://fb.me/react-crossorigin-error for more information.');}this.onError(error);}// Remove our event listeners
window.removeEventListener('error',handleWindowError);};invokeGuardedCallbackImpl=invokeGuardedCallbackDev;}}var invokeGuardedCallbackImpl$1=invokeGuardedCallbackImpl;// Used by Fiber to simulate a try-catch.
var hasError=false;var caughtError=null;// Used by event system to capture/rethrow the first error.
var hasRethrowError=false;var rethrowError=null;var reporter={onError:function onError(error){hasError=true;caughtError=error;}};/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */function invokeGuardedCallback(name,func,context,a,b,c,d,e,f){hasError=false;caughtError=null;invokeGuardedCallbackImpl$1.apply(reporter,arguments);}/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */function invokeGuardedCallbackAndCatchFirstError(name,func,context,a,b,c,d,e,f){invokeGuardedCallback.apply(this,arguments);if(hasError){var error=clearCaughtError();if(!hasRethrowError){hasRethrowError=true;rethrowError=error;}}}/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */function rethrowCaughtError(){if(hasRethrowError){var error=rethrowError;hasRethrowError=false;rethrowError=null;throw error;}}function hasCaughtError(){return hasError;}function clearCaughtError(){if(hasError){var error=caughtError;hasError=false;caughtError=null;return error;}else{invariant(false,'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');}}/**
 * Injectable ordering of event plugins.
 */var eventPluginOrder=null;/**
 * Injectable mapping from names to event plugin modules.
 */var namesToPlugins={};/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */function recomputePluginOrdering(){if(!eventPluginOrder){// Wait until an `eventPluginOrder` is injected.
return;}for(var pluginName in namesToPlugins){var pluginModule=namesToPlugins[pluginName];var pluginIndex=eventPluginOrder.indexOf(pluginName);!(pluginIndex>-1)?invariant(false,'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.',pluginName):void 0;if(plugins[pluginIndex]){continue;}!pluginModule.extractEvents?invariant(false,'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.',pluginName):void 0;plugins[pluginIndex]=pluginModule;var publishedEvents=pluginModule.eventTypes;for(var eventName in publishedEvents){!publishEventForPlugin(publishedEvents[eventName],pluginModule,eventName)?invariant(false,'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',eventName,pluginName):void 0;}}}/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */function publishEventForPlugin(dispatchConfig,pluginModule,eventName){!!eventNameDispatchConfigs.hasOwnProperty(eventName)?invariant(false,'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.',eventName):void 0;eventNameDispatchConfigs[eventName]=dispatchConfig;var phasedRegistrationNames=dispatchConfig.phasedRegistrationNames;if(phasedRegistrationNames){for(var phaseName in phasedRegistrationNames){if(phasedRegistrationNames.hasOwnProperty(phaseName)){var phasedRegistrationName=phasedRegistrationNames[phaseName];publishRegistrationName(phasedRegistrationName,pluginModule,eventName);}}return true;}else if(dispatchConfig.registrationName){publishRegistrationName(dispatchConfig.registrationName,pluginModule,eventName);return true;}return false;}/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */function publishRegistrationName(registrationName,pluginModule,eventName){!!registrationNameModules[registrationName]?invariant(false,'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.',registrationName):void 0;registrationNameModules[registrationName]=pluginModule;registrationNameDependencies[registrationName]=pluginModule.eventTypes[eventName].dependencies;{var lowerCasedName=registrationName.toLowerCase();possibleRegistrationNames[lowerCasedName]=registrationName;if(registrationName==='onDoubleClick'){possibleRegistrationNames.ondblclick=registrationName;}}}/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 *//**
 * Ordered list of injected plugins.
 */var plugins=[];/**
 * Mapping from event name to dispatch config
 */var eventNameDispatchConfigs={};/**
 * Mapping from registration name to plugin module
 */var registrationNameModules={};/**
 * Mapping from registration name to event name
 */var registrationNameDependencies={};/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */var possibleRegistrationNames={};// Trust the developer to only use possibleRegistrationNames in true
/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */function injectEventPluginOrder(injectedEventPluginOrder){!!eventPluginOrder?invariant(false,'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.'):void 0;// Clone the ordering so it cannot be dynamically mutated.
eventPluginOrder=Array.prototype.slice.call(injectedEventPluginOrder);recomputePluginOrdering();}/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */function injectEventPluginsByName(injectedNamesToPlugins){var isOrderingDirty=false;for(var pluginName in injectedNamesToPlugins){if(!injectedNamesToPlugins.hasOwnProperty(pluginName)){continue;}var pluginModule=injectedNamesToPlugins[pluginName];if(!namesToPlugins.hasOwnProperty(pluginName)||namesToPlugins[pluginName]!==pluginModule){!!namesToPlugins[pluginName]?invariant(false,'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.',pluginName):void 0;namesToPlugins[pluginName]=pluginModule;isOrderingDirty=true;}}if(isOrderingDirty){recomputePluginOrdering();}}/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */var warningWithoutStack=function warningWithoutStack(){};{warningWithoutStack=function warningWithoutStack(condition,format){for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}if(format===undefined){throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning '+'message argument');}if(args.length>8){// Check before the condition to catch violations early.
throw new Error('warningWithoutStack() currently supports at most 8 arguments.');}if(condition){return;}if(typeof console!=='undefined'){var argsWithFormat=args.map(function(item){return''+item;});argsWithFormat.unshift('Warning: '+format);// We intentionally don't use spread (or .apply) directly because it
// breaks IE9: https://github.com/facebook/react/issues/13610
Function.prototype.apply.call(console.error,console,argsWithFormat);}try{// --- Welcome to debugging React ---
// This error was thrown as a convenience so that you can use this stack
// to find the callsite that caused this warning to fire.
var argIndex=0;var message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});throw new Error(message);}catch(x){}};}var warningWithoutStack$1=warningWithoutStack;var getFiberCurrentPropsFromNode=null;var getInstanceFromNode=null;var getNodeFromInstance=null;function setComponentTree(getFiberCurrentPropsFromNodeImpl,getInstanceFromNodeImpl,getNodeFromInstanceImpl){getFiberCurrentPropsFromNode=getFiberCurrentPropsFromNodeImpl;getInstanceFromNode=getInstanceFromNodeImpl;getNodeFromInstance=getNodeFromInstanceImpl;{!(getNodeFromInstance&&getInstanceFromNode)?warningWithoutStack$1(false,'EventPluginUtils.setComponentTree(...): Injected '+'module is missing getNodeFromInstance or getInstanceFromNode.'):void 0;}}var validateEventDispatches=void 0;{validateEventDispatches=function validateEventDispatches(event){var dispatchListeners=event._dispatchListeners;var dispatchInstances=event._dispatchInstances;var listenersIsArr=Array.isArray(dispatchListeners);var listenersLen=listenersIsArr?dispatchListeners.length:dispatchListeners?1:0;var instancesIsArr=Array.isArray(dispatchInstances);var instancesLen=instancesIsArr?dispatchInstances.length:dispatchInstances?1:0;!(instancesIsArr===listenersIsArr&&instancesLen===listenersLen)?warningWithoutStack$1(false,'EventPluginUtils: Invalid `event`.'):void 0;};}/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */function executeDispatch(event,listener,inst){var type=event.type||'unknown-event';event.currentTarget=getNodeFromInstance(inst);invokeGuardedCallbackAndCatchFirstError(type,listener,undefined,event);event.currentTarget=null;}/**
 * Standard/simple iteration through an event's collected dispatches.
 */function executeDispatchesInOrder(event){var dispatchListeners=event._dispatchListeners;var dispatchInstances=event._dispatchInstances;{validateEventDispatches(event);}if(Array.isArray(dispatchListeners)){for(var i=0;i<dispatchListeners.length;i++){if(event.isPropagationStopped()){break;}// Listeners and Instances are two parallel arrays that are always in sync.
executeDispatch(event,dispatchListeners[i],dispatchInstances[i]);}}else if(dispatchListeners){executeDispatch(event,dispatchListeners,dispatchInstances);}event._dispatchListeners=null;event._dispatchInstances=null;}/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 *//**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 *//**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 *//**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */function accumulateInto(current,next){!(next!=null)?invariant(false,'accumulateInto(...): Accumulated items must not be null or undefined.'):void 0;if(current==null){return next;}// Both are not empty. Warning: Never call x.concat(y) when you are not
// certain that x is an Array (x could be a string with concat method).
if(Array.isArray(current)){if(Array.isArray(next)){current.push.apply(current,next);return current;}current.push(next);return current;}if(Array.isArray(next)){// A bit too dangerous to mutate `next`.
return[current].concat(next);}return[current,next];}/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */function forEachAccumulated(arr,cb,scope){if(Array.isArray(arr)){arr.forEach(cb,scope);}else if(arr){cb.call(scope,arr);}}/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */var eventQueue=null;/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */var executeDispatchesAndRelease=function executeDispatchesAndRelease(event){if(event){executeDispatchesInOrder(event);if(!event.isPersistent()){event.constructor.release(event);}}};var executeDispatchesAndReleaseTopLevel=function executeDispatchesAndReleaseTopLevel(e){return executeDispatchesAndRelease(e);};function isInteractive(tag){return tag==='button'||tag==='input'||tag==='select'||tag==='textarea';}function shouldPreventMouseEvent(name,type,props){switch(name){case'onClick':case'onClickCapture':case'onDoubleClick':case'onDoubleClickCapture':case'onMouseDown':case'onMouseDownCapture':case'onMouseMove':case'onMouseMoveCapture':case'onMouseUp':case'onMouseUpCapture':return!!(props.disabled&&isInteractive(type));default:return false;}}/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 *//**
 * Methods for injecting dependencies.
 */var injection={/**
   * @param {array} InjectedEventPluginOrder
   * @public
   */injectEventPluginOrder:injectEventPluginOrder,/**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */injectEventPluginsByName:injectEventPluginsByName};/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */function getListener(inst,registrationName){var listener=void 0;// TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
// live here; needs to be moved to a better place soon
var stateNode=inst.stateNode;if(!stateNode){// Work in progress (ex: onload events in incremental mode).
return null;}var props=getFiberCurrentPropsFromNode(stateNode);if(!props){// Work in progress.
return null;}listener=props[registrationName];if(shouldPreventMouseEvent(registrationName,inst.type,props)){return null;}!(!listener||typeof listener==='function')?invariant(false,'Expected `%s` listener to be a function, instead got a value of `%s` type.',registrationName,typeof listener==='undefined'?'undefined':_typeof(listener)):void 0;return listener;}/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var events=null;for(var i=0;i<plugins.length;i++){// Not every plugin in the ordering may be loaded at runtime.
var possiblePlugin=plugins[i];if(possiblePlugin){var extractedEvents=possiblePlugin.extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget);if(extractedEvents){events=accumulateInto(events,extractedEvents);}}}return events;}function runEventsInBatch(events){if(events!==null){eventQueue=accumulateInto(eventQueue,events);}// Set `eventQueue` to null before processing it so that we can tell if more
// events get enqueued while processing.
var processingEventQueue=eventQueue;eventQueue=null;if(!processingEventQueue){return;}forEachAccumulated(processingEventQueue,executeDispatchesAndReleaseTopLevel);!!eventQueue?invariant(false,'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.'):void 0;// This would be a good time to rethrow if any of the event handlers threw.
rethrowCaughtError();}function runExtractedEventsInBatch(topLevelType,targetInst,nativeEvent,nativeEventTarget){var events=extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget);runEventsInBatch(events);}var FunctionComponent=0;var ClassComponent=1;var IndeterminateComponent=2;// Before we know whether it is function or class
var HostRoot=3;// Root of a host tree. Could be nested inside another node.
var HostPortal=4;// A subtree. Could be an entry point to a different renderer.
var HostComponent=5;var HostText=6;var Fragment=7;var Mode=8;var ContextConsumer=9;var ContextProvider=10;var ForwardRef=11;var Profiler=12;var SuspenseComponent=13;var MemoComponent=14;var SimpleMemoComponent=15;var LazyComponent=16;var IncompleteClassComponent=17;var DehydratedSuspenseComponent=18;var randomKey=Math.random().toString(36).slice(2);var internalInstanceKey='__reactInternalInstance$'+randomKey;var internalEventHandlersKey='__reactEventHandlers$'+randomKey;function precacheFiberNode(hostInst,node){node[internalInstanceKey]=hostInst;}/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */function getClosestInstanceFromNode(node){if(node[internalInstanceKey]){return node[internalInstanceKey];}while(!node[internalInstanceKey]){if(node.parentNode){node=node.parentNode;}else{// Top of the tree. This node must not be part of a React tree (or is
// unmounted, potentially).
return null;}}var inst=node[internalInstanceKey];if(inst.tag===HostComponent||inst.tag===HostText){// In Fiber, this will always be the deepest root.
return inst;}return null;}/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */function getInstanceFromNode$1(node){var inst=node[internalInstanceKey];if(inst){if(inst.tag===HostComponent||inst.tag===HostText){return inst;}else{return null;}}return null;}/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */function getNodeFromInstance$1(inst){if(inst.tag===HostComponent||inst.tag===HostText){// In Fiber this, is just the state node right now. We assume it will be
// a host component or host text.
return inst.stateNode;}// Without this first invariant, passing a non-DOM-component triggers the next
// invariant for a missing parent, which is super confusing.
invariant(false,'getNodeFromInstance: Invalid argument.');}function getFiberCurrentPropsFromNode$1(node){return node[internalEventHandlersKey]||null;}function updateFiberProps(node,props){node[internalEventHandlersKey]=props;}function getParent(inst){do{inst=inst.return;// TODO: If this is a HostRoot we might want to bail out.
// That is depending on if we want nested subtrees (layers) to bubble
// events to their parent. We could also go through parentNode on the
// host node but that wouldn't work for React Native and doesn't let us
// do the portal feature.
}while(inst&&inst.tag!==HostComponent);if(inst){return inst;}return null;}/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */function getLowestCommonAncestor(instA,instB){var depthA=0;for(var tempA=instA;tempA;tempA=getParent(tempA)){depthA++;}var depthB=0;for(var tempB=instB;tempB;tempB=getParent(tempB)){depthB++;}// If A is deeper, crawl up.
while(depthA-depthB>0){instA=getParent(instA);depthA--;}// If B is deeper, crawl up.
while(depthB-depthA>0){instB=getParent(instB);depthB--;}// Walk in lockstep until we find a match.
var depth=depthA;while(depth--){if(instA===instB||instA===instB.alternate){return instA;}instA=getParent(instA);instB=getParent(instB);}return null;}/**
 * Return if A is an ancestor of B.
 *//**
 * Return the parent instance of the passed-in instance.
 *//**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */function traverseTwoPhase(inst,fn,arg){var path=[];while(inst){path.push(inst);inst=getParent(inst);}var i=void 0;for(i=path.length;i-->0;){fn(path[i],'captured',arg);}for(i=0;i<path.length;i++){fn(path[i],'bubbled',arg);}}/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */function traverseEnterLeave(from,to,fn,argFrom,argTo){var common=from&&to?getLowestCommonAncestor(from,to):null;var pathFrom=[];while(true){if(!from){break;}if(from===common){break;}var alternate=from.alternate;if(alternate!==null&&alternate===common){break;}pathFrom.push(from);from=getParent(from);}var pathTo=[];while(true){if(!to){break;}if(to===common){break;}var _alternate=to.alternate;if(_alternate!==null&&_alternate===common){break;}pathTo.push(to);to=getParent(to);}for(var i=0;i<pathFrom.length;i++){fn(pathFrom[i],'bubbled',argFrom);}for(var _i=pathTo.length;_i-->0;){fn(pathTo[_i],'captured',argTo);}}/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */function listenerAtPhase(inst,event,propagationPhase){var registrationName=event.dispatchConfig.phasedRegistrationNames[propagationPhase];return getListener(inst,registrationName);}/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 *//**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */function accumulateDirectionalDispatches(inst,phase,event){{!inst?warningWithoutStack$1(false,'Dispatching inst must not be null'):void 0;}var listener=listenerAtPhase(inst,event,phase);if(listener){event._dispatchListeners=accumulateInto(event._dispatchListeners,listener);event._dispatchInstances=accumulateInto(event._dispatchInstances,inst);}}/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */function accumulateTwoPhaseDispatchesSingle(event){if(event&&event.dispatchConfig.phasedRegistrationNames){traverseTwoPhase(event._targetInst,accumulateDirectionalDispatches,event);}}/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */function accumulateDispatches(inst,ignoredDirection,event){if(inst&&event&&event.dispatchConfig.registrationName){var registrationName=event.dispatchConfig.registrationName;var listener=getListener(inst,registrationName);if(listener){event._dispatchListeners=accumulateInto(event._dispatchListeners,listener);event._dispatchInstances=accumulateInto(event._dispatchInstances,inst);}}}/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */function accumulateDirectDispatchesSingle(event){if(event&&event.dispatchConfig.registrationName){accumulateDispatches(event._targetInst,null,event);}}function accumulateTwoPhaseDispatches(events){forEachAccumulated(events,accumulateTwoPhaseDispatchesSingle);}function accumulateEnterLeaveDispatches(leave,enter,from,to){traverseEnterLeave(from,to,accumulateDispatches,leave,enter);}function accumulateDirectDispatches(events){forEachAccumulated(events,accumulateDirectDispatchesSingle);}var canUseDOM=!!(typeof window!=='undefined'&&window.document&&window.document.createElement);// Do not uses the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)
function unsafeCastStringToDOMTopLevelType(topLevelType){return topLevelType;}function unsafeCastDOMTopLevelTypeToString(topLevelType){return topLevelType;}/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */function makePrefixMap(styleProp,eventName){var prefixes={};prefixes[styleProp.toLowerCase()]=eventName.toLowerCase();prefixes['Webkit'+styleProp]='webkit'+eventName;prefixes['Moz'+styleProp]='moz'+eventName;return prefixes;}/**
 * A list of event names to a configurable list of vendor prefixes.
 */var vendorPrefixes={animationend:makePrefixMap('Animation','AnimationEnd'),animationiteration:makePrefixMap('Animation','AnimationIteration'),animationstart:makePrefixMap('Animation','AnimationStart'),transitionend:makePrefixMap('Transition','TransitionEnd')};/**
 * Event names that have already been detected and prefixed (if applicable).
 */var prefixedEventNames={};/**
 * Element to check for prefixes on.
 */var style={};/**
 * Bootstrap if a DOM exists.
 */if(canUseDOM){style=document.createElement('div').style;// On some platforms, in particular some releases of Android 4.x,
// the un-prefixed "animation" and "transition" properties are defined on the
// style object but the events that fire will still be prefixed, so we need
// to check if the un-prefixed events are usable, and if not remove them from the map.
if(!('AnimationEvent'in window)){delete vendorPrefixes.animationend.animation;delete vendorPrefixes.animationiteration.animation;delete vendorPrefixes.animationstart.animation;}// Same as above
if(!('TransitionEvent'in window)){delete vendorPrefixes.transitionend.transition;}}/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */function getVendorPrefixedEventName(eventName){if(prefixedEventNames[eventName]){return prefixedEventNames[eventName];}else if(!vendorPrefixes[eventName]){return eventName;}var prefixMap=vendorPrefixes[eventName];for(var styleProp in prefixMap){if(prefixMap.hasOwnProperty(styleProp)&&styleProp in style){return prefixedEventNames[eventName]=prefixMap[styleProp];}}return eventName;}/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */var TOP_ABORT=unsafeCastStringToDOMTopLevelType('abort');var TOP_ANIMATION_END=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));var TOP_ANIMATION_ITERATION=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));var TOP_ANIMATION_START=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));var TOP_BLUR=unsafeCastStringToDOMTopLevelType('blur');var TOP_CAN_PLAY=unsafeCastStringToDOMTopLevelType('canplay');var TOP_CAN_PLAY_THROUGH=unsafeCastStringToDOMTopLevelType('canplaythrough');var TOP_CANCEL=unsafeCastStringToDOMTopLevelType('cancel');var TOP_CHANGE=unsafeCastStringToDOMTopLevelType('change');var TOP_CLICK=unsafeCastStringToDOMTopLevelType('click');var TOP_CLOSE=unsafeCastStringToDOMTopLevelType('close');var TOP_COMPOSITION_END=unsafeCastStringToDOMTopLevelType('compositionend');var TOP_COMPOSITION_START=unsafeCastStringToDOMTopLevelType('compositionstart');var TOP_COMPOSITION_UPDATE=unsafeCastStringToDOMTopLevelType('compositionupdate');var TOP_CONTEXT_MENU=unsafeCastStringToDOMTopLevelType('contextmenu');var TOP_COPY=unsafeCastStringToDOMTopLevelType('copy');var TOP_CUT=unsafeCastStringToDOMTopLevelType('cut');var TOP_DOUBLE_CLICK=unsafeCastStringToDOMTopLevelType('dblclick');var TOP_AUX_CLICK=unsafeCastStringToDOMTopLevelType('auxclick');var TOP_DRAG=unsafeCastStringToDOMTopLevelType('drag');var TOP_DRAG_END=unsafeCastStringToDOMTopLevelType('dragend');var TOP_DRAG_ENTER=unsafeCastStringToDOMTopLevelType('dragenter');var TOP_DRAG_EXIT=unsafeCastStringToDOMTopLevelType('dragexit');var TOP_DRAG_LEAVE=unsafeCastStringToDOMTopLevelType('dragleave');var TOP_DRAG_OVER=unsafeCastStringToDOMTopLevelType('dragover');var TOP_DRAG_START=unsafeCastStringToDOMTopLevelType('dragstart');var TOP_DROP=unsafeCastStringToDOMTopLevelType('drop');var TOP_DURATION_CHANGE=unsafeCastStringToDOMTopLevelType('durationchange');var TOP_EMPTIED=unsafeCastStringToDOMTopLevelType('emptied');var TOP_ENCRYPTED=unsafeCastStringToDOMTopLevelType('encrypted');var TOP_ENDED=unsafeCastStringToDOMTopLevelType('ended');var TOP_ERROR=unsafeCastStringToDOMTopLevelType('error');var TOP_FOCUS=unsafeCastStringToDOMTopLevelType('focus');var TOP_GOT_POINTER_CAPTURE=unsafeCastStringToDOMTopLevelType('gotpointercapture');var TOP_INPUT=unsafeCastStringToDOMTopLevelType('input');var TOP_INVALID=unsafeCastStringToDOMTopLevelType('invalid');var TOP_KEY_DOWN=unsafeCastStringToDOMTopLevelType('keydown');var TOP_KEY_PRESS=unsafeCastStringToDOMTopLevelType('keypress');var TOP_KEY_UP=unsafeCastStringToDOMTopLevelType('keyup');var TOP_LOAD=unsafeCastStringToDOMTopLevelType('load');var TOP_LOAD_START=unsafeCastStringToDOMTopLevelType('loadstart');var TOP_LOADED_DATA=unsafeCastStringToDOMTopLevelType('loadeddata');var TOP_LOADED_METADATA=unsafeCastStringToDOMTopLevelType('loadedmetadata');var TOP_LOST_POINTER_CAPTURE=unsafeCastStringToDOMTopLevelType('lostpointercapture');var TOP_MOUSE_DOWN=unsafeCastStringToDOMTopLevelType('mousedown');var TOP_MOUSE_MOVE=unsafeCastStringToDOMTopLevelType('mousemove');var TOP_MOUSE_OUT=unsafeCastStringToDOMTopLevelType('mouseout');var TOP_MOUSE_OVER=unsafeCastStringToDOMTopLevelType('mouseover');var TOP_MOUSE_UP=unsafeCastStringToDOMTopLevelType('mouseup');var TOP_PASTE=unsafeCastStringToDOMTopLevelType('paste');var TOP_PAUSE=unsafeCastStringToDOMTopLevelType('pause');var TOP_PLAY=unsafeCastStringToDOMTopLevelType('play');var TOP_PLAYING=unsafeCastStringToDOMTopLevelType('playing');var TOP_POINTER_CANCEL=unsafeCastStringToDOMTopLevelType('pointercancel');var TOP_POINTER_DOWN=unsafeCastStringToDOMTopLevelType('pointerdown');var TOP_POINTER_MOVE=unsafeCastStringToDOMTopLevelType('pointermove');var TOP_POINTER_OUT=unsafeCastStringToDOMTopLevelType('pointerout');var TOP_POINTER_OVER=unsafeCastStringToDOMTopLevelType('pointerover');var TOP_POINTER_UP=unsafeCastStringToDOMTopLevelType('pointerup');var TOP_PROGRESS=unsafeCastStringToDOMTopLevelType('progress');var TOP_RATE_CHANGE=unsafeCastStringToDOMTopLevelType('ratechange');var TOP_RESET=unsafeCastStringToDOMTopLevelType('reset');var TOP_SCROLL=unsafeCastStringToDOMTopLevelType('scroll');var TOP_SEEKED=unsafeCastStringToDOMTopLevelType('seeked');var TOP_SEEKING=unsafeCastStringToDOMTopLevelType('seeking');var TOP_SELECTION_CHANGE=unsafeCastStringToDOMTopLevelType('selectionchange');var TOP_STALLED=unsafeCastStringToDOMTopLevelType('stalled');var TOP_SUBMIT=unsafeCastStringToDOMTopLevelType('submit');var TOP_SUSPEND=unsafeCastStringToDOMTopLevelType('suspend');var TOP_TEXT_INPUT=unsafeCastStringToDOMTopLevelType('textInput');var TOP_TIME_UPDATE=unsafeCastStringToDOMTopLevelType('timeupdate');var TOP_TOGGLE=unsafeCastStringToDOMTopLevelType('toggle');var TOP_TOUCH_CANCEL=unsafeCastStringToDOMTopLevelType('touchcancel');var TOP_TOUCH_END=unsafeCastStringToDOMTopLevelType('touchend');var TOP_TOUCH_MOVE=unsafeCastStringToDOMTopLevelType('touchmove');var TOP_TOUCH_START=unsafeCastStringToDOMTopLevelType('touchstart');var TOP_TRANSITION_END=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));var TOP_VOLUME_CHANGE=unsafeCastStringToDOMTopLevelType('volumechange');var TOP_WAITING=unsafeCastStringToDOMTopLevelType('waiting');var TOP_WHEEL=unsafeCastStringToDOMTopLevelType('wheel');// List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
var mediaEventTypes=[TOP_ABORT,TOP_CAN_PLAY,TOP_CAN_PLAY_THROUGH,TOP_DURATION_CHANGE,TOP_EMPTIED,TOP_ENCRYPTED,TOP_ENDED,TOP_ERROR,TOP_LOADED_DATA,TOP_LOADED_METADATA,TOP_LOAD_START,TOP_PAUSE,TOP_PLAY,TOP_PLAYING,TOP_PROGRESS,TOP_RATE_CHANGE,TOP_SEEKED,TOP_SEEKING,TOP_STALLED,TOP_SUSPEND,TOP_TIME_UPDATE,TOP_VOLUME_CHANGE,TOP_WAITING];function getRawEventName(topLevelType){return unsafeCastDOMTopLevelTypeToString(topLevelType);}/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */var root=null;var startText=null;var fallbackText=null;function initialize(nativeEventTarget){root=nativeEventTarget;startText=getText();return true;}function reset(){root=null;startText=null;fallbackText=null;}function getData(){if(fallbackText){return fallbackText;}var start=void 0;var startValue=startText;var startLength=startValue.length;var end=void 0;var endValue=getText();var endLength=endValue.length;for(start=0;start<startLength;start++){if(startValue[start]!==endValue[start]){break;}}var minEnd=startLength-start;for(end=1;end<=minEnd;end++){if(startValue[startLength-end]!==endValue[endLength-end]){break;}}var sliceTail=end>1?1-end:undefined;fallbackText=endValue.slice(start,sliceTail);return fallbackText;}function getText(){if('value'in root){return root.value;}return root.textContent;}/* eslint valid-typeof: 0 */var EVENT_POOL_SIZE=10;/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var EventInterface={type:null,target:null,// currentTarget is set when dispatching; no use in copying it here
currentTarget:function currentTarget(){return null;},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function timeStamp(event){return event.timeStamp||Date.now();},defaultPrevented:null,isTrusted:null};function functionThatReturnsTrue(){return true;}function functionThatReturnsFalse(){return false;}/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */function SyntheticEvent(dispatchConfig,targetInst,nativeEvent,nativeEventTarget){{// these have a getter/setter for warnings
delete this.nativeEvent;delete this.preventDefault;delete this.stopPropagation;delete this.isDefaultPrevented;delete this.isPropagationStopped;}this.dispatchConfig=dispatchConfig;this._targetInst=targetInst;this.nativeEvent=nativeEvent;var Interface=this.constructor.Interface;for(var propName in Interface){if(!Interface.hasOwnProperty(propName)){continue;}{delete this[propName];// this has a getter/setter for warnings
}var normalize=Interface[propName];if(normalize){this[propName]=normalize(nativeEvent);}else{if(propName==='target'){this.target=nativeEventTarget;}else{this[propName]=nativeEvent[propName];}}}var defaultPrevented=nativeEvent.defaultPrevented!=null?nativeEvent.defaultPrevented:nativeEvent.returnValue===false;if(defaultPrevented){this.isDefaultPrevented=functionThatReturnsTrue;}else{this.isDefaultPrevented=functionThatReturnsFalse;}this.isPropagationStopped=functionThatReturnsFalse;return this;}_assign(SyntheticEvent.prototype,{preventDefault:function preventDefault(){this.defaultPrevented=true;var event=this.nativeEvent;if(!event){return;}if(event.preventDefault){event.preventDefault();}else if(typeof event.returnValue!=='unknown'){event.returnValue=false;}this.isDefaultPrevented=functionThatReturnsTrue;},stopPropagation:function stopPropagation(){var event=this.nativeEvent;if(!event){return;}if(event.stopPropagation){event.stopPropagation();}else if(typeof event.cancelBubble!=='unknown'){// The ChangeEventPlugin registers a "propertychange" event for
// IE. This event does not support bubbling or cancelling, and
// any references to cancelBubble throw "Member not found".  A
// typeof check of "unknown" circumvents this issue (and is also
// IE specific).
event.cancelBubble=true;}this.isPropagationStopped=functionThatReturnsTrue;},/**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */persist:function persist(){this.isPersistent=functionThatReturnsTrue;},/**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */isPersistent:functionThatReturnsFalse,/**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */destructor:function destructor(){var Interface=this.constructor.Interface;for(var propName in Interface){{Object.defineProperty(this,propName,getPooledWarningPropertyDefinition(propName,Interface[propName]));}}this.dispatchConfig=null;this._targetInst=null;this.nativeEvent=null;this.isDefaultPrevented=functionThatReturnsFalse;this.isPropagationStopped=functionThatReturnsFalse;this._dispatchListeners=null;this._dispatchInstances=null;{Object.defineProperty(this,'nativeEvent',getPooledWarningPropertyDefinition('nativeEvent',null));Object.defineProperty(this,'isDefaultPrevented',getPooledWarningPropertyDefinition('isDefaultPrevented',functionThatReturnsFalse));Object.defineProperty(this,'isPropagationStopped',getPooledWarningPropertyDefinition('isPropagationStopped',functionThatReturnsFalse));Object.defineProperty(this,'preventDefault',getPooledWarningPropertyDefinition('preventDefault',function(){}));Object.defineProperty(this,'stopPropagation',getPooledWarningPropertyDefinition('stopPropagation',function(){}));}}});SyntheticEvent.Interface=EventInterface;/**
 * Helper to reduce boilerplate when creating subclasses.
 */SyntheticEvent.extend=function(Interface){var Super=this;var E=function E(){};E.prototype=Super.prototype;var prototype=new E();function Class(){return Super.apply(this,arguments);}_assign(prototype,Class.prototype);Class.prototype=prototype;Class.prototype.constructor=Class;Class.Interface=_assign({},Super.Interface,Interface);Class.extend=Super.extend;addEventPoolingTo(Class);return Class;};addEventPoolingTo(SyntheticEvent);/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */function getPooledWarningPropertyDefinition(propName,getVal){var isFunction=typeof getVal==='function';return{configurable:true,set:set,get:get};function set(val){var action=isFunction?'setting the method':'setting the property';warn(action,'This is effectively a no-op');return val;}function get(){var action=isFunction?'accessing the method':'accessing the property';var result=isFunction?'This is a no-op function':'This is set to null';warn(action,result);return getVal;}function warn(action,result){var warningCondition=false;!warningCondition?warningWithoutStack$1(false,"This synthetic event is reused for performance reasons. If you're seeing this, "+"you're %s `%s` on a released/nullified synthetic event. %s. "+'If you must keep the original synthetic event around, use event.persist(). '+'See https://fb.me/react-event-pooling for more information.',action,propName,result):void 0;}}function getPooledEvent(dispatchConfig,targetInst,nativeEvent,nativeInst){var EventConstructor=this;if(EventConstructor.eventPool.length){var instance=EventConstructor.eventPool.pop();EventConstructor.call(instance,dispatchConfig,targetInst,nativeEvent,nativeInst);return instance;}return new EventConstructor(dispatchConfig,targetInst,nativeEvent,nativeInst);}function releasePooledEvent(event){var EventConstructor=this;!(event instanceof EventConstructor)?invariant(false,'Trying to release an event instance into a pool of a different type.'):void 0;event.destructor();if(EventConstructor.eventPool.length<EVENT_POOL_SIZE){EventConstructor.eventPool.push(event);}}function addEventPoolingTo(EventConstructor){EventConstructor.eventPool=[];EventConstructor.getPooled=getPooledEvent;EventConstructor.release=releasePooledEvent;}/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */var SyntheticCompositionEvent=SyntheticEvent.extend({data:null});/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */var SyntheticInputEvent=SyntheticEvent.extend({data:null});var END_KEYCODES=[9,13,27,32];// Tab, Return, Esc, Space
var START_KEYCODE=229;var canUseCompositionEvent=canUseDOM&&'CompositionEvent'in window;var documentMode=null;if(canUseDOM&&'documentMode'in document){documentMode=document.documentMode;}// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent=canUseDOM&&'TextEvent'in window&&!documentMode;// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData=canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&documentMode<=11);var SPACEBAR_CODE=32;var SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE);// Events and their corresponding property names.
var eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:'onBeforeInput',captured:'onBeforeInputCapture'},dependencies:[TOP_COMPOSITION_END,TOP_KEY_PRESS,TOP_TEXT_INPUT,TOP_PASTE]},compositionEnd:{phasedRegistrationNames:{bubbled:'onCompositionEnd',captured:'onCompositionEndCapture'},dependencies:[TOP_BLUR,TOP_COMPOSITION_END,TOP_KEY_DOWN,TOP_KEY_PRESS,TOP_KEY_UP,TOP_MOUSE_DOWN]},compositionStart:{phasedRegistrationNames:{bubbled:'onCompositionStart',captured:'onCompositionStartCapture'},dependencies:[TOP_BLUR,TOP_COMPOSITION_START,TOP_KEY_DOWN,TOP_KEY_PRESS,TOP_KEY_UP,TOP_MOUSE_DOWN]},compositionUpdate:{phasedRegistrationNames:{bubbled:'onCompositionUpdate',captured:'onCompositionUpdateCapture'},dependencies:[TOP_BLUR,TOP_COMPOSITION_UPDATE,TOP_KEY_DOWN,TOP_KEY_PRESS,TOP_KEY_UP,TOP_MOUSE_DOWN]}};// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress=false;/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */function isKeypressCommand(nativeEvent){return(nativeEvent.ctrlKey||nativeEvent.altKey||nativeEvent.metaKey)&&// ctrlKey && altKey is equivalent to AltGr, and is not a command.
!(nativeEvent.ctrlKey&&nativeEvent.altKey);}/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */function getCompositionEventType(topLevelType){switch(topLevelType){case TOP_COMPOSITION_START:return eventTypes.compositionStart;case TOP_COMPOSITION_END:return eventTypes.compositionEnd;case TOP_COMPOSITION_UPDATE:return eventTypes.compositionUpdate;}}/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */function isFallbackCompositionStart(topLevelType,nativeEvent){return topLevelType===TOP_KEY_DOWN&&nativeEvent.keyCode===START_KEYCODE;}/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */function isFallbackCompositionEnd(topLevelType,nativeEvent){switch(topLevelType){case TOP_KEY_UP:// Command keys insert or clear IME input.
return END_KEYCODES.indexOf(nativeEvent.keyCode)!==-1;case TOP_KEY_DOWN:// Expect IME keyCode on each keydown. If we get any other
// code we must have exited earlier.
return nativeEvent.keyCode!==START_KEYCODE;case TOP_KEY_PRESS:case TOP_MOUSE_DOWN:case TOP_BLUR:// Events are not possible without cancelling IME.
return true;default:return false;}}/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */function getDataFromCustomEvent(nativeEvent){var detail=nativeEvent.detail;if((typeof detail==='undefined'?'undefined':_typeof(detail))==='object'&&'data'in detail){return detail.data;}return null;}/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */function isUsingKoreanIME(nativeEvent){return nativeEvent.locale==='ko';}// Track the current IME composition status, if any.
var isComposing=false;/**
 * @return {?object} A SyntheticCompositionEvent.
 */function extractCompositionEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget){var eventType=void 0;var fallbackData=void 0;if(canUseCompositionEvent){eventType=getCompositionEventType(topLevelType);}else if(!isComposing){if(isFallbackCompositionStart(topLevelType,nativeEvent)){eventType=eventTypes.compositionStart;}}else if(isFallbackCompositionEnd(topLevelType,nativeEvent)){eventType=eventTypes.compositionEnd;}if(!eventType){return null;}if(useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)){// The current composition is stored statically and must not be
// overwritten while composition continues.
if(!isComposing&&eventType===eventTypes.compositionStart){isComposing=initialize(nativeEventTarget);}else if(eventType===eventTypes.compositionEnd){if(isComposing){fallbackData=getData();}}}var event=SyntheticCompositionEvent.getPooled(eventType,targetInst,nativeEvent,nativeEventTarget);if(fallbackData){// Inject data generated from fallback path into the synthetic event.
// This matches the property of native CompositionEventInterface.
event.data=fallbackData;}else{var customData=getDataFromCustomEvent(nativeEvent);if(customData!==null){event.data=customData;}}accumulateTwoPhaseDispatches(event);return event;}/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */function getNativeBeforeInputChars(topLevelType,nativeEvent){switch(topLevelType){case TOP_COMPOSITION_END:return getDataFromCustomEvent(nativeEvent);case TOP_KEY_PRESS:/**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */var which=nativeEvent.which;if(which!==SPACEBAR_CODE){return null;}hasSpaceKeypress=true;return SPACEBAR_CHAR;case TOP_TEXT_INPUT:// Record the characters to be added to the DOM.
var chars=nativeEvent.data;// If it's a spacebar character, assume that we have already handled
// it at the keypress level and bail immediately. Android Chrome
// doesn't give us keycodes, so we need to ignore it.
if(chars===SPACEBAR_CHAR&&hasSpaceKeypress){return null;}return chars;default:// For other native event types, do nothing.
return null;}}/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */function getFallbackBeforeInputChars(topLevelType,nativeEvent){// If we are currently composing (IME) and using a fallback to do so,
// try to extract the composed characters from the fallback object.
// If composition event is available, we extract a string only at
// compositionevent, otherwise extract it at fallback events.
if(isComposing){if(topLevelType===TOP_COMPOSITION_END||!canUseCompositionEvent&&isFallbackCompositionEnd(topLevelType,nativeEvent)){var chars=getData();reset();isComposing=false;return chars;}return null;}switch(topLevelType){case TOP_PASTE:// If a paste event occurs after a keypress, throw out the input
// chars. Paste events should not lead to BeforeInput events.
return null;case TOP_KEY_PRESS:/**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */if(!isKeypressCommand(nativeEvent)){// IE fires the `keypress` event when a user types an emoji via
// Touch keyboard of Windows.  In such a case, the `char` property
// holds an emoji character like `\uD83D\uDE0A`.  Because its length
// is 2, the property `which` does not represent an emoji correctly.
// In such a case, we directly return the `char` property instead of
// using `which`.
if(nativeEvent.char&&nativeEvent.char.length>1){return nativeEvent.char;}else if(nativeEvent.which){return String.fromCharCode(nativeEvent.which);}}return null;case TOP_COMPOSITION_END:return useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)?null:nativeEvent.data;default:return null;}}/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */function extractBeforeInputEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget){var chars=void 0;if(canUseTextInputEvent){chars=getNativeBeforeInputChars(topLevelType,nativeEvent);}else{chars=getFallbackBeforeInputChars(topLevelType,nativeEvent);}// If no characters are being inserted, no BeforeInput event should
// be fired.
if(!chars){return null;}var event=SyntheticInputEvent.getPooled(eventTypes.beforeInput,targetInst,nativeEvent,nativeEventTarget);event.data=chars;accumulateTwoPhaseDispatches(event);return event;}/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */var BeforeInputEventPlugin={eventTypes:eventTypes,extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var composition=extractCompositionEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget);var beforeInput=extractBeforeInputEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget);if(composition===null){return beforeInput;}if(beforeInput===null){return composition;}return[composition,beforeInput];}};// Use to restore controlled state after a change event has fired.
var restoreImpl=null;var restoreTarget=null;var restoreQueue=null;function restoreStateOfTarget(target){// We perform this translation at the end of the event loop so that we
// always receive the correct fiber here
var internalInstance=getInstanceFromNode(target);if(!internalInstance){// Unmounted
return;}!(typeof restoreImpl==='function')?invariant(false,'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.'):void 0;var props=getFiberCurrentPropsFromNode(internalInstance.stateNode);restoreImpl(internalInstance.stateNode,internalInstance.type,props);}function setRestoreImplementation(impl){restoreImpl=impl;}function enqueueStateRestore(target){if(restoreTarget){if(restoreQueue){restoreQueue.push(target);}else{restoreQueue=[target];}}else{restoreTarget=target;}}function needsStateRestore(){return restoreTarget!==null||restoreQueue!==null;}function restoreStateIfNeeded(){if(!restoreTarget){return;}var target=restoreTarget;var queuedTargets=restoreQueue;restoreTarget=null;restoreQueue=null;restoreStateOfTarget(target);if(queuedTargets){for(var i=0;i<queuedTargets.length;i++){restoreStateOfTarget(queuedTargets[i]);}}}// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults
var _batchedUpdatesImpl=function _batchedUpdatesImpl(fn,bookkeeping){return fn(bookkeeping);};var _interactiveUpdatesImpl=function _interactiveUpdatesImpl(fn,a,b){return fn(a,b);};var _flushInteractiveUpdatesImpl=function _flushInteractiveUpdatesImpl(){};var isBatching=false;function batchedUpdates(fn,bookkeeping){if(isBatching){// If we are currently inside another batch, we need to wait until it
// fully completes before restoring state.
return fn(bookkeeping);}isBatching=true;try{return _batchedUpdatesImpl(fn,bookkeeping);}finally{// Here we wait until all updates have propagated, which is important
// when using controlled components within layers:
// https://github.com/facebook/react/issues/1698
// Then we restore state of any controlled component.
isBatching=false;var controlledComponentsHavePendingUpdates=needsStateRestore();if(controlledComponentsHavePendingUpdates){// If a controlled event was fired, we may need to restore the state of
// the DOM node back to the controlled value. This is necessary when React
// bails out of the update without touching the DOM.
_flushInteractiveUpdatesImpl();restoreStateIfNeeded();}}}function interactiveUpdates(fn,a,b){return _interactiveUpdatesImpl(fn,a,b);}function setBatchingImplementation(batchedUpdatesImpl,interactiveUpdatesImpl,flushInteractiveUpdatesImpl){_batchedUpdatesImpl=batchedUpdatesImpl;_interactiveUpdatesImpl=interactiveUpdatesImpl;_flushInteractiveUpdatesImpl=flushInteractiveUpdatesImpl;}/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */var supportedInputTypes={color:true,date:true,datetime:true,'datetime-local':true,email:true,month:true,number:true,password:true,range:true,search:true,tel:true,text:true,time:true,url:true,week:true};function isTextInputElement(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();if(nodeName==='input'){return!!supportedInputTypes[elem.type];}if(nodeName==='textarea'){return true;}return false;}/**
 * HTML nodeType values that represent the type of the node
 */var ELEMENT_NODE=1;var TEXT_NODE=3;var COMMENT_NODE=8;var DOCUMENT_NODE=9;var DOCUMENT_FRAGMENT_NODE=11;/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */function getEventTarget(nativeEvent){// Fallback to nativeEvent.srcElement for IE9
// https://github.com/facebook/react/issues/12506
var target=nativeEvent.target||nativeEvent.srcElement||window;// Normalize SVG <use> element events #4963
if(target.correspondingUseElement){target=target.correspondingUseElement;}// Safari may fire events on text nodes (Node.TEXT_NODE is 3).
// @see http://www.quirksmode.org/js/events_properties.html
return target.nodeType===TEXT_NODE?target.parentNode:target;}/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */function isEventSupported(eventNameSuffix){if(!canUseDOM){return false;}var eventName='on'+eventNameSuffix;var isSupported=eventName in document;if(!isSupported){var element=document.createElement('div');element.setAttribute(eventName,'return;');isSupported=typeof element[eventName]==='function';}return isSupported;}function isCheckable(elem){var type=elem.type;var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(type==='checkbox'||type==='radio');}function getTracker(node){return node._valueTracker;}function detachTracker(node){node._valueTracker=null;}function getValueFromNode(node){var value='';if(!node){return value;}if(isCheckable(node)){value=node.checked?'true':'false';}else{value=node.value;}return value;}function trackValueOnNode(node){var valueField=isCheckable(node)?'checked':'value';var descriptor=Object.getOwnPropertyDescriptor(node.constructor.prototype,valueField);var currentValue=''+node[valueField];// if someone has already defined a value or Safari, then bail
// and don't track value will cause over reporting of changes,
// but it's better then a hard failure
// (needed for certain tests that spyOn input values and Safari)
if(node.hasOwnProperty(valueField)||typeof descriptor==='undefined'||typeof descriptor.get!=='function'||typeof descriptor.set!=='function'){return;}var _get=descriptor.get,_set=descriptor.set;Object.defineProperty(node,valueField,{configurable:true,get:function get(){return _get.call(this);},set:function set(value){currentValue=''+value;_set.call(this,value);}});// We could've passed this the first time
// but it triggers a bug in IE11 and Edge 14/15.
// Calling defineProperty() again should be equivalent.
// https://github.com/facebook/react/issues/11768
Object.defineProperty(node,valueField,{enumerable:descriptor.enumerable});var tracker={getValue:function getValue(){return currentValue;},setValue:function setValue(value){currentValue=''+value;},stopTracking:function stopTracking(){detachTracker(node);delete node[valueField];}};return tracker;}function track(node){if(getTracker(node)){return;}// TODO: Once it's just Fiber we can move this to node._wrapperState
node._valueTracker=trackValueOnNode(node);}function updateValueIfChanged(node){if(!node){return false;}var tracker=getTracker(node);// if there is no tracker at this point it's unlikely
// that trying again will succeed
if(!tracker){return true;}var lastValue=tracker.getValue();var nextValue=getValueFromNode(node);if(nextValue!==lastValue){tracker.setValue(nextValue);return true;}return false;}var ReactSharedInternals=React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;// Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.
if(!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')){ReactSharedInternals.ReactCurrentDispatcher={current:null};}var BEFORE_SLASH_RE=/^(.*)[\\\/]/;var describeComponentFrame=function describeComponentFrame(name,source,ownerName){var sourceInfo='';if(source){var path=source.fileName;var fileName=path.replace(BEFORE_SLASH_RE,'');{// In DEV, include code for a common special case:
// prefer "folder/index.js" instead of just "index.js".
if(/^index\./.test(fileName)){var match=path.match(BEFORE_SLASH_RE);if(match){var pathBeforeSlash=match[1];if(pathBeforeSlash){var folderName=pathBeforeSlash.replace(BEFORE_SLASH_RE,'');fileName=folderName+'/'+fileName;}}}}sourceInfo=' (at '+fileName+':'+source.lineNumber+')';}else if(ownerName){sourceInfo=' (created by '+ownerName+')';}return'\n    in '+(name||'Unknown')+sourceInfo;};// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol=typeof Symbol==='function'&&Symbol.for;var REACT_ELEMENT_TYPE=hasSymbol?Symbol.for('react.element'):0xeac7;var REACT_PORTAL_TYPE=hasSymbol?Symbol.for('react.portal'):0xeaca;var REACT_FRAGMENT_TYPE=hasSymbol?Symbol.for('react.fragment'):0xeacb;var REACT_STRICT_MODE_TYPE=hasSymbol?Symbol.for('react.strict_mode'):0xeacc;var REACT_PROFILER_TYPE=hasSymbol?Symbol.for('react.profiler'):0xead2;var REACT_PROVIDER_TYPE=hasSymbol?Symbol.for('react.provider'):0xeacd;var REACT_CONTEXT_TYPE=hasSymbol?Symbol.for('react.context'):0xeace;var REACT_CONCURRENT_MODE_TYPE=hasSymbol?Symbol.for('react.concurrent_mode'):0xeacf;var REACT_FORWARD_REF_TYPE=hasSymbol?Symbol.for('react.forward_ref'):0xead0;var REACT_SUSPENSE_TYPE=hasSymbol?Symbol.for('react.suspense'):0xead1;var REACT_MEMO_TYPE=hasSymbol?Symbol.for('react.memo'):0xead3;var REACT_LAZY_TYPE=hasSymbol?Symbol.for('react.lazy'):0xead4;var MAYBE_ITERATOR_SYMBOL=typeof Symbol==='function'&&Symbol.iterator;var FAUX_ITERATOR_SYMBOL='@@iterator';function getIteratorFn(maybeIterable){if(maybeIterable===null||(typeof maybeIterable==='undefined'?'undefined':_typeof(maybeIterable))!=='object'){return null;}var maybeIterator=MAYBE_ITERATOR_SYMBOL&&maybeIterable[MAYBE_ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL];if(typeof maybeIterator==='function'){return maybeIterator;}return null;}var Pending=0;var Resolved=1;var Rejected=2;function refineResolvedLazyComponent(lazyComponent){return lazyComponent._status===Resolved?lazyComponent._result:null;}function getWrappedName(outerType,innerType,wrapperName){var functionName=innerType.displayName||innerType.name||'';return outerType.displayName||(functionName!==''?wrapperName+'('+functionName+')':wrapperName);}function getComponentName(type){if(type==null){// Host root, text node or just invalid type.
return null;}{if(typeof type.tag==='number'){warningWithoutStack$1(false,'Received an unexpected object in getComponentName(). '+'This is likely a bug in React. Please file an issue.');}}if(typeof type==='function'){return type.displayName||type.name||null;}if(typeof type==='string'){return type;}switch(type){case REACT_CONCURRENT_MODE_TYPE:return'ConcurrentMode';case REACT_FRAGMENT_TYPE:return'Fragment';case REACT_PORTAL_TYPE:return'Portal';case REACT_PROFILER_TYPE:return'Profiler';case REACT_STRICT_MODE_TYPE:return'StrictMode';case REACT_SUSPENSE_TYPE:return'Suspense';}if((typeof type==='undefined'?'undefined':_typeof(type))==='object'){switch(type.$$typeof){case REACT_CONTEXT_TYPE:return'Context.Consumer';case REACT_PROVIDER_TYPE:return'Context.Provider';case REACT_FORWARD_REF_TYPE:return getWrappedName(type,type.render,'ForwardRef');case REACT_MEMO_TYPE:return getComponentName(type.type);case REACT_LAZY_TYPE:{var thenable=type;var resolvedThenable=refineResolvedLazyComponent(thenable);if(resolvedThenable){return getComponentName(resolvedThenable);}}}}return null;}var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;function describeFiber(fiber){switch(fiber.tag){case HostRoot:case HostPortal:case HostText:case Fragment:case ContextProvider:case ContextConsumer:return'';default:var owner=fiber._debugOwner;var source=fiber._debugSource;var name=getComponentName(fiber.type);var ownerName=null;if(owner){ownerName=getComponentName(owner.type);}return describeComponentFrame(name,source,ownerName);}}function getStackByFiberInDevAndProd(workInProgress){var info='';var node=workInProgress;do{info+=describeFiber(node);node=node.return;}while(node);return info;}var current=null;var phase=null;function getCurrentFiberOwnerNameInDevOrNull(){{if(current===null){return null;}var owner=current._debugOwner;if(owner!==null&&typeof owner!=='undefined'){return getComponentName(owner.type);}}return null;}function getCurrentFiberStackInDev(){{if(current===null){return'';}// Safe because if current fiber exists, we are reconciling,
// and it is guaranteed to be the work-in-progress version.
return getStackByFiberInDevAndProd(current);}return'';}function resetCurrentFiber(){{ReactDebugCurrentFrame.getCurrentStack=null;current=null;phase=null;}}function setCurrentFiber(fiber){{ReactDebugCurrentFrame.getCurrentStack=getCurrentFiberStackInDev;current=fiber;phase=null;}}function setCurrentPhase(lifeCyclePhase){{phase=lifeCyclePhase;}}/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */var warning=warningWithoutStack$1;{warning=function warning(condition,format){if(condition){return;}var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;var stack=ReactDebugCurrentFrame.getStackAddendum();// eslint-disable-next-line react-internal/warning-and-invariant-args
for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}warningWithoutStack$1.apply(undefined,[false,format+'%s'].concat(args,[stack]));};}var warning$1=warning;// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED=0;// A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.
var STRING=1;// A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.
var BOOLEANISH_STRING=2;// A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
var BOOLEAN=3;// An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.
var OVERLOADED_BOOLEAN=4;// An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.
var NUMERIC=5;// An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.
var POSITIVE_NUMERIC=6;/* eslint-disable max-len */var ATTRIBUTE_NAME_START_CHAR=':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';/* eslint-enable max-len */var ATTRIBUTE_NAME_CHAR=ATTRIBUTE_NAME_START_CHAR+'\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';var ROOT_ATTRIBUTE_NAME='data-reactroot';var VALID_ATTRIBUTE_NAME_REGEX=new RegExp('^['+ATTRIBUTE_NAME_START_CHAR+']['+ATTRIBUTE_NAME_CHAR+']*$');var hasOwnProperty=Object.prototype.hasOwnProperty;var illegalAttributeNameCache={};var validatedAttributeNameCache={};function isAttributeNameSafe(attributeName){if(hasOwnProperty.call(validatedAttributeNameCache,attributeName)){return true;}if(hasOwnProperty.call(illegalAttributeNameCache,attributeName)){return false;}if(VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)){validatedAttributeNameCache[attributeName]=true;return true;}illegalAttributeNameCache[attributeName]=true;{warning$1(false,'Invalid attribute name: `%s`',attributeName);}return false;}function shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag){if(propertyInfo!==null){return propertyInfo.type===RESERVED;}if(isCustomComponentTag){return false;}if(name.length>2&&(name[0]==='o'||name[0]==='O')&&(name[1]==='n'||name[1]==='N')){return true;}return false;}function shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag){if(propertyInfo!==null&&propertyInfo.type===RESERVED){return false;}switch(typeof value==='undefined'?'undefined':_typeof(value)){case'function':// $FlowIssue symbol is perfectly valid here
case'symbol':// eslint-disable-line
return true;case'boolean':{if(isCustomComponentTag){return false;}if(propertyInfo!==null){return!propertyInfo.acceptsBooleans;}else{var prefix=name.toLowerCase().slice(0,5);return prefix!=='data-'&&prefix!=='aria-';}}default:return false;}}function shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag){if(value===null||typeof value==='undefined'){return true;}if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag)){return true;}if(isCustomComponentTag){return false;}if(propertyInfo!==null){switch(propertyInfo.type){case BOOLEAN:return!value;case OVERLOADED_BOOLEAN:return value===false;case NUMERIC:return isNaN(value);case POSITIVE_NUMERIC:return isNaN(value)||value<1;}}return false;}function getPropertyInfo(name){return properties.hasOwnProperty(name)?properties[name]:null;}function PropertyInfoRecord(name,type,mustUseProperty,attributeName,attributeNamespace){this.acceptsBooleans=type===BOOLEANISH_STRING||type===BOOLEAN||type===OVERLOADED_BOOLEAN;this.attributeName=attributeName;this.attributeNamespace=attributeNamespace;this.mustUseProperty=mustUseProperty;this.propertyName=name;this.type=type;}// When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.
var properties={};// These props are reserved by React. They shouldn't be written to the DOM.
['children','dangerouslySetInnerHTML',// TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue','defaultChecked','innerHTML','suppressContentEditableWarning','suppressHydrationWarning','style'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,RESERVED,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.
[['acceptCharset','accept-charset'],['className','class'],['htmlFor','for'],['httpEquiv','http-equiv']].forEach(function(_ref){var name=_ref[0],attributeName=_ref[1];properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,// attributeName
null);}// attributeNamespace
);// These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
['contentEditable','draggable','spellCheck','value'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
name.toLowerCase(),// attributeName
null);}// attributeNamespace
);// These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.
['autoReverse','externalResourcesRequired','focusable','preserveAlpha'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML boolean attributes.
['allowFullScreen','async',// Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus','autoPlay','controls','default','defer','disabled','formNoValidate','hidden','loop','noModule','noValidate','open','playsInline','readOnly','required','reversed','scoped','seamless',// Microdata
'itemScope'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,false,// mustUseProperty
name.toLowerCase(),// attributeName
null);}// attributeNamespace
);// These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.
['checked',// Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple','muted','selected'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,true,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.
['capture','download'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,OVERLOADED_BOOLEAN,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML attributes that must be positive numbers.
['cols','rows','size','span'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,POSITIVE_NUMERIC,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML attributes that must be numbers.
['rowSpan','start'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,NUMERIC,false,// mustUseProperty
name.toLowerCase(),// attributeName
null);}// attributeNamespace
);var CAMELIZE=/[\-\:]([a-z])/g;var capitalize=function capitalize(token){return token[1].toUpperCase();};// This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scrapping the MDN documentation.
['accent-height','alignment-baseline','arabic-form','baseline-shift','cap-height','clip-path','clip-rule','color-interpolation','color-interpolation-filters','color-profile','color-rendering','dominant-baseline','enable-background','fill-opacity','fill-rule','flood-color','flood-opacity','font-family','font-size','font-size-adjust','font-stretch','font-style','font-variant','font-weight','glyph-name','glyph-orientation-horizontal','glyph-orientation-vertical','horiz-adv-x','horiz-origin-x','image-rendering','letter-spacing','lighting-color','marker-end','marker-mid','marker-start','overline-position','overline-thickness','paint-order','panose-1','pointer-events','rendering-intent','shape-rendering','stop-color','stop-opacity','strikethrough-position','strikethrough-thickness','stroke-dasharray','stroke-dashoffset','stroke-linecap','stroke-linejoin','stroke-miterlimit','stroke-opacity','stroke-width','text-anchor','text-decoration','text-rendering','underline-position','underline-thickness','unicode-bidi','unicode-range','units-per-em','v-alphabetic','v-hanging','v-ideographic','v-mathematical','vector-effect','vert-adv-y','vert-origin-x','vert-origin-y','word-spacing','writing-mode','xmlns:xlink','x-height'].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,null);}// attributeNamespace
);// String SVG attributes with the xlink namespace.
['xlink:actuate','xlink:arcrole','xlink:href','xlink:role','xlink:show','xlink:title','xlink:type'].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,'http://www.w3.org/1999/xlink');});// String SVG attributes with the xml namespace.
['xml:base','xml:lang','xml:space'].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,'http://www.w3.org/XML/1998/namespace');});// These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.
['tabIndex','crossOrigin'].forEach(function(attributeName){properties[attributeName]=new PropertyInfoRecord(attributeName,STRING,false,// mustUseProperty
attributeName.toLowerCase(),// attributeName
null);}// attributeNamespace
);/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */function getValueForProperty(node,name,expected,propertyInfo){{if(propertyInfo.mustUseProperty){var propertyName=propertyInfo.propertyName;return node[propertyName];}else{var attributeName=propertyInfo.attributeName;var stringValue=null;if(propertyInfo.type===OVERLOADED_BOOLEAN){if(node.hasAttribute(attributeName)){var value=node.getAttribute(attributeName);if(value===''){return true;}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return value;}if(value===''+expected){return expected;}return value;}}else if(node.hasAttribute(attributeName)){if(shouldRemoveAttribute(name,expected,propertyInfo,false)){// We had an attribute but shouldn't have had one, so read it
// for the error message.
return node.getAttribute(attributeName);}if(propertyInfo.type===BOOLEAN){// If this was a boolean, it doesn't matter what the value is
// the fact that we have it is the same as the expected.
return expected;}// Even if this property uses a namespace we use getAttribute
// because we assume its namespaced name is the same as our config.
// To use getAttributeNS we need the local name which we don't have
// in our config atm.
stringValue=node.getAttribute(attributeName);}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return stringValue===null?expected:stringValue;}else if(stringValue===''+expected){return expected;}else{return stringValue;}}}}/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */function getValueForAttribute(node,name,expected){{if(!isAttributeNameSafe(name)){return;}if(!node.hasAttribute(name)){return expected===undefined?undefined:null;}var value=node.getAttribute(name);if(value===''+expected){return expected;}return value;}}/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */function setValueForProperty(node,name,value,isCustomComponentTag){var propertyInfo=getPropertyInfo(name);if(shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag)){return;}if(shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag)){value=null;}// If the prop isn't in the special list, treat it as a simple attribute.
if(isCustomComponentTag||propertyInfo===null){if(isAttributeNameSafe(name)){var _attributeName=name;if(value===null){node.removeAttribute(_attributeName);}else{node.setAttribute(_attributeName,''+value);}}return;}var mustUseProperty=propertyInfo.mustUseProperty;if(mustUseProperty){var propertyName=propertyInfo.propertyName;if(value===null){var type=propertyInfo.type;node[propertyName]=type===BOOLEAN?false:'';}else{// Contrary to `setAttribute`, object properties are properly
// `toString`ed by IE8/9.
node[propertyName]=value;}return;}// The rest are treated as attributes with special cases.
var attributeName=propertyInfo.attributeName,attributeNamespace=propertyInfo.attributeNamespace;if(value===null){node.removeAttribute(attributeName);}else{var _type=propertyInfo.type;var attributeValue=void 0;if(_type===BOOLEAN||_type===OVERLOADED_BOOLEAN&&value===true){attributeValue='';}else{// `setAttribute` with objects becomes only `[object]` in IE8/9,
// ('' + value) makes it output the correct toString()-value.
attributeValue=''+value;}if(attributeNamespace){node.setAttributeNS(attributeNamespace,attributeName,attributeValue);}else{node.setAttribute(attributeName,attributeValue);}}}// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value){return''+value;}function getToStringValue(value){switch(typeof value==='undefined'?'undefined':_typeof(value)){case'boolean':case'number':case'object':case'string':case'undefined':return value;default:// function, symbol are assigned as empty strings
return'';}}var ReactDebugCurrentFrame$1=null;var ReactControlledValuePropTypes={checkPropTypes:null};{ReactDebugCurrentFrame$1=ReactSharedInternals.ReactDebugCurrentFrame;var hasReadOnlyValue={button:true,checkbox:true,image:true,hidden:true,radio:true,reset:true,submit:true};var propTypes={value:function value(props,propName,componentName){if(hasReadOnlyValue[props.type]||props.onChange||props.readOnly||props.disabled||props[propName]==null){return null;}return new Error('You provided a `value` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultValue`. Otherwise, '+'set either `onChange` or `readOnly`.');},checked:function checked(props,propName,componentName){if(props.onChange||props.readOnly||props.disabled||props[propName]==null){return null;}return new Error('You provided a `checked` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultChecked`. Otherwise, '+'set either `onChange` or `readOnly`.');}};/**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */ReactControlledValuePropTypes.checkPropTypes=function(tagName,props){checkPropTypes(propTypes,props,'prop',tagName,ReactDebugCurrentFrame$1.getStackAddendum);};}var enableUserTimingAPI=true;// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
var debugRenderPhaseSideEffects=false;// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:
var debugRenderPhaseSideEffectsForStrictMode=true;// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.
var replayFailedUnitOfWorkWithInvokeGuardedCallback=true;// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
var warnAboutDeprecatedLifecycles=false;// Gather advanced timing metrics for Profiler subtrees.
var enableProfilerTimer=true;// Trace which interactions trigger each commit.
var enableSchedulerTracing=true;// Only used in www builds.
var enableSuspenseServerRenderer=false;// TODO: true? Here it might just be false.
// Only used in www builds.
// Only used in www builds.
// React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties
var disableInputAttributeSyncing=false;// These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
var enableStableConcurrentModeAPIs=false;var warnAboutShorthandPropertyCollision=false;// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue=false;var didWarnCheckedDefaultChecked=false;var didWarnControlledToUncontrolled=false;var didWarnUncontrolledToControlled=false;function isControlled(props){var usesChecked=props.type==='checkbox'||props.type==='radio';return usesChecked?props.checked!=null:props.value!=null;}/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */function getHostProps(element,props){var node=element;var checked=props.checked;var hostProps=_assign({},props,{defaultChecked:undefined,defaultValue:undefined,value:undefined,checked:checked!=null?checked:node._wrapperState.initialChecked});return hostProps;}function initWrapperState(element,props){{ReactControlledValuePropTypes.checkPropTypes('input',props);if(props.checked!==undefined&&props.defaultChecked!==undefined&&!didWarnCheckedDefaultChecked){warning$1(false,'%s contains an input of type %s with both checked and defaultChecked props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the checked prop, or the defaultChecked prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://fb.me/react-controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnCheckedDefaultChecked=true;}if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue){warning$1(false,'%s contains an input of type %s with both value and defaultValue props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://fb.me/react-controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnValueDefaultValue=true;}}var node=element;var defaultValue=props.defaultValue==null?'':props.defaultValue;node._wrapperState={initialChecked:props.checked!=null?props.checked:props.defaultChecked,initialValue:getToStringValue(props.value!=null?props.value:defaultValue),controlled:isControlled(props)};}function updateChecked(element,props){var node=element;var checked=props.checked;if(checked!=null){setValueForProperty(node,'checked',checked,false);}}function updateWrapper(element,props){var node=element;{var _controlled=isControlled(props);if(!node._wrapperState.controlled&&_controlled&&!didWarnUncontrolledToControlled){warning$1(false,'A component is changing an uncontrolled input of type %s to be controlled. '+'Input elements should not switch from uncontrolled to controlled (or vice versa). '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',props.type);didWarnUncontrolledToControlled=true;}if(node._wrapperState.controlled&&!_controlled&&!didWarnControlledToUncontrolled){warning$1(false,'A component is changing a controlled input of type %s to be uncontrolled. '+'Input elements should not switch from controlled to uncontrolled (or vice versa). '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',props.type);didWarnControlledToUncontrolled=true;}}updateChecked(element,props);var value=getToStringValue(props.value);var type=props.type;if(value!=null){if(type==='number'){if(value===0&&node.value===''||// We explicitly want to coerce to number here if possible.
// eslint-disable-next-line
node.value!=value){node.value=toString(value);}}else if(node.value!==toString(value)){node.value=toString(value);}}else if(type==='submit'||type==='reset'){// Submit/reset inputs need the attribute removed completely to avoid
// blank-text buttons.
node.removeAttribute('value');return;}if(disableInputAttributeSyncing){// When not syncing the value attribute, React only assigns a new value
// whenever the defaultValue React prop has changed. When not present,
// React does nothing
if(props.hasOwnProperty('defaultValue')){setDefaultValue(node,props.type,getToStringValue(props.defaultValue));}}else{// When syncing the value attribute, the value comes from a cascade of
// properties:
//  1. The value React property
//  2. The defaultValue React property
//  3. Otherwise there should be no change
if(props.hasOwnProperty('value')){setDefaultValue(node,props.type,value);}else if(props.hasOwnProperty('defaultValue')){setDefaultValue(node,props.type,getToStringValue(props.defaultValue));}}if(disableInputAttributeSyncing){// When not syncing the checked attribute, the attribute is directly
// controllable from the defaultValue React property. It needs to be
// updated as new props come in.
if(props.defaultChecked==null){node.removeAttribute('checked');}else{node.defaultChecked=!!props.defaultChecked;}}else{// When syncing the checked attribute, it only changes when it needs
// to be removed, such as transitioning from a checkbox into a text input
if(props.checked==null&&props.defaultChecked!=null){node.defaultChecked=!!props.defaultChecked;}}}function postMountWrapper(element,props,isHydrating){var node=element;// Do not assign value if it is already set. This prevents user text input
// from being lost during SSR hydration.
if(props.hasOwnProperty('value')||props.hasOwnProperty('defaultValue')){var type=props.type;var isButton=type==='submit'||type==='reset';// Avoid setting value attribute on submit/reset inputs as it overrides the
// default value provided by the browser. See: #12872
if(isButton&&(props.value===undefined||props.value===null)){return;}var _initialValue=toString(node._wrapperState.initialValue);// Do not assign value if it is already set. This prevents user text input
// from being lost during SSR hydration.
if(!isHydrating){if(disableInputAttributeSyncing){var value=getToStringValue(props.value);// When not syncing the value attribute, the value property points
// directly to the React prop. Only assign it if it exists.
if(value!=null){// Always assign on buttons so that it is possible to assign an
// empty string to clear button text.
//
// Otherwise, do not re-assign the value property if is empty. This
// potentially avoids a DOM write and prevents Firefox (~60.0.1) from
// prematurely marking required inputs as invalid. Equality is compared
// to the current value in case the browser provided value is not an
// empty string.
if(isButton||value!==node.value){node.value=toString(value);}}}else{// When syncing the value attribute, the value property should use
// the wrapperState._initialValue property. This uses:
//
//   1. The value React property when present
//   2. The defaultValue React property when present
//   3. An empty string
if(_initialValue!==node.value){node.value=_initialValue;}}}if(disableInputAttributeSyncing){// When not syncing the value attribute, assign the value attribute
// directly from the defaultValue React property (when present)
var defaultValue=getToStringValue(props.defaultValue);if(defaultValue!=null){node.defaultValue=toString(defaultValue);}}else{// Otherwise, the value attribute is synchronized to the property,
// so we assign defaultValue to the same thing as the value property
// assignment step above.
node.defaultValue=_initialValue;}}// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
// this is needed to work around a chrome bug where setting defaultChecked
// will sometimes influence the value of checked (even after detachment).
// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
// We need to temporarily unset name to avoid disrupting radio button groups.
var name=node.name;if(name!==''){node.name='';}if(disableInputAttributeSyncing){// When not syncing the checked attribute, the checked property
// never gets assigned. It must be manually set. We don't want
// to do this when hydrating so that existing user input isn't
// modified
if(!isHydrating){updateChecked(element,props);}// Only assign the checked attribute if it is defined. This saves
// a DOM write when controlling the checked attribute isn't needed
// (text inputs, submit/reset)
if(props.hasOwnProperty('defaultChecked')){node.defaultChecked=!node.defaultChecked;node.defaultChecked=!!props.defaultChecked;}}else{// When syncing the checked attribute, both the checked property and
// attribute are assigned at the same time using defaultChecked. This uses:
//
//   1. The checked React property when present
//   2. The defaultChecked React property when present
//   3. Otherwise, false
node.defaultChecked=!node.defaultChecked;node.defaultChecked=!!node._wrapperState.initialChecked;}if(name!==''){node.name=name;}}function restoreControlledState(element,props){var node=element;updateWrapper(node,props);updateNamedCousins(node,props);}function updateNamedCousins(rootNode,props){var name=props.name;if(props.type==='radio'&&name!=null){var queryRoot=rootNode;while(queryRoot.parentNode){queryRoot=queryRoot.parentNode;}// If `rootNode.form` was non-null, then we could try `form.elements`,
// but that sometimes behaves strangely in IE8. We could also try using
// `form.getElementsByName`, but that will only return direct children
// and won't include inputs that use the HTML5 `form=` attribute. Since
// the input might not even be in a form. It might not even be in the
// document. Let's just use the local `querySelectorAll` to ensure we don't
// miss anything.
var group=queryRoot.querySelectorAll('input[name='+JSON.stringify(''+name)+'][type="radio"]');for(var i=0;i<group.length;i++){var otherNode=group[i];if(otherNode===rootNode||otherNode.form!==rootNode.form){continue;}// This will throw if radio buttons rendered by different copies of React
// and the same name are rendered into the same form (same as #1939).
// That's probably okay; we don't support it just as we don't support
// mixing React radio buttons with non-React ones.
var otherProps=getFiberCurrentPropsFromNode$1(otherNode);!otherProps?invariant(false,'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.'):void 0;// We need update the tracked value on the named cousin since the value
// was changed but the input saw no event or value set
updateValueIfChanged(otherNode);// If this is a controlled radio button group, forcing the input that
// was previously checked to update will cause it to be come re-checked
// as appropriate.
updateWrapper(otherNode,otherProps);}}}// In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253
function setDefaultValue(node,type,value){if(// Focused number inputs synchronize on blur. See ChangeEventPlugin.js
type!=='number'||node.ownerDocument.activeElement!==node){if(value==null){node.defaultValue=toString(node._wrapperState.initialValue);}else if(node.defaultValue!==toString(value)){node.defaultValue=toString(value);}}}var eventTypes$1={change:{phasedRegistrationNames:{bubbled:'onChange',captured:'onChangeCapture'},dependencies:[TOP_BLUR,TOP_CHANGE,TOP_CLICK,TOP_FOCUS,TOP_INPUT,TOP_KEY_DOWN,TOP_KEY_UP,TOP_SELECTION_CHANGE]}};function createAndAccumulateChangeEvent(inst,nativeEvent,target){var event=SyntheticEvent.getPooled(eventTypes$1.change,inst,nativeEvent,target);event.type='change';// Flag this event loop as needing state restore.
enqueueStateRestore(target);accumulateTwoPhaseDispatches(event);return event;}/**
 * For IE shims
 */var activeElement=null;var activeElementInst=null;/**
 * SECTION: handle `change` event
 */function shouldUseChangeEvent(elem){var nodeName=elem.nodeName&&elem.nodeName.toLowerCase();return nodeName==='select'||nodeName==='input'&&elem.type==='file';}function manualDispatchChangeEvent(nativeEvent){var event=createAndAccumulateChangeEvent(activeElementInst,nativeEvent,getEventTarget(nativeEvent));// If change and propertychange bubbled, we'd just bind to it like all the
// other events and have it go through ReactBrowserEventEmitter. Since it
// doesn't, we manually listen for the events and so we have to enqueue and
// process the abstract event manually.
//
// Batching is necessary here in order to ensure that all event handlers run
// before the next rerender (including event handlers attached to ancestor
// elements instead of directly on the input). Without this, controlled
// components don't work properly in conjunction with event bubbling because
// the component is rerendered and the value reverted before all the event
// handlers can run. See https://github.com/facebook/react/issues/708.
batchedUpdates(runEventInBatch,event);}function runEventInBatch(event){runEventsInBatch(event);}function getInstIfValueChanged(targetInst){var targetNode=getNodeFromInstance$1(targetInst);if(updateValueIfChanged(targetNode)){return targetInst;}}function getTargetInstForChangeEvent(topLevelType,targetInst){if(topLevelType===TOP_CHANGE){return targetInst;}}/**
 * SECTION: handle `input` event
 */var isInputEventSupported=false;if(canUseDOM){// IE9 claims to support the input event but fails to trigger it when
// deleting text, so we ignore its input events.
isInputEventSupported=isEventSupported('input')&&(!document.documentMode||document.documentMode>9);}/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */function startWatchingForValueChange(target,targetInst){activeElement=target;activeElementInst=targetInst;activeElement.attachEvent('onpropertychange',handlePropertyChange);}/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */function stopWatchingForValueChange(){if(!activeElement){return;}activeElement.detachEvent('onpropertychange',handlePropertyChange);activeElement=null;activeElementInst=null;}/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */function handlePropertyChange(nativeEvent){if(nativeEvent.propertyName!=='value'){return;}if(getInstIfValueChanged(activeElementInst)){manualDispatchChangeEvent(nativeEvent);}}function handleEventsForInputEventPolyfill(topLevelType,target,targetInst){if(topLevelType===TOP_FOCUS){// In IE9, propertychange fires for most input events but is buggy and
// doesn't fire when text is deleted, but conveniently, selectionchange
// appears to fire in all of the remaining cases so we catch those and
// forward the event if the value has changed
// In either case, we don't want to call the event handler if the value
// is changed from JS so we redefine a setter for `.value` that updates
// our activeElementValue variable, allowing us to ignore those changes
//
// stopWatching() should be a noop here but we call it just in case we
// missed a blur event somehow.
stopWatchingForValueChange();startWatchingForValueChange(target,targetInst);}else if(topLevelType===TOP_BLUR){stopWatchingForValueChange();}}// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType,targetInst){if(topLevelType===TOP_SELECTION_CHANGE||topLevelType===TOP_KEY_UP||topLevelType===TOP_KEY_DOWN){// On the selectionchange event, the target is just document which isn't
// helpful for us so just check activeElement instead.
//
// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
// propertychange on the first input event after setting `value` from a
// script and fires only keydown, keypress, keyup. Catching keyup usually
// gets it and catching keydown lets us fire an event for the first
// keystroke if user does a key repeat (it'll be a little delayed: right
// before the second keystroke). Other input methods (e.g., paste) seem to
// fire selectionchange normally.
return getInstIfValueChanged(activeElementInst);}}/**
 * SECTION: handle `click` event
 */function shouldUseClickEvent(elem){// Use the `click` event to detect changes to checkbox and radio inputs.
// This approach works across all browsers, whereas `change` does not fire
// until `blur` in IE8.
var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(elem.type==='checkbox'||elem.type==='radio');}function getTargetInstForClickEvent(topLevelType,targetInst){if(topLevelType===TOP_CLICK){return getInstIfValueChanged(targetInst);}}function getTargetInstForInputOrChangeEvent(topLevelType,targetInst){if(topLevelType===TOP_INPUT||topLevelType===TOP_CHANGE){return getInstIfValueChanged(targetInst);}}function handleControlledInputBlur(node){var state=node._wrapperState;if(!state||!state.controlled||node.type!=='number'){return;}if(!disableInputAttributeSyncing){// If controlled, assign the value attribute to the current value on blur
setDefaultValue(node,'number',node.value);}}/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */var ChangeEventPlugin={eventTypes:eventTypes$1,_isInputEventSupported:isInputEventSupported,extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var targetNode=targetInst?getNodeFromInstance$1(targetInst):window;var getTargetInstFunc=void 0,handleEventFunc=void 0;if(shouldUseChangeEvent(targetNode)){getTargetInstFunc=getTargetInstForChangeEvent;}else if(isTextInputElement(targetNode)){if(isInputEventSupported){getTargetInstFunc=getTargetInstForInputOrChangeEvent;}else{getTargetInstFunc=getTargetInstForInputEventPolyfill;handleEventFunc=handleEventsForInputEventPolyfill;}}else if(shouldUseClickEvent(targetNode)){getTargetInstFunc=getTargetInstForClickEvent;}if(getTargetInstFunc){var inst=getTargetInstFunc(topLevelType,targetInst);if(inst){var event=createAndAccumulateChangeEvent(inst,nativeEvent,nativeEventTarget);return event;}}if(handleEventFunc){handleEventFunc(topLevelType,targetNode,targetInst);}// When blurring, set the value attribute for number inputs
if(topLevelType===TOP_BLUR){handleControlledInputBlur(targetNode);}}};/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */var DOMEventPluginOrder=['ResponderEventPlugin','SimpleEventPlugin','EnterLeaveEventPlugin','ChangeEventPlugin','SelectEventPlugin','BeforeInputEventPlugin'];var SyntheticUIEvent=SyntheticEvent.extend({view:null,detail:null});var modifierKeyToProp={Alt:'altKey',Control:'ctrlKey',Meta:'metaKey',Shift:'shiftKey'};// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.
/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */function modifierStateGetter(keyArg){var syntheticEvent=this;var nativeEvent=syntheticEvent.nativeEvent;if(nativeEvent.getModifierState){return nativeEvent.getModifierState(keyArg);}var keyProp=modifierKeyToProp[keyArg];return keyProp?!!nativeEvent[keyProp]:false;}function getEventModifierState(nativeEvent){return modifierStateGetter;}var previousScreenX=0;var previousScreenY=0;// Use flags to signal movementX/Y has already been set
var isMovementXSet=false;var isMovementYSet=false;/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticMouseEvent=SyntheticUIEvent.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:getEventModifierState,button:null,buttons:null,relatedTarget:function relatedTarget(event){return event.relatedTarget||(event.fromElement===event.srcElement?event.toElement:event.fromElement);},movementX:function movementX(event){if('movementX'in event){return event.movementX;}var screenX=previousScreenX;previousScreenX=event.screenX;if(!isMovementXSet){isMovementXSet=true;return 0;}return event.type==='mousemove'?event.screenX-screenX:0;},movementY:function movementY(event){if('movementY'in event){return event.movementY;}var screenY=previousScreenY;previousScreenY=event.screenY;if(!isMovementYSet){isMovementYSet=true;return 0;}return event.type==='mousemove'?event.screenY-screenY:0;}});/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */var SyntheticPointerEvent=SyntheticMouseEvent.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null});var eventTypes$2={mouseEnter:{registrationName:'onMouseEnter',dependencies:[TOP_MOUSE_OUT,TOP_MOUSE_OVER]},mouseLeave:{registrationName:'onMouseLeave',dependencies:[TOP_MOUSE_OUT,TOP_MOUSE_OVER]},pointerEnter:{registrationName:'onPointerEnter',dependencies:[TOP_POINTER_OUT,TOP_POINTER_OVER]},pointerLeave:{registrationName:'onPointerLeave',dependencies:[TOP_POINTER_OUT,TOP_POINTER_OVER]}};var EnterLeaveEventPlugin={eventTypes:eventTypes$2,/**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var isOverEvent=topLevelType===TOP_MOUSE_OVER||topLevelType===TOP_POINTER_OVER;var isOutEvent=topLevelType===TOP_MOUSE_OUT||topLevelType===TOP_POINTER_OUT;if(isOverEvent&&(nativeEvent.relatedTarget||nativeEvent.fromElement)){return null;}if(!isOutEvent&&!isOverEvent){// Must not be a mouse or pointer in or out - ignoring.
return null;}var win=void 0;if(nativeEventTarget.window===nativeEventTarget){// `nativeEventTarget` is probably a window object.
win=nativeEventTarget;}else{// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
var doc=nativeEventTarget.ownerDocument;if(doc){win=doc.defaultView||doc.parentWindow;}else{win=window;}}var from=void 0;var to=void 0;if(isOutEvent){from=targetInst;var related=nativeEvent.relatedTarget||nativeEvent.toElement;to=related?getClosestInstanceFromNode(related):null;}else{// Moving to a node from outside the window.
from=null;to=targetInst;}if(from===to){// Nothing pertains to our managed components.
return null;}var eventInterface=void 0,leaveEventType=void 0,enterEventType=void 0,eventTypePrefix=void 0;if(topLevelType===TOP_MOUSE_OUT||topLevelType===TOP_MOUSE_OVER){eventInterface=SyntheticMouseEvent;leaveEventType=eventTypes$2.mouseLeave;enterEventType=eventTypes$2.mouseEnter;eventTypePrefix='mouse';}else if(topLevelType===TOP_POINTER_OUT||topLevelType===TOP_POINTER_OVER){eventInterface=SyntheticPointerEvent;leaveEventType=eventTypes$2.pointerLeave;enterEventType=eventTypes$2.pointerEnter;eventTypePrefix='pointer';}var fromNode=from==null?win:getNodeFromInstance$1(from);var toNode=to==null?win:getNodeFromInstance$1(to);var leave=eventInterface.getPooled(leaveEventType,from,nativeEvent,nativeEventTarget);leave.type=eventTypePrefix+'leave';leave.target=fromNode;leave.relatedTarget=toNode;var enter=eventInterface.getPooled(enterEventType,to,nativeEvent,nativeEventTarget);enter.type=eventTypePrefix+'enter';enter.target=toNode;enter.relatedTarget=fromNode;accumulateEnterLeaveDispatches(leave,enter,from,to);return[leave,enter];}};/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */function is(x,y){return x===y&&(x!==0||1/x===1/y)||x!==x&&y!==y// eslint-disable-line no-self-compare
;}var hasOwnProperty$1=Object.prototype.hasOwnProperty;/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */function shallowEqual(objA,objB){if(is(objA,objB)){return true;}if((typeof objA==='undefined'?'undefined':_typeof(objA))!=='object'||objA===null||(typeof objB==='undefined'?'undefined':_typeof(objB))!=='object'||objB===null){return false;}var keysA=Object.keys(objA);var keysB=Object.keys(objB);if(keysA.length!==keysB.length){return false;}// Test for A's keys different from B.
for(var i=0;i<keysA.length;i++){if(!hasOwnProperty$1.call(objB,keysA[i])||!is(objA[keysA[i]],objB[keysA[i]])){return false;}}return true;}/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 *//**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */function get(key){return key._reactInternalFiber;}function has(key){return key._reactInternalFiber!==undefined;}function set(key,value){key._reactInternalFiber=value;}// Don't change these two values. They're used by React Dev Tools.
var NoEffect=/*              */0;var PerformedWork=/*         */1;// You can change the rest (and add more).
var Placement=/*             */2;var Update=/*                */4;var PlacementAndUpdate=/*    */6;var Deletion=/*              */8;var ContentReset=/*          */16;var Callback=/*              */32;var DidCapture=/*            */64;var Ref=/*                   */128;var Snapshot=/*              */256;var Passive=/*               */512;// Passive & Update & Callback & Ref & Snapshot
var LifecycleEffectMask=/*   */932;// Union of all host effects
var HostEffectMask=/*        */1023;var Incomplete=/*            */1024;var ShouldCapture=/*         */2048;var ReactCurrentOwner$1=ReactSharedInternals.ReactCurrentOwner;var MOUNTING=1;var MOUNTED=2;var UNMOUNTED=3;function isFiberMountedImpl(fiber){var node=fiber;if(!fiber.alternate){// If there is no alternate, this might be a new tree that isn't inserted
// yet. If it is, then it will have a pending insertion effect on it.
if((node.effectTag&Placement)!==NoEffect){return MOUNTING;}while(node.return){node=node.return;if((node.effectTag&Placement)!==NoEffect){return MOUNTING;}}}else{while(node.return){node=node.return;}}if(node.tag===HostRoot){// TODO: Check if this was a nested HostRoot when used with
// renderContainerIntoSubtree.
return MOUNTED;}// If we didn't hit the root, that means that we're in an disconnected tree
// that has been unmounted.
return UNMOUNTED;}function isFiberMounted(fiber){return isFiberMountedImpl(fiber)===MOUNTED;}function isMounted(component){{var owner=ReactCurrentOwner$1.current;if(owner!==null&&owner.tag===ClassComponent){var ownerFiber=owner;var instance=ownerFiber.stateNode;!instance._warnedAboutRefsInRender?warningWithoutStack$1(false,'%s is accessing isMounted inside its render() function. '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentName(ownerFiber.type)||'A component'):void 0;instance._warnedAboutRefsInRender=true;}}var fiber=get(component);if(!fiber){return false;}return isFiberMountedImpl(fiber)===MOUNTED;}function assertIsMounted(fiber){!(isFiberMountedImpl(fiber)===MOUNTED)?invariant(false,'Unable to find node on an unmounted component.'):void 0;}function findCurrentFiberUsingSlowPath(fiber){var alternate=fiber.alternate;if(!alternate){// If there is no alternate, then we only need to check if it is mounted.
var state=isFiberMountedImpl(fiber);!(state!==UNMOUNTED)?invariant(false,'Unable to find node on an unmounted component.'):void 0;if(state===MOUNTING){return null;}return fiber;}// If we have two possible branches, we'll walk backwards up to the root
// to see what path the root points to. On the way we may hit one of the
// special cases and we'll deal with them.
var a=fiber;var b=alternate;while(true){var parentA=a.return;var parentB=parentA?parentA.alternate:null;if(!parentA||!parentB){// We're at the root.
break;}// If both copies of the parent fiber point to the same child, we can
// assume that the child is current. This happens when we bailout on low
// priority: the bailed out fiber's child reuses the current child.
if(parentA.child===parentB.child){var child=parentA.child;while(child){if(child===a){// We've determined that A is the current branch.
assertIsMounted(parentA);return fiber;}if(child===b){// We've determined that B is the current branch.
assertIsMounted(parentA);return alternate;}child=child.sibling;}// We should never have an alternate for any mounting node. So the only
// way this could possibly happen is if this was unmounted, if at all.
invariant(false,'Unable to find node on an unmounted component.');}if(a.return!==b.return){// The return pointer of A and the return pointer of B point to different
// fibers. We assume that return pointers never criss-cross, so A must
// belong to the child set of A.return, and B must belong to the child
// set of B.return.
a=parentA;b=parentB;}else{// The return pointers point to the same fiber. We'll have to use the
// default, slow path: scan the child sets of each parent alternate to see
// which child belongs to which set.
//
// Search parent A's child set
var didFindChild=false;var _child=parentA.child;while(_child){if(_child===a){didFindChild=true;a=parentA;b=parentB;break;}if(_child===b){didFindChild=true;b=parentA;a=parentB;break;}_child=_child.sibling;}if(!didFindChild){// Search parent B's child set
_child=parentB.child;while(_child){if(_child===a){didFindChild=true;a=parentB;b=parentA;break;}if(_child===b){didFindChild=true;b=parentB;a=parentA;break;}_child=_child.sibling;}!didFindChild?invariant(false,'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'):void 0;}}!(a.alternate===b)?invariant(false,'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.'):void 0;}// If the root is not a host container, we're in a disconnected tree. I.e.
// unmounted.
!(a.tag===HostRoot)?invariant(false,'Unable to find node on an unmounted component.'):void 0;if(a.stateNode.current===a){// We've determined that A is the current branch.
return fiber;}// Otherwise B has to be current branch.
return alternate;}function findCurrentHostFiber(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent){return null;}// Next we'll drill down this component to find the first HostComponent/Text.
var node=currentParent;while(true){if(node.tag===HostComponent||node.tag===HostText){return node;}else if(node.child){node.child.return=node;node=node.child;continue;}if(node===currentParent){return null;}while(!node.sibling){if(!node.return||node.return===currentParent){return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}// Flow needs the return null here, but ESLint complains about it.
// eslint-disable-next-line no-unreachable
return null;}function findCurrentHostFiberWithNoPortals(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent){return null;}// Next we'll drill down this component to find the first HostComponent/Text.
var node=currentParent;while(true){if(node.tag===HostComponent||node.tag===HostText){return node;}else if(node.child&&node.tag!==HostPortal){node.child.return=node;node=node.child;continue;}if(node===currentParent){return null;}while(!node.sibling){if(!node.return||node.return===currentParent){return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}// Flow needs the return null here, but ESLint complains about it.
// eslint-disable-next-line no-unreachable
return null;}function addEventBubbleListener(element,eventType,listener){element.addEventListener(eventType,listener,false);}function addEventCaptureListener(element,eventType,listener){element.addEventListener(eventType,listener,true);}/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */var SyntheticAnimationEvent=SyntheticEvent.extend({animationName:null,elapsedTime:null,pseudoElement:null});/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */var SyntheticClipboardEvent=SyntheticEvent.extend({clipboardData:function clipboardData(event){return'clipboardData'in event?event.clipboardData:window.clipboardData;}});/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticFocusEvent=SyntheticUIEvent.extend({relatedTarget:null});/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */function getEventCharCode(nativeEvent){var charCode=void 0;var keyCode=nativeEvent.keyCode;if('charCode'in nativeEvent){charCode=nativeEvent.charCode;// FF does not set `charCode` for the Enter-key, check against `keyCode`.
if(charCode===0&&keyCode===13){charCode=13;}}else{// IE8 does not implement `charCode`, but `keyCode` has the correct value.
charCode=keyCode;}// IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
// report Enter as charCode 10 when ctrl is pressed.
if(charCode===10){charCode=13;}// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
// Must not discard the (non-)printable Enter-key.
if(charCode>=32||charCode===13){return charCode;}return 0;}/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */var normalizeKey={Esc:'Escape',Spacebar:' ',Left:'ArrowLeft',Up:'ArrowUp',Right:'ArrowRight',Down:'ArrowDown',Del:'Delete',Win:'OS',Menu:'ContextMenu',Apps:'ContextMenu',Scroll:'ScrollLock',MozPrintableKey:'Unidentified'};/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */var translateToKey={'8':'Backspace','9':'Tab','12':'Clear','13':'Enter','16':'Shift','17':'Control','18':'Alt','19':'Pause','20':'CapsLock','27':'Escape','32':' ','33':'PageUp','34':'PageDown','35':'End','36':'Home','37':'ArrowLeft','38':'ArrowUp','39':'ArrowRight','40':'ArrowDown','45':'Insert','46':'Delete','112':'F1','113':'F2','114':'F3','115':'F4','116':'F5','117':'F6','118':'F7','119':'F8','120':'F9','121':'F10','122':'F11','123':'F12','144':'NumLock','145':'ScrollLock','224':'Meta'};/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */function getEventKey(nativeEvent){if(nativeEvent.key){// Normalize inconsistent values reported by browsers due to
// implementations of a working draft specification.
// FireFox implements `key` but returns `MozPrintableKey` for all
// printable characters (normalized to `Unidentified`), ignore it.
var key=normalizeKey[nativeEvent.key]||nativeEvent.key;if(key!=='Unidentified'){return key;}}// Browser does not implement `key`, polyfill as much of it as we can.
if(nativeEvent.type==='keypress'){var charCode=getEventCharCode(nativeEvent);// The enter-key is technically both printable and non-printable and can
// thus be captured by `keypress`, no other non-printable key should.
return charCode===13?'Enter':String.fromCharCode(charCode);}if(nativeEvent.type==='keydown'||nativeEvent.type==='keyup'){// While user keyboard layout determines the actual meaning of each
// `keyCode` value, almost all function keys have a universal value.
return translateToKey[nativeEvent.keyCode]||'Unidentified';}return'';}/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticKeyboardEvent=SyntheticUIEvent.extend({key:getEventKey,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:getEventModifierState,// Legacy Interface
charCode:function charCode(event){// `charCode` is the result of a KeyPress event and represents the value of
// the actual printable character.
// KeyPress is deprecated, but its replacement is not yet final and not
// implemented in any major browser. Only KeyPress has charCode.
if(event.type==='keypress'){return getEventCharCode(event);}return 0;},keyCode:function keyCode(event){// `keyCode` is the result of a KeyDown/Up event and represents the value of
// physical keyboard key.
// The actual meaning of the value depends on the users' keyboard layout
// which cannot be detected. Assuming that it is a US keyboard layout
// provides a surprisingly accurate mapping for US and European users.
// Due to this, it is left to the user to implement at this time.
if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;},which:function which(event){// `which` is an alias for either `keyCode` or `charCode` depending on the
// type of the event.
if(event.type==='keypress'){return getEventCharCode(event);}if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;}});/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticDragEvent=SyntheticMouseEvent.extend({dataTransfer:null});/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */var SyntheticTouchEvent=SyntheticUIEvent.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:getEventModifierState});/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */var SyntheticTransitionEvent=SyntheticEvent.extend({propertyName:null,elapsedTime:null,pseudoElement:null});/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticWheelEvent=SyntheticMouseEvent.extend({deltaX:function deltaX(event){return'deltaX'in event?event.deltaX:// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
'wheelDeltaX'in event?-event.wheelDeltaX:0;},deltaY:function deltaY(event){return'deltaY'in event?event.deltaY:// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
'wheelDeltaY'in event?-event.wheelDeltaY:// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
'wheelDelta'in event?-event.wheelDelta:0;},deltaZ:null,// Browsers without "deltaMode" is reporting in raw wheel delta where one
// notch on the scroll is always +/- 120, roughly equivalent to pixels.
// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
deltaMode:null});/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */var interactiveEventTypeNames=[[TOP_BLUR,'blur'],[TOP_CANCEL,'cancel'],[TOP_CLICK,'click'],[TOP_CLOSE,'close'],[TOP_CONTEXT_MENU,'contextMenu'],[TOP_COPY,'copy'],[TOP_CUT,'cut'],[TOP_AUX_CLICK,'auxClick'],[TOP_DOUBLE_CLICK,'doubleClick'],[TOP_DRAG_END,'dragEnd'],[TOP_DRAG_START,'dragStart'],[TOP_DROP,'drop'],[TOP_FOCUS,'focus'],[TOP_INPUT,'input'],[TOP_INVALID,'invalid'],[TOP_KEY_DOWN,'keyDown'],[TOP_KEY_PRESS,'keyPress'],[TOP_KEY_UP,'keyUp'],[TOP_MOUSE_DOWN,'mouseDown'],[TOP_MOUSE_UP,'mouseUp'],[TOP_PASTE,'paste'],[TOP_PAUSE,'pause'],[TOP_PLAY,'play'],[TOP_POINTER_CANCEL,'pointerCancel'],[TOP_POINTER_DOWN,'pointerDown'],[TOP_POINTER_UP,'pointerUp'],[TOP_RATE_CHANGE,'rateChange'],[TOP_RESET,'reset'],[TOP_SEEKED,'seeked'],[TOP_SUBMIT,'submit'],[TOP_TOUCH_CANCEL,'touchCancel'],[TOP_TOUCH_END,'touchEnd'],[TOP_TOUCH_START,'touchStart'],[TOP_VOLUME_CHANGE,'volumeChange']];var nonInteractiveEventTypeNames=[[TOP_ABORT,'abort'],[TOP_ANIMATION_END,'animationEnd'],[TOP_ANIMATION_ITERATION,'animationIteration'],[TOP_ANIMATION_START,'animationStart'],[TOP_CAN_PLAY,'canPlay'],[TOP_CAN_PLAY_THROUGH,'canPlayThrough'],[TOP_DRAG,'drag'],[TOP_DRAG_ENTER,'dragEnter'],[TOP_DRAG_EXIT,'dragExit'],[TOP_DRAG_LEAVE,'dragLeave'],[TOP_DRAG_OVER,'dragOver'],[TOP_DURATION_CHANGE,'durationChange'],[TOP_EMPTIED,'emptied'],[TOP_ENCRYPTED,'encrypted'],[TOP_ENDED,'ended'],[TOP_ERROR,'error'],[TOP_GOT_POINTER_CAPTURE,'gotPointerCapture'],[TOP_LOAD,'load'],[TOP_LOADED_DATA,'loadedData'],[TOP_LOADED_METADATA,'loadedMetadata'],[TOP_LOAD_START,'loadStart'],[TOP_LOST_POINTER_CAPTURE,'lostPointerCapture'],[TOP_MOUSE_MOVE,'mouseMove'],[TOP_MOUSE_OUT,'mouseOut'],[TOP_MOUSE_OVER,'mouseOver'],[TOP_PLAYING,'playing'],[TOP_POINTER_MOVE,'pointerMove'],[TOP_POINTER_OUT,'pointerOut'],[TOP_POINTER_OVER,'pointerOver'],[TOP_PROGRESS,'progress'],[TOP_SCROLL,'scroll'],[TOP_SEEKING,'seeking'],[TOP_STALLED,'stalled'],[TOP_SUSPEND,'suspend'],[TOP_TIME_UPDATE,'timeUpdate'],[TOP_TOGGLE,'toggle'],[TOP_TOUCH_MOVE,'touchMove'],[TOP_TRANSITION_END,'transitionEnd'],[TOP_WAITING,'waiting'],[TOP_WHEEL,'wheel']];var eventTypes$4={};var topLevelEventsToDispatchConfig={};function addEventTypeNameToConfig(_ref,isInteractive){var topEvent=_ref[0],event=_ref[1];var capitalizedEvent=event[0].toUpperCase()+event.slice(1);var onEvent='on'+capitalizedEvent;var type={phasedRegistrationNames:{bubbled:onEvent,captured:onEvent+'Capture'},dependencies:[topEvent],isInteractive:isInteractive};eventTypes$4[event]=type;topLevelEventsToDispatchConfig[topEvent]=type;}interactiveEventTypeNames.forEach(function(eventTuple){addEventTypeNameToConfig(eventTuple,true);});nonInteractiveEventTypeNames.forEach(function(eventTuple){addEventTypeNameToConfig(eventTuple,false);});// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes=[TOP_ABORT,TOP_CANCEL,TOP_CAN_PLAY,TOP_CAN_PLAY_THROUGH,TOP_CLOSE,TOP_DURATION_CHANGE,TOP_EMPTIED,TOP_ENCRYPTED,TOP_ENDED,TOP_ERROR,TOP_INPUT,TOP_INVALID,TOP_LOAD,TOP_LOADED_DATA,TOP_LOADED_METADATA,TOP_LOAD_START,TOP_PAUSE,TOP_PLAY,TOP_PLAYING,TOP_PROGRESS,TOP_RATE_CHANGE,TOP_RESET,TOP_SEEKED,TOP_SEEKING,TOP_STALLED,TOP_SUBMIT,TOP_SUSPEND,TOP_TIME_UPDATE,TOP_TOGGLE,TOP_VOLUME_CHANGE,TOP_WAITING];var SimpleEventPlugin={eventTypes:eventTypes$4,isInteractiveTopLevelEventType:function isInteractiveTopLevelEventType(topLevelType){var config=topLevelEventsToDispatchConfig[topLevelType];return config!==undefined&&config.isInteractive===true;},extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var dispatchConfig=topLevelEventsToDispatchConfig[topLevelType];if(!dispatchConfig){return null;}var EventConstructor=void 0;switch(topLevelType){case TOP_KEY_PRESS:// Firefox creates a keypress event for function keys too. This removes
// the unwanted keypress events. Enter is however both printable and
// non-printable. One would expect Tab to be as well (but it isn't).
if(getEventCharCode(nativeEvent)===0){return null;}/* falls through */case TOP_KEY_DOWN:case TOP_KEY_UP:EventConstructor=SyntheticKeyboardEvent;break;case TOP_BLUR:case TOP_FOCUS:EventConstructor=SyntheticFocusEvent;break;case TOP_CLICK:// Firefox creates a click event on right mouse clicks. This removes the
// unwanted click events.
if(nativeEvent.button===2){return null;}/* falls through */case TOP_AUX_CLICK:case TOP_DOUBLE_CLICK:case TOP_MOUSE_DOWN:case TOP_MOUSE_MOVE:case TOP_MOUSE_UP:// TODO: Disabled elements should not respond to mouse events
/* falls through */case TOP_MOUSE_OUT:case TOP_MOUSE_OVER:case TOP_CONTEXT_MENU:EventConstructor=SyntheticMouseEvent;break;case TOP_DRAG:case TOP_DRAG_END:case TOP_DRAG_ENTER:case TOP_DRAG_EXIT:case TOP_DRAG_LEAVE:case TOP_DRAG_OVER:case TOP_DRAG_START:case TOP_DROP:EventConstructor=SyntheticDragEvent;break;case TOP_TOUCH_CANCEL:case TOP_TOUCH_END:case TOP_TOUCH_MOVE:case TOP_TOUCH_START:EventConstructor=SyntheticTouchEvent;break;case TOP_ANIMATION_END:case TOP_ANIMATION_ITERATION:case TOP_ANIMATION_START:EventConstructor=SyntheticAnimationEvent;break;case TOP_TRANSITION_END:EventConstructor=SyntheticTransitionEvent;break;case TOP_SCROLL:EventConstructor=SyntheticUIEvent;break;case TOP_WHEEL:EventConstructor=SyntheticWheelEvent;break;case TOP_COPY:case TOP_CUT:case TOP_PASTE:EventConstructor=SyntheticClipboardEvent;break;case TOP_GOT_POINTER_CAPTURE:case TOP_LOST_POINTER_CAPTURE:case TOP_POINTER_CANCEL:case TOP_POINTER_DOWN:case TOP_POINTER_MOVE:case TOP_POINTER_OUT:case TOP_POINTER_OVER:case TOP_POINTER_UP:EventConstructor=SyntheticPointerEvent;break;default:{if(knownHTMLTopLevelTypes.indexOf(topLevelType)===-1){warningWithoutStack$1(false,'SimpleEventPlugin: Unhandled event type, `%s`. This warning '+'is likely caused by a bug in React. Please file an issue.',topLevelType);}}// HTML Events
// @see http://www.w3.org/TR/html5/index.html#events-0
EventConstructor=SyntheticEvent;break;}var event=EventConstructor.getPooled(dispatchConfig,targetInst,nativeEvent,nativeEventTarget);accumulateTwoPhaseDispatches(event);return event;}};var isInteractiveTopLevelEventType=SimpleEventPlugin.isInteractiveTopLevelEventType;var CALLBACK_BOOKKEEPING_POOL_SIZE=10;var callbackBookkeepingPool=[];/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */function findRootContainerNode(inst){// TODO: It may be a good idea to cache this to prevent unnecessary DOM
// traversal, but caching is difficult to do correctly without using a
// mutation observer to listen for all DOM changes.
while(inst.return){inst=inst.return;}if(inst.tag!==HostRoot){// This can happen if we're in a detached tree.
return null;}return inst.stateNode.containerInfo;}// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType,nativeEvent,targetInst){if(callbackBookkeepingPool.length){var instance=callbackBookkeepingPool.pop();instance.topLevelType=topLevelType;instance.nativeEvent=nativeEvent;instance.targetInst=targetInst;return instance;}return{topLevelType:topLevelType,nativeEvent:nativeEvent,targetInst:targetInst,ancestors:[]};}function releaseTopLevelCallbackBookKeeping(instance){instance.topLevelType=null;instance.nativeEvent=null;instance.targetInst=null;instance.ancestors.length=0;if(callbackBookkeepingPool.length<CALLBACK_BOOKKEEPING_POOL_SIZE){callbackBookkeepingPool.push(instance);}}function handleTopLevel(bookKeeping){var targetInst=bookKeeping.targetInst;// Loop through the hierarchy, in case there's any nested components.
// It's important that we build the array of ancestors before calling any
// event handlers, because event handlers can modify the DOM, leading to
// inconsistencies with ReactMount's node cache. See #1105.
var ancestor=targetInst;do{if(!ancestor){bookKeeping.ancestors.push(ancestor);break;}var root=findRootContainerNode(ancestor);if(!root){break;}bookKeeping.ancestors.push(ancestor);ancestor=getClosestInstanceFromNode(root);}while(ancestor);for(var i=0;i<bookKeeping.ancestors.length;i++){targetInst=bookKeeping.ancestors[i];runExtractedEventsInBatch(bookKeeping.topLevelType,targetInst,bookKeeping.nativeEvent,getEventTarget(bookKeeping.nativeEvent));}}// TODO: can we stop exporting these?
var _enabled=true;function setEnabled(enabled){_enabled=!!enabled;}function isEnabled(){return _enabled;}/**
 * Traps top-level events by using event bubbling.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */function trapBubbledEvent(topLevelType,element){if(!element){return null;}var dispatch=isInteractiveTopLevelEventType(topLevelType)?dispatchInteractiveEvent:dispatchEvent;addEventBubbleListener(element,getRawEventName(topLevelType),// Check if interactive and wrap in interactiveUpdates
dispatch.bind(null,topLevelType));}/**
 * Traps a top-level event by using event capturing.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */function trapCapturedEvent(topLevelType,element){if(!element){return null;}var dispatch=isInteractiveTopLevelEventType(topLevelType)?dispatchInteractiveEvent:dispatchEvent;addEventCaptureListener(element,getRawEventName(topLevelType),// Check if interactive and wrap in interactiveUpdates
dispatch.bind(null,topLevelType));}function dispatchInteractiveEvent(topLevelType,nativeEvent){interactiveUpdates(dispatchEvent,topLevelType,nativeEvent);}function dispatchEvent(topLevelType,nativeEvent){if(!_enabled){return;}var nativeEventTarget=getEventTarget(nativeEvent);var targetInst=getClosestInstanceFromNode(nativeEventTarget);if(targetInst!==null&&typeof targetInst.tag==='number'&&!isFiberMounted(targetInst)){// If we get an event (ex: img onload) before committing that
// component's mount, ignore it for now (that is, treat it as if it was an
// event on a non-React tree). We might also consider queueing events and
// dispatching them after the mount.
targetInst=null;}var bookKeeping=getTopLevelCallbackBookKeeping(topLevelType,nativeEvent,targetInst);try{// Event queue being processed in the same cycle allows
// `preventDefault`.
batchedUpdates(handleTopLevel,bookKeeping);}finally{releaseTopLevelCallbackBookKeeping(bookKeeping);}}/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */var alreadyListeningTo={};var reactTopListenersCounter=0;/**
 * To ensure no conflicts with other potential React instances on the page
 */var topListenersIDKey='_reactListenersID'+(''+Math.random()).slice(2);function getListeningForDocument(mountAt){// In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
// directly.
if(!Object.prototype.hasOwnProperty.call(mountAt,topListenersIDKey)){mountAt[topListenersIDKey]=reactTopListenersCounter++;alreadyListeningTo[mountAt[topListenersIDKey]]={};}return alreadyListeningTo[mountAt[topListenersIDKey]];}/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */function listenTo(registrationName,mountAt){var isListening=getListeningForDocument(mountAt);var dependencies=registrationNameDependencies[registrationName];for(var i=0;i<dependencies.length;i++){var dependency=dependencies[i];if(!(isListening.hasOwnProperty(dependency)&&isListening[dependency])){switch(dependency){case TOP_SCROLL:trapCapturedEvent(TOP_SCROLL,mountAt);break;case TOP_FOCUS:case TOP_BLUR:trapCapturedEvent(TOP_FOCUS,mountAt);trapCapturedEvent(TOP_BLUR,mountAt);// We set the flag for a single dependency later in this function,
// but this ensures we mark both as attached rather than just one.
isListening[TOP_BLUR]=true;isListening[TOP_FOCUS]=true;break;case TOP_CANCEL:case TOP_CLOSE:if(isEventSupported(getRawEventName(dependency))){trapCapturedEvent(dependency,mountAt);}break;case TOP_INVALID:case TOP_SUBMIT:case TOP_RESET:// We listen to them on the target DOM elements.
// Some of them bubble so we don't want them to fire twice.
break;default:// By default, listen on the top level to all non-media events.
// Media events don't bubble so adding the listener wouldn't do anything.
var isMediaEvent=mediaEventTypes.indexOf(dependency)!==-1;if(!isMediaEvent){trapBubbledEvent(dependency,mountAt);}break;}isListening[dependency]=true;}}}function isListeningToAllDependencies(registrationName,mountAt){var isListening=getListeningForDocument(mountAt);var dependencies=registrationNameDependencies[registrationName];for(var i=0;i<dependencies.length;i++){var dependency=dependencies[i];if(!(isListening.hasOwnProperty(dependency)&&isListening[dependency])){return false;}}return true;}function getActiveElement(doc){doc=doc||(typeof document!=='undefined'?document:undefined);if(typeof doc==='undefined'){return null;}try{return doc.activeElement||doc.body;}catch(e){return doc.body;}}/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */function getLeafNode(node){while(node&&node.firstChild){node=node.firstChild;}return node;}/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */function getSiblingNode(node){while(node){if(node.nextSibling){return node.nextSibling;}node=node.parentNode;}}/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */function getNodeForCharacterOffset(root,offset){var node=getLeafNode(root);var nodeStart=0;var nodeEnd=0;while(node){if(node.nodeType===TEXT_NODE){nodeEnd=nodeStart+node.textContent.length;if(nodeStart<=offset&&nodeEnd>=offset){return{node:node,offset:offset-nodeStart};}nodeStart=nodeEnd;}node=getLeafNode(getSiblingNode(node));}}/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */function getOffsets(outerNode){var ownerDocument=outerNode.ownerDocument;var win=ownerDocument&&ownerDocument.defaultView||window;var selection=win.getSelection&&win.getSelection();if(!selection||selection.rangeCount===0){return null;}var anchorNode=selection.anchorNode,anchorOffset=selection.anchorOffset,focusNode=selection.focusNode,focusOffset=selection.focusOffset;// In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
// up/down buttons on an <input type="number">. Anonymous divs do not seem to
// expose properties, triggering a "Permission denied error" if any of its
// properties are accessed. The only seemingly possible way to avoid erroring
// is to access a property that typically works for non-anonymous divs and
// catch any error that may otherwise arise. See
// https://bugzilla.mozilla.org/show_bug.cgi?id=208427
try{/* eslint-disable no-unused-expressions */anchorNode.nodeType;focusNode.nodeType;/* eslint-enable no-unused-expressions */}catch(e){return null;}return getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset);}/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */function getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset){var length=0;var start=-1;var end=-1;var indexWithinAnchor=0;var indexWithinFocus=0;var node=outerNode;var parentNode=null;outer:while(true){var next=null;while(true){if(node===anchorNode&&(anchorOffset===0||node.nodeType===TEXT_NODE)){start=length+anchorOffset;}if(node===focusNode&&(focusOffset===0||node.nodeType===TEXT_NODE)){end=length+focusOffset;}if(node.nodeType===TEXT_NODE){length+=node.nodeValue.length;}if((next=node.firstChild)===null){break;}// Moving from `node` to its first child `next`.
parentNode=node;node=next;}while(true){if(node===outerNode){// If `outerNode` has children, this is always the second time visiting
// it. If it has no children, this is still the first loop, and the only
// valid selection is anchorNode and focusNode both equal to this node
// and both offsets 0, in which case we will have handled above.
break outer;}if(parentNode===anchorNode&&++indexWithinAnchor===anchorOffset){start=length;}if(parentNode===focusNode&&++indexWithinFocus===focusOffset){end=length;}if((next=node.nextSibling)!==null){break;}node=parentNode;parentNode=node.parentNode;}// Moving from `node` to its next sibling `next`.
node=next;}if(start===-1||end===-1){// This should never happen. (Would happen if the anchor/focus nodes aren't
// actually inside the passed-in node.)
return null;}return{start:start,end:end};}/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */function setOffsets(node,offsets){var doc=node.ownerDocument||document;var win=doc&&doc.defaultView||window;// Edge fails with "Object expected" in some scenarios.
// (For instance: TinyMCE editor used in a list component that supports pasting to add more,
// fails when pasting 100+ items)
if(!win.getSelection){return;}var selection=win.getSelection();var length=node.textContent.length;var start=Math.min(offsets.start,length);var end=offsets.end===undefined?start:Math.min(offsets.end,length);// IE 11 uses modern selection, but doesn't support the extend method.
// Flip backward selections, so we can set with a single range.
if(!selection.extend&&start>end){var temp=end;end=start;start=temp;}var startMarker=getNodeForCharacterOffset(node,start);var endMarker=getNodeForCharacterOffset(node,end);if(startMarker&&endMarker){if(selection.rangeCount===1&&selection.anchorNode===startMarker.node&&selection.anchorOffset===startMarker.offset&&selection.focusNode===endMarker.node&&selection.focusOffset===endMarker.offset){return;}var range=doc.createRange();range.setStart(startMarker.node,startMarker.offset);selection.removeAllRanges();if(start>end){selection.addRange(range);selection.extend(endMarker.node,endMarker.offset);}else{range.setEnd(endMarker.node,endMarker.offset);selection.addRange(range);}}}function isTextNode(node){return node&&node.nodeType===TEXT_NODE;}function containsNode(outerNode,innerNode){if(!outerNode||!innerNode){return false;}else if(outerNode===innerNode){return true;}else if(isTextNode(outerNode)){return false;}else if(isTextNode(innerNode)){return containsNode(outerNode,innerNode.parentNode);}else if('contains'in outerNode){return outerNode.contains(innerNode);}else if(outerNode.compareDocumentPosition){return!!(outerNode.compareDocumentPosition(innerNode)&16);}else{return false;}}function isInDocument(node){return node&&node.ownerDocument&&containsNode(node.ownerDocument.documentElement,node);}function isSameOriginFrame(iframe){try{// Accessing the contentDocument of a HTMLIframeElement can cause the browser
// to throw, e.g. if it has a cross-origin src attribute.
// Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
// iframe.contentDocument.defaultView;
// A safety way is to access one of the cross origin properties: Window or Location
// Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
// https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
return typeof iframe.contentWindow.location.href==='string';}catch(err){return false;}}function getActiveElementDeep(){var win=window;var element=getActiveElement();while(element instanceof win.HTMLIFrameElement){if(isSameOriginFrame(element)){win=element.contentWindow;}else{return element;}element=getActiveElement(win.document);}return element;}/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 *//**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */function hasSelectionCapabilities(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();return nodeName&&(nodeName==='input'&&(elem.type==='text'||elem.type==='search'||elem.type==='tel'||elem.type==='url'||elem.type==='password')||nodeName==='textarea'||elem.contentEditable==='true');}function getSelectionInformation(){var focusedElem=getActiveElementDeep();return{focusedElem:focusedElem,selectionRange:hasSelectionCapabilities(focusedElem)?getSelection$1(focusedElem):null};}/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */function restoreSelection(priorSelectionInformation){var curFocusedElem=getActiveElementDeep();var priorFocusedElem=priorSelectionInformation.focusedElem;var priorSelectionRange=priorSelectionInformation.selectionRange;if(curFocusedElem!==priorFocusedElem&&isInDocument(priorFocusedElem)){if(priorSelectionRange!==null&&hasSelectionCapabilities(priorFocusedElem)){setSelection(priorFocusedElem,priorSelectionRange);}// Focusing a node can change the scroll position, which is undesirable
var ancestors=[];var ancestor=priorFocusedElem;while(ancestor=ancestor.parentNode){if(ancestor.nodeType===ELEMENT_NODE){ancestors.push({element:ancestor,left:ancestor.scrollLeft,top:ancestor.scrollTop});}}if(typeof priorFocusedElem.focus==='function'){priorFocusedElem.focus();}for(var i=0;i<ancestors.length;i++){var info=ancestors[i];info.element.scrollLeft=info.left;info.element.scrollTop=info.top;}}}/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */function getSelection$1(input){var selection=void 0;if('selectionStart'in input){// Modern browser with input or textarea.
selection={start:input.selectionStart,end:input.selectionEnd};}else{// Content editable or old IE textarea.
selection=getOffsets(input);}return selection||{start:0,end:0};}/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */function setSelection(input,offsets){var start=offsets.start,end=offsets.end;if(end===undefined){end=start;}if('selectionStart'in input){input.selectionStart=start;input.selectionEnd=Math.min(end,input.value.length);}else{setOffsets(input,offsets);}}var skipSelectionChangeEvent=canUseDOM&&'documentMode'in document&&document.documentMode<=11;var eventTypes$3={select:{phasedRegistrationNames:{bubbled:'onSelect',captured:'onSelectCapture'},dependencies:[TOP_BLUR,TOP_CONTEXT_MENU,TOP_DRAG_END,TOP_FOCUS,TOP_KEY_DOWN,TOP_KEY_UP,TOP_MOUSE_DOWN,TOP_MOUSE_UP,TOP_SELECTION_CHANGE]}};var activeElement$1=null;var activeElementInst$1=null;var lastSelection=null;var mouseDown=false;/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */function getSelection(node){if('selectionStart'in node&&hasSelectionCapabilities(node)){return{start:node.selectionStart,end:node.selectionEnd};}else{var win=node.ownerDocument&&node.ownerDocument.defaultView||window;var selection=win.getSelection();return{anchorNode:selection.anchorNode,anchorOffset:selection.anchorOffset,focusNode:selection.focusNode,focusOffset:selection.focusOffset};}}/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */function getEventTargetDocument(eventTarget){return eventTarget.window===eventTarget?eventTarget.document:eventTarget.nodeType===DOCUMENT_NODE?eventTarget:eventTarget.ownerDocument;}/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */function constructSelectEvent(nativeEvent,nativeEventTarget){// Ensure we have the right element, and that the user is not dragging a
// selection (this matches native `select` event behavior). In HTML5, select
// fires only on input and textarea thus if there's no focused element we
// won't dispatch.
var doc=getEventTargetDocument(nativeEventTarget);if(mouseDown||activeElement$1==null||activeElement$1!==getActiveElement(doc)){return null;}// Only fire when selection has actually changed.
var currentSelection=getSelection(activeElement$1);if(!lastSelection||!shallowEqual(lastSelection,currentSelection)){lastSelection=currentSelection;var syntheticEvent=SyntheticEvent.getPooled(eventTypes$3.select,activeElementInst$1,nativeEvent,nativeEventTarget);syntheticEvent.type='select';syntheticEvent.target=activeElement$1;accumulateTwoPhaseDispatches(syntheticEvent);return syntheticEvent;}return null;}/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */var SelectEventPlugin={eventTypes:eventTypes$3,extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var doc=getEventTargetDocument(nativeEventTarget);// Track whether all listeners exists for this plugin. If none exist, we do
// not extract events. See #3639.
if(!doc||!isListeningToAllDependencies('onSelect',doc)){return null;}var targetNode=targetInst?getNodeFromInstance$1(targetInst):window;switch(topLevelType){// Track the input node that has focus.
case TOP_FOCUS:if(isTextInputElement(targetNode)||targetNode.contentEditable==='true'){activeElement$1=targetNode;activeElementInst$1=targetInst;lastSelection=null;}break;case TOP_BLUR:activeElement$1=null;activeElementInst$1=null;lastSelection=null;break;// Don't fire the event while the user is dragging. This matches the
// semantics of the native select event.
case TOP_MOUSE_DOWN:mouseDown=true;break;case TOP_CONTEXT_MENU:case TOP_MOUSE_UP:case TOP_DRAG_END:mouseDown=false;return constructSelectEvent(nativeEvent,nativeEventTarget);// Chrome and IE fire non-standard event when selection is changed (and
// sometimes when it hasn't). IE's event fires out of order with respect
// to key and input events on deletion, so we discard it.
//
// Firefox doesn't support selectionchange, so check selection status
// after each key entry. The selection changes after keydown and before
// keyup, but we check on keydown as well in the case of holding down a
// key, when multiple keydown events are fired but only one keyup is.
// This is also our approach for IE handling, for the reason above.
case TOP_SELECTION_CHANGE:if(skipSelectionChangeEvent){break;}// falls through
case TOP_KEY_DOWN:case TOP_KEY_UP:return constructSelectEvent(nativeEvent,nativeEventTarget);}return null;}};/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */injection.injectEventPluginOrder(DOMEventPluginOrder);setComponentTree(getFiberCurrentPropsFromNode$1,getInstanceFromNode$1,getNodeFromInstance$1);/**
 * Some important event plugins included by default (without having to require
 * them).
 */injection.injectEventPluginsByName({SimpleEventPlugin:SimpleEventPlugin,EnterLeaveEventPlugin:EnterLeaveEventPlugin,ChangeEventPlugin:ChangeEventPlugin,SelectEventPlugin:SelectEventPlugin,BeforeInputEventPlugin:BeforeInputEventPlugin});var didWarnSelectedSetOnOption=false;var didWarnInvalidChild=false;function flattenChildren(children){var content='';// Flatten children. We'll warn if they are invalid
// during validateProps() which runs for hydration too.
// Note that this would throw on non-element objects.
// Elements are stringified (which is normally irrelevant
// but matters for <fbt>).
React.Children.forEach(children,function(child){if(child==null){return;}content+=child;// Note: we don't warn about invalid children here.
// Instead, this is done separately below so that
// it happens during the hydration codepath too.
});return content;}/**
 * Implements an <option> host component that warns when `selected` is set.
 */function validateProps(element,props){{// This mirrors the codepath above, but runs for hydration too.
// Warn about invalid children here so that client and hydration are consistent.
// TODO: this seems like it could cause a DEV-only throw for hydration
// if children contains a non-element object. We should try to avoid that.
if(_typeof(props.children)==='object'&&props.children!==null){React.Children.forEach(props.children,function(child){if(child==null){return;}if(typeof child==='string'||typeof child==='number'){return;}if(typeof child.type!=='string'){return;}if(!didWarnInvalidChild){didWarnInvalidChild=true;warning$1(false,'Only strings and numbers are supported as <option> children.');}});}// TODO: Remove support for `selected` in <option>.
if(props.selected!=null&&!didWarnSelectedSetOnOption){warning$1(false,'Use the `defaultValue` or `value` props on <select> instead of '+'setting `selected` on <option>.');didWarnSelectedSetOnOption=true;}}}function postMountWrapper$1(element,props){// value="" should make a value attribute (#6219)
if(props.value!=null){element.setAttribute('value',toString(getToStringValue(props.value)));}}function getHostProps$1(element,props){var hostProps=_assign({children:undefined},props);var content=flattenChildren(props.children);if(content){hostProps.children=content;}return hostProps;}// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue$1=void 0;{didWarnValueDefaultValue$1=false;}function getDeclarationErrorAddendum(){var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){return'\n\nCheck the render method of `'+ownerName+'`.';}return'';}var valuePropNames=['value','defaultValue'];/**
 * Validation function for `value` and `defaultValue`.
 */function checkSelectPropTypes(props){ReactControlledValuePropTypes.checkPropTypes('select',props);for(var i=0;i<valuePropNames.length;i++){var propName=valuePropNames[i];if(props[propName]==null){continue;}var isArray=Array.isArray(props[propName]);if(props.multiple&&!isArray){warning$1(false,'The `%s` prop supplied to <select> must be an array if '+'`multiple` is true.%s',propName,getDeclarationErrorAddendum());}else if(!props.multiple&&isArray){warning$1(false,'The `%s` prop supplied to <select> must be a scalar '+'value if `multiple` is false.%s',propName,getDeclarationErrorAddendum());}}}function updateOptions(node,multiple,propValue,setDefaultSelected){var options=node.options;if(multiple){var selectedValues=propValue;var selectedValue={};for(var i=0;i<selectedValues.length;i++){// Prefix to avoid chaos with special keys.
selectedValue['$'+selectedValues[i]]=true;}for(var _i=0;_i<options.length;_i++){var selected=selectedValue.hasOwnProperty('$'+options[_i].value);if(options[_i].selected!==selected){options[_i].selected=selected;}if(selected&&setDefaultSelected){options[_i].defaultSelected=true;}}}else{// Do not set `select.value` as exact behavior isn't consistent across all
// browsers for all cases.
var _selectedValue=toString(getToStringValue(propValue));var defaultSelected=null;for(var _i2=0;_i2<options.length;_i2++){if(options[_i2].value===_selectedValue){options[_i2].selected=true;if(setDefaultSelected){options[_i2].defaultSelected=true;}return;}if(defaultSelected===null&&!options[_i2].disabled){defaultSelected=options[_i2];}}if(defaultSelected!==null){defaultSelected.selected=true;}}}/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */function getHostProps$2(element,props){return _assign({},props,{value:undefined});}function initWrapperState$1(element,props){var node=element;{checkSelectPropTypes(props);}node._wrapperState={wasMultiple:!!props.multiple};{if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue$1){warning$1(false,'Select elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled select '+'element and remove one of these props. More info: '+'https://fb.me/react-controlled-components');didWarnValueDefaultValue$1=true;}}}function postMountWrapper$2(element,props){var node=element;node.multiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}}function postUpdateWrapper(element,props){var node=element;var wasMultiple=node._wrapperState.wasMultiple;node._wrapperState.wasMultiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(wasMultiple!==!!props.multiple){// For simplicity, reapply `defaultValue` if `multiple` is toggled.
if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}else{// Revert the select back to its default unselected state.
updateOptions(node,!!props.multiple,props.multiple?[]:'',false);}}}function restoreControlledState$2(element,props){var node=element;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}}var didWarnValDefaultVal=false;/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */function getHostProps$3(element,props){var node=element;!(props.dangerouslySetInnerHTML==null)?invariant(false,'`dangerouslySetInnerHTML` does not make sense on <textarea>.'):void 0;// Always set children to the same thing. In IE9, the selection range will
// get reset if `textContent` is mutated.  We could add a check in setTextContent
// to only set the value if/when the value differs from the node value (which would
// completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
// solution. The value can be a boolean or object so that's why it's forced
// to be a string.
var hostProps=_assign({},props,{value:undefined,defaultValue:undefined,children:toString(node._wrapperState.initialValue)});return hostProps;}function initWrapperState$2(element,props){var node=element;{ReactControlledValuePropTypes.checkPropTypes('textarea',props);if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValDefaultVal){warning$1(false,'%s contains a textarea with both value and defaultValue props. '+'Textarea elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled textarea '+'and remove one of these props. More info: '+'https://fb.me/react-controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnValDefaultVal=true;}}var initialValue=props.value;// Only bother fetching default value if we're going to use it
if(initialValue==null){var defaultValue=props.defaultValue;// TODO (yungsters): Remove support for children content in <textarea>.
var children=props.children;if(children!=null){{warning$1(false,'Use the `defaultValue` or `value` props instead of setting '+'children on <textarea>.');}!(defaultValue==null)?invariant(false,'If you supply `defaultValue` on a <textarea>, do not pass children.'):void 0;if(Array.isArray(children)){!(children.length<=1)?invariant(false,'<textarea> can only have at most one child.'):void 0;children=children[0];}defaultValue=children;}if(defaultValue==null){defaultValue='';}initialValue=defaultValue;}node._wrapperState={initialValue:getToStringValue(initialValue)};}function updateWrapper$1(element,props){var node=element;var value=getToStringValue(props.value);var defaultValue=getToStringValue(props.defaultValue);if(value!=null){// Cast `value` to a string to ensure the value is set correctly. While
// browsers typically do this as necessary, jsdom doesn't.
var newValue=toString(value);// To avoid side effects (such as losing text selection), only set value if changed
if(newValue!==node.value){node.value=newValue;}if(props.defaultValue==null&&node.defaultValue!==newValue){node.defaultValue=newValue;}}if(defaultValue!=null){node.defaultValue=toString(defaultValue);}}function postMountWrapper$3(element,props){var node=element;// This is in postMount because we need access to the DOM node, which is not
// available until after the component has mounted.
var textContent=node.textContent;// Only set node.value if textContent is equal to the expected
// initial value. In IE10/IE11 there is a bug where the placeholder attribute
// will populate textContent as well.
// https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
if(textContent===node._wrapperState.initialValue){node.value=textContent;}}function restoreControlledState$3(element,props){// DOM component is still mounted; update
updateWrapper$1(element,props);}var HTML_NAMESPACE$1='http://www.w3.org/1999/xhtml';var MATH_NAMESPACE='http://www.w3.org/1998/Math/MathML';var SVG_NAMESPACE='http://www.w3.org/2000/svg';var Namespaces={html:HTML_NAMESPACE$1,mathml:MATH_NAMESPACE,svg:SVG_NAMESPACE};// Assumes there is no parent namespace.
function getIntrinsicNamespace(type){switch(type){case'svg':return SVG_NAMESPACE;case'math':return MATH_NAMESPACE;default:return HTML_NAMESPACE$1;}}function getChildNamespace(parentNamespace,type){if(parentNamespace==null||parentNamespace===HTML_NAMESPACE$1){// No (or default) parent namespace: potential entry point.
return getIntrinsicNamespace(type);}if(parentNamespace===SVG_NAMESPACE&&type==='foreignObject'){// We're leaving SVG.
return HTML_NAMESPACE$1;}// By default, pass namespace below.
return parentNamespace;}/* globals MSApp *//**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */var createMicrosoftUnsafeLocalFunction=function createMicrosoftUnsafeLocalFunction(func){if(typeof MSApp!=='undefined'&&MSApp.execUnsafeLocalFunction){return function(arg0,arg1,arg2,arg3){MSApp.execUnsafeLocalFunction(function(){return func(arg0,arg1,arg2,arg3);});};}else{return func;}};// SVG temp container for IE lacking innerHTML
var reusableSVGContainer=void 0;/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */var setInnerHTML=createMicrosoftUnsafeLocalFunction(function(node,html){// IE does not have innerHTML for SVG nodes, so instead we inject the
// new markup in a temp node and then move the child nodes across into
// the target node
if(node.namespaceURI===Namespaces.svg&&!('innerHTML'in node)){reusableSVGContainer=reusableSVGContainer||document.createElement('div');reusableSVGContainer.innerHTML='<svg>'+html+'</svg>';var svgNode=reusableSVGContainer.firstChild;while(node.firstChild){node.removeChild(node.firstChild);}while(svgNode.firstChild){node.appendChild(svgNode.firstChild);}}else{node.innerHTML=html;}});/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */var setTextContent=function setTextContent(node,text){if(text){var firstChild=node.firstChild;if(firstChild&&firstChild===node.lastChild&&firstChild.nodeType===TEXT_NODE){firstChild.nodeValue=text;return;}}node.textContent=text;};// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand={animation:['animationDelay','animationDirection','animationDuration','animationFillMode','animationIterationCount','animationName','animationPlayState','animationTimingFunction'],background:['backgroundAttachment','backgroundClip','backgroundColor','backgroundImage','backgroundOrigin','backgroundPositionX','backgroundPositionY','backgroundRepeat','backgroundSize'],backgroundPosition:['backgroundPositionX','backgroundPositionY'],border:['borderBottomColor','borderBottomStyle','borderBottomWidth','borderImageOutset','borderImageRepeat','borderImageSlice','borderImageSource','borderImageWidth','borderLeftColor','borderLeftStyle','borderLeftWidth','borderRightColor','borderRightStyle','borderRightWidth','borderTopColor','borderTopStyle','borderTopWidth'],borderBlockEnd:['borderBlockEndColor','borderBlockEndStyle','borderBlockEndWidth'],borderBlockStart:['borderBlockStartColor','borderBlockStartStyle','borderBlockStartWidth'],borderBottom:['borderBottomColor','borderBottomStyle','borderBottomWidth'],borderColor:['borderBottomColor','borderLeftColor','borderRightColor','borderTopColor'],borderImage:['borderImageOutset','borderImageRepeat','borderImageSlice','borderImageSource','borderImageWidth'],borderInlineEnd:['borderInlineEndColor','borderInlineEndStyle','borderInlineEndWidth'],borderInlineStart:['borderInlineStartColor','borderInlineStartStyle','borderInlineStartWidth'],borderLeft:['borderLeftColor','borderLeftStyle','borderLeftWidth'],borderRadius:['borderBottomLeftRadius','borderBottomRightRadius','borderTopLeftRadius','borderTopRightRadius'],borderRight:['borderRightColor','borderRightStyle','borderRightWidth'],borderStyle:['borderBottomStyle','borderLeftStyle','borderRightStyle','borderTopStyle'],borderTop:['borderTopColor','borderTopStyle','borderTopWidth'],borderWidth:['borderBottomWidth','borderLeftWidth','borderRightWidth','borderTopWidth'],columnRule:['columnRuleColor','columnRuleStyle','columnRuleWidth'],columns:['columnCount','columnWidth'],flex:['flexBasis','flexGrow','flexShrink'],flexFlow:['flexDirection','flexWrap'],font:['fontFamily','fontFeatureSettings','fontKerning','fontLanguageOverride','fontSize','fontSizeAdjust','fontStretch','fontStyle','fontVariant','fontVariantAlternates','fontVariantCaps','fontVariantEastAsian','fontVariantLigatures','fontVariantNumeric','fontVariantPosition','fontWeight','lineHeight'],fontVariant:['fontVariantAlternates','fontVariantCaps','fontVariantEastAsian','fontVariantLigatures','fontVariantNumeric','fontVariantPosition'],gap:['columnGap','rowGap'],grid:['gridAutoColumns','gridAutoFlow','gridAutoRows','gridTemplateAreas','gridTemplateColumns','gridTemplateRows'],gridArea:['gridColumnEnd','gridColumnStart','gridRowEnd','gridRowStart'],gridColumn:['gridColumnEnd','gridColumnStart'],gridColumnGap:['columnGap'],gridGap:['columnGap','rowGap'],gridRow:['gridRowEnd','gridRowStart'],gridRowGap:['rowGap'],gridTemplate:['gridTemplateAreas','gridTemplateColumns','gridTemplateRows'],listStyle:['listStyleImage','listStylePosition','listStyleType'],margin:['marginBottom','marginLeft','marginRight','marginTop'],marker:['markerEnd','markerMid','markerStart'],mask:['maskClip','maskComposite','maskImage','maskMode','maskOrigin','maskPositionX','maskPositionY','maskRepeat','maskSize'],maskPosition:['maskPositionX','maskPositionY'],outline:['outlineColor','outlineStyle','outlineWidth'],overflow:['overflowX','overflowY'],padding:['paddingBottom','paddingLeft','paddingRight','paddingTop'],placeContent:['alignContent','justifyContent'],placeItems:['alignItems','justifyItems'],placeSelf:['alignSelf','justifySelf'],textDecoration:['textDecorationColor','textDecorationLine','textDecorationStyle'],textEmphasis:['textEmphasisColor','textEmphasisStyle'],transition:['transitionDelay','transitionDuration','transitionProperty','transitionTimingFunction'],wordWrap:['overflowWrap']};/**
 * CSS properties which accept numbers but are not in units of "px".
 */var isUnitlessNumber={animationIterationCount:true,borderImageOutset:true,borderImageSlice:true,borderImageWidth:true,boxFlex:true,boxFlexGroup:true,boxOrdinalGroup:true,columnCount:true,columns:true,flex:true,flexGrow:true,flexPositive:true,flexShrink:true,flexNegative:true,flexOrder:true,gridArea:true,gridRow:true,gridRowEnd:true,gridRowSpan:true,gridRowStart:true,gridColumn:true,gridColumnEnd:true,gridColumnSpan:true,gridColumnStart:true,fontWeight:true,lineClamp:true,lineHeight:true,opacity:true,order:true,orphans:true,tabSize:true,widows:true,zIndex:true,zoom:true,// SVG-related properties
fillOpacity:true,floodOpacity:true,stopOpacity:true,strokeDasharray:true,strokeDashoffset:true,strokeMiterlimit:true,strokeOpacity:true,strokeWidth:true};/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */function prefixKey(prefix,key){return prefix+key.charAt(0).toUpperCase()+key.substring(1);}/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */var prefixes=['Webkit','ms','Moz','O'];// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop){prefixes.forEach(function(prefix){isUnitlessNumber[prefixKey(prefix,prop)]=isUnitlessNumber[prop];});});/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */function dangerousStyleValue(name,value,isCustomProperty){// Note that we've removed escapeTextForBrowser() calls here since the
// whole string will be escaped when the attribute is injected into
// the markup. If you provide unsafe user data here they can inject
// arbitrary CSS which may be problematic (I couldn't repro this):
// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
// http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
// This is not an XSS hole but instead a potential CSS injection issue
// which has lead to a greater discussion about how we're going to
// trust URLs moving forward. See #2115901
var isEmpty=value==null||typeof value==='boolean'||value==='';if(isEmpty){return'';}if(!isCustomProperty&&typeof value==='number'&&value!==0&&!(isUnitlessNumber.hasOwnProperty(name)&&isUnitlessNumber[name])){return value+'px';// Presumes implicit 'px' suffix for unitless numbers
}return(''+value).trim();}var uppercasePattern=/([A-Z])/g;var msPattern=/^ms-/;/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */function hyphenateStyleName(name){return name.replace(uppercasePattern,'-$1').toLowerCase().replace(msPattern,'-ms-');}var warnValidStyle=function warnValidStyle(){};{// 'msTransform' is correct, but the other prefixes should be capitalized
var badVendoredStyleNamePattern=/^(?:webkit|moz|o)[A-Z]/;var msPattern$1=/^-ms-/;var hyphenPattern=/-(.)/g;// style values shouldn't contain a semicolon
var badStyleValueWithSemicolonPattern=/;\s*$/;var warnedStyleNames={};var warnedStyleValues={};var warnedForNaNValue=false;var warnedForInfinityValue=false;var camelize=function camelize(string){return string.replace(hyphenPattern,function(_,character){return character.toUpperCase();});};var warnHyphenatedStyleName=function warnHyphenatedStyleName(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;warning$1(false,'Unsupported style property %s. Did you mean %s?',name,// As Andi Smith suggests
// (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
// is converted to lowercase `ms`.
camelize(name.replace(msPattern$1,'ms-')));};var warnBadVendoredStyleName=function warnBadVendoredStyleName(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;warning$1(false,'Unsupported vendor-prefixed style property %s. Did you mean %s?',name,name.charAt(0).toUpperCase()+name.slice(1));};var warnStyleValueWithSemicolon=function warnStyleValueWithSemicolon(name,value){if(warnedStyleValues.hasOwnProperty(value)&&warnedStyleValues[value]){return;}warnedStyleValues[value]=true;warning$1(false,"Style property values shouldn't contain a semicolon. "+'Try "%s: %s" instead.',name,value.replace(badStyleValueWithSemicolonPattern,''));};var warnStyleValueIsNaN=function warnStyleValueIsNaN(name,value){if(warnedForNaNValue){return;}warnedForNaNValue=true;warning$1(false,'`NaN` is an invalid value for the `%s` css style property.',name);};var warnStyleValueIsInfinity=function warnStyleValueIsInfinity(name,value){if(warnedForInfinityValue){return;}warnedForInfinityValue=true;warning$1(false,'`Infinity` is an invalid value for the `%s` css style property.',name);};warnValidStyle=function warnValidStyle(name,value){if(name.indexOf('-')>-1){warnHyphenatedStyleName(name);}else if(badVendoredStyleNamePattern.test(name)){warnBadVendoredStyleName(name);}else if(badStyleValueWithSemicolonPattern.test(value)){warnStyleValueWithSemicolon(name,value);}if(typeof value==='number'){if(isNaN(value)){warnStyleValueIsNaN(name,value);}else if(!isFinite(value)){warnStyleValueIsInfinity(name,value);}}};}var warnValidStyle$1=warnValidStyle;/**
 * Operations for dealing with CSS properties.
 *//**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */function createDangerousStringForStyles(styles){{var serialized='';var delimiter='';for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var styleValue=styles[styleName];if(styleValue!=null){var isCustomProperty=styleName.indexOf('--')===0;serialized+=delimiter+hyphenateStyleName(styleName)+':';serialized+=dangerousStyleValue(styleName,styleValue,isCustomProperty);delimiter=';';}}return serialized||null;}}/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */function setValueForStyles(node,styles){var style=node.style;for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var isCustomProperty=styleName.indexOf('--')===0;{if(!isCustomProperty){warnValidStyle$1(styleName,styles[styleName]);}}var styleValue=dangerousStyleValue(styleName,styles[styleName],isCustomProperty);if(styleName==='float'){styleName='cssFloat';}if(isCustomProperty){style.setProperty(styleName,styleValue);}else{style[styleName]=styleValue;}}}function isValueEmpty(value){return value==null||typeof value==='boolean'||value==='';}/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */function expandShorthandMap(styles){var expanded={};for(var key in styles){var longhands=shorthandToLonghand[key]||[key];for(var i=0;i<longhands.length;i++){expanded[longhands[i]]=key;}}return expanded;}/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */function validateShorthandPropertyCollisionInDev(styleUpdates,nextStyles){if(!warnAboutShorthandPropertyCollision){return;}if(!nextStyles){return;}var expandedUpdates=expandShorthandMap(styleUpdates);var expandedStyles=expandShorthandMap(nextStyles);var warnedAbout={};for(var key in expandedUpdates){var originalKey=expandedUpdates[key];var correctOriginalKey=expandedStyles[key];if(correctOriginalKey&&originalKey!==correctOriginalKey){var warningKey=originalKey+','+correctOriginalKey;if(warnedAbout[warningKey]){continue;}warnedAbout[warningKey]=true;warning$1(false,'%s a style property during rerender (%s) when a '+'conflicting property is set (%s) can lead to styling bugs. To '+"avoid this, don't mix shorthand and non-shorthand properties "+'for the same value; instead, replace the shorthand with '+'separate values.',isValueEmpty(styleUpdates[originalKey])?'Removing':'Updating',originalKey,correctOriginalKey);}}}// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags={area:true,base:true,br:true,col:true,embed:true,hr:true,img:true,input:true,keygen:true,link:true,meta:true,param:true,source:true,track:true,wbr:true// NOTE: menuitem's close tag should be omitted, but that causes problems.
};// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.
var voidElementTags=_assign({menuitem:true},omittedCloseTags);// TODO: We can remove this if we add invariantWithStack()
// or add stack by default to invariants where possible.
var HTML$1='__html';var ReactDebugCurrentFrame$2=null;{ReactDebugCurrentFrame$2=ReactSharedInternals.ReactDebugCurrentFrame;}function assertValidProps(tag,props){if(!props){return;}// Note the use of `==` which checks for null or undefined.
if(voidElementTags[tag]){!(props.children==null&&props.dangerouslySetInnerHTML==null)?invariant(false,'%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s',tag,ReactDebugCurrentFrame$2.getStackAddendum()):void 0;}if(props.dangerouslySetInnerHTML!=null){!(props.children==null)?invariant(false,'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'):void 0;!(_typeof(props.dangerouslySetInnerHTML)==='object'&&HTML$1 in props.dangerouslySetInnerHTML)?invariant(false,'`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.'):void 0;}{!(props.suppressContentEditableWarning||!props.contentEditable||props.children==null)?warning$1(false,'A component is `contentEditable` and contains `children` managed by '+'React. It is now your responsibility to guarantee that none of '+'those nodes are unexpectedly modified or duplicated. This is '+'probably not intentional.'):void 0;}!(props.style==null||_typeof(props.style)==='object')?invariant(false,'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s',ReactDebugCurrentFrame$2.getStackAddendum()):void 0;}function isCustomComponent(tagName,props){if(tagName.indexOf('-')===-1){return typeof props.is==='string';}switch(tagName){// These are reserved SVG and MathML elements.
// We don't mind this whitelist too much because we expect it to never grow.
// The alternative is to track the namespace in a few places which is convoluted.
// https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
case'annotation-xml':case'color-profile':case'font-face':case'font-face-src':case'font-face-uri':case'font-face-format':case'font-face-name':case'missing-glyph':return false;default:return true;}}// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames={// HTML
accept:'accept',acceptcharset:'acceptCharset','accept-charset':'acceptCharset',accesskey:'accessKey',action:'action',allowfullscreen:'allowFullScreen',alt:'alt',as:'as',async:'async',autocapitalize:'autoCapitalize',autocomplete:'autoComplete',autocorrect:'autoCorrect',autofocus:'autoFocus',autoplay:'autoPlay',autosave:'autoSave',capture:'capture',cellpadding:'cellPadding',cellspacing:'cellSpacing',challenge:'challenge',charset:'charSet',checked:'checked',children:'children',cite:'cite',class:'className',classid:'classID',classname:'className',cols:'cols',colspan:'colSpan',content:'content',contenteditable:'contentEditable',contextmenu:'contextMenu',controls:'controls',controlslist:'controlsList',coords:'coords',crossorigin:'crossOrigin',dangerouslysetinnerhtml:'dangerouslySetInnerHTML',data:'data',datetime:'dateTime',default:'default',defaultchecked:'defaultChecked',defaultvalue:'defaultValue',defer:'defer',dir:'dir',disabled:'disabled',download:'download',draggable:'draggable',enctype:'encType',for:'htmlFor',form:'form',formmethod:'formMethod',formaction:'formAction',formenctype:'formEncType',formnovalidate:'formNoValidate',formtarget:'formTarget',frameborder:'frameBorder',headers:'headers',height:'height',hidden:'hidden',high:'high',href:'href',hreflang:'hrefLang',htmlfor:'htmlFor',httpequiv:'httpEquiv','http-equiv':'httpEquiv',icon:'icon',id:'id',innerhtml:'innerHTML',inputmode:'inputMode',integrity:'integrity',is:'is',itemid:'itemID',itemprop:'itemProp',itemref:'itemRef',itemscope:'itemScope',itemtype:'itemType',keyparams:'keyParams',keytype:'keyType',kind:'kind',label:'label',lang:'lang',list:'list',loop:'loop',low:'low',manifest:'manifest',marginwidth:'marginWidth',marginheight:'marginHeight',max:'max',maxlength:'maxLength',media:'media',mediagroup:'mediaGroup',method:'method',min:'min',minlength:'minLength',multiple:'multiple',muted:'muted',name:'name',nomodule:'noModule',nonce:'nonce',novalidate:'noValidate',open:'open',optimum:'optimum',pattern:'pattern',placeholder:'placeholder',playsinline:'playsInline',poster:'poster',preload:'preload',profile:'profile',radiogroup:'radioGroup',readonly:'readOnly',referrerpolicy:'referrerPolicy',rel:'rel',required:'required',reversed:'reversed',role:'role',rows:'rows',rowspan:'rowSpan',sandbox:'sandbox',scope:'scope',scoped:'scoped',scrolling:'scrolling',seamless:'seamless',selected:'selected',shape:'shape',size:'size',sizes:'sizes',span:'span',spellcheck:'spellCheck',src:'src',srcdoc:'srcDoc',srclang:'srcLang',srcset:'srcSet',start:'start',step:'step',style:'style',summary:'summary',tabindex:'tabIndex',target:'target',title:'title',type:'type',usemap:'useMap',value:'value',width:'width',wmode:'wmode',wrap:'wrap',// SVG
about:'about',accentheight:'accentHeight','accent-height':'accentHeight',accumulate:'accumulate',additive:'additive',alignmentbaseline:'alignmentBaseline','alignment-baseline':'alignmentBaseline',allowreorder:'allowReorder',alphabetic:'alphabetic',amplitude:'amplitude',arabicform:'arabicForm','arabic-form':'arabicForm',ascent:'ascent',attributename:'attributeName',attributetype:'attributeType',autoreverse:'autoReverse',azimuth:'azimuth',basefrequency:'baseFrequency',baselineshift:'baselineShift','baseline-shift':'baselineShift',baseprofile:'baseProfile',bbox:'bbox',begin:'begin',bias:'bias',by:'by',calcmode:'calcMode',capheight:'capHeight','cap-height':'capHeight',clip:'clip',clippath:'clipPath','clip-path':'clipPath',clippathunits:'clipPathUnits',cliprule:'clipRule','clip-rule':'clipRule',color:'color',colorinterpolation:'colorInterpolation','color-interpolation':'colorInterpolation',colorinterpolationfilters:'colorInterpolationFilters','color-interpolation-filters':'colorInterpolationFilters',colorprofile:'colorProfile','color-profile':'colorProfile',colorrendering:'colorRendering','color-rendering':'colorRendering',contentscripttype:'contentScriptType',contentstyletype:'contentStyleType',cursor:'cursor',cx:'cx',cy:'cy',d:'d',datatype:'datatype',decelerate:'decelerate',descent:'descent',diffuseconstant:'diffuseConstant',direction:'direction',display:'display',divisor:'divisor',dominantbaseline:'dominantBaseline','dominant-baseline':'dominantBaseline',dur:'dur',dx:'dx',dy:'dy',edgemode:'edgeMode',elevation:'elevation',enablebackground:'enableBackground','enable-background':'enableBackground',end:'end',exponent:'exponent',externalresourcesrequired:'externalResourcesRequired',fill:'fill',fillopacity:'fillOpacity','fill-opacity':'fillOpacity',fillrule:'fillRule','fill-rule':'fillRule',filter:'filter',filterres:'filterRes',filterunits:'filterUnits',floodopacity:'floodOpacity','flood-opacity':'floodOpacity',floodcolor:'floodColor','flood-color':'floodColor',focusable:'focusable',fontfamily:'fontFamily','font-family':'fontFamily',fontsize:'fontSize','font-size':'fontSize',fontsizeadjust:'fontSizeAdjust','font-size-adjust':'fontSizeAdjust',fontstretch:'fontStretch','font-stretch':'fontStretch',fontstyle:'fontStyle','font-style':'fontStyle',fontvariant:'fontVariant','font-variant':'fontVariant',fontweight:'fontWeight','font-weight':'fontWeight',format:'format',from:'from',fx:'fx',fy:'fy',g1:'g1',g2:'g2',glyphname:'glyphName','glyph-name':'glyphName',glyphorientationhorizontal:'glyphOrientationHorizontal','glyph-orientation-horizontal':'glyphOrientationHorizontal',glyphorientationvertical:'glyphOrientationVertical','glyph-orientation-vertical':'glyphOrientationVertical',glyphref:'glyphRef',gradienttransform:'gradientTransform',gradientunits:'gradientUnits',hanging:'hanging',horizadvx:'horizAdvX','horiz-adv-x':'horizAdvX',horizoriginx:'horizOriginX','horiz-origin-x':'horizOriginX',ideographic:'ideographic',imagerendering:'imageRendering','image-rendering':'imageRendering',in2:'in2',in:'in',inlist:'inlist',intercept:'intercept',k1:'k1',k2:'k2',k3:'k3',k4:'k4',k:'k',kernelmatrix:'kernelMatrix',kernelunitlength:'kernelUnitLength',kerning:'kerning',keypoints:'keyPoints',keysplines:'keySplines',keytimes:'keyTimes',lengthadjust:'lengthAdjust',letterspacing:'letterSpacing','letter-spacing':'letterSpacing',lightingcolor:'lightingColor','lighting-color':'lightingColor',limitingconeangle:'limitingConeAngle',local:'local',markerend:'markerEnd','marker-end':'markerEnd',markerheight:'markerHeight',markermid:'markerMid','marker-mid':'markerMid',markerstart:'markerStart','marker-start':'markerStart',markerunits:'markerUnits',markerwidth:'markerWidth',mask:'mask',maskcontentunits:'maskContentUnits',maskunits:'maskUnits',mathematical:'mathematical',mode:'mode',numoctaves:'numOctaves',offset:'offset',opacity:'opacity',operator:'operator',order:'order',orient:'orient',orientation:'orientation',origin:'origin',overflow:'overflow',overlineposition:'overlinePosition','overline-position':'overlinePosition',overlinethickness:'overlineThickness','overline-thickness':'overlineThickness',paintorder:'paintOrder','paint-order':'paintOrder',panose1:'panose1','panose-1':'panose1',pathlength:'pathLength',patterncontentunits:'patternContentUnits',patterntransform:'patternTransform',patternunits:'patternUnits',pointerevents:'pointerEvents','pointer-events':'pointerEvents',points:'points',pointsatx:'pointsAtX',pointsaty:'pointsAtY',pointsatz:'pointsAtZ',prefix:'prefix',preservealpha:'preserveAlpha',preserveaspectratio:'preserveAspectRatio',primitiveunits:'primitiveUnits',property:'property',r:'r',radius:'radius',refx:'refX',refy:'refY',renderingintent:'renderingIntent','rendering-intent':'renderingIntent',repeatcount:'repeatCount',repeatdur:'repeatDur',requiredextensions:'requiredExtensions',requiredfeatures:'requiredFeatures',resource:'resource',restart:'restart',result:'result',results:'results',rotate:'rotate',rx:'rx',ry:'ry',scale:'scale',security:'security',seed:'seed',shaperendering:'shapeRendering','shape-rendering':'shapeRendering',slope:'slope',spacing:'spacing',specularconstant:'specularConstant',specularexponent:'specularExponent',speed:'speed',spreadmethod:'spreadMethod',startoffset:'startOffset',stddeviation:'stdDeviation',stemh:'stemh',stemv:'stemv',stitchtiles:'stitchTiles',stopcolor:'stopColor','stop-color':'stopColor',stopopacity:'stopOpacity','stop-opacity':'stopOpacity',strikethroughposition:'strikethroughPosition','strikethrough-position':'strikethroughPosition',strikethroughthickness:'strikethroughThickness','strikethrough-thickness':'strikethroughThickness',string:'string',stroke:'stroke',strokedasharray:'strokeDasharray','stroke-dasharray':'strokeDasharray',strokedashoffset:'strokeDashoffset','stroke-dashoffset':'strokeDashoffset',strokelinecap:'strokeLinecap','stroke-linecap':'strokeLinecap',strokelinejoin:'strokeLinejoin','stroke-linejoin':'strokeLinejoin',strokemiterlimit:'strokeMiterlimit','stroke-miterlimit':'strokeMiterlimit',strokewidth:'strokeWidth','stroke-width':'strokeWidth',strokeopacity:'strokeOpacity','stroke-opacity':'strokeOpacity',suppresscontenteditablewarning:'suppressContentEditableWarning',suppresshydrationwarning:'suppressHydrationWarning',surfacescale:'surfaceScale',systemlanguage:'systemLanguage',tablevalues:'tableValues',targetx:'targetX',targety:'targetY',textanchor:'textAnchor','text-anchor':'textAnchor',textdecoration:'textDecoration','text-decoration':'textDecoration',textlength:'textLength',textrendering:'textRendering','text-rendering':'textRendering',to:'to',transform:'transform',typeof:'typeof',u1:'u1',u2:'u2',underlineposition:'underlinePosition','underline-position':'underlinePosition',underlinethickness:'underlineThickness','underline-thickness':'underlineThickness',unicode:'unicode',unicodebidi:'unicodeBidi','unicode-bidi':'unicodeBidi',unicoderange:'unicodeRange','unicode-range':'unicodeRange',unitsperem:'unitsPerEm','units-per-em':'unitsPerEm',unselectable:'unselectable',valphabetic:'vAlphabetic','v-alphabetic':'vAlphabetic',values:'values',vectoreffect:'vectorEffect','vector-effect':'vectorEffect',version:'version',vertadvy:'vertAdvY','vert-adv-y':'vertAdvY',vertoriginx:'vertOriginX','vert-origin-x':'vertOriginX',vertoriginy:'vertOriginY','vert-origin-y':'vertOriginY',vhanging:'vHanging','v-hanging':'vHanging',videographic:'vIdeographic','v-ideographic':'vIdeographic',viewbox:'viewBox',viewtarget:'viewTarget',visibility:'visibility',vmathematical:'vMathematical','v-mathematical':'vMathematical',vocab:'vocab',widths:'widths',wordspacing:'wordSpacing','word-spacing':'wordSpacing',writingmode:'writingMode','writing-mode':'writingMode',x1:'x1',x2:'x2',x:'x',xchannelselector:'xChannelSelector',xheight:'xHeight','x-height':'xHeight',xlinkactuate:'xlinkActuate','xlink:actuate':'xlinkActuate',xlinkarcrole:'xlinkArcrole','xlink:arcrole':'xlinkArcrole',xlinkhref:'xlinkHref','xlink:href':'xlinkHref',xlinkrole:'xlinkRole','xlink:role':'xlinkRole',xlinkshow:'xlinkShow','xlink:show':'xlinkShow',xlinktitle:'xlinkTitle','xlink:title':'xlinkTitle',xlinktype:'xlinkType','xlink:type':'xlinkType',xmlbase:'xmlBase','xml:base':'xmlBase',xmllang:'xmlLang','xml:lang':'xmlLang',xmlns:'xmlns','xml:space':'xmlSpace',xmlnsxlink:'xmlnsXlink','xmlns:xlink':'xmlnsXlink',xmlspace:'xmlSpace',y1:'y1',y2:'y2',y:'y',ychannelselector:'yChannelSelector',z:'z',zoomandpan:'zoomAndPan'};var ariaProperties={'aria-current':0,// state
'aria-details':0,'aria-disabled':0,// state
'aria-hidden':0,// state
'aria-invalid':0,// state
'aria-keyshortcuts':0,'aria-label':0,'aria-roledescription':0,// Widget Attributes
'aria-autocomplete':0,'aria-checked':0,'aria-expanded':0,'aria-haspopup':0,'aria-level':0,'aria-modal':0,'aria-multiline':0,'aria-multiselectable':0,'aria-orientation':0,'aria-placeholder':0,'aria-pressed':0,'aria-readonly':0,'aria-required':0,'aria-selected':0,'aria-sort':0,'aria-valuemax':0,'aria-valuemin':0,'aria-valuenow':0,'aria-valuetext':0,// Live Region Attributes
'aria-atomic':0,'aria-busy':0,'aria-live':0,'aria-relevant':0,// Drag-and-Drop Attributes
'aria-dropeffect':0,'aria-grabbed':0,// Relationship Attributes
'aria-activedescendant':0,'aria-colcount':0,'aria-colindex':0,'aria-colspan':0,'aria-controls':0,'aria-describedby':0,'aria-errormessage':0,'aria-flowto':0,'aria-labelledby':0,'aria-owns':0,'aria-posinset':0,'aria-rowcount':0,'aria-rowindex':0,'aria-rowspan':0,'aria-setsize':0};var warnedProperties={};var rARIA=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');var hasOwnProperty$2=Object.prototype.hasOwnProperty;function validateProperty(tagName,name){if(hasOwnProperty$2.call(warnedProperties,name)&&warnedProperties[name]){return true;}if(rARIACamel.test(name)){var ariaName='aria-'+name.slice(4).toLowerCase();var correctName=ariaProperties.hasOwnProperty(ariaName)?ariaName:null;// If this is an aria-* attribute, but is not listed in the known DOM
// DOM properties, then it is an invalid aria-* attribute.
if(correctName==null){warning$1(false,'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',name);warnedProperties[name]=true;return true;}// aria-* attributes should be lowercase; suggest the lowercase version.
if(name!==correctName){warning$1(false,'Invalid ARIA attribute `%s`. Did you mean `%s`?',name,correctName);warnedProperties[name]=true;return true;}}if(rARIA.test(name)){var lowerCasedName=name.toLowerCase();var standardName=ariaProperties.hasOwnProperty(lowerCasedName)?lowerCasedName:null;// If this is an aria-* attribute, but is not listed in the known DOM
// DOM properties, then it is an invalid aria-* attribute.
if(standardName==null){warnedProperties[name]=true;return false;}// aria-* attributes should be lowercase; suggest the lowercase version.
if(name!==standardName){warning$1(false,'Unknown ARIA attribute `%s`. Did you mean `%s`?',name,standardName);warnedProperties[name]=true;return true;}}return true;}function warnInvalidARIAProps(type,props){var invalidProps=[];for(var key in props){var isValid=validateProperty(type,key);if(!isValid){invalidProps.push(key);}}var unknownPropString=invalidProps.map(function(prop){return'`'+prop+'`';}).join(', ');if(invalidProps.length===1){warning$1(false,'Invalid aria prop %s on <%s> tag. '+'For details, see https://fb.me/invalid-aria-prop',unknownPropString,type);}else if(invalidProps.length>1){warning$1(false,'Invalid aria props %s on <%s> tag. '+'For details, see https://fb.me/invalid-aria-prop',unknownPropString,type);}}function validateProperties(type,props){if(isCustomComponent(type,props)){return;}warnInvalidARIAProps(type,props);}var didWarnValueNull=false;function validateProperties$1(type,props){if(type!=='input'&&type!=='textarea'&&type!=='select'){return;}if(props!=null&&props.value===null&&!didWarnValueNull){didWarnValueNull=true;if(type==='select'&&props.multiple){warning$1(false,'`value` prop on `%s` should not be null. '+'Consider using an empty array when `multiple` is set to `true` '+'to clear the component or `undefined` for uncontrolled components.',type);}else{warning$1(false,'`value` prop on `%s` should not be null. '+'Consider using an empty string to clear the component or `undefined` '+'for uncontrolled components.',type);}}}var validateProperty$1=function validateProperty$1(){};{var warnedProperties$1={};var _hasOwnProperty=Object.prototype.hasOwnProperty;var EVENT_NAME_REGEX=/^on./;var INVALID_EVENT_NAME_REGEX=/^on[^A-Z]/;var rARIA$1=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel$1=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');validateProperty$1=function validateProperty$1(tagName,name,value,canUseEventSystem){if(_hasOwnProperty.call(warnedProperties$1,name)&&warnedProperties$1[name]){return true;}var lowerCasedName=name.toLowerCase();if(lowerCasedName==='onfocusin'||lowerCasedName==='onfocusout'){warning$1(false,'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. '+'All React events are normalized to bubble, so onFocusIn and onFocusOut '+'are not needed/supported by React.');warnedProperties$1[name]=true;return true;}// We can't rely on the event system being injected on the server.
if(canUseEventSystem){if(registrationNameModules.hasOwnProperty(name)){return true;}var registrationName=possibleRegistrationNames.hasOwnProperty(lowerCasedName)?possibleRegistrationNames[lowerCasedName]:null;if(registrationName!=null){warning$1(false,'Invalid event handler property `%s`. Did you mean `%s`?',name,registrationName);warnedProperties$1[name]=true;return true;}if(EVENT_NAME_REGEX.test(name)){warning$1(false,'Unknown event handler property `%s`. It will be ignored.',name);warnedProperties$1[name]=true;return true;}}else if(EVENT_NAME_REGEX.test(name)){// If no event plugins have been injected, we are in a server environment.
// So we can't tell if the event name is correct for sure, but we can filter
// out known bad ones like `onclick`. We can't suggest a specific replacement though.
if(INVALID_EVENT_NAME_REGEX.test(name)){warning$1(false,'Invalid event handler property `%s`. '+'React events use the camelCase naming convention, for example `onClick`.',name);}warnedProperties$1[name]=true;return true;}// Let the ARIA attribute hook validate ARIA attributes
if(rARIA$1.test(name)||rARIACamel$1.test(name)){return true;}if(lowerCasedName==='innerhtml'){warning$1(false,'Directly setting property `innerHTML` is not permitted. '+'For more information, lookup documentation on `dangerouslySetInnerHTML`.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='aria'){warning$1(false,'The `aria` attribute is reserved for future use in React. '+'Pass individual `aria-` attributes instead.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='is'&&value!==null&&value!==undefined&&typeof value!=='string'){warning$1(false,'Received a `%s` for a string attribute `is`. If this is expected, cast '+'the value to a string.',typeof value==='undefined'?'undefined':_typeof(value));warnedProperties$1[name]=true;return true;}if(typeof value==='number'&&isNaN(value)){warning$1(false,'Received NaN for the `%s` attribute. If this is expected, cast '+'the value to a string.',name);warnedProperties$1[name]=true;return true;}var propertyInfo=getPropertyInfo(name);var isReserved=propertyInfo!==null&&propertyInfo.type===RESERVED;// Known attributes should match the casing specified in the property config.
if(possibleStandardNames.hasOwnProperty(lowerCasedName)){var standardName=possibleStandardNames[lowerCasedName];if(standardName!==name){warning$1(false,'Invalid DOM property `%s`. Did you mean `%s`?',name,standardName);warnedProperties$1[name]=true;return true;}}else if(!isReserved&&name!==lowerCasedName){// Unknown attributes should have lowercase casing since that's how they
// will be cased anyway with server rendering.
warning$1(false,'React does not recognize the `%s` prop on a DOM element. If you '+'intentionally want it to appear in the DOM as a custom '+'attribute, spell it as lowercase `%s` instead. '+'If you accidentally passed it from a parent component, remove '+'it from the DOM element.',name,lowerCasedName);warnedProperties$1[name]=true;return true;}if(typeof value==='boolean'&&shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){if(value){warning$1(false,'Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.',value,name,name,value,name);}else{warning$1(false,'Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',value,name,name,value,name,name,name);}warnedProperties$1[name]=true;return true;}// Now that we've validated casing, do not validate
// data types for reserved props
if(isReserved){return true;}// Warn when a known attribute is a bad type
if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){warnedProperties$1[name]=true;return false;}// Warn when passing the strings 'false' or 'true' into a boolean prop
if((value==='false'||value==='true')&&propertyInfo!==null&&propertyInfo.type===BOOLEAN){warning$1(false,'Received the string `%s` for the boolean attribute `%s`. '+'%s '+'Did you mean %s={%s}?',value,name,value==='false'?'The browser will interpret it as a truthy value.':'Although this works, it will not work as expected if you pass the string "false".',name,value);warnedProperties$1[name]=true;return true;}return true;};}var warnUnknownProperties=function warnUnknownProperties(type,props,canUseEventSystem){var unknownProps=[];for(var key in props){var isValid=validateProperty$1(type,key,props[key],canUseEventSystem);if(!isValid){unknownProps.push(key);}}var unknownPropString=unknownProps.map(function(prop){return'`'+prop+'`';}).join(', ');if(unknownProps.length===1){warning$1(false,'Invalid value for prop %s on <%s> tag. Either remove it from the element, '+'or pass a string or number value to keep it in the DOM. '+'For details, see https://fb.me/react-attribute-behavior',unknownPropString,type);}else if(unknownProps.length>1){warning$1(false,'Invalid values for props %s on <%s> tag. Either remove them from the element, '+'or pass a string or number value to keep them in the DOM. '+'For details, see https://fb.me/react-attribute-behavior',unknownPropString,type);}};function validateProperties$2(type,props,canUseEventSystem){if(isCustomComponent(type,props)){return;}warnUnknownProperties(type,props,canUseEventSystem);}// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnInvalidHydration=false;var didWarnShadyDOM=false;var DANGEROUSLY_SET_INNER_HTML='dangerouslySetInnerHTML';var SUPPRESS_CONTENT_EDITABLE_WARNING='suppressContentEditableWarning';var SUPPRESS_HYDRATION_WARNING$1='suppressHydrationWarning';var AUTOFOCUS='autoFocus';var CHILDREN='children';var STYLE$1='style';var HTML='__html';var HTML_NAMESPACE=Namespaces.html;var warnedUnknownTags=void 0;var suppressHydrationWarning=void 0;var validatePropertiesInDevelopment=void 0;var warnForTextDifference=void 0;var warnForPropDifference=void 0;var warnForExtraAttributes=void 0;var warnForInvalidEventListener=void 0;var canDiffStyleForHydrationWarning=void 0;var normalizeMarkupForTextOrAttribute=void 0;var normalizeHTML=void 0;{warnedUnknownTags={// Chrome is the only major browser not shipping <time>. But as of July
// 2017 it intends to ship it due to widespread usage. We intentionally
// *don't* warn for <time> even if it's unrecognized by Chrome because
// it soon will be, and many apps have been using it anyway.
time:true,// There are working polyfills for <dialog>. Let people use it.
dialog:true,// Electron ships a custom <webview> tag to display external web content in
// an isolated frame and process.
// This tag is not present in non Electron environments such as JSDom which
// is often used for testing purposes.
// @see https://electronjs.org/docs/api/webview-tag
webview:true};validatePropertiesInDevelopment=function validatePropertiesInDevelopment(type,props){validateProperties(type,props);validateProperties$1(type,props);validateProperties$2(type,props,/* canUseEventSystem */true);};// IE 11 parses & normalizes the style attribute as opposed to other
// browsers. It adds spaces and sorts the properties in some
// non-alphabetical order. Handling that would require sorting CSS
// properties in the client & server versions or applying
// `expectedStyle` to a temporary DOM node to read its `style` attribute
// normalized. Since it only affects IE, we're skipping style warnings
// in that browser completely in favor of doing all that work.
// See https://github.com/facebook/react/issues/11807
canDiffStyleForHydrationWarning=canUseDOM&&!document.documentMode;// HTML parsing normalizes CR and CRLF to LF.
// It also can turn \u0000 into \uFFFD inside attributes.
// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
// If we have a mismatch, it might be caused by that.
// We will still patch up in this case but not fire the warning.
var NORMALIZE_NEWLINES_REGEX=/\r\n?/g;var NORMALIZE_NULL_AND_REPLACEMENT_REGEX=/\u0000|\uFFFD/g;normalizeMarkupForTextOrAttribute=function normalizeMarkupForTextOrAttribute(markup){var markupString=typeof markup==='string'?markup:''+markup;return markupString.replace(NORMALIZE_NEWLINES_REGEX,'\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX,'');};warnForTextDifference=function warnForTextDifference(serverText,clientText){if(didWarnInvalidHydration){return;}var normalizedClientText=normalizeMarkupForTextOrAttribute(clientText);var normalizedServerText=normalizeMarkupForTextOrAttribute(serverText);if(normalizedServerText===normalizedClientText){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Text content did not match. Server: "%s" Client: "%s"',normalizedServerText,normalizedClientText);};warnForPropDifference=function warnForPropDifference(propName,serverValue,clientValue){if(didWarnInvalidHydration){return;}var normalizedClientValue=normalizeMarkupForTextOrAttribute(clientValue);var normalizedServerValue=normalizeMarkupForTextOrAttribute(serverValue);if(normalizedServerValue===normalizedClientValue){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Prop `%s` did not match. Server: %s Client: %s',propName,JSON.stringify(normalizedServerValue),JSON.stringify(normalizedClientValue));};warnForExtraAttributes=function warnForExtraAttributes(attributeNames){if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;var names=[];attributeNames.forEach(function(name){names.push(name);});warningWithoutStack$1(false,'Extra attributes from the server: %s',names);};warnForInvalidEventListener=function warnForInvalidEventListener(registrationName,listener){if(listener===false){warning$1(false,'Expected `%s` listener to be a function, instead got `false`.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',registrationName,registrationName,registrationName);}else{warning$1(false,'Expected `%s` listener to be a function, instead got a value of `%s` type.',registrationName,typeof listener==='undefined'?'undefined':_typeof(listener));}};// Parse the HTML and read it back to normalize the HTML string so that it
// can be used for comparison.
normalizeHTML=function normalizeHTML(parent,html){// We could have created a separate document here to avoid
// re-initializing custom elements if they exist. But this breaks
// how <noscript> is being handled. So we use the same document.
// See the discussion in https://github.com/facebook/react/pull/11157.
var testElement=parent.namespaceURI===HTML_NAMESPACE?parent.ownerDocument.createElement(parent.tagName):parent.ownerDocument.createElementNS(parent.namespaceURI,parent.tagName);testElement.innerHTML=html;return testElement.innerHTML;};}function ensureListeningTo(rootContainerElement,registrationName){var isDocumentOrFragment=rootContainerElement.nodeType===DOCUMENT_NODE||rootContainerElement.nodeType===DOCUMENT_FRAGMENT_NODE;var doc=isDocumentOrFragment?rootContainerElement:rootContainerElement.ownerDocument;listenTo(registrationName,doc);}function getOwnerDocumentFromRootContainer(rootContainerElement){return rootContainerElement.nodeType===DOCUMENT_NODE?rootContainerElement:rootContainerElement.ownerDocument;}function noop(){}function trapClickOnNonInteractiveElement(node){// Mobile Safari does not fire properly bubble click events on
// non-interactive elements, which means delegated click listeners do not
// fire. The workaround for this bug involves attaching an empty click
// listener on the target node.
// http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
// Just set it using the onclick property so that we don't have to manage any
// bookkeeping for it. Not sure if we need to clear it when the listener is
// removed.
// TODO: Only do this for the relevant Safaris maybe?
node.onclick=noop;}function setInitialDOMProperties(tag,domElement,rootContainerElement,nextProps,isCustomComponentTag){for(var propKey in nextProps){if(!nextProps.hasOwnProperty(propKey)){continue;}var nextProp=nextProps[propKey];if(propKey===STYLE$1){{if(nextProp){// Freeze the next style object so that we can assume it won't be
// mutated. We have already warned for this in the past.
Object.freeze(nextProp);}}// Relies on `updateStylesByID` not mutating `styleUpdates`.
setValueForStyles(domElement,nextProp);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML]:undefined;if(nextHtml!=null){setInnerHTML(domElement,nextHtml);}}else if(propKey===CHILDREN){if(typeof nextProp==='string'){// Avoid setting initial textContent when the text is empty. In IE11 setting
// textContent on a <textarea> will cause the placeholder to not
// show within the <textarea> until it has been focused and blurred again.
// https://github.com/facebook/react/issues/6731#issuecomment-254874553
var canSetTextContent=tag!=='textarea'||nextProp!=='';if(canSetTextContent){setTextContent(domElement,nextProp);}}else if(typeof nextProp==='number'){setTextContent(domElement,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1){// Noop
}else if(propKey===AUTOFOCUS){// We polyfill it separately on the client during commit.
// We could have excluded it in the property list instead of
// adding a special case here, but then it wouldn't be emitted
// on server rendering (but we *do* want to emit it in SSR).
}else if(registrationNameModules.hasOwnProperty(propKey)){if(nextProp!=null){if(true&&typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}ensureListeningTo(rootContainerElement,propKey);}}else if(nextProp!=null){setValueForProperty(domElement,propKey,nextProp,isCustomComponentTag);}}}function updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag){// TODO: Handle wasCustomComponentTag
for(var i=0;i<updatePayload.length;i+=2){var propKey=updatePayload[i];var propValue=updatePayload[i+1];if(propKey===STYLE$1){setValueForStyles(domElement,propValue);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){setInnerHTML(domElement,propValue);}else if(propKey===CHILDREN){setTextContent(domElement,propValue);}else{setValueForProperty(domElement,propKey,propValue,isCustomComponentTag);}}}function createElement(type,props,rootContainerElement,parentNamespace){var isCustomComponentTag=void 0;// We create tags in the namespace of their parent container, except HTML
// tags get no namespace.
var ownerDocument=getOwnerDocumentFromRootContainer(rootContainerElement);var domElement=void 0;var namespaceURI=parentNamespace;if(namespaceURI===HTML_NAMESPACE){namespaceURI=getIntrinsicNamespace(type);}if(namespaceURI===HTML_NAMESPACE){{isCustomComponentTag=isCustomComponent(type,props);// Should this check be gated by parent namespace? Not sure we want to
// allow <SVG> or <mATH>.
!(isCustomComponentTag||type===type.toLowerCase())?warning$1(false,'<%s /> is using incorrect casing. '+'Use PascalCase for React components, '+'or lowercase for HTML elements.',type):void 0;}if(type==='script'){// Create the script via .innerHTML so its "parser-inserted" flag is
// set to true and it does not execute
var div=ownerDocument.createElement('div');div.innerHTML='<script><'+'/script>';// eslint-disable-line
// This is guaranteed to yield a script element.
var firstChild=div.firstChild;domElement=div.removeChild(firstChild);}else if(typeof props.is==='string'){// $FlowIssue `createElement` should be updated for Web Components
domElement=ownerDocument.createElement(type,{is:props.is});}else{// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
// See discussion in https://github.com/facebook/react/pull/6896
// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
domElement=ownerDocument.createElement(type);// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
// attributes on `select`s needs to be added before `option`s are inserted.
// This prevents:
// - a bug where the `select` does not scroll to the correct option because singular
//  `select` elements automatically pick the first item #13222
// - a bug where the `select` set the first item as selected despite the `size` attribute #14239
// See https://github.com/facebook/react/issues/13222
// and https://github.com/facebook/react/issues/14239
if(type==='select'){var node=domElement;if(props.multiple){node.multiple=true;}else if(props.size){// Setting a size greater than 1 causes a select to behave like `multiple=true`, where
// it is possible that no option is selected.
//
// This is only necessary when a select in "single selection mode".
node.size=props.size;}}}}else{domElement=ownerDocument.createElementNS(namespaceURI,type);}{if(namespaceURI===HTML_NAMESPACE){if(!isCustomComponentTag&&Object.prototype.toString.call(domElement)==='[object HTMLUnknownElement]'&&!Object.prototype.hasOwnProperty.call(warnedUnknownTags,type)){warnedUnknownTags[type]=true;warning$1(false,'The tag <%s> is unrecognized in this browser. '+'If you meant to render a React component, start its name with '+'an uppercase letter.',type);}}}return domElement;}function createTextNode(text,rootContainerElement){return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);}function setInitialProperties(domElement,tag,rawProps,rootContainerElement){var isCustomComponentTag=isCustomComponent(tag,rawProps);{validatePropertiesInDevelopment(tag,rawProps);if(isCustomComponentTag&&!didWarnShadyDOM&&domElement.shadyRoot){warning$1(false,'%s is using shady DOM. Using shady DOM with React can '+'cause things to break subtly.',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnShadyDOM=true;}}// TODO: Make sure that we check isMounted before firing any of these events.
var props=void 0;switch(tag){case'iframe':case'object':trapBubbledEvent(TOP_LOAD,domElement);props=rawProps;break;case'video':case'audio':// Create listener for each media event
for(var i=0;i<mediaEventTypes.length;i++){trapBubbledEvent(mediaEventTypes[i],domElement);}props=rawProps;break;case'source':trapBubbledEvent(TOP_ERROR,domElement);props=rawProps;break;case'img':case'image':case'link':trapBubbledEvent(TOP_ERROR,domElement);trapBubbledEvent(TOP_LOAD,domElement);props=rawProps;break;case'form':trapBubbledEvent(TOP_RESET,domElement);trapBubbledEvent(TOP_SUBMIT,domElement);props=rawProps;break;case'details':trapBubbledEvent(TOP_TOGGLE,domElement);props=rawProps;break;case'input':initWrapperState(domElement,rawProps);props=getHostProps(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'option':validateProps(domElement,rawProps);props=getHostProps$1(domElement,rawProps);break;case'select':initWrapperState$1(domElement,rawProps);props=getHostProps$2(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'textarea':initWrapperState$2(domElement,rawProps);props=getHostProps$3(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;default:props=rawProps;}assertValidProps(tag,props);setInitialDOMProperties(tag,domElement,rootContainerElement,props,isCustomComponentTag);switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper(domElement,rawProps,false);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper$3(domElement,rawProps);break;case'option':postMountWrapper$1(domElement,rawProps);break;case'select':postMountWrapper$2(domElement,rawProps);break;default:if(typeof props.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}}// Calculate the diff between the two objects.
function diffProperties(domElement,tag,lastRawProps,nextRawProps,rootContainerElement){{validatePropertiesInDevelopment(tag,nextRawProps);}var updatePayload=null;var lastProps=void 0;var nextProps=void 0;switch(tag){case'input':lastProps=getHostProps(domElement,lastRawProps);nextProps=getHostProps(domElement,nextRawProps);updatePayload=[];break;case'option':lastProps=getHostProps$1(domElement,lastRawProps);nextProps=getHostProps$1(domElement,nextRawProps);updatePayload=[];break;case'select':lastProps=getHostProps$2(domElement,lastRawProps);nextProps=getHostProps$2(domElement,nextRawProps);updatePayload=[];break;case'textarea':lastProps=getHostProps$3(domElement,lastRawProps);nextProps=getHostProps$3(domElement,nextRawProps);updatePayload=[];break;default:lastProps=lastRawProps;nextProps=nextRawProps;if(typeof lastProps.onClick!=='function'&&typeof nextProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}assertValidProps(tag,nextProps);var propKey=void 0;var styleName=void 0;var styleUpdates=null;for(propKey in lastProps){if(nextProps.hasOwnProperty(propKey)||!lastProps.hasOwnProperty(propKey)||lastProps[propKey]==null){continue;}if(propKey===STYLE$1){var lastStyle=lastProps[propKey];for(styleName in lastStyle){if(lastStyle.hasOwnProperty(styleName)){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}}else if(propKey===DANGEROUSLY_SET_INNER_HTML||propKey===CHILDREN){// Noop. This is handled by the clear text mechanism.
}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1){// Noop
}else if(propKey===AUTOFOCUS){// Noop. It doesn't work on updates anyway.
}else if(registrationNameModules.hasOwnProperty(propKey)){// This is a special case. If any listener updates we need to ensure
// that the "current" fiber pointer gets updated so we need a commit
// to update this element.
if(!updatePayload){updatePayload=[];}}else{// For all other deleted properties we add it to the queue. We use
// the whitelist in the commit phase instead.
(updatePayload=updatePayload||[]).push(propKey,null);}}for(propKey in nextProps){var nextProp=nextProps[propKey];var lastProp=lastProps!=null?lastProps[propKey]:undefined;if(!nextProps.hasOwnProperty(propKey)||nextProp===lastProp||nextProp==null&&lastProp==null){continue;}if(propKey===STYLE$1){{if(nextProp){// Freeze the next style object so that we can assume it won't be
// mutated. We have already warned for this in the past.
Object.freeze(nextProp);}}if(lastProp){// Unset styles on `lastProp` but not on `nextProp`.
for(styleName in lastProp){if(lastProp.hasOwnProperty(styleName)&&(!nextProp||!nextProp.hasOwnProperty(styleName))){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}// Update styles that changed since `lastProp`.
for(styleName in nextProp){if(nextProp.hasOwnProperty(styleName)&&lastProp[styleName]!==nextProp[styleName]){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]=nextProp[styleName];}}}else{// Relies on `updateStylesByID` not mutating `styleUpdates`.
if(!styleUpdates){if(!updatePayload){updatePayload=[];}updatePayload.push(propKey,styleUpdates);}styleUpdates=nextProp;}}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML]:undefined;var lastHtml=lastProp?lastProp[HTML]:undefined;if(nextHtml!=null){if(lastHtml!==nextHtml){(updatePayload=updatePayload||[]).push(propKey,''+nextHtml);}}else{// TODO: It might be too late to clear this if we have children
// inserted already.
}}else if(propKey===CHILDREN){if(lastProp!==nextProp&&(typeof nextProp==='string'||typeof nextProp==='number')){(updatePayload=updatePayload||[]).push(propKey,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1){// Noop
}else if(registrationNameModules.hasOwnProperty(propKey)){if(nextProp!=null){// We eagerly listen to this even though we haven't committed yet.
if(true&&typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}ensureListeningTo(rootContainerElement,propKey);}if(!updatePayload&&lastProp!==nextProp){// This is a special case. If any listener updates we need to ensure
// that the "current" props pointer gets updated so we need a commit
// to update this element.
updatePayload=[];}}else{// For any other property we always add it to the queue and then we
// filter it out using the whitelist during the commit.
(updatePayload=updatePayload||[]).push(propKey,nextProp);}}if(styleUpdates){{validateShorthandPropertyCollisionInDev(styleUpdates,nextProps[STYLE$1]);}(updatePayload=updatePayload||[]).push(STYLE$1,styleUpdates);}return updatePayload;}// Apply the diff.
function updateProperties(domElement,updatePayload,tag,lastRawProps,nextRawProps){// Update checked *before* name.
// In the middle of an update, it is possible to have multiple checked.
// When a checked radio tries to change name, browser makes another radio's checked false.
if(tag==='input'&&nextRawProps.type==='radio'&&nextRawProps.name!=null){updateChecked(domElement,nextRawProps);}var wasCustomComponentTag=isCustomComponent(tag,lastRawProps);var isCustomComponentTag=isCustomComponent(tag,nextRawProps);// Apply the diff.
updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag);// TODO: Ensure that an update gets scheduled if any of the special props
// changed.
switch(tag){case'input':// Update the wrapper around inputs *after* updating props. This has to
// happen after `updateDOMProperties`. Otherwise HTML5 input validations
// raise warnings and prevent the new value from being assigned.
updateWrapper(domElement,nextRawProps);break;case'textarea':updateWrapper$1(domElement,nextRawProps);break;case'select':// <select> value update needs to occur after <option> children
// reconciliation
postUpdateWrapper(domElement,nextRawProps);break;}}function getPossibleStandardName(propName){{var lowerCasedName=propName.toLowerCase();if(!possibleStandardNames.hasOwnProperty(lowerCasedName)){return null;}return possibleStandardNames[lowerCasedName]||null;}return null;}function diffHydratedProperties(domElement,tag,rawProps,parentNamespace,rootContainerElement){var isCustomComponentTag=void 0;var extraAttributeNames=void 0;{suppressHydrationWarning=rawProps[SUPPRESS_HYDRATION_WARNING$1]===true;isCustomComponentTag=isCustomComponent(tag,rawProps);validatePropertiesInDevelopment(tag,rawProps);if(isCustomComponentTag&&!didWarnShadyDOM&&domElement.shadyRoot){warning$1(false,'%s is using shady DOM. Using shady DOM with React can '+'cause things to break subtly.',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnShadyDOM=true;}}// TODO: Make sure that we check isMounted before firing any of these events.
switch(tag){case'iframe':case'object':trapBubbledEvent(TOP_LOAD,domElement);break;case'video':case'audio':// Create listener for each media event
for(var i=0;i<mediaEventTypes.length;i++){trapBubbledEvent(mediaEventTypes[i],domElement);}break;case'source':trapBubbledEvent(TOP_ERROR,domElement);break;case'img':case'image':case'link':trapBubbledEvent(TOP_ERROR,domElement);trapBubbledEvent(TOP_LOAD,domElement);break;case'form':trapBubbledEvent(TOP_RESET,domElement);trapBubbledEvent(TOP_SUBMIT,domElement);break;case'details':trapBubbledEvent(TOP_TOGGLE,domElement);break;case'input':initWrapperState(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'option':validateProps(domElement,rawProps);break;case'select':initWrapperState$1(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'textarea':initWrapperState$2(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;}assertValidProps(tag,rawProps);{extraAttributeNames=new Set();var attributes=domElement.attributes;for(var _i=0;_i<attributes.length;_i++){var name=attributes[_i].name.toLowerCase();switch(name){// Built-in SSR attribute is whitelisted
case'data-reactroot':break;// Controlled attributes are not validated
// TODO: Only ignore them on controlled tags.
case'value':break;case'checked':break;case'selected':break;default:// Intentionally use the original name.
// See discussion in https://github.com/facebook/react/pull/10676.
extraAttributeNames.add(attributes[_i].name);}}}var updatePayload=null;for(var propKey in rawProps){if(!rawProps.hasOwnProperty(propKey)){continue;}var nextProp=rawProps[propKey];if(propKey===CHILDREN){// For text content children we compare against textContent. This
// might match additional HTML that is hidden when we read it using
// textContent. E.g. "foo" will match "f<span>oo</span>" but that still
// satisfies our requirement. Our requirement is not to produce perfect
// HTML and attributes. Ideally we should preserve structure but it's
// ok not to if the visible content is still enough to indicate what
// even listeners these nodes might be wired up to.
// TODO: Warn if there is more than a single textNode as a child.
// TODO: Should we use domElement.firstChild.nodeValue to compare?
if(typeof nextProp==='string'){if(domElement.textContent!==nextProp){if(true&&!suppressHydrationWarning){warnForTextDifference(domElement.textContent,nextProp);}updatePayload=[CHILDREN,nextProp];}}else if(typeof nextProp==='number'){if(domElement.textContent!==''+nextProp){if(true&&!suppressHydrationWarning){warnForTextDifference(domElement.textContent,nextProp);}updatePayload=[CHILDREN,''+nextProp];}}}else if(registrationNameModules.hasOwnProperty(propKey)){if(nextProp!=null){if(true&&typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}ensureListeningTo(rootContainerElement,propKey);}}else if(true&&// Convince Flow we've calculated it (it's DEV-only in this method.)
typeof isCustomComponentTag==='boolean'){// Validate that the properties correspond to their expected values.
var serverValue=void 0;var propertyInfo=getPropertyInfo(propKey);if(suppressHydrationWarning){// Don't bother comparing. We're ignoring all these warnings.
}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1||// Controlled attributes are not validated
// TODO: Only ignore them on controlled tags.
propKey==='value'||propKey==='checked'||propKey==='selected'){// Noop
}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var serverHTML=domElement.innerHTML;var nextHtml=nextProp?nextProp[HTML]:undefined;var expectedHTML=normalizeHTML(domElement,nextHtml!=null?nextHtml:'');if(expectedHTML!==serverHTML){warnForPropDifference(propKey,serverHTML,expectedHTML);}}else if(propKey===STYLE$1){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey);if(canDiffStyleForHydrationWarning){var expectedStyle=createDangerousStringForStyles(nextProp);serverValue=domElement.getAttribute('style');if(expectedStyle!==serverValue){warnForPropDifference(propKey,serverValue,expectedStyle);}}}else if(isCustomComponentTag){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey.toLowerCase());serverValue=getValueForAttribute(domElement,propKey,nextProp);if(nextProp!==serverValue){warnForPropDifference(propKey,serverValue,nextProp);}}else if(!shouldIgnoreAttribute(propKey,propertyInfo,isCustomComponentTag)&&!shouldRemoveAttribute(propKey,nextProp,propertyInfo,isCustomComponentTag)){var isMismatchDueToBadCasing=false;if(propertyInfo!==null){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propertyInfo.attributeName);serverValue=getValueForProperty(domElement,propKey,nextProp,propertyInfo);}else{var ownNamespace=parentNamespace;if(ownNamespace===HTML_NAMESPACE){ownNamespace=getIntrinsicNamespace(tag);}if(ownNamespace===HTML_NAMESPACE){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey.toLowerCase());}else{var standardName=getPossibleStandardName(propKey);if(standardName!==null&&standardName!==propKey){// If an SVG prop is supplied with bad casing, it will
// be successfully parsed from HTML, but will produce a mismatch
// (and would be incorrectly rendered on the client).
// However, we already warn about bad casing elsewhere.
// So we'll skip the misleading extra mismatch warning in this case.
isMismatchDueToBadCasing=true;// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(standardName);}// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey);}serverValue=getValueForAttribute(domElement,propKey,nextProp);}if(nextProp!==serverValue&&!isMismatchDueToBadCasing){warnForPropDifference(propKey,serverValue,nextProp);}}}}{// $FlowFixMe - Should be inferred as not undefined.
if(extraAttributeNames.size>0&&!suppressHydrationWarning){// $FlowFixMe - Should be inferred as not undefined.
warnForExtraAttributes(extraAttributeNames);}}switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper(domElement,rawProps,true);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper$3(domElement,rawProps);break;case'select':case'option':// For input and textarea we current always set the value property at
// post mount to force it to diverge from attributes. However, for
// option and select we don't quite do the same thing and select
// is not resilient to the DOM state changing so we don't do that here.
// TODO: Consider not doing this for input and textarea.
break;default:if(typeof rawProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}return updatePayload;}function diffHydratedText(textNode,text){var isDifferent=textNode.nodeValue!==text;return isDifferent;}function warnForUnmatchedText(textNode,text){{warnForTextDifference(textNode.nodeValue,text);}}function warnForDeletedHydratableElement(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Did not expect server HTML to contain a <%s> in <%s>.',child.nodeName.toLowerCase(),parentNode.nodeName.toLowerCase());}}function warnForDeletedHydratableText(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Did not expect server HTML to contain the text node "%s" in <%s>.',child.nodeValue,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedElement(parentNode,tag,props){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Expected server HTML to contain a matching <%s> in <%s>.',tag,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedText(parentNode,text){{if(text===''){// We expect to insert empty text nodes since they're not represented in
// the HTML.
// TODO: Remove this special case if we can just avoid inserting empty
// text nodes.
return;}if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Expected server HTML to contain a matching text node for "%s" in <%s>.',text,parentNode.nodeName.toLowerCase());}}function restoreControlledState$1(domElement,tag,props){switch(tag){case'input':restoreControlledState(domElement,props);return;case'textarea':restoreControlledState$3(domElement,props);return;case'select':restoreControlledState$2(domElement,props);return;}}// TODO: direct imports like some-package/src/* are bad. Fix me.
var validateDOMNesting=function validateDOMNesting(){};var updatedAncestorInfo=function updatedAncestorInfo(){};{// This validation code was written based on the HTML5 parsing spec:
// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
//
// Note: this does not catch all invalid nesting, nor does it try to (as it's
// not clear what practical benefit doing so provides); instead, we warn only
// for cases where the parser will give a parse tree differing from what React
// intended. For example, <b><div></div></b> is invalid but we don't warn
// because it still parses correctly; we do warn for other cases like nested
// <p> tags where the beginning of the second element implicitly closes the
// first, causing a confusing mess.
// https://html.spec.whatwg.org/multipage/syntax.html#special
var specialTags=['address','applet','area','article','aside','base','basefont','bgsound','blockquote','body','br','button','caption','center','col','colgroup','dd','details','dir','div','dl','dt','embed','fieldset','figcaption','figure','footer','form','frame','frameset','h1','h2','h3','h4','h5','h6','head','header','hgroup','hr','html','iframe','img','input','isindex','li','link','listing','main','marquee','menu','menuitem','meta','nav','noembed','noframes','noscript','object','ol','p','param','plaintext','pre','script','section','select','source','style','summary','table','tbody','td','template','textarea','tfoot','th','thead','title','tr','track','ul','wbr','xmp'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
var inScopeTags=['applet','caption','html','table','td','th','marquee','object','template',// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
// TODO: Distinguish by namespace here -- for <title>, including it here
// errs on the side of fewer warnings
'foreignObject','desc','title'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
var buttonScopeTags=inScopeTags.concat(['button']);// https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
var impliedEndTags=['dd','dt','li','option','optgroup','p','rp','rt'];var emptyAncestorInfo={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null};updatedAncestorInfo=function updatedAncestorInfo(oldInfo,tag){var ancestorInfo=_assign({},oldInfo||emptyAncestorInfo);var info={tag:tag};if(inScopeTags.indexOf(tag)!==-1){ancestorInfo.aTagInScope=null;ancestorInfo.buttonTagInScope=null;ancestorInfo.nobrTagInScope=null;}if(buttonScopeTags.indexOf(tag)!==-1){ancestorInfo.pTagInButtonScope=null;}// See rules for 'li', 'dd', 'dt' start tags in
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
if(specialTags.indexOf(tag)!==-1&&tag!=='address'&&tag!=='div'&&tag!=='p'){ancestorInfo.listItemTagAutoclosing=null;ancestorInfo.dlItemTagAutoclosing=null;}ancestorInfo.current=info;if(tag==='form'){ancestorInfo.formTag=info;}if(tag==='a'){ancestorInfo.aTagInScope=info;}if(tag==='button'){ancestorInfo.buttonTagInScope=info;}if(tag==='nobr'){ancestorInfo.nobrTagInScope=info;}if(tag==='p'){ancestorInfo.pTagInButtonScope=info;}if(tag==='li'){ancestorInfo.listItemTagAutoclosing=info;}if(tag==='dd'||tag==='dt'){ancestorInfo.dlItemTagAutoclosing=info;}return ancestorInfo;};/**
   * Returns whether
   */var isTagValidWithParent=function isTagValidWithParent(tag,parentTag){// First, let's check if we're in an unusual parsing mode...
switch(parentTag){// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
case'select':return tag==='option'||tag==='optgroup'||tag==='#text';case'optgroup':return tag==='option'||tag==='#text';// Strictly speaking, seeing an <option> doesn't mean we're in a <select>
// but
case'option':return tag==='#text';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
// No special behavior since these rules fall back to "in body" mode for
// all except special table nodes which cause bad parsing behavior anyway.
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
case'tr':return tag==='th'||tag==='td'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
case'tbody':case'thead':case'tfoot':return tag==='tr'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
case'colgroup':return tag==='col'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
case'table':return tag==='caption'||tag==='colgroup'||tag==='tbody'||tag==='tfoot'||tag==='thead'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
case'head':return tag==='base'||tag==='basefont'||tag==='bgsound'||tag==='link'||tag==='meta'||tag==='title'||tag==='noscript'||tag==='noframes'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
case'html':return tag==='head'||tag==='body';case'#document':return tag==='html';}// Probably in the "in body" parsing mode, so we outlaw only tag combos
// where the parsing rules cause implicit opens or closes to be added.
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
switch(tag){case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return parentTag!=='h1'&&parentTag!=='h2'&&parentTag!=='h3'&&parentTag!=='h4'&&parentTag!=='h5'&&parentTag!=='h6';case'rp':case'rt':return impliedEndTags.indexOf(parentTag)===-1;case'body':case'caption':case'col':case'colgroup':case'frame':case'head':case'html':case'tbody':case'td':case'tfoot':case'th':case'thead':case'tr':// These tags are only valid with a few parents that have special child
// parsing rules -- if we're down here, then none of those matched and
// so we allow it only if we don't know what the parent is, as all other
// cases are invalid.
return parentTag==null;}return true;};/**
   * Returns whether
   */var findInvalidAncestorForTag=function findInvalidAncestorForTag(tag,ancestorInfo){switch(tag){case'address':case'article':case'aside':case'blockquote':case'center':case'details':case'dialog':case'dir':case'div':case'dl':case'fieldset':case'figcaption':case'figure':case'footer':case'header':case'hgroup':case'main':case'menu':case'nav':case'ol':case'p':case'section':case'summary':case'ul':case'pre':case'listing':case'table':case'hr':case'xmp':case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return ancestorInfo.pTagInButtonScope;case'form':return ancestorInfo.formTag||ancestorInfo.pTagInButtonScope;case'li':return ancestorInfo.listItemTagAutoclosing;case'dd':case'dt':return ancestorInfo.dlItemTagAutoclosing;case'button':return ancestorInfo.buttonTagInScope;case'a':// Spec says something about storing a list of markers, but it sounds
// equivalent to this check.
return ancestorInfo.aTagInScope;case'nobr':return ancestorInfo.nobrTagInScope;}return null;};var didWarn={};validateDOMNesting=function validateDOMNesting(childTag,childText,ancestorInfo){ancestorInfo=ancestorInfo||emptyAncestorInfo;var parentInfo=ancestorInfo.current;var parentTag=parentInfo&&parentInfo.tag;if(childText!=null){!(childTag==null)?warningWithoutStack$1(false,'validateDOMNesting: when childText is passed, childTag should be null'):void 0;childTag='#text';}var invalidParent=isTagValidWithParent(childTag,parentTag)?null:parentInfo;var invalidAncestor=invalidParent?null:findInvalidAncestorForTag(childTag,ancestorInfo);var invalidParentOrAncestor=invalidParent||invalidAncestor;if(!invalidParentOrAncestor){return;}var ancestorTag=invalidParentOrAncestor.tag;var addendum=getCurrentFiberStackInDev();var warnKey=!!invalidParent+'|'+childTag+'|'+ancestorTag+'|'+addendum;if(didWarn[warnKey]){return;}didWarn[warnKey]=true;var tagDisplayName=childTag;var whitespaceInfo='';if(childTag==='#text'){if(/\S/.test(childText)){tagDisplayName='Text nodes';}else{tagDisplayName='Whitespace text nodes';whitespaceInfo=" Make sure you don't have any extra whitespace between tags on "+'each line of your source code.';}}else{tagDisplayName='<'+childTag+'>';}if(invalidParent){var info='';if(ancestorTag==='table'&&childTag==='tr'){info+=' Add a <tbody> to your code to match the DOM tree generated by '+'the browser.';}warningWithoutStack$1(false,'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s',tagDisplayName,ancestorTag,whitespaceInfo,info,addendum);}else{warningWithoutStack$1(false,'validateDOMNesting(...): %s cannot appear as a descendant of '+'<%s>.%s',tagDisplayName,ancestorTag,addendum);}};}// Renderers that don't support persistence
// can re-export everything from this module.
function shim(){invariant(false,'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');}// Persistence (when unsupported)
var supportsPersistence=false;var cloneInstance=shim;var createContainerChildSet=shim;var appendChildToContainerChildSet=shim;var finalizeContainerChildren=shim;var replaceContainerChildren=shim;var cloneHiddenInstance=shim;var cloneUnhiddenInstance=shim;var createHiddenTextInstance=shim;var SUPPRESS_HYDRATION_WARNING=void 0;{SUPPRESS_HYDRATION_WARNING='suppressHydrationWarning';}var SUSPENSE_START_DATA='$';var SUSPENSE_END_DATA='/$';var STYLE='style';var eventsEnabled=null;var selectionInformation=null;function shouldAutoFocusHostComponent(type,props){switch(type){case'button':case'input':case'select':case'textarea':return!!props.autoFocus;}return false;}function getRootHostContext(rootContainerInstance){var type=void 0;var namespace=void 0;var nodeType=rootContainerInstance.nodeType;switch(nodeType){case DOCUMENT_NODE:case DOCUMENT_FRAGMENT_NODE:{type=nodeType===DOCUMENT_NODE?'#document':'#fragment';var root=rootContainerInstance.documentElement;namespace=root?root.namespaceURI:getChildNamespace(null,'');break;}default:{var container=nodeType===COMMENT_NODE?rootContainerInstance.parentNode:rootContainerInstance;var ownNamespace=container.namespaceURI||null;type=container.tagName;namespace=getChildNamespace(ownNamespace,type);break;}}{var validatedTag=type.toLowerCase();var _ancestorInfo=updatedAncestorInfo(null,validatedTag);return{namespace:namespace,ancestorInfo:_ancestorInfo};}return namespace;}function getChildHostContext(parentHostContext,type,rootContainerInstance){{var parentHostContextDev=parentHostContext;var _namespace=getChildNamespace(parentHostContextDev.namespace,type);var _ancestorInfo2=updatedAncestorInfo(parentHostContextDev.ancestorInfo,type);return{namespace:_namespace,ancestorInfo:_ancestorInfo2};}var parentNamespace=parentHostContext;return getChildNamespace(parentNamespace,type);}function getPublicInstance(instance){return instance;}function prepareForCommit(containerInfo){eventsEnabled=isEnabled();selectionInformation=getSelectionInformation();setEnabled(false);}function resetAfterCommit(containerInfo){restoreSelection(selectionInformation);selectionInformation=null;setEnabled(eventsEnabled);eventsEnabled=null;}function createInstance(type,props,rootContainerInstance,hostContext,internalInstanceHandle){var parentNamespace=void 0;{// TODO: take namespace into account when validating.
var hostContextDev=hostContext;validateDOMNesting(type,null,hostContextDev.ancestorInfo);if(typeof props.children==='string'||typeof props.children==='number'){var string=''+props.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}parentNamespace=hostContextDev.namespace;}var domElement=createElement(type,props,rootContainerInstance,parentNamespace);precacheFiberNode(internalInstanceHandle,domElement);updateFiberProps(domElement,props);return domElement;}function appendInitialChild(parentInstance,child){parentInstance.appendChild(child);}function finalizeInitialChildren(domElement,type,props,rootContainerInstance,hostContext){setInitialProperties(domElement,type,props,rootContainerInstance);return shouldAutoFocusHostComponent(type,props);}function prepareUpdate(domElement,type,oldProps,newProps,rootContainerInstance,hostContext){{var hostContextDev=hostContext;if(_typeof(newProps.children)!==_typeof(oldProps.children)&&(typeof newProps.children==='string'||typeof newProps.children==='number')){var string=''+newProps.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}}return diffProperties(domElement,type,oldProps,newProps,rootContainerInstance);}function shouldSetTextContent(type,props){return type==='textarea'||type==='option'||type==='noscript'||typeof props.children==='string'||typeof props.children==='number'||_typeof(props.dangerouslySetInnerHTML)==='object'&&props.dangerouslySetInnerHTML!==null&&props.dangerouslySetInnerHTML.__html!=null;}function shouldDeprioritizeSubtree(type,props){return!!props.hidden;}function createTextInstance(text,rootContainerInstance,hostContext,internalInstanceHandle){{var hostContextDev=hostContext;validateDOMNesting(null,text,hostContextDev.ancestorInfo);}var textNode=createTextNode(text,rootContainerInstance);precacheFiberNode(internalInstanceHandle,textNode);return textNode;}var isPrimaryRenderer=true;// This initialization code may run even on server environments
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.
var scheduleTimeout=typeof setTimeout==='function'?setTimeout:undefined;var cancelTimeout=typeof clearTimeout==='function'?clearTimeout:undefined;var noTimeout=-1;var schedulePassiveEffects=scheduler.unstable_scheduleCallback;var cancelPassiveEffects=scheduler.unstable_cancelCallback;// -------------------
//     Mutation
// -------------------
var supportsMutation=true;function commitMount(domElement,type,newProps,internalInstanceHandle){// Despite the naming that might imply otherwise, this method only
// fires if there is an `Update` effect scheduled during mounting.
// This happens if `finalizeInitialChildren` returns `true` (which it
// does to implement the `autoFocus` attribute on the client). But
// there are also other cases when this might happen (such as patching
// up text content during hydration mismatch). So we'll check this again.
if(shouldAutoFocusHostComponent(type,newProps)){domElement.focus();}}function commitUpdate(domElement,updatePayload,type,oldProps,newProps,internalInstanceHandle){// Update the props handle so that we know which props are the ones with
// with current event handlers.
updateFiberProps(domElement,newProps);// Apply the diff to the DOM node.
updateProperties(domElement,updatePayload,type,oldProps,newProps);}function resetTextContent(domElement){setTextContent(domElement,'');}function commitTextUpdate(textInstance,oldText,newText){textInstance.nodeValue=newText;}function appendChild(parentInstance,child){parentInstance.appendChild(child);}function appendChildToContainer(container,child){var parentNode=void 0;if(container.nodeType===COMMENT_NODE){parentNode=container.parentNode;parentNode.insertBefore(child,container);}else{parentNode=container;parentNode.appendChild(child);}// This container might be used for a portal.
// If something inside a portal is clicked, that click should bubble
// through the React tree. However, on Mobile Safari the click would
// never bubble through the *DOM* tree unless an ancestor with onclick
// event exists. So we wouldn't see it and dispatch it.
// This is why we ensure that non React root containers have inline onclick
// defined.
// https://github.com/facebook/react/issues/11918
var reactRootContainer=container._reactRootContainer;if((reactRootContainer===null||reactRootContainer===undefined)&&parentNode.onclick===null){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(parentNode);}}function insertBefore(parentInstance,child,beforeChild){parentInstance.insertBefore(child,beforeChild);}function insertInContainerBefore(container,child,beforeChild){if(container.nodeType===COMMENT_NODE){container.parentNode.insertBefore(child,beforeChild);}else{container.insertBefore(child,beforeChild);}}function removeChild(parentInstance,child){parentInstance.removeChild(child);}function removeChildFromContainer(container,child){if(container.nodeType===COMMENT_NODE){container.parentNode.removeChild(child);}else{container.removeChild(child);}}function clearSuspenseBoundary(parentInstance,suspenseInstance){var node=suspenseInstance;// Delete all nodes within this suspense boundary.
// There might be nested nodes so we need to keep track of how
// deep we are and only break out when we're back on top.
var depth=0;do{var nextNode=node.nextSibling;parentInstance.removeChild(node);if(nextNode&&nextNode.nodeType===COMMENT_NODE){var data=nextNode.data;if(data===SUSPENSE_END_DATA){if(depth===0){parentInstance.removeChild(nextNode);return;}else{depth--;}}else if(data===SUSPENSE_START_DATA){depth++;}}node=nextNode;}while(node);// TODO: Warn, we didn't find the end comment boundary.
}function clearSuspenseBoundaryFromContainer(container,suspenseInstance){if(container.nodeType===COMMENT_NODE){clearSuspenseBoundary(container.parentNode,suspenseInstance);}else if(container.nodeType===ELEMENT_NODE){clearSuspenseBoundary(container,suspenseInstance);}else{// Document nodes should never contain suspense boundaries.
}}function hideInstance(instance){// TODO: Does this work for all element types? What about MathML? Should we
// pass host context to this method?
instance=instance;instance.style.display='none';}function hideTextInstance(textInstance){textInstance.nodeValue='';}function unhideInstance(instance,props){instance=instance;var styleProp=props[STYLE];var display=styleProp!==undefined&&styleProp!==null&&styleProp.hasOwnProperty('display')?styleProp.display:null;instance.style.display=dangerousStyleValue('display',display);}function unhideTextInstance(textInstance,text){textInstance.nodeValue=text;}// -------------------
//     Hydration
// -------------------
var supportsHydration=true;function canHydrateInstance(instance,type,props){if(instance.nodeType!==ELEMENT_NODE||type.toLowerCase()!==instance.nodeName.toLowerCase()){return null;}// This has now been refined to an element node.
return instance;}function canHydrateTextInstance(instance,text){if(text===''||instance.nodeType!==TEXT_NODE){// Empty strings are not parsed by HTML so there won't be a correct match here.
return null;}// This has now been refined to a text node.
return instance;}function canHydrateSuspenseInstance(instance){if(instance.nodeType!==COMMENT_NODE){// Empty strings are not parsed by HTML so there won't be a correct match here.
return null;}// This has now been refined to a suspense node.
return instance;}function getNextHydratableSibling(instance){var node=instance.nextSibling;// Skip non-hydratable nodes.
while(node&&node.nodeType!==ELEMENT_NODE&&node.nodeType!==TEXT_NODE&&(!enableSuspenseServerRenderer||node.nodeType!==COMMENT_NODE||node.data!==SUSPENSE_START_DATA)){node=node.nextSibling;}return node;}function getFirstHydratableChild(parentInstance){var next=parentInstance.firstChild;// Skip non-hydratable nodes.
while(next&&next.nodeType!==ELEMENT_NODE&&next.nodeType!==TEXT_NODE&&(!enableSuspenseServerRenderer||next.nodeType!==COMMENT_NODE||next.data!==SUSPENSE_START_DATA)){next=next.nextSibling;}return next;}function hydrateInstance(instance,type,props,rootContainerInstance,hostContext,internalInstanceHandle){precacheFiberNode(internalInstanceHandle,instance);// TODO: Possibly defer this until the commit phase where all the events
// get attached.
updateFiberProps(instance,props);var parentNamespace=void 0;{var hostContextDev=hostContext;parentNamespace=hostContextDev.namespace;}return diffHydratedProperties(instance,type,props,parentNamespace,rootContainerInstance);}function hydrateTextInstance(textInstance,text,internalInstanceHandle){precacheFiberNode(internalInstanceHandle,textInstance);return diffHydratedText(textInstance,text);}function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance){var node=suspenseInstance.nextSibling;// Skip past all nodes within this suspense boundary.
// There might be nested nodes so we need to keep track of how
// deep we are and only break out when we're back on top.
var depth=0;while(node){if(node.nodeType===COMMENT_NODE){var data=node.data;if(data===SUSPENSE_END_DATA){if(depth===0){return getNextHydratableSibling(node);}else{depth--;}}else if(data===SUSPENSE_START_DATA){depth++;}}node=node.nextSibling;}// TODO: Warn, we didn't find the end comment boundary.
return null;}function didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,text){{warnForUnmatchedText(textInstance,text);}}function didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,text){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){warnForUnmatchedText(textInstance,text);}}function didNotHydrateContainerInstance(parentContainer,instance){{if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentContainer,instance);}else if(instance.nodeType===COMMENT_NODE){// TODO: warnForDeletedHydratableSuspenseBoundary
}else{warnForDeletedHydratableText(parentContainer,instance);}}}function didNotHydrateInstance(parentType,parentProps,parentInstance,instance){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentInstance,instance);}else if(instance.nodeType===COMMENT_NODE){// TODO: warnForDeletedHydratableSuspenseBoundary
}else{warnForDeletedHydratableText(parentInstance,instance);}}}function didNotFindHydratableContainerInstance(parentContainer,type,props){{warnForInsertedHydratedElement(parentContainer,type,props);}}function didNotFindHydratableContainerTextInstance(parentContainer,text){{warnForInsertedHydratedText(parentContainer,text);}}function didNotFindHydratableInstance(parentType,parentProps,parentInstance,type,props){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){warnForInsertedHydratedElement(parentInstance,type,props);}}function didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,text){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){warnForInsertedHydratedText(parentInstance,text);}}function didNotFindHydratableSuspenseInstance(parentType,parentProps,parentInstance){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){// TODO: warnForInsertedHydratedSuspense(parentInstance);
}}// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji='\u269B';var warningEmoji='\u26D4';var supportsUserTiming=typeof performance!=='undefined'&&typeof performance.mark==='function'&&typeof performance.clearMarks==='function'&&typeof performance.measure==='function'&&typeof performance.clearMeasures==='function';// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber=null;// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase=null;var currentPhaseFiber=null;// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting=false;var hasScheduledUpdateInCurrentCommit=false;var hasScheduledUpdateInCurrentPhase=false;var commitCountInCurrentWorkLoop=0;var effectCountInCurrentCommit=0;var isWaitingForCallback=false;// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit=new Set();var formatMarkName=function formatMarkName(markName){return reactEmoji+' '+markName;};var formatLabel=function formatLabel(label,warning){var prefix=warning?warningEmoji+' ':reactEmoji+' ';var suffix=warning?' Warning: '+warning:'';return''+prefix+label+suffix;};var beginMark=function beginMark(markName){performance.mark(formatMarkName(markName));};var clearMark=function clearMark(markName){performance.clearMarks(formatMarkName(markName));};var endMark=function endMark(label,markName,warning){var formattedMarkName=formatMarkName(markName);var formattedLabel=formatLabel(label,warning);try{performance.measure(formattedLabel,formattedMarkName);}catch(err){}// If previous mark was missing for some reason, this will throw.
// This could only happen if React crashed in an unexpected place earlier.
// Don't pile on with more errors.
// Clear marks immediately to avoid growing buffer.
performance.clearMarks(formattedMarkName);performance.clearMeasures(formattedLabel);};var getFiberMarkName=function getFiberMarkName(label,debugID){return label+' (#'+debugID+')';};var getFiberLabel=function getFiberLabel(componentName,isMounted,phase){if(phase===null){// These are composite component total time measurements.
return componentName+' ['+(isMounted?'update':'mount')+']';}else{// Composite component methods.
return componentName+'.'+phase;}};var beginFiberMark=function beginFiberMark(fiber,phase){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);if(isCommitting&&labelsInCurrentCommit.has(label)){// During the commit phase, we don't show duplicate labels because
// there is a fixed overhead for every measurement, and we don't
// want to stretch the commit phase beyond necessary.
return false;}labelsInCurrentCommit.add(label);var markName=getFiberMarkName(label,debugID);beginMark(markName);return true;};var clearFiberMark=function clearFiberMark(fiber,phase){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);var markName=getFiberMarkName(label,debugID);clearMark(markName);};var endFiberMark=function endFiberMark(fiber,phase,warning){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);var markName=getFiberMarkName(label,debugID);endMark(label,markName,warning);};var shouldIgnoreFiber=function shouldIgnoreFiber(fiber){// Host components should be skipped in the timeline.
// We could check typeof fiber.type, but does this work with RN?
switch(fiber.tag){case HostRoot:case HostComponent:case HostText:case HostPortal:case Fragment:case ContextProvider:case ContextConsumer:case Mode:return true;default:return false;}};var clearPendingPhaseMeasurement=function clearPendingPhaseMeasurement(){if(currentPhase!==null&&currentPhaseFiber!==null){clearFiberMark(currentPhaseFiber,currentPhase);}currentPhaseFiber=null;currentPhase=null;hasScheduledUpdateInCurrentPhase=false;};var pauseTimers=function pauseTimers(){// Stops all currently active measurements so that they can be resumed
// if we continue in a later deferred loop from the same unit of work.
var fiber=currentFiber;while(fiber){if(fiber._debugIsCurrentlyTiming){endFiberMark(fiber,null,null);}fiber=fiber.return;}};var resumeTimersRecursively=function resumeTimersRecursively(fiber){if(fiber.return!==null){resumeTimersRecursively(fiber.return);}if(fiber._debugIsCurrentlyTiming){beginFiberMark(fiber,null);}};var resumeTimers=function resumeTimers(){// Resumes all measurements that were active during the last deferred loop.
if(currentFiber!==null){resumeTimersRecursively(currentFiber);}};function recordEffect(){if(enableUserTimingAPI){effectCountInCurrentCommit++;}}function recordScheduleUpdate(){if(enableUserTimingAPI){if(isCommitting){hasScheduledUpdateInCurrentCommit=true;}if(currentPhase!==null&&currentPhase!=='componentWillMount'&&currentPhase!=='componentWillReceiveProps'){hasScheduledUpdateInCurrentPhase=true;}}}function startRequestCallbackTimer(){if(enableUserTimingAPI){if(supportsUserTiming&&!isWaitingForCallback){isWaitingForCallback=true;beginMark('(Waiting for async callback...)');}}}function stopRequestCallbackTimer(didExpire,expirationTime){if(enableUserTimingAPI){if(supportsUserTiming){isWaitingForCallback=false;var warning=didExpire?'React was blocked by main thread':null;endMark('(Waiting for async callback... will force flush in '+expirationTime+' ms)','(Waiting for async callback...)',warning);}}}function startWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, this is the fiber to unwind from.
currentFiber=fiber;if(!beginFiberMark(fiber,null)){return;}fiber._debugIsCurrentlyTiming=true;}}function cancelWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// Remember we shouldn't complete measurement for this fiber.
// Otherwise flamechart will be deep even for small updates.
fiber._debugIsCurrentlyTiming=false;clearFiberMark(fiber,null);}}function stopWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, its parent is the fiber to unwind from.
currentFiber=fiber.return;if(!fiber._debugIsCurrentlyTiming){return;}fiber._debugIsCurrentlyTiming=false;endFiberMark(fiber,null,null);}}function stopFailedWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, its parent is the fiber to unwind from.
currentFiber=fiber.return;if(!fiber._debugIsCurrentlyTiming){return;}fiber._debugIsCurrentlyTiming=false;var warning=fiber.tag===SuspenseComponent||fiber.tag===DehydratedSuspenseComponent?'Rendering was suspended':'An error was thrown inside this error boundary';endFiberMark(fiber,null,warning);}}function startPhaseTimer(fiber,phase){if(enableUserTimingAPI){if(!supportsUserTiming){return;}clearPendingPhaseMeasurement();if(!beginFiberMark(fiber,phase)){return;}currentPhaseFiber=fiber;currentPhase=phase;}}function stopPhaseTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}if(currentPhase!==null&&currentPhaseFiber!==null){var warning=hasScheduledUpdateInCurrentPhase?'Scheduled a cascading update':null;endFiberMark(currentPhaseFiber,currentPhase,warning);}currentPhase=null;currentPhaseFiber=null;}}function startWorkLoopTimer(nextUnitOfWork){if(enableUserTimingAPI){currentFiber=nextUnitOfWork;if(!supportsUserTiming){return;}commitCountInCurrentWorkLoop=0;// This is top level call.
// Any other measurements are performed within.
beginMark('(React Tree Reconciliation)');// Resume any measurements that were in progress during the last loop.
resumeTimers();}}function stopWorkLoopTimer(interruptedBy,didCompleteRoot){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var warning=null;if(interruptedBy!==null){if(interruptedBy.tag===HostRoot){warning='A top-level update interrupted the previous render';}else{var componentName=getComponentName(interruptedBy.type)||'Unknown';warning='An update to '+componentName+' interrupted the previous render';}}else if(commitCountInCurrentWorkLoop>1){warning='There were cascading updates';}commitCountInCurrentWorkLoop=0;var label=didCompleteRoot?'(React Tree Reconciliation: Completed Root)':'(React Tree Reconciliation: Yielded)';// Pause any measurements until the next loop.
pauseTimers();endMark(label,'(React Tree Reconciliation)',warning);}}function startCommitTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}isCommitting=true;hasScheduledUpdateInCurrentCommit=false;labelsInCurrentCommit.clear();beginMark('(Committing Changes)');}}function stopCommitTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var warning=null;if(hasScheduledUpdateInCurrentCommit){warning='Lifecycle hook scheduled a cascading update';}else if(commitCountInCurrentWorkLoop>0){warning='Caused by a cascading update in earlier commit';}hasScheduledUpdateInCurrentCommit=false;commitCountInCurrentWorkLoop++;isCommitting=false;labelsInCurrentCommit.clear();endMark('(Committing Changes)','(Committing Changes)',warning);}}function startCommitSnapshotEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Committing Snapshot Effects)');}}function stopCommitSnapshotEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Committing Snapshot Effects: '+count+' Total)','(Committing Snapshot Effects)',null);}}function startCommitHostEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Committing Host Effects)');}}function stopCommitHostEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Committing Host Effects: '+count+' Total)','(Committing Host Effects)',null);}}function startCommitLifeCyclesTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Calling Lifecycle Methods)');}}function stopCommitLifeCyclesTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Calling Lifecycle Methods: '+count+' Total)','(Calling Lifecycle Methods)',null);}}var valueStack=[];var fiberStack=void 0;{fiberStack=[];}var index=-1;function createCursor(defaultValue){return{current:defaultValue};}function pop(cursor,fiber){if(index<0){{warningWithoutStack$1(false,'Unexpected pop.');}return;}{if(fiber!==fiberStack[index]){warningWithoutStack$1(false,'Unexpected Fiber popped.');}}cursor.current=valueStack[index];valueStack[index]=null;{fiberStack[index]=null;}index--;}function push(cursor,value,fiber){index++;valueStack[index]=cursor.current;{fiberStack[index]=fiber;}cursor.current=value;}function checkThatStackIsEmpty(){{if(index!==-1){warningWithoutStack$1(false,'Expected an empty stack. Something was not reset properly.');}}}function resetStackAfterFatalErrorInDev(){{index=-1;valueStack.length=0;fiberStack.length=0;}}var warnedAboutMissingGetChildContext=void 0;{warnedAboutMissingGetChildContext={};}var emptyContextObject={};{Object.freeze(emptyContextObject);}// A cursor to the current merged context object on the stack.
var contextStackCursor=createCursor(emptyContextObject);// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor=createCursor(false);// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext=emptyContextObject;function getUnmaskedContext(workInProgress,Component,didPushOwnContextIfProvider){if(didPushOwnContextIfProvider&&isContextProvider(Component)){// If the fiber is a context provider itself, when we read its context
// we may have already pushed its own child context on the stack. A context
// provider should not "see" its own child context. Therefore we read the
// previous (parent) context instead for a context provider.
return previousContext;}return contextStackCursor.current;}function cacheContext(workInProgress,unmaskedContext,maskedContext){var instance=workInProgress.stateNode;instance.__reactInternalMemoizedUnmaskedChildContext=unmaskedContext;instance.__reactInternalMemoizedMaskedChildContext=maskedContext;}function getMaskedContext(workInProgress,unmaskedContext){var type=workInProgress.type;var contextTypes=type.contextTypes;if(!contextTypes){return emptyContextObject;}// Avoid recreating masked context unless unmasked context has changed.
// Failing to do this will result in unnecessary calls to componentWillReceiveProps.
// This may trigger infinite loops if componentWillReceiveProps calls setState.
var instance=workInProgress.stateNode;if(instance&&instance.__reactInternalMemoizedUnmaskedChildContext===unmaskedContext){return instance.__reactInternalMemoizedMaskedChildContext;}var context={};for(var key in contextTypes){context[key]=unmaskedContext[key];}{var name=getComponentName(type)||'Unknown';checkPropTypes(contextTypes,context,'context',name,getCurrentFiberStackInDev);}// Cache unmasked context so we can avoid recreating masked context unless necessary.
// Context is created before the class component is instantiated so check for instance.
if(instance){cacheContext(workInProgress,unmaskedContext,context);}return context;}function hasContextChanged(){return didPerformWorkStackCursor.current;}function isContextProvider(type){var childContextTypes=type.childContextTypes;return childContextTypes!==null&&childContextTypes!==undefined;}function popContext(fiber){pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}function popTopLevelContextObject(fiber){pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}function pushTopLevelContextObject(fiber,context,didChange){!(contextStackCursor.current===emptyContextObject)?invariant(false,'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'):void 0;push(contextStackCursor,context,fiber);push(didPerformWorkStackCursor,didChange,fiber);}function processChildContext(fiber,type,parentContext){var instance=fiber.stateNode;var childContextTypes=type.childContextTypes;// TODO (bvaughn) Replace this behavior with an invariant() in the future.
// It has only been added in Fiber to match the (unintentional) behavior in Stack.
if(typeof instance.getChildContext!=='function'){{var componentName=getComponentName(type)||'Unknown';if(!warnedAboutMissingGetChildContext[componentName]){warnedAboutMissingGetChildContext[componentName]=true;warningWithoutStack$1(false,'%s.childContextTypes is specified but there is no getChildContext() method '+'on the instance. You can either define getChildContext() on %s or remove '+'childContextTypes from it.',componentName,componentName);}}return parentContext;}var childContext=void 0;{setCurrentPhase('getChildContext');}startPhaseTimer(fiber,'getChildContext');childContext=instance.getChildContext();stopPhaseTimer();{setCurrentPhase(null);}for(var contextKey in childContext){!(contextKey in childContextTypes)?invariant(false,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',getComponentName(type)||'Unknown',contextKey):void 0;}{var name=getComponentName(type)||'Unknown';checkPropTypes(childContextTypes,childContext,'child context',name,// In practice, there is one case in which we won't get a stack. It's when
// somebody calls unstable_renderSubtreeIntoContainer() and we process
// context from the parent component instance. The stack will be missing
// because it's outside of the reconciliation, and so the pointer has not
// been set. This is rare and doesn't matter. We'll also remove that API.
getCurrentFiberStackInDev);}return _assign({},parentContext,childContext);}function pushContextProvider(workInProgress){var instance=workInProgress.stateNode;// We push the context as early as possible to ensure stack integrity.
// If the instance does not exist yet, we will push null at first,
// and replace it on the stack later when invalidating the context.
var memoizedMergedChildContext=instance&&instance.__reactInternalMemoizedMergedChildContext||emptyContextObject;// Remember the parent context so we can merge with it later.
// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
previousContext=contextStackCursor.current;push(contextStackCursor,memoizedMergedChildContext,workInProgress);push(didPerformWorkStackCursor,didPerformWorkStackCursor.current,workInProgress);return true;}function invalidateContextProvider(workInProgress,type,didChange){var instance=workInProgress.stateNode;!instance?invariant(false,'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'):void 0;if(didChange){// Merge parent and own context.
// Skip this if we're not updating due to sCU.
// This avoids unnecessarily recomputing memoized values.
var mergedContext=processChildContext(workInProgress,type,previousContext);instance.__reactInternalMemoizedMergedChildContext=mergedContext;// Replace the old (or empty) context with the new one.
// It is important to unwind the context in the reverse order.
pop(didPerformWorkStackCursor,workInProgress);pop(contextStackCursor,workInProgress);// Now push the new context and mark that it has changed.
push(contextStackCursor,mergedContext,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}else{pop(didPerformWorkStackCursor,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}}function findCurrentUnmaskedContext(fiber){// Currently this is only used with renderSubtreeIntoContainer; not sure if it
// makes sense elsewhere
!(isFiberMounted(fiber)&&fiber.tag===ClassComponent)?invariant(false,'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'):void 0;var node=fiber;do{switch(node.tag){case HostRoot:return node.stateNode.context;case ClassComponent:{var Component=node.type;if(isContextProvider(Component)){return node.stateNode.__reactInternalMemoizedMergedChildContext;}break;}}node=node.return;}while(node!==null);invariant(false,'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');}var onCommitFiberRoot=null;var onCommitFiberUnmount=null;var hasLoggedError=false;function catchErrors(fn){return function(arg){try{return fn(arg);}catch(err){if(true&&!hasLoggedError){hasLoggedError=true;warningWithoutStack$1(false,'React DevTools encountered an error: %s',err);}}};}var isDevToolsPresent=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined';function injectInternals(internals){if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__==='undefined'){// No DevTools
return false;}var hook=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(hook.isDisabled){// This isn't a real property on the hook, but it can be set to opt out
// of DevTools integration and associated warnings and logs.
// https://github.com/facebook/react/issues/3877
return true;}if(!hook.supportsFiber){{warningWithoutStack$1(false,'The installed version of React DevTools is too old and will not work '+'with the current version of React. Please update React DevTools. '+'https://fb.me/react-devtools');}// DevTools exists, even though it doesn't support Fiber.
return true;}try{var rendererID=hook.inject(internals);// We have successfully injected, so now it is safe to set up hooks.
onCommitFiberRoot=catchErrors(function(root){return hook.onCommitFiberRoot(rendererID,root);});onCommitFiberUnmount=catchErrors(function(fiber){return hook.onCommitFiberUnmount(rendererID,fiber);});}catch(err){// Catch all errors because it is unsafe to throw during initialization.
{warningWithoutStack$1(false,'React DevTools encountered an error: %s.',err);}}// DevTools exists
return true;}function onCommitRoot(root){if(typeof onCommitFiberRoot==='function'){onCommitFiberRoot(root);}}function onCommitUnmount(fiber){if(typeof onCommitFiberUnmount==='function'){onCommitFiberUnmount(fiber);}}// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var maxSigned31BitInt=1073741823;var NoWork=0;var Never=1;var Sync=maxSigned31BitInt;var UNIT_SIZE=10;var MAGIC_NUMBER_OFFSET=maxSigned31BitInt-1;// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms){// Always add an offset so that we don't clash with the magic number for NoWork.
return MAGIC_NUMBER_OFFSET-(ms/UNIT_SIZE|0);}function expirationTimeToMs(expirationTime){return(MAGIC_NUMBER_OFFSET-expirationTime)*UNIT_SIZE;}function ceiling(num,precision){return((num/precision|0)+1)*precision;}function computeExpirationBucket(currentTime,expirationInMs,bucketSizeMs){return MAGIC_NUMBER_OFFSET-ceiling(MAGIC_NUMBER_OFFSET-currentTime+expirationInMs/UNIT_SIZE,bucketSizeMs/UNIT_SIZE);}var LOW_PRIORITY_EXPIRATION=5000;var LOW_PRIORITY_BATCH_SIZE=250;function computeAsyncExpiration(currentTime){return computeExpirationBucket(currentTime,LOW_PRIORITY_EXPIRATION,LOW_PRIORITY_BATCH_SIZE);}// We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.
var HIGH_PRIORITY_EXPIRATION=500;var HIGH_PRIORITY_BATCH_SIZE=100;function computeInteractiveExpiration(currentTime){return computeExpirationBucket(currentTime,HIGH_PRIORITY_EXPIRATION,HIGH_PRIORITY_BATCH_SIZE);}var NoContext=0;var ConcurrentMode=1;var StrictMode=2;var ProfileMode=4;var hasBadMapPolyfill=void 0;{hasBadMapPolyfill=false;try{var nonExtensibleObject=Object.preventExtensions({});var testMap=new Map([[nonExtensibleObject,null]]);var testSet=new Set([nonExtensibleObject]);// This is necessary for Rollup to not consider these unused.
// https://github.com/rollup/rollup/issues/1771
// TODO: we can remove these if Rollup fixes the bug.
testMap.set(0,0);testSet.add(0);}catch(e){// TODO: Consider warning about bad polyfills
hasBadMapPolyfill=true;}}// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.
var debugCounter=void 0;{debugCounter=1;}function FiberNode(tag,pendingProps,key,mode){// Instance
this.tag=tag;this.key=key;this.elementType=null;this.type=null;this.stateNode=null;// Fiber
this.return=null;this.child=null;this.sibling=null;this.index=0;this.ref=null;this.pendingProps=pendingProps;this.memoizedProps=null;this.updateQueue=null;this.memoizedState=null;this.contextDependencies=null;this.mode=mode;// Effects
this.effectTag=NoEffect;this.nextEffect=null;this.firstEffect=null;this.lastEffect=null;this.expirationTime=NoWork;this.childExpirationTime=NoWork;this.alternate=null;if(enableProfilerTimer){// Note: The following is done to avoid a v8 performance cliff.
//
// Initializing the fields below to smis and later updating them with
// double values will cause Fibers to end up having separate shapes.
// This behavior/bug has something to do with Object.preventExtension().
// Fortunately this only impacts DEV builds.
// Unfortunately it makes React unusably slow for some applications.
// To work around this, initialize the fields below with doubles.
//
// Learn more about this here:
// https://github.com/facebook/react/issues/14365
// https://bugs.chromium.org/p/v8/issues/detail?id=8538
this.actualDuration=Number.NaN;this.actualStartTime=Number.NaN;this.selfBaseDuration=Number.NaN;this.treeBaseDuration=Number.NaN;// It's okay to replace the initial doubles with smis after initialization.
// This won't trigger the performance cliff mentioned above,
// and it simplifies other profiler code (including DevTools).
this.actualDuration=0;this.actualStartTime=-1;this.selfBaseDuration=0;this.treeBaseDuration=0;}{this._debugID=debugCounter++;this._debugSource=null;this._debugOwner=null;this._debugIsCurrentlyTiming=false;this._debugHookTypes=null;if(!hasBadMapPolyfill&&typeof Object.preventExtensions==='function'){Object.preventExtensions(this);}}}// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber=function createFiber(tag,pendingProps,key,mode){// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
return new FiberNode(tag,pendingProps,key,mode);};function shouldConstruct(Component){var prototype=Component.prototype;return!!(prototype&&prototype.isReactComponent);}function isSimpleFunctionComponent(type){return typeof type==='function'&&!shouldConstruct(type)&&type.defaultProps===undefined;}function resolveLazyComponentTag(Component){if(typeof Component==='function'){return shouldConstruct(Component)?ClassComponent:FunctionComponent;}else if(Component!==undefined&&Component!==null){var $$typeof=Component.$$typeof;if($$typeof===REACT_FORWARD_REF_TYPE){return ForwardRef;}if($$typeof===REACT_MEMO_TYPE){return MemoComponent;}}return IndeterminateComponent;}// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current,pendingProps,expirationTime){var workInProgress=current.alternate;if(workInProgress===null){// We use a double buffering pooling technique because we know that we'll
// only ever need at most two versions of a tree. We pool the "other" unused
// node that we're free to reuse. This is lazily created to avoid allocating
// extra objects for things that are never updated. It also allow us to
// reclaim the extra memory if needed.
workInProgress=createFiber(current.tag,pendingProps,current.key,current.mode);workInProgress.elementType=current.elementType;workInProgress.type=current.type;workInProgress.stateNode=current.stateNode;{// DEV-only fields
workInProgress._debugID=current._debugID;workInProgress._debugSource=current._debugSource;workInProgress._debugOwner=current._debugOwner;workInProgress._debugHookTypes=current._debugHookTypes;}workInProgress.alternate=current;current.alternate=workInProgress;}else{workInProgress.pendingProps=pendingProps;// We already have an alternate.
// Reset the effect tag.
workInProgress.effectTag=NoEffect;// The effect list is no longer valid.
workInProgress.nextEffect=null;workInProgress.firstEffect=null;workInProgress.lastEffect=null;if(enableProfilerTimer){// We intentionally reset, rather than copy, actualDuration & actualStartTime.
// This prevents time from endlessly accumulating in new commits.
// This has the downside of resetting values for different priority renders,
// But works for yielding (the common case) and should support resuming.
workInProgress.actualDuration=0;workInProgress.actualStartTime=-1;}}workInProgress.childExpirationTime=current.childExpirationTime;workInProgress.expirationTime=current.expirationTime;workInProgress.child=current.child;workInProgress.memoizedProps=current.memoizedProps;workInProgress.memoizedState=current.memoizedState;workInProgress.updateQueue=current.updateQueue;workInProgress.contextDependencies=current.contextDependencies;// These will be overridden during the parent's reconciliation
workInProgress.sibling=current.sibling;workInProgress.index=current.index;workInProgress.ref=current.ref;if(enableProfilerTimer){workInProgress.selfBaseDuration=current.selfBaseDuration;workInProgress.treeBaseDuration=current.treeBaseDuration;}return workInProgress;}function createHostRootFiber(isConcurrent){var mode=isConcurrent?ConcurrentMode|StrictMode:NoContext;if(enableProfilerTimer&&isDevToolsPresent){// Always collect profile timings when DevTools are present.
// This enables DevTools to start capturing timing at any point–
// Without some nodes in the tree having empty base times.
mode|=ProfileMode;}return createFiber(HostRoot,null,null,mode);}function createFiberFromTypeAndProps(type,// React$ElementType
key,pendingProps,owner,mode,expirationTime){var fiber=void 0;var fiberTag=IndeterminateComponent;// The resolved type is set if we know what the final type will be. I.e. it's not lazy.
var resolvedType=type;if(typeof type==='function'){if(shouldConstruct(type)){fiberTag=ClassComponent;}}else if(typeof type==='string'){fiberTag=HostComponent;}else{getTag:switch(type){case REACT_FRAGMENT_TYPE:return createFiberFromFragment(pendingProps.children,mode,expirationTime,key);case REACT_CONCURRENT_MODE_TYPE:return createFiberFromMode(pendingProps,mode|ConcurrentMode|StrictMode,expirationTime,key);case REACT_STRICT_MODE_TYPE:return createFiberFromMode(pendingProps,mode|StrictMode,expirationTime,key);case REACT_PROFILER_TYPE:return createFiberFromProfiler(pendingProps,mode,expirationTime,key);case REACT_SUSPENSE_TYPE:return createFiberFromSuspense(pendingProps,mode,expirationTime,key);default:{if((typeof type==='undefined'?'undefined':_typeof(type))==='object'&&type!==null){switch(type.$$typeof){case REACT_PROVIDER_TYPE:fiberTag=ContextProvider;break getTag;case REACT_CONTEXT_TYPE:// This is a consumer
fiberTag=ContextConsumer;break getTag;case REACT_FORWARD_REF_TYPE:fiberTag=ForwardRef;break getTag;case REACT_MEMO_TYPE:fiberTag=MemoComponent;break getTag;case REACT_LAZY_TYPE:fiberTag=LazyComponent;resolvedType=null;break getTag;}}var info='';{if(type===undefined||(typeof type==='undefined'?'undefined':_typeof(type))==='object'&&type!==null&&Object.keys(type).length===0){info+=' You likely forgot to export your component from the file '+"it's defined in, or you might have mixed up default and "+'named imports.';}var ownerName=owner?getComponentName(owner.type):null;if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}}invariant(false,'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s',type==null?type:typeof type==='undefined'?'undefined':_typeof(type),info);}}}fiber=createFiber(fiberTag,pendingProps,key,mode);fiber.elementType=type;fiber.type=resolvedType;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromElement(element,mode,expirationTime){var owner=null;{owner=element._owner;}var type=element.type;var key=element.key;var pendingProps=element.props;var fiber=createFiberFromTypeAndProps(type,key,pendingProps,owner,mode,expirationTime);{fiber._debugSource=element._source;fiber._debugOwner=element._owner;}return fiber;}function createFiberFromFragment(elements,mode,expirationTime,key){var fiber=createFiber(Fragment,elements,key,mode);fiber.expirationTime=expirationTime;return fiber;}function createFiberFromProfiler(pendingProps,mode,expirationTime,key){{if(typeof pendingProps.id!=='string'||typeof pendingProps.onRender!=='function'){warningWithoutStack$1(false,'Profiler must specify an "id" string and "onRender" function as props');}}var fiber=createFiber(Profiler,pendingProps,key,mode|ProfileMode);// TODO: The Profiler fiber shouldn't have a type. It has a tag.
fiber.elementType=REACT_PROFILER_TYPE;fiber.type=REACT_PROFILER_TYPE;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromMode(pendingProps,mode,expirationTime,key){var fiber=createFiber(Mode,pendingProps,key,mode);// TODO: The Mode fiber shouldn't have a type. It has a tag.
var type=(mode&ConcurrentMode)===NoContext?REACT_STRICT_MODE_TYPE:REACT_CONCURRENT_MODE_TYPE;fiber.elementType=type;fiber.type=type;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromSuspense(pendingProps,mode,expirationTime,key){var fiber=createFiber(SuspenseComponent,pendingProps,key,mode);// TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
var type=REACT_SUSPENSE_TYPE;fiber.elementType=type;fiber.type=type;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromText(content,mode,expirationTime){var fiber=createFiber(HostText,content,null,mode);fiber.expirationTime=expirationTime;return fiber;}function createFiberFromHostInstanceForDeletion(){var fiber=createFiber(HostComponent,null,null,NoContext);// TODO: These should not need a type.
fiber.elementType='DELETED';fiber.type='DELETED';return fiber;}function createFiberFromPortal(portal,mode,expirationTime){var pendingProps=portal.children!==null?portal.children:[];var fiber=createFiber(HostPortal,pendingProps,portal.key,mode);fiber.expirationTime=expirationTime;fiber.stateNode={containerInfo:portal.containerInfo,pendingChildren:null,// Used by persistent updates
implementation:portal.implementation};return fiber;}// Used for stashing WIP properties to replay failed work in DEV.
function assignFiberPropertiesInDEV(target,source){if(target===null){// This Fiber's initial properties will always be overwritten.
// We only use a Fiber to ensure the same hidden class so DEV isn't slow.
target=createFiber(IndeterminateComponent,null,null,NoContext);}// This is intentionally written as a list of all properties.
// We tried to use Object.assign() instead but this is called in
// the hottest path, and Object.assign() was too slow:
// https://github.com/facebook/react/issues/12502
// This code is DEV-only so size is not a concern.
target.tag=source.tag;target.key=source.key;target.elementType=source.elementType;target.type=source.type;target.stateNode=source.stateNode;target.return=source.return;target.child=source.child;target.sibling=source.sibling;target.index=source.index;target.ref=source.ref;target.pendingProps=source.pendingProps;target.memoizedProps=source.memoizedProps;target.updateQueue=source.updateQueue;target.memoizedState=source.memoizedState;target.contextDependencies=source.contextDependencies;target.mode=source.mode;target.effectTag=source.effectTag;target.nextEffect=source.nextEffect;target.firstEffect=source.firstEffect;target.lastEffect=source.lastEffect;target.expirationTime=source.expirationTime;target.childExpirationTime=source.childExpirationTime;target.alternate=source.alternate;if(enableProfilerTimer){target.actualDuration=source.actualDuration;target.actualStartTime=source.actualStartTime;target.selfBaseDuration=source.selfBaseDuration;target.treeBaseDuration=source.treeBaseDuration;}target._debugID=source._debugID;target._debugSource=source._debugSource;target._debugOwner=source._debugOwner;target._debugIsCurrentlyTiming=source._debugIsCurrentlyTiming;target._debugHookTypes=source._debugHookTypes;return target;}// TODO: This should be lifted into the renderer.
// The following attributes are only used by interaction tracing builds.
// They enable interactions to be associated with their async work,
// And expose interaction metadata to the React DevTools Profiler plugin.
// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
// Exported FiberRoot type includes all properties,
// To avoid requiring potentially error-prone :any casts throughout the project.
// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
// The types are defined separately within this file to ensure they stay in sync.
// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)
function createFiberRoot(containerInfo,isConcurrent,hydrate){// Cyclic construction. This cheats the type system right now because
// stateNode is any.
var uninitializedFiber=createHostRootFiber(isConcurrent);var root=void 0;if(enableSchedulerTracing){root={current:uninitializedFiber,containerInfo:containerInfo,pendingChildren:null,earliestPendingTime:NoWork,latestPendingTime:NoWork,earliestSuspendedTime:NoWork,latestSuspendedTime:NoWork,latestPingedTime:NoWork,pingCache:null,didError:false,pendingCommitExpirationTime:NoWork,finishedWork:null,timeoutHandle:noTimeout,context:null,pendingContext:null,hydrate:hydrate,nextExpirationTimeToWorkOn:NoWork,expirationTime:NoWork,firstBatch:null,nextScheduledRoot:null,interactionThreadID:tracing.unstable_getThreadID(),memoizedInteractions:new Set(),pendingInteractionMap:new Map()};}else{root={current:uninitializedFiber,containerInfo:containerInfo,pendingChildren:null,pingCache:null,earliestPendingTime:NoWork,latestPendingTime:NoWork,earliestSuspendedTime:NoWork,latestSuspendedTime:NoWork,latestPingedTime:NoWork,didError:false,pendingCommitExpirationTime:NoWork,finishedWork:null,timeoutHandle:noTimeout,context:null,pendingContext:null,hydrate:hydrate,nextExpirationTimeToWorkOn:NoWork,expirationTime:NoWork,firstBatch:null,nextScheduledRoot:null};}uninitializedFiber.stateNode=root;// The reason for the way the Flow types are structured in this file,
// Is to avoid needing :any casts everywhere interaction tracing fields are used.
// Unfortunately that requires an :any cast for non-interaction tracing capable builds.
// $FlowFixMe Remove this :any cast and replace it with something better.
return root;}/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */var lowPriorityWarning=function lowPriorityWarning(){};{var printWarning=function printWarning(format){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var argIndex=0;var message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});if(typeof console!=='undefined'){console.warn(message);}try{// --- Welcome to debugging React ---
// This error was thrown as a convenience so that you can use this stack
// to find the callsite that caused this warning to fire.
throw new Error(message);}catch(x){}};lowPriorityWarning=function lowPriorityWarning(condition,format){if(format===undefined){throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning '+'message argument');}if(!condition){for(var _len2=arguments.length,args=Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++){args[_key2-2]=arguments[_key2];}printWarning.apply(undefined,[format].concat(args));}};}var lowPriorityWarning$1=lowPriorityWarning;var ReactStrictModeWarnings={discardPendingWarnings:function discardPendingWarnings(){},flushPendingDeprecationWarnings:function flushPendingDeprecationWarnings(){},flushPendingUnsafeLifecycleWarnings:function flushPendingUnsafeLifecycleWarnings(){},recordDeprecationWarnings:function recordDeprecationWarnings(fiber,instance){},recordUnsafeLifecycleWarnings:function recordUnsafeLifecycleWarnings(fiber,instance){},recordLegacyContextWarning:function recordLegacyContextWarning(fiber,instance){},flushLegacyContextWarning:function flushLegacyContextWarning(){}};{var LIFECYCLE_SUGGESTIONS={UNSAFE_componentWillMount:'componentDidMount',UNSAFE_componentWillReceiveProps:'static getDerivedStateFromProps',UNSAFE_componentWillUpdate:'componentDidUpdate'};var pendingComponentWillMountWarnings=[];var pendingComponentWillReceivePropsWarnings=[];var pendingComponentWillUpdateWarnings=[];var pendingUnsafeLifecycleWarnings=new Map();var pendingLegacyContextWarning=new Map();// Tracks components we have already warned about.
var didWarnAboutDeprecatedLifecycles=new Set();var didWarnAboutUnsafeLifecycles=new Set();var didWarnAboutLegacyContext=new Set();var setToSortedString=function setToSortedString(set){var array=[];set.forEach(function(value){array.push(value);});return array.sort().join(', ');};ReactStrictModeWarnings.discardPendingWarnings=function(){pendingComponentWillMountWarnings=[];pendingComponentWillReceivePropsWarnings=[];pendingComponentWillUpdateWarnings=[];pendingUnsafeLifecycleWarnings=new Map();pendingLegacyContextWarning=new Map();};ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings=function(){pendingUnsafeLifecycleWarnings.forEach(function(lifecycleWarningsMap,strictRoot){var lifecyclesWarningMessages=[];Object.keys(lifecycleWarningsMap).forEach(function(lifecycle){var lifecycleWarnings=lifecycleWarningsMap[lifecycle];if(lifecycleWarnings.length>0){var componentNames=new Set();lifecycleWarnings.forEach(function(fiber){componentNames.add(getComponentName(fiber.type)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});var formatted=lifecycle.replace('UNSAFE_','');var suggestion=LIFECYCLE_SUGGESTIONS[lifecycle];var sortedComponentNames=setToSortedString(componentNames);lifecyclesWarningMessages.push(formatted+': Please update the following components to use '+(suggestion+' instead: '+sortedComponentNames));}});if(lifecyclesWarningMessages.length>0){var strictRootComponentStack=getStackByFiberInDevAndProd(strictRoot);warningWithoutStack$1(false,'Unsafe lifecycle methods were found within a strict-mode tree:%s'+'\n\n%s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-strict-mode-warnings',strictRootComponentStack,lifecyclesWarningMessages.join('\n\n'));}});pendingUnsafeLifecycleWarnings=new Map();};var findStrictRoot=function findStrictRoot(fiber){var maybeStrictRoot=null;var node=fiber;while(node!==null){if(node.mode&StrictMode){maybeStrictRoot=node;}node=node.return;}return maybeStrictRoot;};ReactStrictModeWarnings.flushPendingDeprecationWarnings=function(){if(pendingComponentWillMountWarnings.length>0){var uniqueNames=new Set();pendingComponentWillMountWarnings.forEach(function(fiber){uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutDeprecatedLifecycles.add(fiber.type);});var sortedNames=setToSortedString(uniqueNames);lowPriorityWarning$1(false,'componentWillMount is deprecated and will be removed in the next major version. '+'Use componentDidMount instead. As a temporary workaround, '+'you can rename to UNSAFE_componentWillMount.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-async-component-lifecycle-hooks',sortedNames);pendingComponentWillMountWarnings=[];}if(pendingComponentWillReceivePropsWarnings.length>0){var _uniqueNames=new Set();pendingComponentWillReceivePropsWarnings.forEach(function(fiber){_uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutDeprecatedLifecycles.add(fiber.type);});var _sortedNames=setToSortedString(_uniqueNames);lowPriorityWarning$1(false,'componentWillReceiveProps is deprecated and will be removed in the next major version. '+'Use static getDerivedStateFromProps instead.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-async-component-lifecycle-hooks',_sortedNames);pendingComponentWillReceivePropsWarnings=[];}if(pendingComponentWillUpdateWarnings.length>0){var _uniqueNames2=new Set();pendingComponentWillUpdateWarnings.forEach(function(fiber){_uniqueNames2.add(getComponentName(fiber.type)||'Component');didWarnAboutDeprecatedLifecycles.add(fiber.type);});var _sortedNames2=setToSortedString(_uniqueNames2);lowPriorityWarning$1(false,'componentWillUpdate is deprecated and will be removed in the next major version. '+'Use componentDidUpdate instead. As a temporary workaround, '+'you can rename to UNSAFE_componentWillUpdate.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-async-component-lifecycle-hooks',_sortedNames2);pendingComponentWillUpdateWarnings=[];}};ReactStrictModeWarnings.recordDeprecationWarnings=function(fiber,instance){// Dedup strategy: Warn once per component.
if(didWarnAboutDeprecatedLifecycles.has(fiber.type)){return;}// Don't warn about react-lifecycles-compat polyfilled components.
if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true){pendingComponentWillMountWarnings.push(fiber);}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){pendingComponentWillReceivePropsWarnings.push(fiber);}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){pendingComponentWillUpdateWarnings.push(fiber);}};ReactStrictModeWarnings.recordUnsafeLifecycleWarnings=function(fiber,instance){var strictRoot=findStrictRoot(fiber);if(strictRoot===null){warningWithoutStack$1(false,'Expected to find a StrictMode component in a strict mode tree. '+'This error is likely caused by a bug in React. Please file an issue.');return;}// Dedup strategy: Warn once per component.
// This is difficult to track any other way since component names
// are often vague and are likely to collide between 3rd party libraries.
// An expand property is probably okay to use here since it's DEV-only,
// and will only be set in the event of serious warnings.
if(didWarnAboutUnsafeLifecycles.has(fiber.type)){return;}var warningsForRoot=void 0;if(!pendingUnsafeLifecycleWarnings.has(strictRoot)){warningsForRoot={UNSAFE_componentWillMount:[],UNSAFE_componentWillReceiveProps:[],UNSAFE_componentWillUpdate:[]};pendingUnsafeLifecycleWarnings.set(strictRoot,warningsForRoot);}else{warningsForRoot=pendingUnsafeLifecycleWarnings.get(strictRoot);}var unsafeLifecycles=[];if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true||typeof instance.UNSAFE_componentWillMount==='function'){unsafeLifecycles.push('UNSAFE_componentWillMount');}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true||typeof instance.UNSAFE_componentWillReceiveProps==='function'){unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true||typeof instance.UNSAFE_componentWillUpdate==='function'){unsafeLifecycles.push('UNSAFE_componentWillUpdate');}if(unsafeLifecycles.length>0){unsafeLifecycles.forEach(function(lifecycle){warningsForRoot[lifecycle].push(fiber);});}};ReactStrictModeWarnings.recordLegacyContextWarning=function(fiber,instance){var strictRoot=findStrictRoot(fiber);if(strictRoot===null){warningWithoutStack$1(false,'Expected to find a StrictMode component in a strict mode tree. '+'This error is likely caused by a bug in React. Please file an issue.');return;}// Dedup strategy: Warn once per component.
if(didWarnAboutLegacyContext.has(fiber.type)){return;}var warningsForRoot=pendingLegacyContextWarning.get(strictRoot);if(fiber.type.contextTypes!=null||fiber.type.childContextTypes!=null||instance!==null&&typeof instance.getChildContext==='function'){if(warningsForRoot===undefined){warningsForRoot=[];pendingLegacyContextWarning.set(strictRoot,warningsForRoot);}warningsForRoot.push(fiber);}};ReactStrictModeWarnings.flushLegacyContextWarning=function(){pendingLegacyContextWarning.forEach(function(fiberArray,strictRoot){var uniqueNames=new Set();fiberArray.forEach(function(fiber){uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutLegacyContext.add(fiber.type);});var sortedNames=setToSortedString(uniqueNames);var strictRootComponentStack=getStackByFiberInDevAndProd(strictRoot);warningWithoutStack$1(false,'Legacy context API has been detected within a strict-mode tree: %s'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-strict-mode-warnings',strictRootComponentStack,sortedNames);});};}// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation={debugTool:null};var ReactFiberInstrumentation_1=ReactFiberInstrumentation;// TODO: Offscreen updates should never suspend. However, a promise that
// suspended inside an offscreen subtree should be able to ping at the priority
// of the outer render.
function markPendingPriorityLevel(root,expirationTime){// If there's a gap between completing a failed root and retrying it,
// additional updates may be scheduled. Clear `didError`, in case the update
// is sufficient to fix the error.
root.didError=false;// Update the latest and earliest pending times
var earliestPendingTime=root.earliestPendingTime;if(earliestPendingTime===NoWork){// No other pending updates.
root.earliestPendingTime=root.latestPendingTime=expirationTime;}else{if(earliestPendingTime<expirationTime){// This is the earliest pending update.
root.earliestPendingTime=expirationTime;}else{var latestPendingTime=root.latestPendingTime;if(latestPendingTime>expirationTime){// This is the latest pending update
root.latestPendingTime=expirationTime;}}}findNextExpirationTimeToWorkOn(expirationTime,root);}function markCommittedPriorityLevels(root,earliestRemainingTime){root.didError=false;if(earliestRemainingTime===NoWork){// Fast path. There's no remaining work. Clear everything.
root.earliestPendingTime=NoWork;root.latestPendingTime=NoWork;root.earliestSuspendedTime=NoWork;root.latestSuspendedTime=NoWork;root.latestPingedTime=NoWork;findNextExpirationTimeToWorkOn(NoWork,root);return;}if(earliestRemainingTime<root.latestPingedTime){root.latestPingedTime=NoWork;}// Let's see if the previous latest known pending level was just flushed.
var latestPendingTime=root.latestPendingTime;if(latestPendingTime!==NoWork){if(latestPendingTime>earliestRemainingTime){// We've flushed all the known pending levels.
root.earliestPendingTime=root.latestPendingTime=NoWork;}else{var earliestPendingTime=root.earliestPendingTime;if(earliestPendingTime>earliestRemainingTime){// We've flushed the earliest known pending level. Set this to the
// latest pending time.
root.earliestPendingTime=root.latestPendingTime;}}}// Now let's handle the earliest remaining level in the whole tree. We need to
// decide whether to treat it as a pending level or as suspended. Check
// it falls within the range of known suspended levels.
var earliestSuspendedTime=root.earliestSuspendedTime;if(earliestSuspendedTime===NoWork){// There's no suspended work. Treat the earliest remaining level as a
// pending level.
markPendingPriorityLevel(root,earliestRemainingTime);findNextExpirationTimeToWorkOn(NoWork,root);return;}var latestSuspendedTime=root.latestSuspendedTime;if(earliestRemainingTime<latestSuspendedTime){// The earliest remaining level is later than all the suspended work. That
// means we've flushed all the suspended work.
root.earliestSuspendedTime=NoWork;root.latestSuspendedTime=NoWork;root.latestPingedTime=NoWork;// There's no suspended work. Treat the earliest remaining level as a
// pending level.
markPendingPriorityLevel(root,earliestRemainingTime);findNextExpirationTimeToWorkOn(NoWork,root);return;}if(earliestRemainingTime>earliestSuspendedTime){// The earliest remaining time is earlier than all the suspended work.
// Treat it as a pending update.
markPendingPriorityLevel(root,earliestRemainingTime);findNextExpirationTimeToWorkOn(NoWork,root);return;}// The earliest remaining time falls within the range of known suspended
// levels. We should treat this as suspended work.
findNextExpirationTimeToWorkOn(NoWork,root);}function hasLowerPriorityWork(root,erroredExpirationTime){var latestPendingTime=root.latestPendingTime;var latestSuspendedTime=root.latestSuspendedTime;var latestPingedTime=root.latestPingedTime;return latestPendingTime!==NoWork&&latestPendingTime<erroredExpirationTime||latestSuspendedTime!==NoWork&&latestSuspendedTime<erroredExpirationTime||latestPingedTime!==NoWork&&latestPingedTime<erroredExpirationTime;}function isPriorityLevelSuspended(root,expirationTime){var earliestSuspendedTime=root.earliestSuspendedTime;var latestSuspendedTime=root.latestSuspendedTime;return earliestSuspendedTime!==NoWork&&expirationTime<=earliestSuspendedTime&&expirationTime>=latestSuspendedTime;}function markSuspendedPriorityLevel(root,suspendedTime){root.didError=false;clearPing(root,suspendedTime);// First, check the known pending levels and update them if needed.
var earliestPendingTime=root.earliestPendingTime;var latestPendingTime=root.latestPendingTime;if(earliestPendingTime===suspendedTime){if(latestPendingTime===suspendedTime){// Both known pending levels were suspended. Clear them.
root.earliestPendingTime=root.latestPendingTime=NoWork;}else{// The earliest pending level was suspended. Clear by setting it to the
// latest pending level.
root.earliestPendingTime=latestPendingTime;}}else if(latestPendingTime===suspendedTime){// The latest pending level was suspended. Clear by setting it to the
// latest pending level.
root.latestPendingTime=earliestPendingTime;}// Finally, update the known suspended levels.
var earliestSuspendedTime=root.earliestSuspendedTime;var latestSuspendedTime=root.latestSuspendedTime;if(earliestSuspendedTime===NoWork){// No other suspended levels.
root.earliestSuspendedTime=root.latestSuspendedTime=suspendedTime;}else{if(earliestSuspendedTime<suspendedTime){// This is the earliest suspended level.
root.earliestSuspendedTime=suspendedTime;}else if(latestSuspendedTime>suspendedTime){// This is the latest suspended level
root.latestSuspendedTime=suspendedTime;}}findNextExpirationTimeToWorkOn(suspendedTime,root);}function markPingedPriorityLevel(root,pingedTime){root.didError=false;// TODO: When we add back resuming, we need to ensure the progressed work
// is thrown out and not reused during the restarted render. One way to
// invalidate the progressed work is to restart at expirationTime + 1.
var latestPingedTime=root.latestPingedTime;if(latestPingedTime===NoWork||latestPingedTime>pingedTime){root.latestPingedTime=pingedTime;}findNextExpirationTimeToWorkOn(pingedTime,root);}function clearPing(root,completedTime){var latestPingedTime=root.latestPingedTime;if(latestPingedTime>=completedTime){root.latestPingedTime=NoWork;}}function findEarliestOutstandingPriorityLevel(root,renderExpirationTime){var earliestExpirationTime=renderExpirationTime;var earliestPendingTime=root.earliestPendingTime;var earliestSuspendedTime=root.earliestSuspendedTime;if(earliestPendingTime>earliestExpirationTime){earliestExpirationTime=earliestPendingTime;}if(earliestSuspendedTime>earliestExpirationTime){earliestExpirationTime=earliestSuspendedTime;}return earliestExpirationTime;}function didExpireAtExpirationTime(root,currentTime){var expirationTime=root.expirationTime;if(expirationTime!==NoWork&&currentTime<=expirationTime){// The root has expired. Flush all work up to the current time.
root.nextExpirationTimeToWorkOn=currentTime;}}function findNextExpirationTimeToWorkOn(completedExpirationTime,root){var earliestSuspendedTime=root.earliestSuspendedTime;var latestSuspendedTime=root.latestSuspendedTime;var earliestPendingTime=root.earliestPendingTime;var latestPingedTime=root.latestPingedTime;// Work on the earliest pending time. Failing that, work on the latest
// pinged time.
var nextExpirationTimeToWorkOn=earliestPendingTime!==NoWork?earliestPendingTime:latestPingedTime;// If there is no pending or pinged work, check if there's suspended work
// that's lower priority than what we just completed.
if(nextExpirationTimeToWorkOn===NoWork&&(completedExpirationTime===NoWork||latestSuspendedTime<completedExpirationTime)){// The lowest priority suspended work is the work most likely to be
// committed next. Let's start rendering it again, so that if it times out,
// it's ready to commit.
nextExpirationTimeToWorkOn=latestSuspendedTime;}var expirationTime=nextExpirationTimeToWorkOn;if(expirationTime!==NoWork&&earliestSuspendedTime>expirationTime){// Expire using the earliest known expiration time.
expirationTime=earliestSuspendedTime;}root.nextExpirationTimeToWorkOn=nextExpirationTimeToWorkOn;root.expirationTime=expirationTime;}function resolveDefaultProps(Component,baseProps){if(Component&&Component.defaultProps){// Resolve default props. Taken from ReactElement
var props=_assign({},baseProps);var defaultProps=Component.defaultProps;for(var propName in defaultProps){if(props[propName]===undefined){props[propName]=defaultProps[propName];}}return props;}return baseProps;}function readLazyComponentType(lazyComponent){var status=lazyComponent._status;var result=lazyComponent._result;switch(status){case Resolved:{var Component=result;return Component;}case Rejected:{var error=result;throw error;}case Pending:{var thenable=result;throw thenable;}default:{lazyComponent._status=Pending;var ctor=lazyComponent._ctor;var _thenable=ctor();_thenable.then(function(moduleObject){if(lazyComponent._status===Pending){var defaultExport=moduleObject.default;{if(defaultExport===undefined){warning$1(false,'lazy: Expected the result of a dynamic import() call. '+'Instead received: %s\n\nYour code should look like: \n  '+"const MyComponent = lazy(() => import('./MyComponent'))",moduleObject);}}lazyComponent._status=Resolved;lazyComponent._result=defaultExport;}},function(error){if(lazyComponent._status===Pending){lazyComponent._status=Rejected;lazyComponent._result=error;}});// Handle synchronous thenables.
switch(lazyComponent._status){case Resolved:return lazyComponent._result;case Rejected:throw lazyComponent._result;}lazyComponent._result=_thenable;throw _thenable;}}}var fakeInternalInstance={};var isArray$1=Array.isArray;// React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.
var emptyRefsObject=new React.Component().refs;var didWarnAboutStateAssignmentForComponent=void 0;var didWarnAboutUninitializedState=void 0;var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=void 0;var didWarnAboutLegacyLifecyclesAndDerivedState=void 0;var didWarnAboutUndefinedDerivedState=void 0;var warnOnUndefinedDerivedState=void 0;var warnOnInvalidCallback$1=void 0;var didWarnAboutDirectlyAssigningPropsToState=void 0;var didWarnAboutContextTypeAndContextTypes=void 0;var didWarnAboutInvalidateContextType=void 0;{didWarnAboutStateAssignmentForComponent=new Set();didWarnAboutUninitializedState=new Set();didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=new Set();didWarnAboutLegacyLifecyclesAndDerivedState=new Set();didWarnAboutDirectlyAssigningPropsToState=new Set();didWarnAboutUndefinedDerivedState=new Set();didWarnAboutContextTypeAndContextTypes=new Set();didWarnAboutInvalidateContextType=new Set();var didWarnOnInvalidCallback=new Set();warnOnInvalidCallback$1=function warnOnInvalidCallback$1(callback,callerName){if(callback===null||typeof callback==='function'){return;}var key=callerName+'_'+callback;if(!didWarnOnInvalidCallback.has(key)){didWarnOnInvalidCallback.add(key);warningWithoutStack$1(false,'%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback);}};warnOnUndefinedDerivedState=function warnOnUndefinedDerivedState(type,partialState){if(partialState===undefined){var componentName=getComponentName(type)||'Component';if(!didWarnAboutUndefinedDerivedState.has(componentName)){didWarnAboutUndefinedDerivedState.add(componentName);warningWithoutStack$1(false,'%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. '+'You have returned undefined.',componentName);}}};// This is so gross but it's at least non-critical and can be removed if
// it causes problems. This is meant to give a nicer error message for
// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
// ...)) which otherwise throws a "_processChildContext is not a function"
// exception.
Object.defineProperty(fakeInternalInstance,'_processChildContext',{enumerable:false,value:function value(){invariant(false,'_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');}});Object.freeze(fakeInternalInstance);}function applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,nextProps){var prevState=workInProgress.memoizedState;{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Invoke the function an extra time to help detect side-effects.
getDerivedStateFromProps(nextProps,prevState);}}var partialState=getDerivedStateFromProps(nextProps,prevState);{warnOnUndefinedDerivedState(ctor,partialState);}// Merge the partial state and the previous state.
var memoizedState=partialState===null||partialState===undefined?prevState:_assign({},prevState,partialState);workInProgress.memoizedState=memoizedState;// Once the update queue is empty, persist the derived state onto the
// base state.
var updateQueue=workInProgress.updateQueue;if(updateQueue!==null&&workInProgress.expirationTime===NoWork){updateQueue.baseState=memoizedState;}}var classComponentUpdater={isMounted:isMounted,enqueueSetState:function enqueueSetState(inst,payload,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,fiber);var update=createUpdate(expirationTime);update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback$1(callback,'setState');}update.callback=callback;}flushPassiveEffects();enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);},enqueueReplaceState:function enqueueReplaceState(inst,payload,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,fiber);var update=createUpdate(expirationTime);update.tag=ReplaceState;update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback$1(callback,'replaceState');}update.callback=callback;}flushPassiveEffects();enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);},enqueueForceUpdate:function enqueueForceUpdate(inst,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,fiber);var update=createUpdate(expirationTime);update.tag=ForceUpdate;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback$1(callback,'forceUpdate');}update.callback=callback;}flushPassiveEffects();enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);}};function checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext){var instance=workInProgress.stateNode;if(typeof instance.shouldComponentUpdate==='function'){startPhaseTimer(workInProgress,'shouldComponentUpdate');var shouldUpdate=instance.shouldComponentUpdate(newProps,newState,nextContext);stopPhaseTimer();{!(shouldUpdate!==undefined)?warningWithoutStack$1(false,'%s.shouldComponentUpdate(): Returned undefined instead of a '+'boolean value. Make sure to return true or false.',getComponentName(ctor)||'Component'):void 0;}return shouldUpdate;}if(ctor.prototype&&ctor.prototype.isPureReactComponent){return!shallowEqual(oldProps,newProps)||!shallowEqual(oldState,newState);}return true;}function checkClassInstance(workInProgress,ctor,newProps){var instance=workInProgress.stateNode;{var name=getComponentName(ctor)||'Component';var renderPresent=instance.render;if(!renderPresent){if(ctor.prototype&&typeof ctor.prototype.render==='function'){warningWithoutStack$1(false,'%s(...): No `render` method found on the returned component '+'instance: did you accidentally return an object from the constructor?',name);}else{warningWithoutStack$1(false,'%s(...): No `render` method found on the returned component '+'instance: you may have forgotten to define `render`.',name);}}var noGetInitialStateOnES6=!instance.getInitialState||instance.getInitialState.isReactClassApproved||instance.state;!noGetInitialStateOnES6?warningWithoutStack$1(false,'getInitialState was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Did you mean to define a state property instead?',name):void 0;var noGetDefaultPropsOnES6=!instance.getDefaultProps||instance.getDefaultProps.isReactClassApproved;!noGetDefaultPropsOnES6?warningWithoutStack$1(false,'getDefaultProps was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Use a static property to define defaultProps instead.',name):void 0;var noInstancePropTypes=!instance.propTypes;!noInstancePropTypes?warningWithoutStack$1(false,'propTypes was defined as an instance property on %s. Use a static '+'property to define propTypes instead.',name):void 0;var noInstanceContextType=!instance.contextType;!noInstanceContextType?warningWithoutStack$1(false,'contextType was defined as an instance property on %s. Use a static '+'property to define contextType instead.',name):void 0;var noInstanceContextTypes=!instance.contextTypes;!noInstanceContextTypes?warningWithoutStack$1(false,'contextTypes was defined as an instance property on %s. Use a static '+'property to define contextTypes instead.',name):void 0;if(ctor.contextType&&ctor.contextTypes&&!didWarnAboutContextTypeAndContextTypes.has(ctor)){didWarnAboutContextTypeAndContextTypes.add(ctor);warningWithoutStack$1(false,'%s declares both contextTypes and contextType static properties. '+'The legacy contextTypes property will be ignored.',name);}var noComponentShouldUpdate=typeof instance.componentShouldUpdate!=='function';!noComponentShouldUpdate?warningWithoutStack$1(false,'%s has a method called '+'componentShouldUpdate(). Did you mean shouldComponentUpdate()? '+'The name is phrased as a question because the function is '+'expected to return a value.',name):void 0;if(ctor.prototype&&ctor.prototype.isPureReactComponent&&typeof instance.shouldComponentUpdate!=='undefined'){warningWithoutStack$1(false,'%s has a method called shouldComponentUpdate(). '+'shouldComponentUpdate should not be used when extending React.PureComponent. '+'Please extend React.Component if shouldComponentUpdate is used.',getComponentName(ctor)||'A pure component');}var noComponentDidUnmount=typeof instance.componentDidUnmount!=='function';!noComponentDidUnmount?warningWithoutStack$1(false,'%s has a method called '+'componentDidUnmount(). But there is no such lifecycle method. '+'Did you mean componentWillUnmount()?',name):void 0;var noComponentDidReceiveProps=typeof instance.componentDidReceiveProps!=='function';!noComponentDidReceiveProps?warningWithoutStack$1(false,'%s has a method called '+'componentDidReceiveProps(). But there is no such lifecycle method. '+'If you meant to update the state in response to changing props, '+'use componentWillReceiveProps(). If you meant to fetch data or '+'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',name):void 0;var noComponentWillRecieveProps=typeof instance.componentWillRecieveProps!=='function';!noComponentWillRecieveProps?warningWithoutStack$1(false,'%s has a method called '+'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',name):void 0;var noUnsafeComponentWillRecieveProps=typeof instance.UNSAFE_componentWillRecieveProps!=='function';!noUnsafeComponentWillRecieveProps?warningWithoutStack$1(false,'%s has a method called '+'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',name):void 0;var hasMutatedProps=instance.props!==newProps;!(instance.props===undefined||!hasMutatedProps)?warningWithoutStack$1(false,'%s(...): When calling super() in `%s`, make sure to pass '+"up the same props that your component's constructor was passed.",name,name):void 0;var noInstanceDefaultProps=!instance.defaultProps;!noInstanceDefaultProps?warningWithoutStack$1(false,'Setting defaultProps as an instance property on %s is not supported and will be ignored.'+' Instead, define defaultProps as a static property on %s.',name,name):void 0;if(typeof instance.getSnapshotBeforeUpdate==='function'&&typeof instance.componentDidUpdate!=='function'&&!didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)){didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);warningWithoutStack$1(false,'%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). '+'This component defines getSnapshotBeforeUpdate() only.',getComponentName(ctor));}var noInstanceGetDerivedStateFromProps=typeof instance.getDerivedStateFromProps!=='function';!noInstanceGetDerivedStateFromProps?warningWithoutStack$1(false,'%s: getDerivedStateFromProps() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name):void 0;var noInstanceGetDerivedStateFromCatch=typeof instance.getDerivedStateFromError!=='function';!noInstanceGetDerivedStateFromCatch?warningWithoutStack$1(false,'%s: getDerivedStateFromError() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name):void 0;var noStaticGetSnapshotBeforeUpdate=typeof ctor.getSnapshotBeforeUpdate!=='function';!noStaticGetSnapshotBeforeUpdate?warningWithoutStack$1(false,'%s: getSnapshotBeforeUpdate() is defined as a static method '+'and will be ignored. Instead, declare it as an instance method.',name):void 0;var _state=instance.state;if(_state&&((typeof _state==='undefined'?'undefined':_typeof(_state))!=='object'||isArray$1(_state))){warningWithoutStack$1(false,'%s.state: must be set to an object or null',name);}if(typeof instance.getChildContext==='function'){!(_typeof(ctor.childContextTypes)==='object')?warningWithoutStack$1(false,'%s.getChildContext(): childContextTypes must be defined in order to '+'use getChildContext().',name):void 0;}}}function adoptClassInstance(workInProgress,instance){instance.updater=classComponentUpdater;workInProgress.stateNode=instance;// The instance needs access to the fiber so that it can schedule updates
set(instance,workInProgress);{instance._reactInternalInstance=fakeInternalInstance;}}function constructClassInstance(workInProgress,ctor,props,renderExpirationTime){var isLegacyContextConsumer=false;var unmaskedContext=emptyContextObject;var context=null;var contextType=ctor.contextType;{if('contextType'in ctor){var isValid=// Allow null for conditional declaration
contextType===null||contextType!==undefined&&contextType.$$typeof===REACT_CONTEXT_TYPE&&contextType._context===undefined;// Not a <Context.Consumer>
if(!isValid&&!didWarnAboutInvalidateContextType.has(ctor)){didWarnAboutInvalidateContextType.add(ctor);var addendum='';if(contextType===undefined){addendum=' However, it is set to undefined. '+'This can be caused by a typo or by mixing up named and default imports. '+'This can also happen due to a circular dependency, so '+'try moving the createContext() call to a separate file.';}else if((typeof contextType==='undefined'?'undefined':_typeof(contextType))!=='object'){addendum=' However, it is set to a '+(typeof contextType==='undefined'?'undefined':_typeof(contextType))+'.';}else if(contextType.$$typeof===REACT_PROVIDER_TYPE){addendum=' Did you accidentally pass the Context.Provider instead?';}else if(contextType._context!==undefined){// <Context.Consumer>
addendum=' Did you accidentally pass the Context.Consumer instead?';}else{addendum=' However, it is set to an object with keys {'+Object.keys(contextType).join(', ')+'}.';}warningWithoutStack$1(false,'%s defines an invalid contextType. '+'contextType should point to the Context object returned by React.createContext().%s',getComponentName(ctor)||'Component',addendum);}}}if((typeof contextType==='undefined'?'undefined':_typeof(contextType))==='object'&&contextType!==null){context=_readContext(contextType);}else{unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);var contextTypes=ctor.contextTypes;isLegacyContextConsumer=contextTypes!==null&&contextTypes!==undefined;context=isLegacyContextConsumer?getMaskedContext(workInProgress,unmaskedContext):emptyContextObject;}// Instantiate twice to help detect side-effects.
{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){new ctor(props,context);// eslint-disable-line no-new
}}var instance=new ctor(props,context);var state=workInProgress.memoizedState=instance.state!==null&&instance.state!==undefined?instance.state:null;adoptClassInstance(workInProgress,instance);{if(typeof ctor.getDerivedStateFromProps==='function'&&state===null){var componentName=getComponentName(ctor)||'Component';if(!didWarnAboutUninitializedState.has(componentName)){didWarnAboutUninitializedState.add(componentName);warningWithoutStack$1(false,'`%s` uses `getDerivedStateFromProps` but its initial state is '+'%s. This is not recommended. Instead, define the initial state by '+'assigning an object to `this.state` in the constructor of `%s`. '+'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',componentName,instance.state===null?'null':'undefined',componentName);}}// If new component APIs are defined, "unsafe" lifecycles won't be called.
// Warn about these lifecycles if they are present.
// Don't warn about react-lifecycles-compat polyfilled methods though.
if(typeof ctor.getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function'){var foundWillMountName=null;var foundWillReceivePropsName=null;var foundWillUpdateName=null;if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true){foundWillMountName='componentWillMount';}else if(typeof instance.UNSAFE_componentWillMount==='function'){foundWillMountName='UNSAFE_componentWillMount';}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){foundWillReceivePropsName='componentWillReceiveProps';}else if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){foundWillReceivePropsName='UNSAFE_componentWillReceiveProps';}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){foundWillUpdateName='componentWillUpdate';}else if(typeof instance.UNSAFE_componentWillUpdate==='function'){foundWillUpdateName='UNSAFE_componentWillUpdate';}if(foundWillMountName!==null||foundWillReceivePropsName!==null||foundWillUpdateName!==null){var _componentName=getComponentName(ctor)||'Component';var newApiName=typeof ctor.getDerivedStateFromProps==='function'?'getDerivedStateFromProps()':'getSnapshotBeforeUpdate()';if(!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)){didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);warningWithoutStack$1(false,'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n'+'%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n'+'The above lifecycles should be removed. Learn more about this warning here:\n'+'https://fb.me/react-async-component-lifecycle-hooks',_componentName,newApiName,foundWillMountName!==null?'\n  '+foundWillMountName:'',foundWillReceivePropsName!==null?'\n  '+foundWillReceivePropsName:'',foundWillUpdateName!==null?'\n  '+foundWillUpdateName:'');}}}}// Cache unmasked context so we can avoid recreating masked context unless necessary.
// ReactFiberContext usually updates this cache but can't for newly-created instances.
if(isLegacyContextConsumer){cacheContext(workInProgress,unmaskedContext,context);}return instance;}function callComponentWillMount(workInProgress,instance){startPhaseTimer(workInProgress,'componentWillMount');var oldState=instance.state;if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}stopPhaseTimer();if(oldState!==instance.state){{warningWithoutStack$1(false,'%s.componentWillMount(): Assigning directly to this.state is '+"deprecated (except inside a component's "+'constructor). Use setState instead.',getComponentName(workInProgress.type)||'Component');}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}function callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext){var oldState=instance.state;startPhaseTimer(workInProgress,'componentWillReceiveProps');if(typeof instance.componentWillReceiveProps==='function'){instance.componentWillReceiveProps(newProps,nextContext);}if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){instance.UNSAFE_componentWillReceiveProps(newProps,nextContext);}stopPhaseTimer();if(instance.state!==oldState){{var componentName=getComponentName(workInProgress.type)||'Component';if(!didWarnAboutStateAssignmentForComponent.has(componentName)){didWarnAboutStateAssignmentForComponent.add(componentName);warningWithoutStack$1(false,'%s.componentWillReceiveProps(): Assigning directly to '+"this.state is deprecated (except inside a component's "+'constructor). Use setState instead.',componentName);}}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}// Invokes the mount life-cycles on a previously never rendered instance.
function mountClassInstance(workInProgress,ctor,newProps,renderExpirationTime){{checkClassInstance(workInProgress,ctor,newProps);}var instance=workInProgress.stateNode;instance.props=newProps;instance.state=workInProgress.memoizedState;instance.refs=emptyRefsObject;var contextType=ctor.contextType;if((typeof contextType==='undefined'?'undefined':_typeof(contextType))==='object'&&contextType!==null){instance.context=_readContext(contextType);}else{var unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);instance.context=getMaskedContext(workInProgress,unmaskedContext);}{if(instance.state===newProps){var componentName=getComponentName(ctor)||'Component';if(!didWarnAboutDirectlyAssigningPropsToState.has(componentName)){didWarnAboutDirectlyAssigningPropsToState.add(componentName);warningWithoutStack$1(false,'%s: It is not recommended to assign props directly to state '+"because updates to props won't be reflected in state. "+'In most cases, it is better to use props directly.',componentName);}}if(workInProgress.mode&StrictMode){ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress,instance);ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,instance);}if(warnAboutDeprecatedLifecycles){ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress,instance);}}var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);instance.state=workInProgress.memoizedState;}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);instance.state=workInProgress.memoizedState;}// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(typeof ctor.getDerivedStateFromProps!=='function'&&typeof instance.getSnapshotBeforeUpdate!=='function'&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){callComponentWillMount(workInProgress,instance);// If we had additional state updates during this life-cycle, let's
// process them now.
updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);instance.state=workInProgress.memoizedState;}}if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}}function resumeMountClassInstance(workInProgress,ctor,newProps,renderExpirationTime){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=oldProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=void 0;if((typeof contextType==='undefined'?'undefined':_typeof(contextType))==='object'&&contextType!==null){nextContext=_readContext(contextType);}else{var nextLegacyUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextLegacyUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
// ever the previously attempted to render - not the "current". However,
// during componentDidUpdate we pass the "current" props.
// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);newState=workInProgress.memoizedState;}if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){startPhaseTimer(workInProgress,'componentWillMount');if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}stopPhaseTimer();}if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}}else{// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}// If shouldComponentUpdate returned false, we should still update the
// memoized state to indicate that this work can be reused.
workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
// if shouldComponentUpdate returns false.
instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}// Invokes the update life-cycles and returns false if it shouldn't rerender.
function updateClassInstance(current,workInProgress,ctor,newProps,renderExpirationTime){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=workInProgress.type===workInProgress.elementType?oldProps:resolveDefaultProps(workInProgress.type,oldProps);var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=void 0;if((typeof contextType==='undefined'?'undefined':_typeof(contextType))==='object'&&contextType!==null){nextContext=_readContext(contextType);}else{var nextUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
// ever the previously attempted to render - not the "current". However,
// during componentDidUpdate we pass the "current" props.
// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);newState=workInProgress.memoizedState;}if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Snapshot;}}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillUpdate==='function'||typeof instance.componentWillUpdate==='function')){startPhaseTimer(workInProgress,'componentWillUpdate');if(typeof instance.componentWillUpdate==='function'){instance.componentWillUpdate(newProps,newState,nextContext);}if(typeof instance.UNSAFE_componentWillUpdate==='function'){instance.UNSAFE_componentWillUpdate(newProps,newState,nextContext);}stopPhaseTimer();}if(typeof instance.componentDidUpdate==='function'){workInProgress.effectTag|=Update;}if(typeof instance.getSnapshotBeforeUpdate==='function'){workInProgress.effectTag|=Snapshot;}}else{// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Snapshot;}}// If shouldComponentUpdate returned false, we should still update the
// memoized props/state to indicate that this work can be reused.
workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
// if shouldComponentUpdate returns false.
instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}var didWarnAboutMaps=void 0;var didWarnAboutGenerators=void 0;var didWarnAboutStringRefInStrictMode=void 0;var ownerHasKeyUseWarning=void 0;var ownerHasFunctionTypeWarning=void 0;var warnForMissingKey=function warnForMissingKey(child){};{didWarnAboutMaps=false;didWarnAboutGenerators=false;didWarnAboutStringRefInStrictMode={};/**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ownerHasKeyUseWarning={};ownerHasFunctionTypeWarning={};warnForMissingKey=function warnForMissingKey(child){if(child===null||(typeof child==='undefined'?'undefined':_typeof(child))!=='object'){return;}if(!child._store||child._store.validated||child.key!=null){return;}!(_typeof(child._store)==='object')?invariant(false,'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'):void 0;child._store.validated=true;var currentComponentErrorInfo='Each child in a list should have a unique '+'"key" prop. See https://fb.me/react-warning-keys for '+'more information.'+getCurrentFiberStackInDev();if(ownerHasKeyUseWarning[currentComponentErrorInfo]){return;}ownerHasKeyUseWarning[currentComponentErrorInfo]=true;warning$1(false,'Each child in a list should have a unique '+'"key" prop. See https://fb.me/react-warning-keys for '+'more information.');};}var isArray=Array.isArray;function coerceRef(returnFiber,current$$1,element){var mixedRef=element.ref;if(mixedRef!==null&&typeof mixedRef!=='function'&&(typeof mixedRef==='undefined'?'undefined':_typeof(mixedRef))!=='object'){{if(returnFiber.mode&StrictMode){var componentName=getComponentName(returnFiber.type)||'Component';if(!didWarnAboutStringRefInStrictMode[componentName]){warningWithoutStack$1(false,'A string ref, "%s", has been found within a strict mode tree. '+'String refs are a source of potential bugs and should be avoided. '+'We recommend using createRef() instead.'+'\n%s'+'\n\nLearn more about using refs safely here:'+'\nhttps://fb.me/react-strict-mode-string-ref',mixedRef,getStackByFiberInDevAndProd(returnFiber));didWarnAboutStringRefInStrictMode[componentName]=true;}}}if(element._owner){var owner=element._owner;var inst=void 0;if(owner){var ownerFiber=owner;!(ownerFiber.tag===ClassComponent)?invariant(false,'Function components cannot have refs. Did you mean to use React.forwardRef()?'):void 0;inst=ownerFiber.stateNode;}!inst?invariant(false,'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.',mixedRef):void 0;var stringRef=''+mixedRef;// Check if previous string ref matches new string ref
if(current$$1!==null&&current$$1.ref!==null&&typeof current$$1.ref==='function'&&current$$1.ref._stringRef===stringRef){return current$$1.ref;}var ref=function ref(value){var refs=inst.refs;if(refs===emptyRefsObject){// This is a lazy pooled frozen object, so we need to initialize.
refs=inst.refs={};}if(value===null){delete refs[stringRef];}else{refs[stringRef]=value;}};ref._stringRef=stringRef;return ref;}else{!(typeof mixedRef==='string')?invariant(false,'Expected ref to be a function, a string, an object returned by React.createRef(), or null.'):void 0;!element._owner?invariant(false,'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.',mixedRef):void 0;}}return mixedRef;}function throwOnInvalidObjectType(returnFiber,newChild){if(returnFiber.type!=='textarea'){var addendum='';{addendum=' If you meant to render a collection of children, use an array '+'instead.'+getCurrentFiberStackInDev();}invariant(false,'Objects are not valid as a React child (found: %s).%s',Object.prototype.toString.call(newChild)==='[object Object]'?'object with keys {'+Object.keys(newChild).join(', ')+'}':newChild,addendum);}}function warnOnFunctionType(){var currentComponentErrorInfo='Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.'+getCurrentFiberStackInDev();if(ownerHasFunctionTypeWarning[currentComponentErrorInfo]){return;}ownerHasFunctionTypeWarning[currentComponentErrorInfo]=true;warning$1(false,'Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.');}// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects){function deleteChild(returnFiber,childToDelete){if(!shouldTrackSideEffects){// Noop.
return;}// Deletions are added in reversed order so we add it to the front.
// At this point, the return fiber's effect list is empty except for
// deletions, so we can just append the deletion to the list. The remaining
// effects aren't added until the complete phase. Once we implement
// resuming, this may not be true.
var last=returnFiber.lastEffect;if(last!==null){last.nextEffect=childToDelete;returnFiber.lastEffect=childToDelete;}else{returnFiber.firstEffect=returnFiber.lastEffect=childToDelete;}childToDelete.nextEffect=null;childToDelete.effectTag=Deletion;}function deleteRemainingChildren(returnFiber,currentFirstChild){if(!shouldTrackSideEffects){// Noop.
return null;}// TODO: For the shouldClone case, this could be micro-optimized a bit by
// assuming that after the first child we've already added everything.
var childToDelete=currentFirstChild;while(childToDelete!==null){deleteChild(returnFiber,childToDelete);childToDelete=childToDelete.sibling;}return null;}function mapRemainingChildren(returnFiber,currentFirstChild){// Add the remaining children to a temporary map so that we can find them by
// keys quickly. Implicit (null) keys get added to this set with their index
var existingChildren=new Map();var existingChild=currentFirstChild;while(existingChild!==null){if(existingChild.key!==null){existingChildren.set(existingChild.key,existingChild);}else{existingChildren.set(existingChild.index,existingChild);}existingChild=existingChild.sibling;}return existingChildren;}function useFiber(fiber,pendingProps,expirationTime){// We currently set sibling to null and index to 0 here because it is easy
// to forget to do before returning it. E.g. for the single child case.
var clone=createWorkInProgress(fiber,pendingProps,expirationTime);clone.index=0;clone.sibling=null;return clone;}function placeChild(newFiber,lastPlacedIndex,newIndex){newFiber.index=newIndex;if(!shouldTrackSideEffects){// Noop.
return lastPlacedIndex;}var current$$1=newFiber.alternate;if(current$$1!==null){var oldIndex=current$$1.index;if(oldIndex<lastPlacedIndex){// This is a move.
newFiber.effectTag=Placement;return lastPlacedIndex;}else{// This item can stay in place.
return oldIndex;}}else{// This is an insertion.
newFiber.effectTag=Placement;return lastPlacedIndex;}}function placeSingleChild(newFiber){// This is simpler for the single child case. We only need to do a
// placement for inserting new children.
if(shouldTrackSideEffects&&newFiber.alternate===null){newFiber.effectTag=Placement;}return newFiber;}function updateTextNode(returnFiber,current$$1,textContent,expirationTime){if(current$$1===null||current$$1.tag!==HostText){// Insert
var created=createFiberFromText(textContent,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}else{// Update
var existing=useFiber(current$$1,textContent,expirationTime);existing.return=returnFiber;return existing;}}function updateElement(returnFiber,current$$1,element,expirationTime){if(current$$1!==null&&current$$1.elementType===element.type){// Move based on index
var existing=useFiber(current$$1,element.props,expirationTime);existing.ref=coerceRef(returnFiber,current$$1,element);existing.return=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}else{// Insert
var created=createFiberFromElement(element,returnFiber.mode,expirationTime);created.ref=coerceRef(returnFiber,current$$1,element);created.return=returnFiber;return created;}}function updatePortal(returnFiber,current$$1,portal,expirationTime){if(current$$1===null||current$$1.tag!==HostPortal||current$$1.stateNode.containerInfo!==portal.containerInfo||current$$1.stateNode.implementation!==portal.implementation){// Insert
var created=createFiberFromPortal(portal,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}else{// Update
var existing=useFiber(current$$1,portal.children||[],expirationTime);existing.return=returnFiber;return existing;}}function updateFragment(returnFiber,current$$1,fragment,expirationTime,key){if(current$$1===null||current$$1.tag!==Fragment){// Insert
var created=createFiberFromFragment(fragment,returnFiber.mode,expirationTime,key);created.return=returnFiber;return created;}else{// Update
var existing=useFiber(current$$1,fragment,expirationTime);existing.return=returnFiber;return existing;}}function createChild(returnFiber,newChild,expirationTime){if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
// we can continue to replace it without aborting even if it is not a text
// node.
var created=createFiberFromText(''+newChild,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}if((typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _created=createFiberFromElement(newChild,returnFiber.mode,expirationTime);_created.ref=coerceRef(returnFiber,null,newChild);_created.return=returnFiber;return _created;}case REACT_PORTAL_TYPE:{var _created2=createFiberFromPortal(newChild,returnFiber.mode,expirationTime);_created2.return=returnFiber;return _created2;}}if(isArray(newChild)||getIteratorFn(newChild)){var _created3=createFiberFromFragment(newChild,returnFiber.mode,expirationTime,null);_created3.return=returnFiber;return _created3;}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}function updateSlot(returnFiber,oldFiber,newChild,expirationTime){// Update the fiber if the keys match, otherwise return null.
var key=oldFiber!==null?oldFiber.key:null;if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
// we can continue to replace it without aborting even if it is not a text
// node.
if(key!==null){return null;}return updateTextNode(returnFiber,oldFiber,''+newChild,expirationTime);}if((typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{if(newChild.key===key){if(newChild.type===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,oldFiber,newChild.props.children,expirationTime,key);}return updateElement(returnFiber,oldFiber,newChild,expirationTime);}else{return null;}}case REACT_PORTAL_TYPE:{if(newChild.key===key){return updatePortal(returnFiber,oldFiber,newChild,expirationTime);}else{return null;}}}if(isArray(newChild)||getIteratorFn(newChild)){if(key!==null){return null;}return updateFragment(returnFiber,oldFiber,newChild,expirationTime,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}function updateFromMap(existingChildren,returnFiber,newIdx,newChild,expirationTime){if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys, so we neither have to check the old nor
// new node for the key. If both are text nodes, they match.
var matchedFiber=existingChildren.get(newIdx)||null;return updateTextNode(returnFiber,matchedFiber,''+newChild,expirationTime);}if((typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _matchedFiber=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;if(newChild.type===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,_matchedFiber,newChild.props.children,expirationTime,newChild.key);}return updateElement(returnFiber,_matchedFiber,newChild,expirationTime);}case REACT_PORTAL_TYPE:{var _matchedFiber2=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;return updatePortal(returnFiber,_matchedFiber2,newChild,expirationTime);}}if(isArray(newChild)||getIteratorFn(newChild)){var _matchedFiber3=existingChildren.get(newIdx)||null;return updateFragment(returnFiber,_matchedFiber3,newChild,expirationTime,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}/**
   * Warns if there is a duplicate or missing key
   */function warnOnInvalidKey(child,knownKeys){{if((typeof child==='undefined'?'undefined':_typeof(child))!=='object'||child===null){return knownKeys;}switch(child.$$typeof){case REACT_ELEMENT_TYPE:case REACT_PORTAL_TYPE:warnForMissingKey(child);var key=child.key;if(typeof key!=='string'){break;}if(knownKeys===null){knownKeys=new Set();knownKeys.add(key);break;}if(!knownKeys.has(key)){knownKeys.add(key);break;}warning$1(false,'Encountered two children with the same key, `%s`. '+'Keys should be unique so that components maintain their identity '+'across updates. Non-unique keys may cause children to be '+'duplicated and/or omitted — the behavior is unsupported and '+'could change in a future version.',key);break;default:break;}}return knownKeys;}function reconcileChildrenArray(returnFiber,currentFirstChild,newChildren,expirationTime){// This algorithm can't optimize by searching from both ends since we
// don't have backpointers on fibers. I'm trying to see how far we can get
// with that model. If it ends up not being worth the tradeoffs, we can
// add it later.
// Even with a two ended optimization, we'd want to optimize for the case
// where there are few changes and brute force the comparison instead of
// going for the Map. It'd like to explore hitting that path first in
// forward-only mode and only go for the Map once we notice that we need
// lots of look ahead. This doesn't handle reversal as well as two ended
// search but that's unusual. Besides, for the two ended optimization to
// work on Iterables, we'd need to copy the whole set.
// In this first iteration, we'll just live with hitting the bad case
// (adding everything to a Map) in for every insert/move.
// If you change this code, also update reconcileChildrenIterator() which
// uses the same algorithm.
{// First, validate keys.
var knownKeys=null;for(var i=0;i<newChildren.length;i++){var child=newChildren[i];knownKeys=warnOnInvalidKey(child,knownKeys);}}var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;for(;oldFiber!==null&&newIdx<newChildren.length;newIdx++){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,newChildren[newIdx],expirationTime);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
// unfortunate because it triggers the slow path all the time. We need
// a better way to communicate whether this was a miss or null,
// boolean, undefined, etc.
if(oldFiber===null){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
// need to delete the existing child.
deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.
// I.e. if we had null values before, then we want to defer this
// for each null value. However, we also don't want to call updateSlot
// with the previous one.
previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(newIdx===newChildren.length){// We've reached the end of the new children. We can delete the rest.
deleteRemainingChildren(returnFiber,oldFiber);return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
// since the rest will all be insertions.
for(;newIdx<newChildren.length;newIdx++){var _newFiber=createChild(returnFiber,newChildren[newIdx],expirationTime);if(!_newFiber){continue;}lastPlacedIndex=placeChild(_newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=_newFiber;}else{previousNewFiber.sibling=_newFiber;}previousNewFiber=_newFiber;}return resultingFirstChild;}// Add all children to a key map for quick lookups.
var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
for(;newIdx<newChildren.length;newIdx++){var _newFiber2=updateFromMap(existingChildren,returnFiber,newIdx,newChildren[newIdx],expirationTime);if(_newFiber2){if(shouldTrackSideEffects){if(_newFiber2.alternate!==null){// The new fiber is a work in progress, but if there exists a
// current, that means that we reused the fiber. We need to delete
// it from the child list so that we don't add it to the deletion
// list.
existingChildren.delete(_newFiber2.key===null?newIdx:_newFiber2.key);}}lastPlacedIndex=placeChild(_newFiber2,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber2;}else{previousNewFiber.sibling=_newFiber2;}previousNewFiber=_newFiber2;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
// to add them to the deletion list.
existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}return resultingFirstChild;}function reconcileChildrenIterator(returnFiber,currentFirstChild,newChildrenIterable,expirationTime){// This is the same implementation as reconcileChildrenArray(),
// but using the iterator instead.
var iteratorFn=getIteratorFn(newChildrenIterable);!(typeof iteratorFn==='function')?invariant(false,'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'):void 0;{// We don't support rendering Generators because it's a mutation.
// See https://github.com/facebook/react/issues/12995
if(typeof Symbol==='function'&&// $FlowFixMe Flow doesn't know about toStringTag
newChildrenIterable[Symbol.toStringTag]==='Generator'){!didWarnAboutGenerators?warning$1(false,'Using Generators as children is unsupported and will likely yield '+'unexpected results because enumerating a generator mutates it. '+'You may convert it to an array with `Array.from()` or the '+'`[...spread]` operator before rendering. Keep in mind '+'you might need to polyfill these features for older browsers.'):void 0;didWarnAboutGenerators=true;}// Warn about using Maps as children
if(newChildrenIterable.entries===iteratorFn){!didWarnAboutMaps?warning$1(false,'Using Maps as children is unsupported and will likely yield '+'unexpected results. Convert it to a sequence/iterable of keyed '+'ReactElements instead.'):void 0;didWarnAboutMaps=true;}// First, validate keys.
// We'll get a different iterator later for the main pass.
var _newChildren=iteratorFn.call(newChildrenIterable);if(_newChildren){var knownKeys=null;var _step=_newChildren.next();for(;!_step.done;_step=_newChildren.next()){var child=_step.value;knownKeys=warnOnInvalidKey(child,knownKeys);}}}var newChildren=iteratorFn.call(newChildrenIterable);!(newChildren!=null)?invariant(false,'An iterable object provided no iterator.'):void 0;var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;var step=newChildren.next();for(;oldFiber!==null&&!step.done;newIdx++,step=newChildren.next()){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,step.value,expirationTime);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
// unfortunate because it triggers the slow path all the time. We need
// a better way to communicate whether this was a miss or null,
// boolean, undefined, etc.
if(!oldFiber){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
// need to delete the existing child.
deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.
// I.e. if we had null values before, then we want to defer this
// for each null value. However, we also don't want to call updateSlot
// with the previous one.
previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(step.done){// We've reached the end of the new children. We can delete the rest.
deleteRemainingChildren(returnFiber,oldFiber);return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
// since the rest will all be insertions.
for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber3=createChild(returnFiber,step.value,expirationTime);if(_newFiber3===null){continue;}lastPlacedIndex=placeChild(_newFiber3,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=_newFiber3;}else{previousNewFiber.sibling=_newFiber3;}previousNewFiber=_newFiber3;}return resultingFirstChild;}// Add all children to a key map for quick lookups.
var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber4=updateFromMap(existingChildren,returnFiber,newIdx,step.value,expirationTime);if(_newFiber4!==null){if(shouldTrackSideEffects){if(_newFiber4.alternate!==null){// The new fiber is a work in progress, but if there exists a
// current, that means that we reused the fiber. We need to delete
// it from the child list so that we don't add it to the deletion
// list.
existingChildren.delete(_newFiber4.key===null?newIdx:_newFiber4.key);}}lastPlacedIndex=placeChild(_newFiber4,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber4;}else{previousNewFiber.sibling=_newFiber4;}previousNewFiber=_newFiber4;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
// to add them to the deletion list.
existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}return resultingFirstChild;}function reconcileSingleTextNode(returnFiber,currentFirstChild,textContent,expirationTime){// There's no need to check for keys on text nodes since we don't have a
// way to define them.
if(currentFirstChild!==null&&currentFirstChild.tag===HostText){// We already have an existing node so let's just update it and delete
// the rest.
deleteRemainingChildren(returnFiber,currentFirstChild.sibling);var existing=useFiber(currentFirstChild,textContent,expirationTime);existing.return=returnFiber;return existing;}// The existing first child is not a text node so we need to create one
// and delete the existing ones.
deleteRemainingChildren(returnFiber,currentFirstChild);var created=createFiberFromText(textContent,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}function reconcileSingleElement(returnFiber,currentFirstChild,element,expirationTime){var key=element.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
// the first item in the list.
if(child.key===key){if(child.tag===Fragment?element.type===REACT_FRAGMENT_TYPE:child.elementType===element.type){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,element.type===REACT_FRAGMENT_TYPE?element.props.children:element.props,expirationTime);existing.ref=coerceRef(returnFiber,child,element);existing.return=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}else{deleteRemainingChildren(returnFiber,child);break;}}else{deleteChild(returnFiber,child);}child=child.sibling;}if(element.type===REACT_FRAGMENT_TYPE){var created=createFiberFromFragment(element.props.children,returnFiber.mode,expirationTime,element.key);created.return=returnFiber;return created;}else{var _created4=createFiberFromElement(element,returnFiber.mode,expirationTime);_created4.ref=coerceRef(returnFiber,currentFirstChild,element);_created4.return=returnFiber;return _created4;}}function reconcileSinglePortal(returnFiber,currentFirstChild,portal,expirationTime){var key=portal.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
// the first item in the list.
if(child.key===key){if(child.tag===HostPortal&&child.stateNode.containerInfo===portal.containerInfo&&child.stateNode.implementation===portal.implementation){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,portal.children||[],expirationTime);existing.return=returnFiber;return existing;}else{deleteRemainingChildren(returnFiber,child);break;}}else{deleteChild(returnFiber,child);}child=child.sibling;}var created=createFiberFromPortal(portal,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}// This API will tag the children with the side-effect of the reconciliation
// itself. They will be added to the side-effect list as we pass through the
// children and the parent.
function reconcileChildFibers(returnFiber,currentFirstChild,newChild,expirationTime){// This function is not recursive.
// If the top level item is an array, we treat it as a set of children,
// not as a fragment. Nested arrays on the other hand will be treated as
// fragment nodes. Recursion happens at the normal flow.
// Handle top level unkeyed fragments as if they were arrays.
// This leads to an ambiguity between <>{[...]}</> and <>...</>.
// We treat the ambiguous cases above the same.
var isUnkeyedTopLevelFragment=(typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null&&newChild.type===REACT_FRAGMENT_TYPE&&newChild.key===null;if(isUnkeyedTopLevelFragment){newChild=newChild.props.children;}// Handle object types
var isObject=(typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null;if(isObject){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return placeSingleChild(reconcileSingleElement(returnFiber,currentFirstChild,newChild,expirationTime));case REACT_PORTAL_TYPE:return placeSingleChild(reconcileSinglePortal(returnFiber,currentFirstChild,newChild,expirationTime));}}if(typeof newChild==='string'||typeof newChild==='number'){return placeSingleChild(reconcileSingleTextNode(returnFiber,currentFirstChild,''+newChild,expirationTime));}if(isArray(newChild)){return reconcileChildrenArray(returnFiber,currentFirstChild,newChild,expirationTime);}if(getIteratorFn(newChild)){return reconcileChildrenIterator(returnFiber,currentFirstChild,newChild,expirationTime);}if(isObject){throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}if(typeof newChild==='undefined'&&!isUnkeyedTopLevelFragment){// If the new child is undefined, and the return fiber is a composite
// component, throw an error. If Fiber return types are disabled,
// we already threw above.
switch(returnFiber.tag){case ClassComponent:{{var instance=returnFiber.stateNode;if(instance.render._isMockFunction){// We allow auto-mocks to proceed as if they're returning null.
break;}}}// Intentionally fall through to the next case, which handles both
// functions and classes
// eslint-disable-next-lined no-fallthrough
case FunctionComponent:{var Component=returnFiber.type;invariant(false,'%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.',Component.displayName||Component.name||'Component');}}}// Remaining cases are all treated as empty.
return deleteRemainingChildren(returnFiber,currentFirstChild);}return reconcileChildFibers;}var reconcileChildFibers=ChildReconciler(true);var mountChildFibers=ChildReconciler(false);function cloneChildFibers(current$$1,workInProgress){!(current$$1===null||workInProgress.child===current$$1.child)?invariant(false,'Resuming work not yet implemented.'):void 0;if(workInProgress.child===null){return;}var currentChild=workInProgress.child;var newChild=createWorkInProgress(currentChild,currentChild.pendingProps,currentChild.expirationTime);workInProgress.child=newChild;newChild.return=workInProgress;while(currentChild.sibling!==null){currentChild=currentChild.sibling;newChild=newChild.sibling=createWorkInProgress(currentChild,currentChild.pendingProps,currentChild.expirationTime);newChild.return=workInProgress;}newChild.sibling=null;}var NO_CONTEXT={};var contextStackCursor$1=createCursor(NO_CONTEXT);var contextFiberStackCursor=createCursor(NO_CONTEXT);var rootInstanceStackCursor=createCursor(NO_CONTEXT);function requiredContext(c){!(c!==NO_CONTEXT)?invariant(false,'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'):void 0;return c;}function getRootHostContainer(){var rootInstance=requiredContext(rootInstanceStackCursor.current);return rootInstance;}function pushHostContainer(fiber,nextRootInstance){// Push current root instance onto the stack;
// This allows us to reset root when portals are popped.
push(rootInstanceStackCursor,nextRootInstance,fiber);// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);// Finally, we need to push the host context to the stack.
// However, we can't just call getRootHostContext() and push it because
// we'd have a different number of entries on the stack depending on
// whether getRootHostContext() throws somewhere in renderer code or not.
// So we push an empty value first. This lets us safely unwind on errors.
push(contextStackCursor$1,NO_CONTEXT,fiber);var nextRootContext=getRootHostContext(nextRootInstance);// Now that we know this function doesn't throw, replace it.
pop(contextStackCursor$1,fiber);push(contextStackCursor$1,nextRootContext,fiber);}function popHostContainer(fiber){pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);pop(rootInstanceStackCursor,fiber);}function getHostContext(){var context=requiredContext(contextStackCursor$1.current);return context;}function pushHostContext(fiber){var rootInstance=requiredContext(rootInstanceStackCursor.current);var context=requiredContext(contextStackCursor$1.current);var nextContext=getChildHostContext(context,fiber.type,rootInstance);// Don't push this Fiber's context unless it's unique.
if(context===nextContext){return;}// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);push(contextStackCursor$1,nextContext,fiber);}function popHostContext(fiber){// Do not pop unless this Fiber provided the current context.
// pushHostContext() only pushes Fibers that provide unique contexts.
if(contextFiberStackCursor.current!==fiber){return;}pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);}var NoEffect$1=/*             */0;var UnmountSnapshot=/*      */2;var UnmountMutation=/*      */4;var MountMutation=/*        */8;var UnmountLayout=/*        */16;var MountLayout=/*          */32;var MountPassive=/*         */64;var UnmountPassive=/*       */128;var ReactCurrentDispatcher$1=ReactSharedInternals.ReactCurrentDispatcher;var didWarnAboutMismatchedHooksForComponent=void 0;{didWarnAboutMismatchedHooksForComponent=new Set();}// These are set right before calling the component.
var renderExpirationTime=NoWork;// The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.
var currentlyRenderingFiber$1=null;// Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.
var currentHook=null;var nextCurrentHook=null;var firstWorkInProgressHook=null;var workInProgressHook=null;var nextWorkInProgressHook=null;var remainingExpirationTime=NoWork;var componentUpdateQueue=null;var sideEffectTag=0;// Updates scheduled during render will trigger an immediate re-render at the
// end of the current pass. We can't store these updates on the normal queue,
// because if the work is aborted, they should be discarded. Because this is
// a relatively rare case, we also don't want to add an additional field to
// either the hook or queue object types. So we store them in a lazily create
// map of queue -> render-phase updates, which are discarded once the component
// completes without re-rendering.
// Whether an update was scheduled during the currently executing render pass.
var didScheduleRenderPhaseUpdate=false;// Lazily created map of render-phase updates
var renderPhaseUpdates=null;// Counter to prevent infinite loops.
var numberOfReRenders=0;var RE_RENDER_LIMIT=25;// In DEV, this is the name of the currently executing primitive hook
var currentHookNameInDev=null;// In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.
var hookTypesDev=null;var hookTypesUpdateIndexDev=-1;function mountHookTypesDev(){{var hookName=currentHookNameInDev;if(hookTypesDev===null){hookTypesDev=[hookName];}else{hookTypesDev.push(hookName);}}}function updateHookTypesDev(){{var hookName=currentHookNameInDev;if(hookTypesDev!==null){hookTypesUpdateIndexDev++;if(hookTypesDev[hookTypesUpdateIndexDev]!==hookName){warnOnHookMismatchInDev(hookName);}}}}function warnOnHookMismatchInDev(currentHookName){{var componentName=getComponentName(currentlyRenderingFiber$1.type);if(!didWarnAboutMismatchedHooksForComponent.has(componentName)){didWarnAboutMismatchedHooksForComponent.add(componentName);if(hookTypesDev!==null){var table='';var secondColumnStart=30;for(var i=0;i<=hookTypesUpdateIndexDev;i++){var oldHookName=hookTypesDev[i];var newHookName=i===hookTypesUpdateIndexDev?currentHookName:oldHookName;var row=i+1+'. '+oldHookName;// Extra space so second column lines up
// lol @ IE not supporting String#repeat
while(row.length<secondColumnStart){row+=' ';}row+=newHookName+'\n';table+=row;}warning$1(false,'React has detected a change in the order of Hooks called by %s. '+'This will lead to bugs and errors if not fixed. '+'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n'+'   Previous render            Next render\n'+'   ------------------------------------------------------\n'+'%s'+'   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n',componentName,table);}}}}function throwInvalidHookError(){invariant(false,'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.');}function areHookInputsEqual(nextDeps,prevDeps){if(prevDeps===null){{warning$1(false,'%s received a final argument during this render, but not during '+'the previous render. Even though the final argument is optional, '+'its type cannot change between renders.',currentHookNameInDev);}return false;}{// Don't bother comparing lengths in prod because these arrays should be
// passed inline.
if(nextDeps.length!==prevDeps.length){warning$1(false,'The final argument passed to %s changed size between renders. The '+'order and size of this array must remain constant.\n\n'+'Previous: %s\n'+'Incoming: %s',currentHookNameInDev,'['+nextDeps.join(', ')+']','['+prevDeps.join(', ')+']');}}for(var i=0;i<prevDeps.length&&i<nextDeps.length;i++){if(is(nextDeps[i],prevDeps[i])){continue;}return false;}return true;}function renderWithHooks(current,workInProgress,Component,props,refOrContext,nextRenderExpirationTime){renderExpirationTime=nextRenderExpirationTime;currentlyRenderingFiber$1=workInProgress;nextCurrentHook=current!==null?current.memoizedState:null;{hookTypesDev=current!==null?current._debugHookTypes:null;hookTypesUpdateIndexDev=-1;}// The following should have already been reset
// currentHook = null;
// workInProgressHook = null;
// remainingExpirationTime = NoWork;
// componentUpdateQueue = null;
// didScheduleRenderPhaseUpdate = false;
// renderPhaseUpdates = null;
// numberOfReRenders = 0;
// sideEffectTag = 0;
// TODO Warn if no hooks are used at all during mount, then some are used during update.
// Currently we will identify the update render as a mount because nextCurrentHook === null.
// This is tricky because it's valid for certain types of components (e.g. React.lazy)
// Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
// Non-stateful hooks (e.g. context) don't get added to memoizedState,
// so nextCurrentHook would be null during updates and mounts.
{if(nextCurrentHook!==null){ReactCurrentDispatcher$1.current=HooksDispatcherOnUpdateInDEV;}else if(hookTypesDev!==null){// This dispatcher handles an edge case where a component is updating,
// but no stateful hooks have been used.
// We want to match the production code behavior (which will use HooksDispatcherOnMount),
// but with the extra DEV validation to ensure hooks ordering hasn't changed.
// This dispatcher does that.
ReactCurrentDispatcher$1.current=HooksDispatcherOnMountWithHookTypesInDEV;}else{ReactCurrentDispatcher$1.current=HooksDispatcherOnMountInDEV;}}var children=Component(props,refOrContext);if(didScheduleRenderPhaseUpdate){do{didScheduleRenderPhaseUpdate=false;numberOfReRenders+=1;// Start over from the beginning of the list
nextCurrentHook=current!==null?current.memoizedState:null;nextWorkInProgressHook=firstWorkInProgressHook;currentHook=null;workInProgressHook=null;componentUpdateQueue=null;{// Also validate hook order for cascading updates.
hookTypesUpdateIndexDev=-1;}ReactCurrentDispatcher$1.current=HooksDispatcherOnUpdateInDEV;children=Component(props,refOrContext);}while(didScheduleRenderPhaseUpdate);renderPhaseUpdates=null;numberOfReRenders=0;}// We can assume the previous dispatcher is always this one, since we set it
// at the beginning of the render phase and there's no re-entrancy.
ReactCurrentDispatcher$1.current=ContextOnlyDispatcher;var renderedWork=currentlyRenderingFiber$1;renderedWork.memoizedState=firstWorkInProgressHook;renderedWork.expirationTime=remainingExpirationTime;renderedWork.updateQueue=componentUpdateQueue;renderedWork.effectTag|=sideEffectTag;{renderedWork._debugHookTypes=hookTypesDev;}// This check uses currentHook so that it works the same in DEV and prod bundles.
// hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
var didRenderTooFewHooks=currentHook!==null&&currentHook.next!==null;renderExpirationTime=NoWork;currentlyRenderingFiber$1=null;currentHook=null;nextCurrentHook=null;firstWorkInProgressHook=null;workInProgressHook=null;nextWorkInProgressHook=null;{currentHookNameInDev=null;hookTypesDev=null;hookTypesUpdateIndexDev=-1;}remainingExpirationTime=NoWork;componentUpdateQueue=null;sideEffectTag=0;// These were reset above
// didScheduleRenderPhaseUpdate = false;
// renderPhaseUpdates = null;
// numberOfReRenders = 0;
!!didRenderTooFewHooks?invariant(false,'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.'):void 0;return children;}function bailoutHooks(current,workInProgress,expirationTime){workInProgress.updateQueue=current.updateQueue;workInProgress.effectTag&=~(Passive|Update);if(current.expirationTime<=expirationTime){current.expirationTime=NoWork;}}function resetHooks(){// We can assume the previous dispatcher is always this one, since we set it
// at the beginning of the render phase and there's no re-entrancy.
ReactCurrentDispatcher$1.current=ContextOnlyDispatcher;// This is used to reset the state of this module when a component throws.
// It's also called inside mountIndeterminateComponent if we determine the
// component is a module-style component.
renderExpirationTime=NoWork;currentlyRenderingFiber$1=null;currentHook=null;nextCurrentHook=null;firstWorkInProgressHook=null;workInProgressHook=null;nextWorkInProgressHook=null;{hookTypesDev=null;hookTypesUpdateIndexDev=-1;currentHookNameInDev=null;}remainingExpirationTime=NoWork;componentUpdateQueue=null;sideEffectTag=0;didScheduleRenderPhaseUpdate=false;renderPhaseUpdates=null;numberOfReRenders=0;}function mountWorkInProgressHook(){var hook={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};if(workInProgressHook===null){// This is the first hook in the list
firstWorkInProgressHook=workInProgressHook=hook;}else{// Append to the end of the list
workInProgressHook=workInProgressHook.next=hook;}return workInProgressHook;}function updateWorkInProgressHook(){// This function is used both for updates and for re-renders triggered by a
// render phase update. It assumes there is either a current hook we can
// clone, or a work-in-progress hook from a previous render pass that we can
// use as a base. When we reach the end of the base list, we must switch to
// the dispatcher used for mounts.
if(nextWorkInProgressHook!==null){// There's already a work-in-progress. Reuse it.
workInProgressHook=nextWorkInProgressHook;nextWorkInProgressHook=workInProgressHook.next;currentHook=nextCurrentHook;nextCurrentHook=currentHook!==null?currentHook.next:null;}else{// Clone from the current hook.
!(nextCurrentHook!==null)?invariant(false,'Rendered more hooks than during the previous render.'):void 0;currentHook=nextCurrentHook;var newHook={memoizedState:currentHook.memoizedState,baseState:currentHook.baseState,queue:currentHook.queue,baseUpdate:currentHook.baseUpdate,next:null};if(workInProgressHook===null){// This is the first hook in the list.
workInProgressHook=firstWorkInProgressHook=newHook;}else{// Append to the end of the list.
workInProgressHook=workInProgressHook.next=newHook;}nextCurrentHook=currentHook.next;}return workInProgressHook;}function createFunctionComponentUpdateQueue(){return{lastEffect:null};}function basicStateReducer(state,action){return typeof action==='function'?action(state):action;}function mountReducer(reducer,initialArg,init){var hook=mountWorkInProgressHook();var initialState=void 0;if(init!==undefined){initialState=init(initialArg);}else{initialState=initialArg;}hook.memoizedState=hook.baseState=initialState;var queue=hook.queue={last:null,dispatch:null,lastRenderedReducer:reducer,lastRenderedState:initialState};var dispatch=queue.dispatch=dispatchAction.bind(null,// Flow doesn't know this is non-null, but we do.
currentlyRenderingFiber$1,queue);return[hook.memoizedState,dispatch];}function updateReducer(reducer,initialArg,init){var hook=updateWorkInProgressHook();var queue=hook.queue;!(queue!==null)?invariant(false,'Should have a queue. This is likely a bug in React. Please file an issue.'):void 0;queue.lastRenderedReducer=reducer;if(numberOfReRenders>0){// This is a re-render. Apply the new render phase updates to the previous
var _dispatch=queue.dispatch;if(renderPhaseUpdates!==null){// Render phase updates are stored in a map of queue -> linked list
var firstRenderPhaseUpdate=renderPhaseUpdates.get(queue);if(firstRenderPhaseUpdate!==undefined){renderPhaseUpdates.delete(queue);var newState=hook.memoizedState;var update=firstRenderPhaseUpdate;do{// Process this render phase update. We don't have to check the
// priority because it will always be the same as the current
// render's.
var _action=update.action;newState=reducer(newState,_action);update=update.next;}while(update!==null);// Mark that the fiber performed work, but only if the new state is
// different from the current state.
if(!is(newState,hook.memoizedState)){markWorkInProgressReceivedUpdate();}hook.memoizedState=newState;// Don't persist the state accumlated from the render phase updates to
// the base state unless the queue is empty.
// TODO: Not sure if this is the desired semantics, but it's what we
// do for gDSFP. I can't remember why.
if(hook.baseUpdate===queue.last){hook.baseState=newState;}queue.lastRenderedState=newState;return[newState,_dispatch];}}return[hook.memoizedState,_dispatch];}// The last update in the entire queue
var last=queue.last;// The last update that is part of the base state.
var baseUpdate=hook.baseUpdate;var baseState=hook.baseState;// Find the first unprocessed update.
var first=void 0;if(baseUpdate!==null){if(last!==null){// For the first update, the queue is a circular linked list where
// `queue.last.next = queue.first`. Once the first update commits, and
// the `baseUpdate` is no longer empty, we can unravel the list.
last.next=null;}first=baseUpdate.next;}else{first=last!==null?last.next:null;}if(first!==null){var _newState=baseState;var newBaseState=null;var newBaseUpdate=null;var prevUpdate=baseUpdate;var _update=first;var didSkip=false;do{var updateExpirationTime=_update.expirationTime;if(updateExpirationTime<renderExpirationTime){// Priority is insufficient. Skip this update. If this is the first
// skipped update, the previous update/state is the new base
// update/state.
if(!didSkip){didSkip=true;newBaseUpdate=prevUpdate;newBaseState=_newState;}// Update the remaining priority in the queue.
if(updateExpirationTime>remainingExpirationTime){remainingExpirationTime=updateExpirationTime;}}else{// Process this update.
if(_update.eagerReducer===reducer){// If this update was processed eagerly, and its reducer matches the
// current reducer, we can use the eagerly computed state.
_newState=_update.eagerState;}else{var _action2=_update.action;_newState=reducer(_newState,_action2);}}prevUpdate=_update;_update=_update.next;}while(_update!==null&&_update!==first);if(!didSkip){newBaseUpdate=prevUpdate;newBaseState=_newState;}// Mark that the fiber performed work, but only if the new state is
// different from the current state.
if(!is(_newState,hook.memoizedState)){markWorkInProgressReceivedUpdate();}hook.memoizedState=_newState;hook.baseUpdate=newBaseUpdate;hook.baseState=newBaseState;queue.lastRenderedState=_newState;}var dispatch=queue.dispatch;return[hook.memoizedState,dispatch];}function mountState(initialState){var hook=mountWorkInProgressHook();if(typeof initialState==='function'){initialState=initialState();}hook.memoizedState=hook.baseState=initialState;var queue=hook.queue={last:null,dispatch:null,lastRenderedReducer:basicStateReducer,lastRenderedState:initialState};var dispatch=queue.dispatch=dispatchAction.bind(null,// Flow doesn't know this is non-null, but we do.
currentlyRenderingFiber$1,queue);return[hook.memoizedState,dispatch];}function updateState(initialState){return updateReducer(basicStateReducer,initialState);}function pushEffect(tag,create,destroy,deps){var effect={tag:tag,create:create,destroy:destroy,deps:deps,// Circular
next:null};if(componentUpdateQueue===null){componentUpdateQueue=createFunctionComponentUpdateQueue();componentUpdateQueue.lastEffect=effect.next=effect;}else{var _lastEffect=componentUpdateQueue.lastEffect;if(_lastEffect===null){componentUpdateQueue.lastEffect=effect.next=effect;}else{var firstEffect=_lastEffect.next;_lastEffect.next=effect;effect.next=firstEffect;componentUpdateQueue.lastEffect=effect;}}return effect;}function mountRef(initialValue){var hook=mountWorkInProgressHook();var ref={current:initialValue};{Object.seal(ref);}hook.memoizedState=ref;return ref;}function updateRef(initialValue){var hook=updateWorkInProgressHook();return hook.memoizedState;}function mountEffectImpl(fiberEffectTag,hookEffectTag,create,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;sideEffectTag|=fiberEffectTag;hook.memoizedState=pushEffect(hookEffectTag,create,undefined,nextDeps);}function updateEffectImpl(fiberEffectTag,hookEffectTag,create,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var destroy=undefined;if(currentHook!==null){var prevEffect=currentHook.memoizedState;destroy=prevEffect.destroy;if(nextDeps!==null){var prevDeps=prevEffect.deps;if(areHookInputsEqual(nextDeps,prevDeps)){pushEffect(NoEffect$1,create,destroy,nextDeps);return;}}}sideEffectTag|=fiberEffectTag;hook.memoizedState=pushEffect(hookEffectTag,create,destroy,nextDeps);}function mountEffect(create,deps){return mountEffectImpl(Update|Passive,UnmountPassive|MountPassive,create,deps);}function updateEffect(create,deps){return updateEffectImpl(Update|Passive,UnmountPassive|MountPassive,create,deps);}function mountLayoutEffect(create,deps){return mountEffectImpl(Update,UnmountMutation|MountLayout,create,deps);}function updateLayoutEffect(create,deps){return updateEffectImpl(Update,UnmountMutation|MountLayout,create,deps);}function imperativeHandleEffect(create,ref){if(typeof ref==='function'){var refCallback=ref;var _inst=create();refCallback(_inst);return function(){refCallback(null);};}else if(ref!==null&&ref!==undefined){var refObject=ref;{!refObject.hasOwnProperty('current')?warning$1(false,'Expected useImperativeHandle() first argument to either be a '+'ref callback or React.createRef() object. Instead received: %s.','an object with keys {'+Object.keys(refObject).join(', ')+'}'):void 0;}var _inst2=create();refObject.current=_inst2;return function(){refObject.current=null;};}}function mountImperativeHandle(ref,create,deps){{!(typeof create==='function')?warning$1(false,'Expected useImperativeHandle() second argument to be a function '+'that creates a handle. Instead received: %s.',create!==null?typeof create==='undefined'?'undefined':_typeof(create):'null'):void 0;}// TODO: If deps are provided, should we skip comparing the ref itself?
var effectDeps=deps!==null&&deps!==undefined?deps.concat([ref]):null;return mountEffectImpl(Update,UnmountMutation|MountLayout,imperativeHandleEffect.bind(null,create,ref),effectDeps);}function updateImperativeHandle(ref,create,deps){{!(typeof create==='function')?warning$1(false,'Expected useImperativeHandle() second argument to be a function '+'that creates a handle. Instead received: %s.',create!==null?typeof create==='undefined'?'undefined':_typeof(create):'null'):void 0;}// TODO: If deps are provided, should we skip comparing the ref itself?
var effectDeps=deps!==null&&deps!==undefined?deps.concat([ref]):null;return updateEffectImpl(Update,UnmountMutation|MountLayout,imperativeHandleEffect.bind(null,create,ref),effectDeps);}function mountDebugValue(value,formatterFn){// This hook is normally a no-op.
// The react-debug-hooks package injects its own implementation
// so that e.g. DevTools can display custom hook values.
}var updateDebugValue=mountDebugValue;function mountCallback(callback,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;hook.memoizedState=[callback,nextDeps];return callback;}function updateCallback(callback,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var prevState=hook.memoizedState;if(prevState!==null){if(nextDeps!==null){var prevDeps=prevState[1];if(areHookInputsEqual(nextDeps,prevDeps)){return prevState[0];}}}hook.memoizedState=[callback,nextDeps];return callback;}function mountMemo(nextCreate,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var nextValue=nextCreate();hook.memoizedState=[nextValue,nextDeps];return nextValue;}function updateMemo(nextCreate,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var prevState=hook.memoizedState;if(prevState!==null){// Assume these are defined. If they're not, areHookInputsEqual will warn.
if(nextDeps!==null){var prevDeps=prevState[1];if(areHookInputsEqual(nextDeps,prevDeps)){return prevState[0];}}}var nextValue=nextCreate();hook.memoizedState=[nextValue,nextDeps];return nextValue;}// in a test-like environment, we want to warn if dispatchAction()
// is called outside of a batchedUpdates/TestUtils.act(...) call.
var shouldWarnForUnbatchedSetState=false;{// jest isn't a 'global', it's just exposed to tests via a wrapped function
// further, this isn't a test file, so flow doesn't recognize the symbol. So...
// $FlowExpectedError - because requirements don't give a damn about your type sigs.
if('undefined'!==typeof jest){shouldWarnForUnbatchedSetState=true;}}function dispatchAction(fiber,queue,action){!(numberOfReRenders<RE_RENDER_LIMIT)?invariant(false,'Too many re-renders. React limits the number of renders to prevent an infinite loop.'):void 0;{!(arguments.length<=3)?warning$1(false,"State updates from the useState() and useReducer() Hooks don't support the "+'second callback argument. To execute a side effect after '+'rendering, declare it in the component body with useEffect().'):void 0;}var alternate=fiber.alternate;if(fiber===currentlyRenderingFiber$1||alternate!==null&&alternate===currentlyRenderingFiber$1){// This is a render phase update. Stash it in a lazily-created map of
// queue -> linked list of updates. After this render pass, we'll restart
// and apply the stashed updates on top of the work-in-progress hook.
didScheduleRenderPhaseUpdate=true;var update={expirationTime:renderExpirationTime,action:action,eagerReducer:null,eagerState:null,next:null};if(renderPhaseUpdates===null){renderPhaseUpdates=new Map();}var firstRenderPhaseUpdate=renderPhaseUpdates.get(queue);if(firstRenderPhaseUpdate===undefined){renderPhaseUpdates.set(queue,update);}else{// Append the update to the end of the list.
var lastRenderPhaseUpdate=firstRenderPhaseUpdate;while(lastRenderPhaseUpdate.next!==null){lastRenderPhaseUpdate=lastRenderPhaseUpdate.next;}lastRenderPhaseUpdate.next=update;}}else{flushPassiveEffects();var currentTime=requestCurrentTime();var _expirationTime=computeExpirationForFiber(currentTime,fiber);var _update2={expirationTime:_expirationTime,action:action,eagerReducer:null,eagerState:null,next:null};// Append the update to the end of the list.
var _last=queue.last;if(_last===null){// This is the first update. Create a circular list.
_update2.next=_update2;}else{var first=_last.next;if(first!==null){// Still circular.
_update2.next=first;}_last.next=_update2;}queue.last=_update2;if(fiber.expirationTime===NoWork&&(alternate===null||alternate.expirationTime===NoWork)){// The queue is currently empty, which means we can eagerly compute the
// next state before entering the render phase. If the new state is the
// same as the current state, we may be able to bail out entirely.
var _lastRenderedReducer=queue.lastRenderedReducer;if(_lastRenderedReducer!==null){var prevDispatcher=void 0;{prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;}try{var currentState=queue.lastRenderedState;var _eagerState=_lastRenderedReducer(currentState,action);// Stash the eagerly computed state, and the reducer used to compute
// it, on the update object. If the reducer hasn't changed by the
// time we enter the render phase, then the eager state can be used
// without calling the reducer again.
_update2.eagerReducer=_lastRenderedReducer;_update2.eagerState=_eagerState;if(is(_eagerState,currentState)){// Fast path. We can bail out without scheduling React to re-render.
// It's still possible that we'll need to rebase this update later,
// if the component re-renders for a different reason and by that
// time the reducer has changed.
return;}}catch(error){// Suppress the error. It will throw again in the render phase.
}finally{{ReactCurrentDispatcher$1.current=prevDispatcher;}}}}{if(shouldWarnForUnbatchedSetState===true){warnIfNotCurrentlyBatchingInDev(fiber);}}scheduleWork(fiber,_expirationTime);}}var ContextOnlyDispatcher={readContext:_readContext,useCallback:throwInvalidHookError,useContext:throwInvalidHookError,useEffect:throwInvalidHookError,useImperativeHandle:throwInvalidHookError,useLayoutEffect:throwInvalidHookError,useMemo:throwInvalidHookError,useReducer:throwInvalidHookError,useRef:throwInvalidHookError,useState:throwInvalidHookError,useDebugValue:throwInvalidHookError};var HooksDispatcherOnMountInDEV=null;var HooksDispatcherOnMountWithHookTypesInDEV=null;var HooksDispatcherOnUpdateInDEV=null;var InvalidNestedHooksDispatcherOnMountInDEV=null;var InvalidNestedHooksDispatcherOnUpdateInDEV=null;{var warnInvalidContextAccess=function warnInvalidContextAccess(){warning$1(false,'Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().');};var warnInvalidHookAccess=function warnInvalidHookAccess(){warning$1(false,'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. '+'You can only call Hooks at the top level of your React function. '+'For more information, see '+'https://fb.me/rules-of-hooks');};HooksDispatcherOnMountInDEV={readContext:function readContext(context,observedBits){return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';mountHookTypesDev();return mountCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';mountHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';mountHookTypesDev();return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';mountHookTypesDev();return mountImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';mountHookTypesDev();return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';mountHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';mountHookTypesDev();return mountDebugValue(value,formatterFn);}};HooksDispatcherOnMountWithHookTypesInDEV={readContext:function readContext(context,observedBits){return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return mountCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return mountImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return mountDebugValue(value,formatterFn);}};HooksDispatcherOnUpdateInDEV={readContext:function readContext(context,observedBits){return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return updateRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return updateDebugValue(value,formatterFn);}};InvalidNestedHooksDispatcherOnMountInDEV={readContext:function readContext(context,observedBits){warnInvalidContextAccess();return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();mountHookTypesDev();return mountCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';warnInvalidHookAccess();mountHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();mountHookTypesDev();return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();mountHookTypesDev();return mountImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();mountHookTypesDev();return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();mountHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();mountHookTypesDev();return mountDebugValue(value,formatterFn);}};InvalidNestedHooksDispatcherOnUpdateInDEV={readContext:function readContext(context,observedBits){warnInvalidContextAccess();return _readContext(context,observedBits);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context,observedBits){currentHookNameInDev='useContext';warnInvalidHookAccess();updateHookTypesDev();return _readContext(context,observedBits);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();updateHookTypesDev();return updateRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();updateHookTypesDev();return updateDebugValue(value,formatterFn);}};}var commitTime=0;var profilerStartTime=-1;function getCommitTime(){return commitTime;}function recordCommitTime(){if(!enableProfilerTimer){return;}commitTime=scheduler.unstable_now();}function startProfilerTimer(fiber){if(!enableProfilerTimer){return;}profilerStartTime=scheduler.unstable_now();if(fiber.actualStartTime<0){fiber.actualStartTime=scheduler.unstable_now();}}function stopProfilerTimerIfRunning(fiber){if(!enableProfilerTimer){return;}profilerStartTime=-1;}function stopProfilerTimerIfRunningAndRecordDelta(fiber,overrideBaseTime){if(!enableProfilerTimer){return;}if(profilerStartTime>=0){var elapsedTime=scheduler.unstable_now()-profilerStartTime;fiber.actualDuration+=elapsedTime;if(overrideBaseTime){fiber.selfBaseDuration=elapsedTime;}profilerStartTime=-1;}}// The deepest Fiber on the stack involved in a hydration context.
// This may have been an insertion or a hydration.
var hydrationParentFiber=null;var nextHydratableInstance=null;var isHydrating=false;function enterHydrationState(fiber){if(!supportsHydration){return false;}var parentInstance=fiber.stateNode.containerInfo;nextHydratableInstance=getFirstHydratableChild(parentInstance);hydrationParentFiber=fiber;isHydrating=true;return true;}function reenterHydrationStateFromDehydratedSuspenseInstance(fiber){if(!supportsHydration){return false;}var suspenseInstance=fiber.stateNode;nextHydratableInstance=getNextHydratableSibling(suspenseInstance);popToNextHostParent(fiber);isHydrating=true;return true;}function deleteHydratableInstance(returnFiber,instance){{switch(returnFiber.tag){case HostRoot:didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo,instance);break;case HostComponent:didNotHydrateInstance(returnFiber.type,returnFiber.memoizedProps,returnFiber.stateNode,instance);break;}}var childToDelete=createFiberFromHostInstanceForDeletion();childToDelete.stateNode=instance;childToDelete.return=returnFiber;childToDelete.effectTag=Deletion;// This might seem like it belongs on progressedFirstDeletion. However,
// these children are not part of the reconciliation list of children.
// Even if we abort and rereconcile the children, that will try to hydrate
// again and the nodes are still in the host tree so these will be
// recreated.
if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=childToDelete;returnFiber.lastEffect=childToDelete;}else{returnFiber.firstEffect=returnFiber.lastEffect=childToDelete;}}function insertNonHydratedInstance(returnFiber,fiber){fiber.effectTag|=Placement;{switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;switch(fiber.tag){case HostComponent:var type=fiber.type;var props=fiber.pendingProps;didNotFindHydratableContainerInstance(parentContainer,type,props);break;case HostText:var text=fiber.pendingProps;didNotFindHydratableContainerTextInstance(parentContainer,text);break;case SuspenseComponent:break;}break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;switch(fiber.tag){case HostComponent:var _type=fiber.type;var _props=fiber.pendingProps;didNotFindHydratableInstance(parentType,parentProps,parentInstance,_type,_props);break;case HostText:var _text=fiber.pendingProps;didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,_text);break;case SuspenseComponent:didNotFindHydratableSuspenseInstance(parentType,parentProps,parentInstance);break;}break;}default:return;}}}function tryHydrate(fiber,nextInstance){switch(fiber.tag){case HostComponent:{var type=fiber.type;var props=fiber.pendingProps;var instance=canHydrateInstance(nextInstance,type,props);if(instance!==null){fiber.stateNode=instance;return true;}return false;}case HostText:{var text=fiber.pendingProps;var textInstance=canHydrateTextInstance(nextInstance,text);if(textInstance!==null){fiber.stateNode=textInstance;return true;}return false;}case SuspenseComponent:{if(enableSuspenseServerRenderer){var suspenseInstance=canHydrateSuspenseInstance(nextInstance);if(suspenseInstance!==null){// Downgrade the tag to a dehydrated component until we've hydrated it.
fiber.tag=DehydratedSuspenseComponent;fiber.stateNode=suspenseInstance;return true;}}return false;}default:return false;}}function tryToClaimNextHydratableInstance(fiber){if(!isHydrating){return;}var nextInstance=nextHydratableInstance;if(!nextInstance){// Nothing to hydrate. Make it an insertion.
insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}var firstAttemptedInstance=nextInstance;if(!tryHydrate(fiber,nextInstance)){// If we can't hydrate this instance let's try the next one.
// We use this as a heuristic. It's based on intuition and not data so it
// might be flawed or unnecessary.
nextInstance=getNextHydratableSibling(firstAttemptedInstance);if(!nextInstance||!tryHydrate(fiber,nextInstance)){// Nothing to hydrate. Make it an insertion.
insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}// We matched the next one, we'll now assume that the first one was
// superfluous and we'll delete it. Since we can't eagerly delete it
// we'll have to schedule a deletion. To do that, this node needs a dummy
// fiber associated with it.
deleteHydratableInstance(hydrationParentFiber,firstAttemptedInstance);}hydrationParentFiber=fiber;nextHydratableInstance=getFirstHydratableChild(nextInstance);}function prepareToHydrateHostInstance(fiber,rootContainerInstance,hostContext){if(!supportsHydration){invariant(false,'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');}var instance=fiber.stateNode;var updatePayload=hydrateInstance(instance,fiber.type,fiber.memoizedProps,rootContainerInstance,hostContext,fiber);// TODO: Type this specific to this type of component.
fiber.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
// is a new ref we mark this as an update.
if(updatePayload!==null){return true;}return false;}function prepareToHydrateHostTextInstance(fiber){if(!supportsHydration){invariant(false,'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');}var textInstance=fiber.stateNode;var textContent=fiber.memoizedProps;var shouldUpdate=hydrateTextInstance(textInstance,textContent,fiber);{if(shouldUpdate){// We assume that prepareToHydrateHostTextInstance is called in a context where the
// hydration parent is the parent host component of this host text.
var returnFiber=hydrationParentFiber;if(returnFiber!==null){switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,textContent);break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,textContent);break;}}}}}return shouldUpdate;}function skipPastDehydratedSuspenseInstance(fiber){if(!supportsHydration){invariant(false,'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');}var suspenseInstance=fiber.stateNode;!suspenseInstance?invariant(false,'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.'):void 0;nextHydratableInstance=getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);}function popToNextHostParent(fiber){var parent=fiber.return;while(parent!==null&&parent.tag!==HostComponent&&parent.tag!==HostRoot&&parent.tag!==DehydratedSuspenseComponent){parent=parent.return;}hydrationParentFiber=parent;}function popHydrationState(fiber){if(!supportsHydration){return false;}if(fiber!==hydrationParentFiber){// We're deeper than the current hydration context, inside an inserted
// tree.
return false;}if(!isHydrating){// If we're not currently hydrating but we're in a hydration context, then
// we were an insertion and now need to pop up reenter hydration of our
// siblings.
popToNextHostParent(fiber);isHydrating=true;return false;}var type=fiber.type;// If we have any remaining hydratable nodes, we need to delete them now.
// We only do this deeper than head and body since they tend to have random
// other nodes in them. We also ignore components with pure text content in
// side of them.
// TODO: Better heuristic.
if(fiber.tag!==HostComponent||type!=='head'&&type!=='body'&&!shouldSetTextContent(type,fiber.memoizedProps)){var nextInstance=nextHydratableInstance;while(nextInstance){deleteHydratableInstance(fiber,nextInstance);nextInstance=getNextHydratableSibling(nextInstance);}}popToNextHostParent(fiber);nextHydratableInstance=hydrationParentFiber?getNextHydratableSibling(fiber.stateNode):null;return true;}function resetHydrationState(){if(!supportsHydration){return;}hydrationParentFiber=null;nextHydratableInstance=null;isHydrating=false;}var ReactCurrentOwner$3=ReactSharedInternals.ReactCurrentOwner;var didReceiveUpdate=false;var didWarnAboutBadClass=void 0;var didWarnAboutContextTypeOnFunctionComponent=void 0;var didWarnAboutGetDerivedStateOnFunctionComponent=void 0;var didWarnAboutFunctionRefs=void 0;var didWarnAboutReassigningProps=void 0;{didWarnAboutBadClass={};didWarnAboutContextTypeOnFunctionComponent={};didWarnAboutGetDerivedStateOnFunctionComponent={};didWarnAboutFunctionRefs={};didWarnAboutReassigningProps=false;}function reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime){if(current$$1===null){// If this is a fresh new component that hasn't been rendered yet, we
// won't update its child set by applying minimal side-effects. Instead,
// we will add them all to the child before it gets rendered. That means
// we can optimize this reconciliation pass by not tracking side-effects.
workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{// If the current child is the same as the work in progress, it means that
// we haven't yet started any work on these children. Therefore, we use
// the clone algorithm to create a copy of all the current children.
// If we had any progressed work already, that is invalid at this point so
// let's throw it out.
workInProgress.child=reconcileChildFibers(workInProgress,current$$1.child,nextChildren,renderExpirationTime);}}function forceUnmountCurrentAndReconcile(current$$1,workInProgress,nextChildren,renderExpirationTime){// This function is fork of reconcileChildren. It's used in cases where we
// want to reconcile without matching against the existing set. This has the
// effect of all current children being unmounted; even if the type and key
// are the same, the old child is unmounted and a new child is created.
//
// To do this, we're going to go through the reconcile algorithm twice. In
// the first pass, we schedule a deletion for all the current children by
// passing null.
workInProgress.child=reconcileChildFibers(workInProgress,current$$1.child,null,renderExpirationTime);// In the second pass, we mount the new children. The trick here is that we
// pass null in place of where we usually pass the current child set. This has
// the effect of remounting all children regardless of whether their their
// identity matches.
workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}function updateForwardRef(current$$1,workInProgress,Component,nextProps,renderExpirationTime){// TODO: current can be non-null here even if the component
// hasn't yet mounted. This happens after the first render suspends.
// We'll need to figure out if this is fine or can cause issues.
{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
// because they're only guaranteed to be resolved here.
var innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props
'prop',getComponentName(Component),getCurrentFiberStackInDev);}}}var render=Component.render;var ref=workInProgress.ref;// The rest is a fork of updateFunctionComponent
var nextChildren=void 0;prepareToReadContext(workInProgress,renderExpirationTime);{ReactCurrentOwner$3.current=workInProgress;setCurrentPhase('render');nextChildren=renderWithHooks(current$$1,workInProgress,render,nextProps,ref,renderExpirationTime);if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Only double-render components with Hooks
if(workInProgress.memoizedState!==null){nextChildren=renderWithHooks(current$$1,workInProgress,render,nextProps,ref,renderExpirationTime);}}setCurrentPhase(null);}if(current$$1!==null&&!didReceiveUpdate){bailoutHooks(current$$1,workInProgress,renderExpirationTime);return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateMemoComponent(current$$1,workInProgress,Component,nextProps,updateExpirationTime,renderExpirationTime){if(current$$1===null){var type=Component.type;if(isSimpleFunctionComponent(type)&&Component.compare===null&&// SimpleMemoComponent codepath doesn't resolve outer props either.
Component.defaultProps===undefined){// If this is a plain function component without default props,
// and with only the default shallow comparison, we upgrade it
// to a SimpleMemoComponent to allow fast path updates.
workInProgress.tag=SimpleMemoComponent;workInProgress.type=type;{validateFunctionComponentInDev(workInProgress,type);}return updateSimpleMemoComponent(current$$1,workInProgress,type,nextProps,updateExpirationTime,renderExpirationTime);}{var innerPropTypes=type.propTypes;if(innerPropTypes){// Inner memo component props aren't currently validated in createElement.
// We could move it there, but we'd still need this for lazy code path.
checkPropTypes(innerPropTypes,nextProps,// Resolved props
'prop',getComponentName(type),getCurrentFiberStackInDev);}}var child=createFiberFromTypeAndProps(Component.type,null,nextProps,null,workInProgress.mode,renderExpirationTime);child.ref=workInProgress.ref;child.return=workInProgress;workInProgress.child=child;return child;}{var _type=Component.type;var _innerPropTypes=_type.propTypes;if(_innerPropTypes){// Inner memo component props aren't currently validated in createElement.
// We could move it there, but we'd still need this for lazy code path.
checkPropTypes(_innerPropTypes,nextProps,// Resolved props
'prop',getComponentName(_type),getCurrentFiberStackInDev);}}var currentChild=current$$1.child;// This is always exactly one child
if(updateExpirationTime<renderExpirationTime){// This will be the props with resolved defaultProps,
// unlike current.memoizedProps which will be the unresolved ones.
var prevProps=currentChild.memoizedProps;// Default to shallow comparison
var compare=Component.compare;compare=compare!==null?compare:shallowEqual;if(compare(prevProps,nextProps)&&current$$1.ref===workInProgress.ref){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;var newChild=createWorkInProgress(currentChild,nextProps,renderExpirationTime);newChild.ref=workInProgress.ref;newChild.return=workInProgress;workInProgress.child=newChild;return newChild;}function updateSimpleMemoComponent(current$$1,workInProgress,Component,nextProps,updateExpirationTime,renderExpirationTime){// TODO: current can be non-null here even if the component
// hasn't yet mounted. This happens when the inner render suspends.
// We'll need to figure out if this is fine or can cause issues.
{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
// because they're only guaranteed to be resolved here.
var outerMemoType=workInProgress.elementType;if(outerMemoType.$$typeof===REACT_LAZY_TYPE){// We warn when you define propTypes on lazy()
// so let's just skip over it to find memo() outer wrapper.
// Inner props for memo are validated later.
outerMemoType=refineResolvedLazyComponent(outerMemoType);}var outerPropTypes=outerMemoType&&outerMemoType.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,nextProps,// Resolved (SimpleMemoComponent has no defaultProps)
'prop',getComponentName(outerMemoType),getCurrentFiberStackInDev);}// Inner propTypes will be validated in the function component path.
}}if(current$$1!==null){var prevProps=current$$1.memoizedProps;if(shallowEqual(prevProps,nextProps)&&current$$1.ref===workInProgress.ref){didReceiveUpdate=false;if(updateExpirationTime<renderExpirationTime){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}}return updateFunctionComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime);}function updateFragment(current$$1,workInProgress,renderExpirationTime){var nextChildren=workInProgress.pendingProps;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateMode(current$$1,workInProgress,renderExpirationTime){var nextChildren=workInProgress.pendingProps.children;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateProfiler(current$$1,workInProgress,renderExpirationTime){if(enableProfilerTimer){workInProgress.effectTag|=Update;}var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function markRef(current$$1,workInProgress){var ref=workInProgress.ref;if(current$$1===null&&ref!==null||current$$1!==null&&current$$1.ref!==ref){// Schedule a Ref effect
workInProgress.effectTag|=Ref;}}function updateFunctionComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime){{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
// because they're only guaranteed to be resolved here.
var innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props
'prop',getComponentName(Component),getCurrentFiberStackInDev);}}}var unmaskedContext=getUnmaskedContext(workInProgress,Component,true);var context=getMaskedContext(workInProgress,unmaskedContext);var nextChildren=void 0;prepareToReadContext(workInProgress,renderExpirationTime);{ReactCurrentOwner$3.current=workInProgress;setCurrentPhase('render');nextChildren=renderWithHooks(current$$1,workInProgress,Component,nextProps,context,renderExpirationTime);if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Only double-render components with Hooks
if(workInProgress.memoizedState!==null){nextChildren=renderWithHooks(current$$1,workInProgress,Component,nextProps,context,renderExpirationTime);}}setCurrentPhase(null);}if(current$$1!==null&&!didReceiveUpdate){bailoutHooks(current$$1,workInProgress,renderExpirationTime);return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateClassComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime){{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
// because they're only guaranteed to be resolved here.
var innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props
'prop',getComponentName(Component),getCurrentFiberStackInDev);}}}// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=void 0;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderExpirationTime);var instance=workInProgress.stateNode;var shouldUpdate=void 0;if(instance===null){if(current$$1!==null){// An class component without an instance only mounts if it suspended
// inside a non- concurrent tree, in an inconsistent state. We want to
// tree it like a new mount, even though an empty version of it already
// committed. Disconnect the alternate pointers.
current$$1.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}// In the initial pass we might need to construct the instance.
constructClassInstance(workInProgress,Component,nextProps,renderExpirationTime);mountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);shouldUpdate=true;}else if(current$$1===null){// In a resume, we'll already have an instance we can reuse.
shouldUpdate=resumeMountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);}else{shouldUpdate=updateClassInstance(current$$1,workInProgress,Component,nextProps,renderExpirationTime);}var nextUnitOfWork=finishClassComponent(current$$1,workInProgress,Component,shouldUpdate,hasContext,renderExpirationTime);{var inst=workInProgress.stateNode;if(inst.props!==nextProps){!didWarnAboutReassigningProps?warning$1(false,'It looks like %s is reassigning its own `this.props` while rendering. '+'This is not supported and can lead to confusing bugs.',getComponentName(workInProgress.type)||'a component'):void 0;didWarnAboutReassigningProps=true;}}return nextUnitOfWork;}function finishClassComponent(current$$1,workInProgress,Component,shouldUpdate,hasContext,renderExpirationTime){// Refs should update even if shouldComponentUpdate returns false
markRef(current$$1,workInProgress);var didCaptureError=(workInProgress.effectTag&DidCapture)!==NoEffect;if(!shouldUpdate&&!didCaptureError){// Context providers should defer to sCU for rendering
if(hasContext){invalidateContextProvider(workInProgress,Component,false);}return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}var instance=workInProgress.stateNode;// Rerender
ReactCurrentOwner$3.current=workInProgress;var nextChildren=void 0;if(didCaptureError&&typeof Component.getDerivedStateFromError!=='function'){// If we captured an error, but getDerivedStateFrom catch is not defined,
// unmount all the children. componentDidCatch will schedule an update to
// re-render a fallback. This is temporary until we migrate everyone to
// the new API.
// TODO: Warn in a future release.
nextChildren=null;if(enableProfilerTimer){stopProfilerTimerIfRunning(workInProgress);}}else{{setCurrentPhase('render');nextChildren=instance.render();if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){instance.render();}setCurrentPhase(null);}}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;if(current$$1!==null&&didCaptureError){// If we're recovering from an error, reconcile without reusing any of
// the existing children. Conceptually, the normal children and the children
// that are shown on error are two different sets, so we shouldn't reuse
// normal children even if their identities match.
forceUnmountCurrentAndReconcile(current$$1,workInProgress,nextChildren,renderExpirationTime);}else{reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);}// Memoize state using the values we just used to render.
// TODO: Restructure so we never read values from the instance.
workInProgress.memoizedState=instance.state;// The context might have changed so we need to recalculate it.
if(hasContext){invalidateContextProvider(workInProgress,Component,true);}return workInProgress.child;}function pushHostRootContext(workInProgress){var root=workInProgress.stateNode;if(root.pendingContext){pushTopLevelContextObject(workInProgress,root.pendingContext,root.pendingContext!==root.context);}else if(root.context){// Should always be set
pushTopLevelContextObject(workInProgress,root.context,false);}pushHostContainer(workInProgress,root.containerInfo);}function updateHostRoot(current$$1,workInProgress,renderExpirationTime){pushHostRootContext(workInProgress);var updateQueue=workInProgress.updateQueue;!(updateQueue!==null)?invariant(false,'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.'):void 0;var nextProps=workInProgress.pendingProps;var prevState=workInProgress.memoizedState;var prevChildren=prevState!==null?prevState.element:null;processUpdateQueue(workInProgress,updateQueue,nextProps,null,renderExpirationTime);var nextState=workInProgress.memoizedState;// Caution: React DevTools currently depends on this property
// being called "element".
var nextChildren=nextState.element;if(nextChildren===prevChildren){// If the state is the same as before, that's a bailout because we had
// no work that expires at this time.
resetHydrationState();return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}var root=workInProgress.stateNode;if((current$$1===null||current$$1.child===null)&&root.hydrate&&enterHydrationState(workInProgress)){// If we don't have any current children this might be the first pass.
// We always try to hydrate. If this isn't a hydration pass there won't
// be any children to hydrate which is effectively the same thing as
// not hydrating.
// This is a bit of a hack. We track the host root as a placement to
// know that we're currently in a mounting state. That way isMounted
// works as expected. We must reset this before committing.
// TODO: Delete this when we delete isMounted and findDOMNode.
workInProgress.effectTag|=Placement;// Ensure that children mount into this root without tracking
// side-effects. This ensures that we don't store Placement effects on
// nodes that will be hydrated.
workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{// Otherwise reset hydration state in case we aborted and resumed another
// root.
reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);resetHydrationState();}return workInProgress.child;}function updateHostComponent(current$$1,workInProgress,renderExpirationTime){pushHostContext(workInProgress);if(current$$1===null){tryToClaimNextHydratableInstance(workInProgress);}var type=workInProgress.type;var nextProps=workInProgress.pendingProps;var prevProps=current$$1!==null?current$$1.memoizedProps:null;var nextChildren=nextProps.children;var isDirectTextChild=shouldSetTextContent(type,nextProps);if(isDirectTextChild){// We special case a direct text child of a host node. This is a common
// case. We won't handle it as a reified child. We will instead handle
// this in the host environment that also have access to this prop. That
// avoids allocating another HostText fiber and traversing it.
nextChildren=null;}else if(prevProps!==null&&shouldSetTextContent(type,prevProps)){// If we're switching from a direct text child to a normal child, or to
// empty, we need to schedule the text content to be reset.
workInProgress.effectTag|=ContentReset;}markRef(current$$1,workInProgress);// Check the host config to see if the children are offscreen/hidden.
if(renderExpirationTime!==Never&&workInProgress.mode&ConcurrentMode&&shouldDeprioritizeSubtree(type,nextProps)){// Schedule this fiber to re-render at offscreen priority. Then bailout.
workInProgress.expirationTime=workInProgress.childExpirationTime=Never;return null;}reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateHostText(current$$1,workInProgress){if(current$$1===null){tryToClaimNextHydratableInstance(workInProgress);}// Nothing to do here. This is terminal. We'll do the completion step
// immediately after.
return null;}function mountLazyComponent(_current,workInProgress,elementType,updateExpirationTime,renderExpirationTime){if(_current!==null){// An lazy component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to treat it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}var props=workInProgress.pendingProps;// We can't start a User Timing measurement with correct label yet.
// Cancel and resume right after we know the tag.
cancelWorkTimer(workInProgress);var Component=readLazyComponentType(elementType);// Store the unwrapped component in the type.
workInProgress.type=Component;var resolvedTag=workInProgress.tag=resolveLazyComponentTag(Component);startWorkTimer(workInProgress);var resolvedProps=resolveDefaultProps(Component,props);var child=void 0;switch(resolvedTag){case FunctionComponent:{{validateFunctionComponentInDev(workInProgress,Component);}child=updateFunctionComponent(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case ClassComponent:{child=updateClassComponent(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case ForwardRef:{child=updateForwardRef(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case MemoComponent:{{if(workInProgress.type!==workInProgress.elementType){var outerPropTypes=Component.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,resolvedProps,// Resolved for outer only
'prop',getComponentName(Component),getCurrentFiberStackInDev);}}}child=updateMemoComponent(null,workInProgress,Component,resolveDefaultProps(Component.type,resolvedProps),// The inner type can have defaults too
updateExpirationTime,renderExpirationTime);break;}default:{var hint='';{if(Component!==null&&(typeof Component==='undefined'?'undefined':_typeof(Component))==='object'&&Component.$$typeof===REACT_LAZY_TYPE){hint=' Did you wrap a component in React.lazy() more than once?';}}// This message intentionally doesn't mention ForwardRef or MemoComponent
// because the fact that it's a separate type of work is an
// implementation detail.
invariant(false,'Element type is invalid. Received a promise that resolves to: %s. Lazy element type must resolve to a class or function.%s',Component,hint);}}return child;}function mountIncompleteClassComponent(_current,workInProgress,Component,nextProps,renderExpirationTime){if(_current!==null){// An incomplete component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to treat it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}// Promote the fiber to a class and try rendering again.
workInProgress.tag=ClassComponent;// The rest of this function is a fork of `updateClassComponent`
// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=void 0;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderExpirationTime);constructClassInstance(workInProgress,Component,nextProps,renderExpirationTime);mountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderExpirationTime);}function mountIndeterminateComponent(_current,workInProgress,Component,renderExpirationTime){if(_current!==null){// An indeterminate component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to treat it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}var props=workInProgress.pendingProps;var unmaskedContext=getUnmaskedContext(workInProgress,Component,false);var context=getMaskedContext(workInProgress,unmaskedContext);prepareToReadContext(workInProgress,renderExpirationTime);var value=void 0;{if(Component.prototype&&typeof Component.prototype.render==='function'){var componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutBadClass[componentName]){warningWithoutStack$1(false,"The <%s /> component appears to have a render method, but doesn't extend React.Component. "+'This is likely to cause errors. Change %s to extend React.Component instead.',componentName,componentName);didWarnAboutBadClass[componentName]=true;}}if(workInProgress.mode&StrictMode){ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,null);}ReactCurrentOwner$3.current=workInProgress;value=renderWithHooks(null,workInProgress,Component,props,context,renderExpirationTime);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;if((typeof value==='undefined'?'undefined':_typeof(value))==='object'&&value!==null&&typeof value.render==='function'&&value.$$typeof===undefined){// Proceed under the assumption that this is a class instance
workInProgress.tag=ClassComponent;// Throw out any hooks that were used.
resetHooks();// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=false;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}workInProgress.memoizedState=value.state!==null&&value.state!==undefined?value.state:null;var getDerivedStateFromProps=Component.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,Component,getDerivedStateFromProps,props);}adoptClassInstance(workInProgress,value);mountClassInstance(workInProgress,Component,props,renderExpirationTime);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderExpirationTime);}else{// Proceed under the assumption that this is a function component
workInProgress.tag=FunctionComponent;{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Only double-render components with Hooks
if(workInProgress.memoizedState!==null){value=renderWithHooks(null,workInProgress,Component,props,context,renderExpirationTime);}}}reconcileChildren(null,workInProgress,value,renderExpirationTime);{validateFunctionComponentInDev(workInProgress,Component);}return workInProgress.child;}}function validateFunctionComponentInDev(workInProgress,Component){if(Component){!!Component.childContextTypes?warningWithoutStack$1(false,'%s(...): childContextTypes cannot be defined on a function component.',Component.displayName||Component.name||'Component'):void 0;}if(workInProgress.ref!==null){var info='';var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}var warningKey=ownerName||workInProgress._debugID||'';var debugSource=workInProgress._debugSource;if(debugSource){warningKey=debugSource.fileName+':'+debugSource.lineNumber;}if(!didWarnAboutFunctionRefs[warningKey]){didWarnAboutFunctionRefs[warningKey]=true;warning$1(false,'Function components cannot be given refs. '+'Attempts to access this ref will fail. '+'Did you mean to use React.forwardRef()?%s',info);}}if(typeof Component.getDerivedStateFromProps==='function'){var componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]){warningWithoutStack$1(false,'%s: Function components do not support getDerivedStateFromProps.',componentName);didWarnAboutGetDerivedStateOnFunctionComponent[componentName]=true;}}if(_typeof(Component.contextType)==='object'&&Component.contextType!==null){var _componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutContextTypeOnFunctionComponent[_componentName]){warningWithoutStack$1(false,'%s: Function components do not support contextType.',_componentName);didWarnAboutContextTypeOnFunctionComponent[_componentName]=true;}}}function updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime){var mode=workInProgress.mode;var nextProps=workInProgress.pendingProps;// We should attempt to render the primary children unless this boundary
// already suspended during this render (`alreadyCaptured` is true).
var nextState=workInProgress.memoizedState;var nextDidTimeout=void 0;if((workInProgress.effectTag&DidCapture)===NoEffect){// This is the first attempt.
nextState=null;nextDidTimeout=false;}else{// Something in this boundary's subtree already suspended. Switch to
// rendering the fallback children.
nextState={timedOutAt:nextState!==null?nextState.timedOutAt:NoWork};nextDidTimeout=true;workInProgress.effectTag&=~DidCapture;}// This next part is a bit confusing. If the children timeout, we switch to
// showing the fallback children in place of the "primary" children.
// However, we don't want to delete the primary children because then their
// state will be lost (both the React state and the host state, e.g.
// uncontrolled form inputs). Instead we keep them mounted and hide them.
// Both the fallback children AND the primary children are rendered at the
// same time. Once the primary children are un-suspended, we can delete
// the fallback children — don't need to preserve their state.
//
// The two sets of children are siblings in the host environment, but
// semantically, for purposes of reconciliation, they are two separate sets.
// So we store them using two fragment fibers.
//
// However, we want to avoid allocating extra fibers for every placeholder.
// They're only necessary when the children time out, because that's the
// only time when both sets are mounted.
//
// So, the extra fragment fibers are only used if the children time out.
// Otherwise, we render the primary children directly. This requires some
// custom reconciliation logic to preserve the state of the primary
// children. It's essentially a very basic form of re-parenting.
// `child` points to the child fiber. In the normal case, this is the first
// fiber of the primary children set. In the timed-out case, it's a
// a fragment fiber containing the primary children.
var child=void 0;// `next` points to the next fiber React should render. In the normal case,
// it's the same as `child`: the first fiber of the primary children set.
// In the timed-out case, it's a fragment fiber containing the *fallback*
// children -- we skip over the primary children entirely.
var next=void 0;if(current$$1===null){if(enableSuspenseServerRenderer){// If we're currently hydrating, try to hydrate this boundary.
// But only if this has a fallback.
if(nextProps.fallback!==undefined){tryToClaimNextHydratableInstance(workInProgress);// This could've changed the tag if this was a dehydrated suspense component.
if(workInProgress.tag===DehydratedSuspenseComponent){return updateDehydratedSuspenseComponent(null,workInProgress,renderExpirationTime);}}}// This is the initial mount. This branch is pretty simple because there's
// no previous state that needs to be preserved.
if(nextDidTimeout){// Mount separate fragments for primary and fallback children.
var nextFallbackChildren=nextProps.fallback;var primaryChildFragment=createFiberFromFragment(null,mode,NoWork,null);if((workInProgress.mode&ConcurrentMode)===NoContext){// Outside of concurrent mode, we commit the effects from the
var progressedState=workInProgress.memoizedState;var progressedPrimaryChild=progressedState!==null?workInProgress.child.child:workInProgress.child;primaryChildFragment.child=progressedPrimaryChild;}var fallbackChildFragment=createFiberFromFragment(nextFallbackChildren,mode,renderExpirationTime,null);primaryChildFragment.sibling=fallbackChildFragment;child=primaryChildFragment;// Skip the primary children, and continue working on the
// fallback children.
next=fallbackChildFragment;child.return=next.return=workInProgress;}else{// Mount the primary children without an intermediate fragment fiber.
var nextPrimaryChildren=nextProps.children;child=next=mountChildFibers(workInProgress,null,nextPrimaryChildren,renderExpirationTime);}}else{// This is an update. This branch is more complicated because we need to
// ensure the state of the primary children is preserved.
var prevState=current$$1.memoizedState;var prevDidTimeout=prevState!==null;if(prevDidTimeout){// The current tree already timed out. That means each child set is
var currentPrimaryChildFragment=current$$1.child;var currentFallbackChildFragment=currentPrimaryChildFragment.sibling;if(nextDidTimeout){// Still timed out. Reuse the current primary children by cloning
// its fragment. We're going to skip over these entirely.
var _nextFallbackChildren=nextProps.fallback;var _primaryChildFragment=createWorkInProgress(currentPrimaryChildFragment,currentPrimaryChildFragment.pendingProps,NoWork);if((workInProgress.mode&ConcurrentMode)===NoContext){// Outside of concurrent mode, we commit the effects from the
var _progressedState=workInProgress.memoizedState;var _progressedPrimaryChild=_progressedState!==null?workInProgress.child.child:workInProgress.child;if(_progressedPrimaryChild!==currentPrimaryChildFragment.child){_primaryChildFragment.child=_progressedPrimaryChild;}}// Because primaryChildFragment is a new fiber that we're inserting as the
// parent of a new tree, we need to set its treeBaseDuration.
if(enableProfilerTimer&&workInProgress.mode&ProfileMode){// treeBaseDuration is the sum of all the child tree base durations.
var treeBaseDuration=0;var hiddenChild=_primaryChildFragment.child;while(hiddenChild!==null){treeBaseDuration+=hiddenChild.treeBaseDuration;hiddenChild=hiddenChild.sibling;}_primaryChildFragment.treeBaseDuration=treeBaseDuration;}// Clone the fallback child fragment, too. These we'll continue
// working on.
var _fallbackChildFragment=_primaryChildFragment.sibling=createWorkInProgress(currentFallbackChildFragment,_nextFallbackChildren,currentFallbackChildFragment.expirationTime);child=_primaryChildFragment;_primaryChildFragment.childExpirationTime=NoWork;// Skip the primary children, and continue working on the
// fallback children.
next=_fallbackChildFragment;child.return=next.return=workInProgress;}else{// No longer suspended. Switch back to showing the primary children,
// and remove the intermediate fragment fiber.
var _nextPrimaryChildren=nextProps.children;var currentPrimaryChild=currentPrimaryChildFragment.child;var primaryChild=reconcileChildFibers(workInProgress,currentPrimaryChild,_nextPrimaryChildren,renderExpirationTime);// If this render doesn't suspend, we need to delete the fallback
// children. Wait until the complete phase, after we've confirmed the
// fallback is no longer needed.
// TODO: Would it be better to store the fallback fragment on
// the stateNode?
// Continue rendering the children, like we normally do.
child=next=primaryChild;}}else{// The current tree has not already timed out. That means the primary
// children are not wrapped in a fragment fiber.
var _currentPrimaryChild=current$$1.child;if(nextDidTimeout){// Timed out. Wrap the children in a fragment fiber to keep them
// separate from the fallback children.
var _nextFallbackChildren2=nextProps.fallback;var _primaryChildFragment2=createFiberFromFragment(// It shouldn't matter what the pending props are because we aren't
// going to render this fragment.
null,mode,NoWork,null);_primaryChildFragment2.child=_currentPrimaryChild;// Even though we're creating a new fiber, there are no new children,
// because we're reusing an already mounted tree. So we don't need to
// schedule a placement.
// primaryChildFragment.effectTag |= Placement;
if((workInProgress.mode&ConcurrentMode)===NoContext){// Outside of concurrent mode, we commit the effects from the
var _progressedState2=workInProgress.memoizedState;var _progressedPrimaryChild2=_progressedState2!==null?workInProgress.child.child:workInProgress.child;_primaryChildFragment2.child=_progressedPrimaryChild2;}// Because primaryChildFragment is a new fiber that we're inserting as the
// parent of a new tree, we need to set its treeBaseDuration.
if(enableProfilerTimer&&workInProgress.mode&ProfileMode){// treeBaseDuration is the sum of all the child tree base durations.
var _treeBaseDuration=0;var _hiddenChild=_primaryChildFragment2.child;while(_hiddenChild!==null){_treeBaseDuration+=_hiddenChild.treeBaseDuration;_hiddenChild=_hiddenChild.sibling;}_primaryChildFragment2.treeBaseDuration=_treeBaseDuration;}// Create a fragment from the fallback children, too.
var _fallbackChildFragment2=_primaryChildFragment2.sibling=createFiberFromFragment(_nextFallbackChildren2,mode,renderExpirationTime,null);_fallbackChildFragment2.effectTag|=Placement;child=_primaryChildFragment2;_primaryChildFragment2.childExpirationTime=NoWork;// Skip the primary children, and continue working on the
// fallback children.
next=_fallbackChildFragment2;child.return=next.return=workInProgress;}else{// Still haven't timed out.  Continue rendering the children, like we
// normally do.
var _nextPrimaryChildren2=nextProps.children;next=child=reconcileChildFibers(workInProgress,_currentPrimaryChild,_nextPrimaryChildren2,renderExpirationTime);}}workInProgress.stateNode=current$$1.stateNode;}workInProgress.memoizedState=nextState;workInProgress.child=child;return next;}function updateDehydratedSuspenseComponent(current$$1,workInProgress,renderExpirationTime){if(current$$1===null){// During the first pass, we'll bail out and not drill into the children.
// Instead, we'll leave the content in place and try to hydrate it later.
workInProgress.expirationTime=Never;return null;}// We use childExpirationTime to indicate that a child might depend on context, so if
// any context has changed, we need to treat is as if the input might have changed.
var hasContextChanged$$1=current$$1.childExpirationTime>=renderExpirationTime;if(didReceiveUpdate||hasContextChanged$$1){// This boundary has changed since the first render. This means that we are now unable to
// hydrate it. We might still be able to hydrate it using an earlier expiration time but
// during this render we can't. Instead, we're going to delete the whole subtree and
// instead inject a new real Suspense boundary to take its place, which may render content
// or fallback. The real Suspense boundary will suspend for a while so we have some time
// to ensure it can produce real content, but all state and pending events will be lost.
// Detach from the current dehydrated boundary.
current$$1.alternate=null;workInProgress.alternate=null;// Insert a deletion in the effect list.
var returnFiber=workInProgress.return;!(returnFiber!==null)?invariant(false,'Suspense boundaries are never on the root. This is probably a bug in React.'):void 0;var last=returnFiber.lastEffect;if(last!==null){last.nextEffect=current$$1;returnFiber.lastEffect=current$$1;}else{returnFiber.firstEffect=returnFiber.lastEffect=current$$1;}current$$1.nextEffect=null;current$$1.effectTag=Deletion;// Upgrade this work in progress to a real Suspense component.
workInProgress.tag=SuspenseComponent;workInProgress.stateNode=null;workInProgress.memoizedState=null;// This is now an insertion.
workInProgress.effectTag|=Placement;// Retry as a real Suspense component.
return updateSuspenseComponent(null,workInProgress,renderExpirationTime);}if((workInProgress.effectTag&DidCapture)===NoEffect){// This is the first attempt.
reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);return workInProgress.child;}else{// Something suspended. Leave the existing children in place.
// TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?
workInProgress.child=null;return null;}}function updatePortalComponent(current$$1,workInProgress,renderExpirationTime){pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);var nextChildren=workInProgress.pendingProps;if(current$$1===null){// Portals are special because we don't append the children during mount
// but at commit. Therefore we need to track insertions which the normal
// flow doesn't do during mount. This doesn't happen at the root because
// the root always starts with a "current" with a null child.
// TODO: Consider unifying this with how the root works.
workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);}return workInProgress.child;}function updateContextProvider(current$$1,workInProgress,renderExpirationTime){var providerType=workInProgress.type;var context=providerType._context;var newProps=workInProgress.pendingProps;var oldProps=workInProgress.memoizedProps;var newValue=newProps.value;{var providerPropTypes=workInProgress.type.propTypes;if(providerPropTypes){checkPropTypes(providerPropTypes,newProps,'prop','Context.Provider',getCurrentFiberStackInDev);}}pushProvider(workInProgress,newValue);if(oldProps!==null){var oldValue=oldProps.value;var changedBits=calculateChangedBits(context,newValue,oldValue);if(changedBits===0){// No change. Bailout early if children are the same.
if(oldProps.children===newProps.children&&!hasContextChanged()){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}else{// The context value changed. Search for matching consumers and schedule
// them to update.
propagateContextChange(workInProgress,context,changedBits,renderExpirationTime);}}var newChildren=newProps.children;reconcileChildren(current$$1,workInProgress,newChildren,renderExpirationTime);return workInProgress.child;}var hasWarnedAboutUsingContextAsConsumer=false;function updateContextConsumer(current$$1,workInProgress,renderExpirationTime){var context=workInProgress.type;// The logic below for Context differs depending on PROD or DEV mode. In
// DEV mode, we create a separate object for Context.Consumer that acts
// like a proxy to Context. This proxy object adds unnecessary code in PROD
// so we use the old behaviour (Context.Consumer references Context) to
// reduce size and overhead. The separate object references context via
// a property called "_context", which also gives us the ability to check
// in DEV mode if this property exists or not and warn if it does not.
{if(context._context===undefined){// This may be because it's a Context (rather than a Consumer).
// Or it may be because it's older React where they're the same thing.
// We only want to warn if we're sure it's a new React.
if(context!==context.Consumer){if(!hasWarnedAboutUsingContextAsConsumer){hasWarnedAboutUsingContextAsConsumer=true;warning$1(false,'Rendering <Context> directly is not supported and will be removed in '+'a future major release. Did you mean to render <Context.Consumer> instead?');}}}else{context=context._context;}}var newProps=workInProgress.pendingProps;var render=newProps.children;{!(typeof render==='function')?warningWithoutStack$1(false,'A context consumer was rendered with multiple children, or a child '+"that isn't a function. A context consumer expects a single child "+'that is a function. If you did pass a function, make sure there '+'is no trailing or leading whitespace around it.'):void 0;}prepareToReadContext(workInProgress,renderExpirationTime);var newValue=_readContext(context,newProps.unstable_observedBits);var newChildren=void 0;{ReactCurrentOwner$3.current=workInProgress;setCurrentPhase('render');newChildren=render(newValue);setCurrentPhase(null);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,newChildren,renderExpirationTime);return workInProgress.child;}function markWorkInProgressReceivedUpdate(){didReceiveUpdate=true;}function bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime){cancelWorkTimer(workInProgress);if(current$$1!==null){// Reuse previous context list
workInProgress.contextDependencies=current$$1.contextDependencies;}if(enableProfilerTimer){// Don't update "base" render times for bailouts.
stopProfilerTimerIfRunning(workInProgress);}// Check if the children have any pending work.
var childExpirationTime=workInProgress.childExpirationTime;if(childExpirationTime<renderExpirationTime){// The children don't have any work either. We can skip them.
// TODO: Once we add back resuming, we should check if the children are
// a work-in-progress set. If so, we need to transfer their effects.
return null;}else{// This fiber doesn't have work, but its subtree does. Clone the child
// fibers and continue.
cloneChildFibers(current$$1,workInProgress);return workInProgress.child;}}function beginWork(current$$1,workInProgress,renderExpirationTime){var updateExpirationTime=workInProgress.expirationTime;if(current$$1!==null){var oldProps=current$$1.memoizedProps;var newProps=workInProgress.pendingProps;if(oldProps!==newProps||hasContextChanged()){// If props or context changed, mark the fiber as having performed work.
// This may be unset if the props are determined to be equal later (memo).
didReceiveUpdate=true;}else if(updateExpirationTime<renderExpirationTime){didReceiveUpdate=false;// This fiber does not have any pending work. Bailout without entering
// the begin phase. There's still some bookkeeping we that needs to be done
// in this optimized path, mostly pushing stuff onto the stack.
switch(workInProgress.tag){case HostRoot:pushHostRootContext(workInProgress);resetHydrationState();break;case HostComponent:pushHostContext(workInProgress);break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){pushContextProvider(workInProgress);}break;}case HostPortal:pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);break;case ContextProvider:{var newValue=workInProgress.memoizedProps.value;pushProvider(workInProgress,newValue);break;}case Profiler:if(enableProfilerTimer){workInProgress.effectTag|=Update;}break;case SuspenseComponent:{var state=workInProgress.memoizedState;var didTimeout=state!==null;if(didTimeout){// If this boundary is currently timed out, we need to decide
// whether to retry the primary children, or to skip over it and
// go straight to the fallback. Check the priority of the primary
var primaryChildFragment=workInProgress.child;var primaryChildExpirationTime=primaryChildFragment.childExpirationTime;if(primaryChildExpirationTime!==NoWork&&primaryChildExpirationTime>=renderExpirationTime){// The primary children have pending work. Use the normal path
// to attempt to render the primary children again.
return updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime);}else{// The primary children do not have pending work with sufficient
// priority. Bailout.
var child=bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);if(child!==null){// The fallback children have pending work. Skip over the
// primary children and work on the fallback.
return child.sibling;}else{return null;}}}break;}case DehydratedSuspenseComponent:{if(enableSuspenseServerRenderer){// We know that this component will suspend again because if it has
// been unsuspended it has committed as a regular Suspense component.
// If it needs to be retried, it should have work scheduled on it.
workInProgress.effectTag|=DidCapture;break;}}}return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}else{didReceiveUpdate=false;}// Before entering the begin phase, clear the expiration time.
workInProgress.expirationTime=NoWork;switch(workInProgress.tag){case IndeterminateComponent:{var elementType=workInProgress.elementType;return mountIndeterminateComponent(current$$1,workInProgress,elementType,renderExpirationTime);}case LazyComponent:{var _elementType=workInProgress.elementType;return mountLazyComponent(current$$1,workInProgress,_elementType,updateExpirationTime,renderExpirationTime);}case FunctionComponent:{var _Component=workInProgress.type;var unresolvedProps=workInProgress.pendingProps;var resolvedProps=workInProgress.elementType===_Component?unresolvedProps:resolveDefaultProps(_Component,unresolvedProps);return updateFunctionComponent(current$$1,workInProgress,_Component,resolvedProps,renderExpirationTime);}case ClassComponent:{var _Component2=workInProgress.type;var _unresolvedProps=workInProgress.pendingProps;var _resolvedProps=workInProgress.elementType===_Component2?_unresolvedProps:resolveDefaultProps(_Component2,_unresolvedProps);return updateClassComponent(current$$1,workInProgress,_Component2,_resolvedProps,renderExpirationTime);}case HostRoot:return updateHostRoot(current$$1,workInProgress,renderExpirationTime);case HostComponent:return updateHostComponent(current$$1,workInProgress,renderExpirationTime);case HostText:return updateHostText(current$$1,workInProgress);case SuspenseComponent:return updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime);case HostPortal:return updatePortalComponent(current$$1,workInProgress,renderExpirationTime);case ForwardRef:{var type=workInProgress.type;var _unresolvedProps2=workInProgress.pendingProps;var _resolvedProps2=workInProgress.elementType===type?_unresolvedProps2:resolveDefaultProps(type,_unresolvedProps2);return updateForwardRef(current$$1,workInProgress,type,_resolvedProps2,renderExpirationTime);}case Fragment:return updateFragment(current$$1,workInProgress,renderExpirationTime);case Mode:return updateMode(current$$1,workInProgress,renderExpirationTime);case Profiler:return updateProfiler(current$$1,workInProgress,renderExpirationTime);case ContextProvider:return updateContextProvider(current$$1,workInProgress,renderExpirationTime);case ContextConsumer:return updateContextConsumer(current$$1,workInProgress,renderExpirationTime);case MemoComponent:{var _type2=workInProgress.type;var _unresolvedProps3=workInProgress.pendingProps;// Resolve outer props first, then resolve inner props.
var _resolvedProps3=resolveDefaultProps(_type2,_unresolvedProps3);{if(workInProgress.type!==workInProgress.elementType){var outerPropTypes=_type2.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,_resolvedProps3,// Resolved for outer only
'prop',getComponentName(_type2),getCurrentFiberStackInDev);}}}_resolvedProps3=resolveDefaultProps(_type2.type,_resolvedProps3);return updateMemoComponent(current$$1,workInProgress,_type2,_resolvedProps3,updateExpirationTime,renderExpirationTime);}case SimpleMemoComponent:{return updateSimpleMemoComponent(current$$1,workInProgress,workInProgress.type,workInProgress.pendingProps,updateExpirationTime,renderExpirationTime);}case IncompleteClassComponent:{var _Component3=workInProgress.type;var _unresolvedProps4=workInProgress.pendingProps;var _resolvedProps4=workInProgress.elementType===_Component3?_unresolvedProps4:resolveDefaultProps(_Component3,_unresolvedProps4);return mountIncompleteClassComponent(current$$1,workInProgress,_Component3,_resolvedProps4,renderExpirationTime);}case DehydratedSuspenseComponent:{if(enableSuspenseServerRenderer){return updateDehydratedSuspenseComponent(current$$1,workInProgress,renderExpirationTime);}break;}}invariant(false,'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');}var valueCursor=createCursor(null);var rendererSigil=void 0;{// Use this to detect multiple renderers using the same context
rendererSigil={};}var currentlyRenderingFiber=null;var lastContextDependency=null;var lastContextWithAllBitsObserved=null;var isDisallowedContextReadInDEV=false;function resetContextDependences(){// This is called right before React yields execution, to ensure `readContext`
// cannot be called outside the render phase.
currentlyRenderingFiber=null;lastContextDependency=null;lastContextWithAllBitsObserved=null;{isDisallowedContextReadInDEV=false;}}function enterDisallowedContextReadInDEV(){{isDisallowedContextReadInDEV=true;}}function exitDisallowedContextReadInDEV(){{isDisallowedContextReadInDEV=false;}}function pushProvider(providerFiber,nextValue){var context=providerFiber.type._context;if(isPrimaryRenderer){push(valueCursor,context._currentValue,providerFiber);context._currentValue=nextValue;{!(context._currentRenderer===undefined||context._currentRenderer===null||context._currentRenderer===rendererSigil)?warningWithoutStack$1(false,'Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.'):void 0;context._currentRenderer=rendererSigil;}}else{push(valueCursor,context._currentValue2,providerFiber);context._currentValue2=nextValue;{!(context._currentRenderer2===undefined||context._currentRenderer2===null||context._currentRenderer2===rendererSigil)?warningWithoutStack$1(false,'Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.'):void 0;context._currentRenderer2=rendererSigil;}}}function popProvider(providerFiber){var currentValue=valueCursor.current;pop(valueCursor,providerFiber);var context=providerFiber.type._context;if(isPrimaryRenderer){context._currentValue=currentValue;}else{context._currentValue2=currentValue;}}function calculateChangedBits(context,newValue,oldValue){if(is(oldValue,newValue)){// No change
return 0;}else{var changedBits=typeof context._calculateChangedBits==='function'?context._calculateChangedBits(oldValue,newValue):maxSigned31BitInt;{!((changedBits&maxSigned31BitInt)===changedBits)?warning$1(false,'calculateChangedBits: Expected the return value to be a '+'31-bit integer. Instead received: %s',changedBits):void 0;}return changedBits|0;}}function scheduleWorkOnParentPath(parent,renderExpirationTime){// Update the child expiration time of all the ancestors, including
// the alternates.
var node=parent;while(node!==null){var alternate=node.alternate;if(node.childExpirationTime<renderExpirationTime){node.childExpirationTime=renderExpirationTime;if(alternate!==null&&alternate.childExpirationTime<renderExpirationTime){alternate.childExpirationTime=renderExpirationTime;}}else if(alternate!==null&&alternate.childExpirationTime<renderExpirationTime){alternate.childExpirationTime=renderExpirationTime;}else{// Neither alternate was updated, which means the rest of the
// ancestor path already has sufficient priority.
break;}node=node.return;}}function propagateContextChange(workInProgress,context,changedBits,renderExpirationTime){var fiber=workInProgress.child;if(fiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
fiber.return=workInProgress;}while(fiber!==null){var nextFiber=void 0;// Visit this fiber.
var list=fiber.contextDependencies;if(list!==null){nextFiber=fiber.child;var dependency=list.first;while(dependency!==null){// Check if the context matches.
if(dependency.context===context&&(dependency.observedBits&changedBits)!==0){// Match! Schedule an update on this fiber.
if(fiber.tag===ClassComponent){// Schedule a force update on the work-in-progress.
var update=createUpdate(renderExpirationTime);update.tag=ForceUpdate;// TODO: Because we don't have a work-in-progress, this will add the
// update to the current fiber, too, which means it will persist even if
// this render is thrown away. Since it's a race condition, not sure it's
// worth fixing.
enqueueUpdate(fiber,update);}if(fiber.expirationTime<renderExpirationTime){fiber.expirationTime=renderExpirationTime;}var alternate=fiber.alternate;if(alternate!==null&&alternate.expirationTime<renderExpirationTime){alternate.expirationTime=renderExpirationTime;}scheduleWorkOnParentPath(fiber.return,renderExpirationTime);// Mark the expiration time on the list, too.
if(list.expirationTime<renderExpirationTime){list.expirationTime=renderExpirationTime;}// Since we already found a match, we can stop traversing the
// dependency list.
break;}dependency=dependency.next;}}else if(fiber.tag===ContextProvider){// Don't scan deeper if this is a matching provider
nextFiber=fiber.type===workInProgress.type?null:fiber.child;}else if(enableSuspenseServerRenderer&&fiber.tag===DehydratedSuspenseComponent){// If a dehydrated suspense component is in this subtree, we don't know
// if it will have any context consumers in it. The best we can do is
// mark it as having updates on its children.
if(fiber.expirationTime<renderExpirationTime){fiber.expirationTime=renderExpirationTime;}var _alternate=fiber.alternate;if(_alternate!==null&&_alternate.expirationTime<renderExpirationTime){_alternate.expirationTime=renderExpirationTime;}// This is intentionally passing this fiber as the parent
// because we want to schedule this fiber as having work
// on its children. We'll use the childExpirationTime on
// this fiber to indicate that a context has changed.
scheduleWorkOnParentPath(fiber,renderExpirationTime);nextFiber=fiber.sibling;}else{// Traverse down.
nextFiber=fiber.child;}if(nextFiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
nextFiber.return=fiber;}else{// No child. Traverse to next sibling.
nextFiber=fiber;while(nextFiber!==null){if(nextFiber===workInProgress){// We're back to the root of this subtree. Exit.
nextFiber=null;break;}var sibling=nextFiber.sibling;if(sibling!==null){// Set the return pointer of the sibling to the work-in-progress fiber.
sibling.return=nextFiber.return;nextFiber=sibling;break;}// No more siblings. Traverse up.
nextFiber=nextFiber.return;}}fiber=nextFiber;}}function prepareToReadContext(workInProgress,renderExpirationTime){currentlyRenderingFiber=workInProgress;lastContextDependency=null;lastContextWithAllBitsObserved=null;var currentDependencies=workInProgress.contextDependencies;if(currentDependencies!==null&&currentDependencies.expirationTime>=renderExpirationTime){// Context list has a pending update. Mark that this fiber performed work.
markWorkInProgressReceivedUpdate();}// Reset the work-in-progress list
workInProgress.contextDependencies=null;}function _readContext(context,observedBits){{// This warning would fire if you read context inside a Hook like useMemo.
// Unlike the class check below, it's not enforced in production for perf.
!!isDisallowedContextReadInDEV?warning$1(false,'Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().'):void 0;}if(lastContextWithAllBitsObserved===context){// Nothing to do. We already observe everything in this context.
}else if(observedBits===false||observedBits===0){// Do not observe any updates.
}else{var resolvedObservedBits=void 0;// Avoid deopting on observable arguments or heterogeneous types.
if(typeof observedBits!=='number'||observedBits===maxSigned31BitInt){// Observe all updates.
lastContextWithAllBitsObserved=context;resolvedObservedBits=maxSigned31BitInt;}else{resolvedObservedBits=observedBits;}var contextItem={context:context,observedBits:resolvedObservedBits,next:null};if(lastContextDependency===null){!(currentlyRenderingFiber!==null)?invariant(false,'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'):void 0;// This is the first dependency for this component. Create a new list.
lastContextDependency=contextItem;currentlyRenderingFiber.contextDependencies={first:contextItem,expirationTime:NoWork};}else{// Append a new context item.
lastContextDependency=lastContextDependency.next=contextItem;}}return isPrimaryRenderer?context._currentValue:context._currentValue2;}// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which can be
// mutated and processed asynchronously before it is committed — a form of
// double buffering. If a work-in-progress render is discarded before finishing,
// we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.
var UpdateState=0;var ReplaceState=1;var ForceUpdate=2;var CaptureUpdate=3;// Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.
var hasForceUpdate=false;var didWarnUpdateInsideUpdate=void 0;var currentlyProcessingQueue=void 0;var resetCurrentlyProcessingQueue=void 0;{didWarnUpdateInsideUpdate=false;currentlyProcessingQueue=null;resetCurrentlyProcessingQueue=function resetCurrentlyProcessingQueue(){currentlyProcessingQueue=null;};}function createUpdateQueue(baseState){var queue={baseState:baseState,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null};return queue;}function cloneUpdateQueue(currentQueue){var queue={baseState:currentQueue.baseState,firstUpdate:currentQueue.firstUpdate,lastUpdate:currentQueue.lastUpdate,// TODO: With resuming, if we bail out and resuse the child tree, we should
// keep these effects.
firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null};return queue;}function createUpdate(expirationTime){return{expirationTime:expirationTime,tag:UpdateState,payload:null,callback:null,next:null,nextEffect:null};}function appendUpdateToQueue(queue,update){// Append the update to the end of the list.
if(queue.lastUpdate===null){// Queue is empty
queue.firstUpdate=queue.lastUpdate=update;}else{queue.lastUpdate.next=update;queue.lastUpdate=update;}}function enqueueUpdate(fiber,update){// Update queues are created lazily.
var alternate=fiber.alternate;var queue1=void 0;var queue2=void 0;if(alternate===null){// There's only one fiber.
queue1=fiber.updateQueue;queue2=null;if(queue1===null){queue1=fiber.updateQueue=createUpdateQueue(fiber.memoizedState);}}else{// There are two owners.
queue1=fiber.updateQueue;queue2=alternate.updateQueue;if(queue1===null){if(queue2===null){// Neither fiber has an update queue. Create new ones.
queue1=fiber.updateQueue=createUpdateQueue(fiber.memoizedState);queue2=alternate.updateQueue=createUpdateQueue(alternate.memoizedState);}else{// Only one fiber has an update queue. Clone to create a new one.
queue1=fiber.updateQueue=cloneUpdateQueue(queue2);}}else{if(queue2===null){// Only one fiber has an update queue. Clone to create a new one.
queue2=alternate.updateQueue=cloneUpdateQueue(queue1);}else{// Both owners have an update queue.
}}}if(queue2===null||queue1===queue2){// There's only a single queue.
appendUpdateToQueue(queue1,update);}else{// There are two queues. We need to append the update to both queues,
// while accounting for the persistent structure of the list — we don't
// want the same update to be added multiple times.
if(queue1.lastUpdate===null||queue2.lastUpdate===null){// One of the queues is not empty. We must add the update to both queues.
appendUpdateToQueue(queue1,update);appendUpdateToQueue(queue2,update);}else{// Both queues are non-empty. The last update is the same in both lists,
// because of structural sharing. So, only append to one of the lists.
appendUpdateToQueue(queue1,update);// But we still need to update the `lastUpdate` pointer of queue2.
queue2.lastUpdate=update;}}{if(fiber.tag===ClassComponent&&(currentlyProcessingQueue===queue1||queue2!==null&&currentlyProcessingQueue===queue2)&&!didWarnUpdateInsideUpdate){warningWithoutStack$1(false,'An update (setState, replaceState, or forceUpdate) was scheduled '+'from inside an update function. Update functions should be pure, '+'with zero side-effects. Consider using componentDidUpdate or a '+'callback.');didWarnUpdateInsideUpdate=true;}}}function enqueueCapturedUpdate(workInProgress,update){// Captured updates go into a separate list, and only on the work-in-
// progress queue.
var workInProgressQueue=workInProgress.updateQueue;if(workInProgressQueue===null){workInProgressQueue=workInProgress.updateQueue=createUpdateQueue(workInProgress.memoizedState);}else{// TODO: I put this here rather than createWorkInProgress so that we don't
// clone the queue unnecessarily. There's probably a better way to
// structure this.
workInProgressQueue=ensureWorkInProgressQueueIsAClone(workInProgress,workInProgressQueue);}// Append the update to the end of the list.
if(workInProgressQueue.lastCapturedUpdate===null){// This is the first render phase update
workInProgressQueue.firstCapturedUpdate=workInProgressQueue.lastCapturedUpdate=update;}else{workInProgressQueue.lastCapturedUpdate.next=update;workInProgressQueue.lastCapturedUpdate=update;}}function ensureWorkInProgressQueueIsAClone(workInProgress,queue){var current=workInProgress.alternate;if(current!==null){// If the work-in-progress queue is equal to the current queue,
// we need to clone it first.
if(queue===current.updateQueue){queue=workInProgress.updateQueue=cloneUpdateQueue(queue);}}return queue;}function getStateFromUpdate(workInProgress,queue,update,prevState,nextProps,instance){switch(update.tag){case ReplaceState:{var _payload=update.payload;if(typeof _payload==='function'){// Updater function
{enterDisallowedContextReadInDEV();if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){_payload.call(instance,prevState,nextProps);}}var nextState=_payload.call(instance,prevState,nextProps);{exitDisallowedContextReadInDEV();}return nextState;}// State object
return _payload;}case CaptureUpdate:{workInProgress.effectTag=workInProgress.effectTag&~ShouldCapture|DidCapture;}// Intentional fallthrough
case UpdateState:{var _payload2=update.payload;var partialState=void 0;if(typeof _payload2==='function'){// Updater function
{enterDisallowedContextReadInDEV();if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){_payload2.call(instance,prevState,nextProps);}}partialState=_payload2.call(instance,prevState,nextProps);{exitDisallowedContextReadInDEV();}}else{// Partial state object
partialState=_payload2;}if(partialState===null||partialState===undefined){// Null and undefined are treated as no-ops.
return prevState;}// Merge the partial state and the previous state.
return _assign({},prevState,partialState);}case ForceUpdate:{hasForceUpdate=true;return prevState;}}return prevState;}function processUpdateQueue(workInProgress,queue,props,instance,renderExpirationTime){hasForceUpdate=false;queue=ensureWorkInProgressQueueIsAClone(workInProgress,queue);{currentlyProcessingQueue=queue;}// These values may change as we process the queue.
var newBaseState=queue.baseState;var newFirstUpdate=null;var newExpirationTime=NoWork;// Iterate through the list of updates to compute the result.
var update=queue.firstUpdate;var resultState=newBaseState;while(update!==null){var updateExpirationTime=update.expirationTime;if(updateExpirationTime<renderExpirationTime){// This update does not have sufficient priority. Skip it.
if(newFirstUpdate===null){// This is the first skipped update. It will be the first update in
// the new list.
newFirstUpdate=update;// Since this is the first update that was skipped, the current result
// is the new base state.
newBaseState=resultState;}// Since this update will remain in the list, update the remaining
// expiration time.
if(newExpirationTime<updateExpirationTime){newExpirationTime=updateExpirationTime;}}else{// This update does have sufficient priority. Process it and compute
// a new result.
resultState=getStateFromUpdate(workInProgress,queue,update,resultState,props,instance);var _callback=update.callback;if(_callback!==null){workInProgress.effectTag|=Callback;// Set this to null, in case it was mutated during an aborted render.
update.nextEffect=null;if(queue.lastEffect===null){queue.firstEffect=queue.lastEffect=update;}else{queue.lastEffect.nextEffect=update;queue.lastEffect=update;}}}// Continue to the next update.
update=update.next;}// Separately, iterate though the list of captured updates.
var newFirstCapturedUpdate=null;update=queue.firstCapturedUpdate;while(update!==null){var _updateExpirationTime=update.expirationTime;if(_updateExpirationTime<renderExpirationTime){// This update does not have sufficient priority. Skip it.
if(newFirstCapturedUpdate===null){// This is the first skipped captured update. It will be the first
// update in the new list.
newFirstCapturedUpdate=update;// If this is the first update that was skipped, the current result is
// the new base state.
if(newFirstUpdate===null){newBaseState=resultState;}}// Since this update will remain in the list, update the remaining
// expiration time.
if(newExpirationTime<_updateExpirationTime){newExpirationTime=_updateExpirationTime;}}else{// This update does have sufficient priority. Process it and compute
// a new result.
resultState=getStateFromUpdate(workInProgress,queue,update,resultState,props,instance);var _callback2=update.callback;if(_callback2!==null){workInProgress.effectTag|=Callback;// Set this to null, in case it was mutated during an aborted render.
update.nextEffect=null;if(queue.lastCapturedEffect===null){queue.firstCapturedEffect=queue.lastCapturedEffect=update;}else{queue.lastCapturedEffect.nextEffect=update;queue.lastCapturedEffect=update;}}}update=update.next;}if(newFirstUpdate===null){queue.lastUpdate=null;}if(newFirstCapturedUpdate===null){queue.lastCapturedUpdate=null;}else{workInProgress.effectTag|=Callback;}if(newFirstUpdate===null&&newFirstCapturedUpdate===null){// We processed every update, without skipping. That means the new base
// state is the same as the result state.
newBaseState=resultState;}queue.baseState=newBaseState;queue.firstUpdate=newFirstUpdate;queue.firstCapturedUpdate=newFirstCapturedUpdate;// Set the remaining expiration time to be whatever is remaining in the queue.
// This should be fine because the only two other things that contribute to
// expiration time are props and context. We're already in the middle of the
// begin phase by the time we start processing the queue, so we've already
// dealt with the props. Context in components that specify
// shouldComponentUpdate is tricky; but we'll have to account for
// that regardless.
workInProgress.expirationTime=newExpirationTime;workInProgress.memoizedState=resultState;{currentlyProcessingQueue=null;}}function callCallback(callback,context){!(typeof callback==='function')?invariant(false,'Invalid argument passed as callback. Expected a function. Instead received: %s',callback):void 0;callback.call(context);}function resetHasForceUpdateBeforeProcessing(){hasForceUpdate=false;}function checkHasForceUpdateAfterProcessing(){return hasForceUpdate;}function commitUpdateQueue(finishedWork,finishedQueue,instance,renderExpirationTime){// If the finished render included captured updates, and there are still
// lower priority updates left over, we need to keep the captured updates
// in the queue so that they are rebased and not dropped once we process the
// queue again at the lower priority.
if(finishedQueue.firstCapturedUpdate!==null){// Join the captured update list to the end of the normal list.
if(finishedQueue.lastUpdate!==null){finishedQueue.lastUpdate.next=finishedQueue.firstCapturedUpdate;finishedQueue.lastUpdate=finishedQueue.lastCapturedUpdate;}// Clear the list of captured updates.
finishedQueue.firstCapturedUpdate=finishedQueue.lastCapturedUpdate=null;}// Commit the effects
commitUpdateEffects(finishedQueue.firstEffect,instance);finishedQueue.firstEffect=finishedQueue.lastEffect=null;commitUpdateEffects(finishedQueue.firstCapturedEffect,instance);finishedQueue.firstCapturedEffect=finishedQueue.lastCapturedEffect=null;}function commitUpdateEffects(effect,instance){while(effect!==null){var _callback3=effect.callback;if(_callback3!==null){effect.callback=null;callCallback(_callback3,instance);}effect=effect.nextEffect;}}function createCapturedValue(value,source){// If the value is an error, call this function immediately after it is thrown
// so the stack is accurate.
return{value:value,source:source,stack:getStackByFiberInDevAndProd(source)};}function markUpdate(workInProgress){// Tag the fiber with an update effect. This turns a Placement into
// a PlacementAndUpdate.
workInProgress.effectTag|=Update;}function markRef$1(workInProgress){workInProgress.effectTag|=Ref;}var _appendAllChildren=void 0;var updateHostContainer=void 0;var updateHostComponent$1=void 0;var updateHostText$1=void 0;if(supportsMutation){// Mutation mode
_appendAllChildren=function appendAllChildren(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){if(node.tag===HostComponent||node.tag===HostText){appendInitialChild(parent,node.stateNode);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};updateHostContainer=function updateHostContainer(workInProgress){// Noop
};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){// If we have an alternate, that means this is an update and we need to
// schedule a side-effect to do the updates.
var oldProps=current.memoizedProps;if(oldProps===newProps){// In mutation mode, this is sufficient for a bailout because
// we won't touch this node even if children changed.
return;}// If we get updated because one of our children updated, we don't
// have newProps so we'll have to reuse them.
// TODO: Split the update API as separate for the props vs. children.
// Even better would be if children weren't special cased at all tho.
var instance=workInProgress.stateNode;var currentHostContext=getHostContext();// TODO: Experiencing an error where oldProps is null. Suggests a host
// component is hitting the resume path. Figure out why. Possibly
// related to `hidden`.
var updatePayload=prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,currentHostContext);// TODO: Type this specific to this type of component.
workInProgress.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
// is a new ref we mark this as an update. All the work is done in commitWork.
if(updatePayload){markUpdate(workInProgress);}};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){// If the text differs, mark it as an update. All the work in done in commitWork.
if(oldText!==newText){markUpdate(workInProgress);}};}else if(supportsPersistence){// Persistent host tree mode
_appendAllChildren=function appendAllChildren(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){// eslint-disable-next-line no-labels
branches:if(node.tag===HostComponent){var instance=node.stateNode;if(needsVisibilityToggle){var props=node.memoizedProps;var type=node.type;if(isHidden){// This child is inside a timed out tree. Hide it.
instance=cloneHiddenInstance(instance,type,props,node);}else{// This child was previously inside a timed out tree. If it was not
// updated during this render, it may need to be unhidden. Clone
// again to be sure.
instance=cloneUnhiddenInstance(instance,type,props,node);}node.stateNode=instance;}appendInitialChild(parent,instance);}else if(node.tag===HostText){var _instance=node.stateNode;if(needsVisibilityToggle){var text=node.memoizedProps;var rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();if(isHidden){_instance=createHiddenTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}else{_instance=createTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}node.stateNode=_instance;}appendInitialChild(parent,_instance);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.tag===SuspenseComponent){var current=node.alternate;if(current!==null){var oldState=current.memoizedState;var newState=node.memoizedState;var oldIsHidden=oldState!==null;var newIsHidden=newState!==null;if(oldIsHidden!==newIsHidden){// The placeholder either just timed out or switched back to the normal
// children after having previously timed out. Toggle the visibility of
// the direct host children.
var primaryChildParent=newIsHidden?node.child:node;if(primaryChildParent!==null){_appendAllChildren(parent,primaryChildParent,true,newIsHidden);}// eslint-disable-next-line no-labels
break branches;}}if(node.child!==null){// Continue traversing like normal
node.child.return=node;node=node.child;continue;}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}// $FlowFixMe This is correct but Flow is confused by the labeled break.
node=node;if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};// An unfortunate fork of appendAllChildren because we have two different parent types.
var appendAllChildrenToContainer=function appendAllChildrenToContainer(containerChildSet,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){// eslint-disable-next-line no-labels
branches:if(node.tag===HostComponent){var instance=node.stateNode;if(needsVisibilityToggle){var props=node.memoizedProps;var type=node.type;if(isHidden){// This child is inside a timed out tree. Hide it.
instance=cloneHiddenInstance(instance,type,props,node);}else{// This child was previously inside a timed out tree. If it was not
// updated during this render, it may need to be unhidden. Clone
// again to be sure.
instance=cloneUnhiddenInstance(instance,type,props,node);}node.stateNode=instance;}appendChildToContainerChildSet(containerChildSet,instance);}else if(node.tag===HostText){var _instance2=node.stateNode;if(needsVisibilityToggle){var text=node.memoizedProps;var rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();if(isHidden){_instance2=createHiddenTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}else{_instance2=createTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}node.stateNode=_instance2;}appendChildToContainerChildSet(containerChildSet,_instance2);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.tag===SuspenseComponent){var current=node.alternate;if(current!==null){var oldState=current.memoizedState;var newState=node.memoizedState;var oldIsHidden=oldState!==null;var newIsHidden=newState!==null;if(oldIsHidden!==newIsHidden){// The placeholder either just timed out or switched back to the normal
// children after having previously timed out. Toggle the visibility of
// the direct host children.
var primaryChildParent=newIsHidden?node.child:node;if(primaryChildParent!==null){appendAllChildrenToContainer(containerChildSet,primaryChildParent,true,newIsHidden);}// eslint-disable-next-line no-labels
break branches;}}if(node.child!==null){// Continue traversing like normal
node.child.return=node;node=node.child;continue;}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}// $FlowFixMe This is correct but Flow is confused by the labeled break.
node=node;if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};updateHostContainer=function updateHostContainer(workInProgress){var portalOrRoot=workInProgress.stateNode;var childrenUnchanged=workInProgress.firstEffect===null;if(childrenUnchanged){// No changes, just reuse the existing instance.
}else{var container=portalOrRoot.containerInfo;var newChildSet=createContainerChildSet(container);// If children might have changed, we have to add them all to the set.
appendAllChildrenToContainer(newChildSet,workInProgress,false,false);portalOrRoot.pendingChildren=newChildSet;// Schedule an update on the container to swap out the container.
markUpdate(workInProgress);finalizeContainerChildren(container,newChildSet);}};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){var currentInstance=current.stateNode;var oldProps=current.memoizedProps;// If there are no effects associated with this node, then none of our children had any updates.
// This guarantees that we can reuse all of them.
var childrenUnchanged=workInProgress.firstEffect===null;if(childrenUnchanged&&oldProps===newProps){// No changes, just reuse the existing instance.
// Note that this might release a previous clone.
workInProgress.stateNode=currentInstance;return;}var recyclableInstance=workInProgress.stateNode;var currentHostContext=getHostContext();var updatePayload=null;if(oldProps!==newProps){updatePayload=prepareUpdate(recyclableInstance,type,oldProps,newProps,rootContainerInstance,currentHostContext);}if(childrenUnchanged&&updatePayload===null){// No changes, just reuse the existing instance.
// Note that this might release a previous clone.
workInProgress.stateNode=currentInstance;return;}var newInstance=cloneInstance(currentInstance,updatePayload,type,oldProps,newProps,workInProgress,childrenUnchanged,recyclableInstance);if(finalizeInitialChildren(newInstance,type,newProps,rootContainerInstance,currentHostContext)){markUpdate(workInProgress);}workInProgress.stateNode=newInstance;if(childrenUnchanged){// If there are no other effects in this tree, we need to flag this node as having one.
// Even though we're not going to use it for anything.
// Otherwise parents won't know that there are new children to propagate upwards.
markUpdate(workInProgress);}else{// If children might have changed, we have to add them all to the set.
_appendAllChildren(newInstance,workInProgress,false,false);}};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){if(oldText!==newText){// If the text content differs, we'll create a new text instance for it.
var rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();workInProgress.stateNode=createTextInstance(newText,rootContainerInstance,currentHostContext,workInProgress);// We'll have to mark it as having an effect, even though we won't use the effect for anything.
// This lets the parents know that at least one of their children has changed.
markUpdate(workInProgress);}};}else{// No host operations
updateHostContainer=function updateHostContainer(workInProgress){// Noop
};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){// Noop
};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){// Noop
};}function completeWork(current,workInProgress,renderExpirationTime){var newProps=workInProgress.pendingProps;switch(workInProgress.tag){case IndeterminateComponent:break;case LazyComponent:break;case SimpleMemoComponent:case FunctionComponent:break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}break;}case HostRoot:{popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);var fiberRoot=workInProgress.stateNode;if(fiberRoot.pendingContext){fiberRoot.context=fiberRoot.pendingContext;fiberRoot.pendingContext=null;}if(current===null||current.child===null){// If we hydrated, pop so that we can delete any remaining children
// that weren't hydrated.
popHydrationState(workInProgress);// This resets the hacky state to fix isMounted before committing.
// TODO: Delete this when we delete isMounted and findDOMNode.
workInProgress.effectTag&=~Placement;}updateHostContainer(workInProgress);break;}case HostComponent:{popHostContext(workInProgress);var rootContainerInstance=getRootHostContainer();var type=workInProgress.type;if(current!==null&&workInProgress.stateNode!=null){updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance);if(current.ref!==workInProgress.ref){markRef$1(workInProgress);}}else{if(!newProps){!(workInProgress.stateNode!==null)?invariant(false,'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'):void 0;// This can happen when we abort work.
break;}var currentHostContext=getHostContext();// TODO: Move createInstance to beginWork and keep it on a context
// "stack" as the parent. Then append children as we go in beginWork
// or completeWork depending on we want to add then top->down or
// bottom->up. Top->down is faster in IE11.
var wasHydrated=popHydrationState(workInProgress);if(wasHydrated){// TODO: Move this and createInstance step into the beginPhase
// to consolidate.
if(prepareToHydrateHostInstance(workInProgress,rootContainerInstance,currentHostContext)){// If changes to the hydrated node needs to be applied at the
// commit-phase we mark this as such.
markUpdate(workInProgress);}}else{var instance=createInstance(type,newProps,rootContainerInstance,currentHostContext,workInProgress);_appendAllChildren(instance,workInProgress,false,false);// Certain renderers require commit-time effects for initial mount.
// (eg DOM renderer supports auto-focus for certain elements).
// Make sure such renderers get scheduled for later work.
if(finalizeInitialChildren(instance,type,newProps,rootContainerInstance,currentHostContext)){markUpdate(workInProgress);}workInProgress.stateNode=instance;}if(workInProgress.ref!==null){// If there is a ref on a host node we need to schedule a callback
markRef$1(workInProgress);}}break;}case HostText:{var newText=newProps;if(current&&workInProgress.stateNode!=null){var oldText=current.memoizedProps;// If we have an alternate, that means this is an update and we need
// to schedule a side-effect to do the updates.
updateHostText$1(current,workInProgress,oldText,newText);}else{if(typeof newText!=='string'){!(workInProgress.stateNode!==null)?invariant(false,'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'):void 0;// This can happen when we abort work.
}var _rootContainerInstance=getRootHostContainer();var _currentHostContext=getHostContext();var _wasHydrated=popHydrationState(workInProgress);if(_wasHydrated){if(prepareToHydrateHostTextInstance(workInProgress)){markUpdate(workInProgress);}}else{workInProgress.stateNode=createTextInstance(newText,_rootContainerInstance,_currentHostContext,workInProgress);}}break;}case ForwardRef:break;case SuspenseComponent:{var nextState=workInProgress.memoizedState;if((workInProgress.effectTag&DidCapture)!==NoEffect){// Something suspended. Re-render with the fallback children.
workInProgress.expirationTime=renderExpirationTime;// Do not reset the effect list.
return workInProgress;}var nextDidTimeout=nextState!==null;var prevDidTimeout=current!==null&&current.memoizedState!==null;if(current!==null&&!nextDidTimeout&&prevDidTimeout){// We just switched from the fallback to the normal children. Delete
// the fallback.
// TODO: Would it be better to store the fallback fragment on
var currentFallbackChild=current.child.sibling;if(currentFallbackChild!==null){// Deletions go at the beginning of the return fiber's effect list
var first=workInProgress.firstEffect;if(first!==null){workInProgress.firstEffect=currentFallbackChild;currentFallbackChild.nextEffect=first;}else{workInProgress.firstEffect=workInProgress.lastEffect=currentFallbackChild;currentFallbackChild.nextEffect=null;}currentFallbackChild.effectTag=Deletion;}}if(nextDidTimeout||prevDidTimeout){// If the children are hidden, or if they were previous hidden, schedule
// an effect to toggle their visibility. This is also used to attach a
// retry listener to the promise.
workInProgress.effectTag|=Update;}break;}case Fragment:break;case Mode:break;case Profiler:break;case HostPortal:popHostContainer(workInProgress);updateHostContainer(workInProgress);break;case ContextProvider:// Pop provider fiber
popProvider(workInProgress);break;case ContextConsumer:break;case MemoComponent:break;case IncompleteClassComponent:{// Same as class component case. I put it down here so that the tags are
// sequential to ensure this switch is compiled to a jump table.
var _Component=workInProgress.type;if(isContextProvider(_Component)){popContext(workInProgress);}break;}case DehydratedSuspenseComponent:{if(enableSuspenseServerRenderer){if(current===null){var _wasHydrated2=popHydrationState(workInProgress);!_wasHydrated2?invariant(false,'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.'):void 0;skipPastDehydratedSuspenseInstance(workInProgress);}else if((workInProgress.effectTag&DidCapture)===NoEffect){// This boundary did not suspend so it's now hydrated.
// To handle any future suspense cases, we're going to now upgrade it
// to a Suspense component. We detach it from the existing current fiber.
current.alternate=null;workInProgress.alternate=null;workInProgress.tag=SuspenseComponent;workInProgress.memoizedState=null;workInProgress.stateNode=null;}}break;}default:invariant(false,'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');}return null;}function shouldCaptureSuspense(workInProgress){// In order to capture, the Suspense component must have a fallback prop.
if(workInProgress.memoizedProps.fallback===undefined){return false;}// If it was the primary children that just suspended, capture and render the
// fallback. Otherwise, don't capture and bubble to the next boundary.
var nextState=workInProgress.memoizedState;return nextState===null;}// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError){return true;}function logCapturedError(capturedError){var logError=showErrorDialog(capturedError);// Allow injected showErrorDialog() to prevent default console.error logging.
// This enables renderers like ReactNative to better manage redbox behavior.
if(logError===false){return;}var error=capturedError.error;{var componentName=capturedError.componentName,componentStack=capturedError.componentStack,errorBoundaryName=capturedError.errorBoundaryName,errorBoundaryFound=capturedError.errorBoundaryFound,willRetry=capturedError.willRetry;// Browsers support silencing uncaught errors by calling
// `preventDefault()` in window `error` handler.
// We record this information as an expando on the error.
if(error!=null&&error._suppressLogging){if(errorBoundaryFound&&willRetry){// The error is recoverable and was silenced.
// Ignore it and don't print the stack addendum.
// This is handy for testing error boundaries without noise.
return;}// The error is fatal. Since the silencing might have
// been accidental, we'll surface it anyway.
// However, the browser would have silenced the original error
// so we'll print it first, and then print the stack addendum.
console.error(error);// For a more detailed description of this block, see:
// https://github.com/facebook/react/pull/13384
}var componentNameMessage=componentName?'The above error occurred in the <'+componentName+'> component:':'The above error occurred in one of your React components:';var errorBoundaryMessage=void 0;// errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
if(errorBoundaryFound&&errorBoundaryName){if(willRetry){errorBoundaryMessage='React will try to recreate this component tree from scratch '+('using the error boundary you provided, '+errorBoundaryName+'.');}else{errorBoundaryMessage='This error was initially handled by the error boundary '+errorBoundaryName+'.\n'+'Recreating the tree from scratch failed so React will unmount the tree.';}}else{errorBoundaryMessage='Consider adding an error boundary to your tree to customize error handling behavior.\n'+'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';}var combinedMessage=''+componentNameMessage+componentStack+'\n\n'+(''+errorBoundaryMessage);// In development, we provide our own message with just the component stack.
// We don't include the original error message and JS stack because the browser
// has already printed it. Even if the application swallows the error, it is still
// displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
console.error(combinedMessage);}}var didWarnAboutUndefinedSnapshotBeforeUpdate=null;{didWarnAboutUndefinedSnapshotBeforeUpdate=new Set();}var PossiblyWeakSet$1=typeof WeakSet==='function'?WeakSet:Set;function logError(boundary,errorInfo){var source=errorInfo.source;var stack=errorInfo.stack;if(stack===null&&source!==null){stack=getStackByFiberInDevAndProd(source);}var capturedError={componentName:source!==null?getComponentName(source.type):null,componentStack:stack!==null?stack:'',error:errorInfo.value,errorBoundary:null,errorBoundaryName:null,errorBoundaryFound:false,willRetry:false};if(boundary!==null&&boundary.tag===ClassComponent){capturedError.errorBoundary=boundary.stateNode;capturedError.errorBoundaryName=getComponentName(boundary.type);capturedError.errorBoundaryFound=true;capturedError.willRetry=true;}try{logCapturedError(capturedError);}catch(e){// This method must not throw, or React internal state will get messed up.
// If console.error is overridden, or logCapturedError() shows a dialog that throws,
// we want to report this error outside of the normal stack as a last resort.
// https://github.com/facebook/react/issues/13188
setTimeout(function(){throw e;});}}var callComponentWillUnmountWithTimer=function callComponentWillUnmountWithTimer(current$$1,instance){startPhaseTimer(current$$1,'componentWillUnmount');instance.props=current$$1.memoizedProps;instance.state=current$$1.memoizedState;instance.componentWillUnmount();stopPhaseTimer();};// Capture errors so they don't interrupt unmounting.
function safelyCallComponentWillUnmount(current$$1,instance){{invokeGuardedCallback(null,callComponentWillUnmountWithTimer,null,current$$1,instance);if(hasCaughtError()){var unmountError=clearCaughtError();captureCommitPhaseError(current$$1,unmountError);}}}function safelyDetachRef(current$$1){var ref=current$$1.ref;if(ref!==null){if(typeof ref==='function'){{invokeGuardedCallback(null,ref,null,null);if(hasCaughtError()){var refError=clearCaughtError();captureCommitPhaseError(current$$1,refError);}}}else{ref.current=null;}}}function safelyCallDestroy(current$$1,destroy){{invokeGuardedCallback(null,destroy,null);if(hasCaughtError()){var error=clearCaughtError();captureCommitPhaseError(current$$1,error);}}}function commitBeforeMutationLifeCycles(current$$1,finishedWork){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{commitHookEffectList(UnmountSnapshot,NoEffect$1,finishedWork);return;}case ClassComponent:{if(finishedWork.effectTag&Snapshot){if(current$$1!==null){var prevProps=current$$1.memoizedProps;var prevState=current$$1.memoizedState;startPhaseTimer(finishedWork,'getSnapshotBeforeUpdate');var instance=finishedWork.stateNode;// We could update instance props and state here,
// but instead we rely on them being set during last render.
// TODO: revisit this when we implement resuming.
{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){!(instance.props===finishedWork.memoizedProps)?warning$1(false,'Expected %s props to match memoized props before '+'getSnapshotBeforeUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;!(instance.state===finishedWork.memoizedState)?warning$1(false,'Expected %s state to match memoized state before '+'getSnapshotBeforeUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;}}var snapshot=instance.getSnapshotBeforeUpdate(finishedWork.elementType===finishedWork.type?prevProps:resolveDefaultProps(finishedWork.type,prevProps),prevState);{var didWarnSet=didWarnAboutUndefinedSnapshotBeforeUpdate;if(snapshot===undefined&&!didWarnSet.has(finishedWork.type)){didWarnSet.add(finishedWork.type);warningWithoutStack$1(false,'%s.getSnapshotBeforeUpdate(): A snapshot value (or null) '+'must be returned. You have returned undefined.',getComponentName(finishedWork.type));}}instance.__reactInternalSnapshotBeforeUpdate=snapshot;stopPhaseTimer();}}return;}case HostRoot:case HostComponent:case HostText:case HostPortal:case IncompleteClassComponent:// Nothing to do for these component types
return;default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function commitHookEffectList(unmountTag,mountTag,finishedWork){var updateQueue=finishedWork.updateQueue;var lastEffect=updateQueue!==null?updateQueue.lastEffect:null;if(lastEffect!==null){var firstEffect=lastEffect.next;var effect=firstEffect;do{if((effect.tag&unmountTag)!==NoEffect$1){// Unmount
var destroy=effect.destroy;effect.destroy=undefined;if(destroy!==undefined){destroy();}}if((effect.tag&mountTag)!==NoEffect$1){// Mount
var create=effect.create;effect.destroy=create();{var _destroy=effect.destroy;if(_destroy!==undefined&&typeof _destroy!=='function'){var addendum=void 0;if(_destroy===null){addendum=' You returned null. If your effect does not require clean '+'up, return undefined (or nothing).';}else if(typeof _destroy.then==='function'){addendum='\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. '+'Instead, write the async function inside your effect '+'and call it immediately:\n\n'+'useEffect(() => {\n'+'  async function fetchData() {\n'+'    // You can await here\n'+'    const response = await MyAPI.getData(someId);\n'+'    // ...\n'+'  }\n'+'  fetchData();\n'+'}, [someId]); // Or [] if effect doesn\'t need props or state\n\n'+'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';}else{addendum=' You returned: '+_destroy;}warningWithoutStack$1(false,'An effect function must not return anything besides a function, '+'which is used for clean-up.%s%s',addendum,getStackByFiberInDevAndProd(finishedWork));}}}effect=effect.next;}while(effect!==firstEffect);}}function commitPassiveHookEffects(finishedWork){commitHookEffectList(UnmountPassive,NoEffect$1,finishedWork);commitHookEffectList(NoEffect$1,MountPassive,finishedWork);}function commitLifeCycles(finishedRoot,current$$1,finishedWork,committedExpirationTime){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{commitHookEffectList(UnmountLayout,MountLayout,finishedWork);break;}case ClassComponent:{var instance=finishedWork.stateNode;if(finishedWork.effectTag&Update){if(current$$1===null){startPhaseTimer(finishedWork,'componentDidMount');// We could update instance props and state here,
// but instead we rely on them being set during last render.
// TODO: revisit this when we implement resuming.
{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){!(instance.props===finishedWork.memoizedProps)?warning$1(false,'Expected %s props to match memoized props before '+'componentDidMount. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;!(instance.state===finishedWork.memoizedState)?warning$1(false,'Expected %s state to match memoized state before '+'componentDidMount. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;}}instance.componentDidMount();stopPhaseTimer();}else{var prevProps=finishedWork.elementType===finishedWork.type?current$$1.memoizedProps:resolveDefaultProps(finishedWork.type,current$$1.memoizedProps);var prevState=current$$1.memoizedState;startPhaseTimer(finishedWork,'componentDidUpdate');// We could update instance props and state here,
// but instead we rely on them being set during last render.
// TODO: revisit this when we implement resuming.
{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){!(instance.props===finishedWork.memoizedProps)?warning$1(false,'Expected %s props to match memoized props before '+'componentDidUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;!(instance.state===finishedWork.memoizedState)?warning$1(false,'Expected %s state to match memoized state before '+'componentDidUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;}}instance.componentDidUpdate(prevProps,prevState,instance.__reactInternalSnapshotBeforeUpdate);stopPhaseTimer();}}var updateQueue=finishedWork.updateQueue;if(updateQueue!==null){{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){!(instance.props===finishedWork.memoizedProps)?warning$1(false,'Expected %s props to match memoized props before '+'processing the update queue. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;!(instance.state===finishedWork.memoizedState)?warning$1(false,'Expected %s state to match memoized state before '+'processing the update queue. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentName(finishedWork.type)||'instance'):void 0;}}// We could update instance props and state here,
// but instead we rely on them being set during last render.
// TODO: revisit this when we implement resuming.
commitUpdateQueue(finishedWork,updateQueue,instance,committedExpirationTime);}return;}case HostRoot:{var _updateQueue=finishedWork.updateQueue;if(_updateQueue!==null){var _instance=null;if(finishedWork.child!==null){switch(finishedWork.child.tag){case HostComponent:_instance=getPublicInstance(finishedWork.child.stateNode);break;case ClassComponent:_instance=finishedWork.child.stateNode;break;}}commitUpdateQueue(finishedWork,_updateQueue,_instance,committedExpirationTime);}return;}case HostComponent:{var _instance2=finishedWork.stateNode;// Renderers may schedule work to be done after host components are mounted
// (eg DOM renderer may schedule auto-focus for inputs and form controls).
// These effects should only be committed when components are first mounted,
// aka when there is no current/alternate.
if(current$$1===null&&finishedWork.effectTag&Update){var type=finishedWork.type;var props=finishedWork.memoizedProps;commitMount(_instance2,type,props,finishedWork);}return;}case HostText:{// We have no life-cycles associated with text.
return;}case HostPortal:{// We have no life-cycles associated with portals.
return;}case Profiler:{if(enableProfilerTimer){var onRender=finishedWork.memoizedProps.onRender;if(enableSchedulerTracing){onRender(finishedWork.memoizedProps.id,current$$1===null?'mount':'update',finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,getCommitTime(),finishedRoot.memoizedInteractions);}else{onRender(finishedWork.memoizedProps.id,current$$1===null?'mount':'update',finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,getCommitTime());}}return;}case SuspenseComponent:break;case IncompleteClassComponent:break;default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function hideOrUnhideAllChildren(finishedWork,isHidden){if(supportsMutation){// We only have the top Fiber that was inserted but we need to recurse down its
var node=finishedWork;while(true){if(node.tag===HostComponent){var instance=node.stateNode;if(isHidden){hideInstance(instance);}else{unhideInstance(node.stateNode,node.memoizedProps);}}else if(node.tag===HostText){var _instance3=node.stateNode;if(isHidden){hideTextInstance(_instance3);}else{unhideTextInstance(_instance3,node.memoizedProps);}}else if(node.tag===SuspenseComponent&&node.memoizedState!==null){// Found a nested Suspense component that timed out. Skip over the
var fallbackChildFragment=node.child.sibling;fallbackChildFragment.return=node;node=fallbackChildFragment;continue;}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node.return===null||node.return===finishedWork){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}}function commitAttachRef(finishedWork){var ref=finishedWork.ref;if(ref!==null){var instance=finishedWork.stateNode;var instanceToUse=void 0;switch(finishedWork.tag){case HostComponent:instanceToUse=getPublicInstance(instance);break;default:instanceToUse=instance;}if(typeof ref==='function'){ref(instanceToUse);}else{{if(!ref.hasOwnProperty('current')){warningWithoutStack$1(false,'Unexpected ref object provided for %s. '+'Use either a ref-setter function or React.createRef().%s',getComponentName(finishedWork.type),getStackByFiberInDevAndProd(finishedWork));}}ref.current=instanceToUse;}}}function commitDetachRef(current$$1){var currentRef=current$$1.ref;if(currentRef!==null){if(typeof currentRef==='function'){currentRef(null);}else{currentRef.current=null;}}}// User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay
function commitUnmount(current$$1){onCommitUnmount(current$$1);switch(current$$1.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{var updateQueue=current$$1.updateQueue;if(updateQueue!==null){var lastEffect=updateQueue.lastEffect;if(lastEffect!==null){var firstEffect=lastEffect.next;var effect=firstEffect;do{var destroy=effect.destroy;if(destroy!==undefined){safelyCallDestroy(current$$1,destroy);}effect=effect.next;}while(effect!==firstEffect);}}break;}case ClassComponent:{safelyDetachRef(current$$1);var instance=current$$1.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(current$$1,instance);}return;}case HostComponent:{safelyDetachRef(current$$1);return;}case HostPortal:{// TODO: this is recursive.
// We are also not using this parent because
// the portal will get pushed immediately.
if(supportsMutation){unmountHostComponents(current$$1);}else if(supportsPersistence){emptyPortalContainer(current$$1);}return;}}}function commitNestedUnmounts(root){// While we're inside a removed host node we don't want to call
// removeChild on the inner nodes because they're removed by the top
// call anyway. We also want to call componentWillUnmount on all
// composites before this host node is removed from the tree. Therefore
var node=root;while(true){commitUnmount(node);// Visit children because they may contain more composite or host nodes.
// Skip portals because commitUnmount() currently visits them recursively.
if(node.child!==null&&(// If we use mutation we drill down into portals using commitUnmount above.
// If we don't use mutation we drill down into portals here instead.
!supportsMutation||node.tag!==HostPortal)){node.child.return=node;node=node.child;continue;}if(node===root){return;}while(node.sibling===null){if(node.return===null||node.return===root){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}function detachFiber(current$$1){// Cut off the return pointers to disconnect it from the tree. Ideally, we
// should clear the child pointer of the parent alternate to let this
// get GC:ed but we don't know which for sure which parent is the current
// one so we'll settle for GC:ing the subtree of this child. This child
// itself will be GC:ed when the parent updates the next time.
current$$1.return=null;current$$1.child=null;current$$1.memoizedState=null;current$$1.updateQueue=null;var alternate=current$$1.alternate;if(alternate!==null){alternate.return=null;alternate.child=null;alternate.memoizedState=null;alternate.updateQueue=null;}}function emptyPortalContainer(current$$1){if(!supportsPersistence){return;}var portal=current$$1.stateNode;var containerInfo=portal.containerInfo;var emptyChildSet=createContainerChildSet(containerInfo);replaceContainerChildren(containerInfo,emptyChildSet);}function commitContainer(finishedWork){if(!supportsPersistence){return;}switch(finishedWork.tag){case ClassComponent:{return;}case HostComponent:{return;}case HostText:{return;}case HostRoot:case HostPortal:{var portalOrRoot=finishedWork.stateNode;var containerInfo=portalOrRoot.containerInfo,_pendingChildren=portalOrRoot.pendingChildren;replaceContainerChildren(containerInfo,_pendingChildren);return;}default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function getHostParentFiber(fiber){var parent=fiber.return;while(parent!==null){if(isHostParent(parent)){return parent;}parent=parent.return;}invariant(false,'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');}function isHostParent(fiber){return fiber.tag===HostComponent||fiber.tag===HostRoot||fiber.tag===HostPortal;}function getHostSibling(fiber){// We're going to search forward into the tree until we find a sibling host
// node. Unfortunately, if multiple insertions are done in a row we have to
// search past them. This leads to exponential search for the next sibling.
var node=fiber;siblings:while(true){// If we didn't find anything, let's try the next sibling.
while(node.sibling===null){if(node.return===null||isHostParent(node.return)){// If we pop out of the root or hit the parent the fiber we are the
// last sibling.
return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;while(node.tag!==HostComponent&&node.tag!==HostText&&node.tag!==DehydratedSuspenseComponent){// If it is not host node and, we might have a host node inside it.
// Try to search down until we find one.
if(node.effectTag&Placement){// If we don't have a child, try the siblings instead.
continue siblings;}// If we don't have a child, try the siblings instead.
// We also skip portals because they are not part of this host tree.
if(node.child===null||node.tag===HostPortal){continue siblings;}else{node.child.return=node;node=node.child;}}// Check if this host node is stable or about to be placed.
if(!(node.effectTag&Placement)){// Found it!
return node.stateNode;}}}function commitPlacement(finishedWork){if(!supportsMutation){return;}// Recursively insert all host nodes into the parent.
var parentFiber=getHostParentFiber(finishedWork);// Note: these two variables *must* always be updated together.
var parent=void 0;var isContainer=void 0;switch(parentFiber.tag){case HostComponent:parent=parentFiber.stateNode;isContainer=false;break;case HostRoot:parent=parentFiber.stateNode.containerInfo;isContainer=true;break;case HostPortal:parent=parentFiber.stateNode.containerInfo;isContainer=true;break;default:invariant(false,'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');}if(parentFiber.effectTag&ContentReset){// Reset the text content of the parent before doing any insertions
resetTextContent(parent);// Clear ContentReset from the effect tag
parentFiber.effectTag&=~ContentReset;}var before=getHostSibling(finishedWork);// We only have the top Fiber that was inserted but we need to recurse down its
// children to find all the terminal nodes.
var node=finishedWork;while(true){if(node.tag===HostComponent||node.tag===HostText){if(before){if(isContainer){insertInContainerBefore(parent,node.stateNode,before);}else{insertBefore(parent,node.stateNode,before);}}else{if(isContainer){appendChildToContainer(parent,node.stateNode);}else{appendChild(parent,node.stateNode);}}}else if(node.tag===HostPortal){// If the insertion itself is a portal, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node.return===null||node.return===finishedWork){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}function unmountHostComponents(current$$1){// We only have the top Fiber that was deleted but we need to recurse down its
var node=current$$1;// Each iteration, currentParent is populated with node's host parent if not
// currentParentIsValid.
var currentParentIsValid=false;// Note: these two variables *must* always be updated together.
var currentParent=void 0;var currentParentIsContainer=void 0;while(true){if(!currentParentIsValid){var parent=node.return;findParent:while(true){!(parent!==null)?invariant(false,'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'):void 0;switch(parent.tag){case HostComponent:currentParent=parent.stateNode;currentParentIsContainer=false;break findParent;case HostRoot:currentParent=parent.stateNode.containerInfo;currentParentIsContainer=true;break findParent;case HostPortal:currentParent=parent.stateNode.containerInfo;currentParentIsContainer=true;break findParent;}parent=parent.return;}currentParentIsValid=true;}if(node.tag===HostComponent||node.tag===HostText){commitNestedUnmounts(node);// After all the children have unmounted, it is now safe to remove the
// node from the tree.
if(currentParentIsContainer){removeChildFromContainer(currentParent,node.stateNode);}else{removeChild(currentParent,node.stateNode);}// Don't visit children because we already visited them.
}else if(enableSuspenseServerRenderer&&node.tag===DehydratedSuspenseComponent){// Delete the dehydrated suspense boundary and all of its content.
if(currentParentIsContainer){clearSuspenseBoundaryFromContainer(currentParent,node.stateNode);}else{clearSuspenseBoundary(currentParent,node.stateNode);}}else if(node.tag===HostPortal){if(node.child!==null){// When we go into a portal, it becomes the parent to remove from.
// We will reassign it back when we pop the portal on the way up.
currentParent=node.stateNode.containerInfo;currentParentIsContainer=true;// Visit children because portals might contain host components.
node.child.return=node;node=node.child;continue;}}else{commitUnmount(node);// Visit children because we may find more host components below.
if(node.child!==null){node.child.return=node;node=node.child;continue;}}if(node===current$$1){return;}while(node.sibling===null){if(node.return===null||node.return===current$$1){return;}node=node.return;if(node.tag===HostPortal){// When we go out of the portal, we need to restore the parent.
// Since we don't keep a stack of them, we will search for it.
currentParentIsValid=false;}}node.sibling.return=node.return;node=node.sibling;}}function commitDeletion(current$$1){if(supportsMutation){// Recursively delete all host nodes from the parent.
// Detach refs and call componentWillUnmount() on the whole subtree.
unmountHostComponents(current$$1);}else{// Detach refs and call componentWillUnmount() on the whole subtree.
commitNestedUnmounts(current$$1);}detachFiber(current$$1);}function commitWork(current$$1,finishedWork){if(!supportsMutation){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{// Note: We currently never use MountMutation, but useLayout uses
// UnmountMutation.
commitHookEffectList(UnmountMutation,MountMutation,finishedWork);return;}}commitContainer(finishedWork);return;}switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{// Note: We currently never use MountMutation, but useLayout uses
// UnmountMutation.
commitHookEffectList(UnmountMutation,MountMutation,finishedWork);return;}case ClassComponent:{return;}case HostComponent:{var instance=finishedWork.stateNode;if(instance!=null){// Commit the work prepared earlier.
var newProps=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
// as the newProps. The updatePayload will contain the real change in
// this case.
var oldProps=current$$1!==null?current$$1.memoizedProps:newProps;var type=finishedWork.type;// TODO: Type the updateQueue to be specific to host components.
var updatePayload=finishedWork.updateQueue;finishedWork.updateQueue=null;if(updatePayload!==null){commitUpdate(instance,updatePayload,type,oldProps,newProps,finishedWork);}}return;}case HostText:{!(finishedWork.stateNode!==null)?invariant(false,'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'):void 0;var textInstance=finishedWork.stateNode;var newText=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
// as the newProps. The updatePayload will contain the real change in
// this case.
var oldText=current$$1!==null?current$$1.memoizedProps:newText;commitTextUpdate(textInstance,oldText,newText);return;}case HostRoot:{return;}case Profiler:{return;}case SuspenseComponent:{var newState=finishedWork.memoizedState;var newDidTimeout=void 0;var primaryChildParent=finishedWork;if(newState===null){newDidTimeout=false;}else{newDidTimeout=true;primaryChildParent=finishedWork.child;if(newState.timedOutAt===NoWork){// If the children had not already timed out, record the time.
// This is used to compute the elapsed time during subsequent
// attempts to render the children.
newState.timedOutAt=requestCurrentTime();}}if(primaryChildParent!==null){hideOrUnhideAllChildren(primaryChildParent,newDidTimeout);}// If this boundary just timed out, then it will have a set of thenables.
// For each thenable, attach a listener so that when it resolves, React
// attempts to re-render the boundary in the primary (pre-timeout) state.
var thenables=finishedWork.updateQueue;if(thenables!==null){finishedWork.updateQueue=null;var retryCache=finishedWork.stateNode;if(retryCache===null){retryCache=finishedWork.stateNode=new PossiblyWeakSet$1();}thenables.forEach(function(thenable){// Memoize using the boundary fiber to prevent redundant listeners.
var retry=retryTimedOutBoundary.bind(null,finishedWork,thenable);if(enableSchedulerTracing){retry=tracing.unstable_wrap(retry);}if(!retryCache.has(thenable)){retryCache.add(thenable);thenable.then(retry,retry);}});}return;}case IncompleteClassComponent:{return;}default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function commitResetTextContent(current$$1){if(!supportsMutation){return;}resetTextContent(current$$1.stateNode);}var PossiblyWeakSet=typeof WeakSet==='function'?WeakSet:Set;var PossiblyWeakMap=typeof WeakMap==='function'?WeakMap:Map;function createRootErrorUpdate(fiber,errorInfo,expirationTime){var update=createUpdate(expirationTime);// Unmount the root by rendering null.
update.tag=CaptureUpdate;// Caution: React DevTools currently depends on this property
// being called "element".
update.payload={element:null};var error=errorInfo.value;update.callback=function(){onUncaughtError(error);logError(fiber,errorInfo);};return update;}function createClassErrorUpdate(fiber,errorInfo,expirationTime){var update=createUpdate(expirationTime);update.tag=CaptureUpdate;var getDerivedStateFromError=fiber.type.getDerivedStateFromError;if(typeof getDerivedStateFromError==='function'){var error=errorInfo.value;update.payload=function(){return getDerivedStateFromError(error);};}var inst=fiber.stateNode;if(inst!==null&&typeof inst.componentDidCatch==='function'){update.callback=function callback(){if(typeof getDerivedStateFromError!=='function'){// To preserve the preexisting retry behavior of error boundaries,
// we keep track of which ones already failed during this batch.
// This gets reset before we yield back to the browser.
// TODO: Warn in strict mode if getDerivedStateFromError is
// not defined.
markLegacyErrorBoundaryAsFailed(this);}var error=errorInfo.value;var stack=errorInfo.stack;logError(fiber,errorInfo);this.componentDidCatch(error,{componentStack:stack!==null?stack:''});{if(typeof getDerivedStateFromError!=='function'){// If componentDidCatch is the only error boundary method defined,
// then it needs to call setState to recover from errors.
// If no state update is scheduled then the boundary will swallow the error.
!(fiber.expirationTime===Sync)?warningWithoutStack$1(false,'%s: Error boundaries should implement getDerivedStateFromError(). '+'In that method, return a state update to display an error message or fallback UI.',getComponentName(fiber.type)||'Unknown'):void 0;}}};}return update;}function attachPingListener(root,renderExpirationTime,thenable){// Attach a listener to the promise to "ping" the root and retry. But
// only if one does not already exist for the current render expiration
// time (which acts like a "thread ID" here).
var pingCache=root.pingCache;var threadIDs=void 0;if(pingCache===null){pingCache=root.pingCache=new PossiblyWeakMap();threadIDs=new Set();pingCache.set(thenable,threadIDs);}else{threadIDs=pingCache.get(thenable);if(threadIDs===undefined){threadIDs=new Set();pingCache.set(thenable,threadIDs);}}if(!threadIDs.has(renderExpirationTime)){// Memoize using the thread ID to prevent redundant listeners.
threadIDs.add(renderExpirationTime);var ping=pingSuspendedRoot.bind(null,root,thenable,renderExpirationTime);if(enableSchedulerTracing){ping=tracing.unstable_wrap(ping);}thenable.then(ping,ping);}}function throwException(root,returnFiber,sourceFiber,value,renderExpirationTime){// The source fiber did not complete.
sourceFiber.effectTag|=Incomplete;// Its effect list is no longer valid.
sourceFiber.firstEffect=sourceFiber.lastEffect=null;if(value!==null&&(typeof value==='undefined'?'undefined':_typeof(value))==='object'&&typeof value.then==='function'){// This is a thenable.
var thenable=value;// Find the earliest timeout threshold of all the placeholders in the
// ancestor path. We could avoid this traversal by storing the thresholds on
// the stack, but we choose not to because we only hit this path if we're
// IO-bound (i.e. if something suspends). Whereas the stack is used even in
// the non-IO- bound case.
var _workInProgress=returnFiber;var earliestTimeoutMs=-1;var startTimeMs=-1;do{if(_workInProgress.tag===SuspenseComponent){var current$$1=_workInProgress.alternate;if(current$$1!==null){var currentState=current$$1.memoizedState;if(currentState!==null){// Reached a boundary that already timed out. Do not search
// any further.
var timedOutAt=currentState.timedOutAt;startTimeMs=expirationTimeToMs(timedOutAt);// Do not search any further.
break;}}var timeoutPropMs=_workInProgress.pendingProps.maxDuration;if(typeof timeoutPropMs==='number'){if(timeoutPropMs<=0){earliestTimeoutMs=0;}else if(earliestTimeoutMs===-1||timeoutPropMs<earliestTimeoutMs){earliestTimeoutMs=timeoutPropMs;}}}// If there is a DehydratedSuspenseComponent we don't have to do anything because
// if something suspends inside it, we will simply leave that as dehydrated. It
// will never timeout.
_workInProgress=_workInProgress.return;}while(_workInProgress!==null);// Schedule the nearest Suspense to re-render the timed out view.
_workInProgress=returnFiber;do{if(_workInProgress.tag===SuspenseComponent&&shouldCaptureSuspense(_workInProgress)){// Found the nearest boundary.
// Stash the promise on the boundary fiber. If the boundary times out, we'll
var thenables=_workInProgress.updateQueue;if(thenables===null){var updateQueue=new Set();updateQueue.add(thenable);_workInProgress.updateQueue=updateQueue;}else{thenables.add(thenable);}// If the boundary is outside of concurrent mode, we should *not*
// suspend the commit. Pretend as if the suspended component rendered
// null and keep rendering. In the commit phase, we'll schedule a
// subsequent synchronous update to re-render the Suspense.
//
// Note: It doesn't matter whether the component that suspended was
// inside a concurrent mode tree. If the Suspense is outside of it, we
// should *not* suspend the commit.
if((_workInProgress.mode&ConcurrentMode)===NoEffect){_workInProgress.effectTag|=DidCapture;// We're going to commit this fiber even though it didn't complete.
// But we shouldn't call any lifecycle methods or callbacks. Remove
// all lifecycle effect tags.
sourceFiber.effectTag&=~(LifecycleEffectMask|Incomplete);if(sourceFiber.tag===ClassComponent){var currentSourceFiber=sourceFiber.alternate;if(currentSourceFiber===null){// This is a new mount. Change the tag so it's not mistaken for a
// completed class component. For example, we should not call
// componentWillUnmount if it is deleted.
sourceFiber.tag=IncompleteClassComponent;}else{// When we try rendering again, we should not reuse the current fiber,
// since it's known to be in an inconsistent state. Use a force updte to
// prevent a bail out.
var update=createUpdate(Sync);update.tag=ForceUpdate;enqueueUpdate(sourceFiber,update);}}// The source fiber did not complete. Mark it with Sync priority to
// indicate that it still has pending work.
sourceFiber.expirationTime=Sync;// Exit without suspending.
return;}// Confirmed that the boundary is in a concurrent mode tree. Continue
// with the normal suspend path.
attachPingListener(root,renderExpirationTime,thenable);var absoluteTimeoutMs=void 0;if(earliestTimeoutMs===-1){// If no explicit threshold is given, default to an arbitrarily large
// value. The actual size doesn't matter because the threshold for the
// whole tree will be clamped to the expiration time.
absoluteTimeoutMs=maxSigned31BitInt;}else{if(startTimeMs===-1){// This suspend happened outside of any already timed-out
// placeholders. We don't know exactly when the update was
// scheduled, but we can infer an approximate start time from the
// expiration time. First, find the earliest uncommitted expiration
// time in the tree, including work that is suspended. Then subtract
// the offset used to compute an async update's expiration time.
// This will cause high priority (interactive) work to expire
// earlier than necessary, but we can account for this by adjusting
// for the Just Noticeable Difference.
var earliestExpirationTime=findEarliestOutstandingPriorityLevel(root,renderExpirationTime);var earliestExpirationTimeMs=expirationTimeToMs(earliestExpirationTime);startTimeMs=earliestExpirationTimeMs-LOW_PRIORITY_EXPIRATION;}absoluteTimeoutMs=startTimeMs+earliestTimeoutMs;}// Mark the earliest timeout in the suspended fiber's ancestor path.
// After completing the root, we'll take the largest of all the
// suspended fiber's timeouts and use it to compute a timeout for the
// whole tree.
renderDidSuspend(root,absoluteTimeoutMs,renderExpirationTime);_workInProgress.effectTag|=ShouldCapture;_workInProgress.expirationTime=renderExpirationTime;return;}else if(enableSuspenseServerRenderer&&_workInProgress.tag===DehydratedSuspenseComponent){attachPingListener(root,renderExpirationTime,thenable);// Since we already have a current fiber, we can eagerly add a retry listener.
var retryCache=_workInProgress.memoizedState;if(retryCache===null){retryCache=_workInProgress.memoizedState=new PossiblyWeakSet();var _current=_workInProgress.alternate;!_current?invariant(false,'A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.'):void 0;_current.memoizedState=retryCache;}// Memoize using the boundary fiber to prevent redundant listeners.
if(!retryCache.has(thenable)){retryCache.add(thenable);var retry=retryTimedOutBoundary.bind(null,_workInProgress,thenable);if(enableSchedulerTracing){retry=tracing.unstable_wrap(retry);}thenable.then(retry,retry);}_workInProgress.effectTag|=ShouldCapture;_workInProgress.expirationTime=renderExpirationTime;return;}// This boundary already captured during this render. Continue to the next
// boundary.
_workInProgress=_workInProgress.return;}while(_workInProgress!==null);// No boundary was found. Fallthrough to error mode.
// TODO: Use invariant so the message is stripped in prod?
value=new Error((getComponentName(sourceFiber.type)||'A React component')+' suspended while rendering, but no fallback UI was specified.\n'+'\n'+'Add a <Suspense fallback=...> component higher in the tree to '+'provide a loading indicator or placeholder to display.'+getStackByFiberInDevAndProd(sourceFiber));}// We didn't find a boundary that could handle this type of exception. Start
// over and traverse parent path again, this time treating the exception
// as an error.
renderDidError();value=createCapturedValue(value,sourceFiber);var workInProgress=returnFiber;do{switch(workInProgress.tag){case HostRoot:{var _errorInfo=value;workInProgress.effectTag|=ShouldCapture;workInProgress.expirationTime=renderExpirationTime;var _update=createRootErrorUpdate(workInProgress,_errorInfo,renderExpirationTime);enqueueCapturedUpdate(workInProgress,_update);return;}case ClassComponent:// Capture and retry
var errorInfo=value;var ctor=workInProgress.type;var instance=workInProgress.stateNode;if((workInProgress.effectTag&DidCapture)===NoEffect&&(typeof ctor.getDerivedStateFromError==='function'||instance!==null&&typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance))){workInProgress.effectTag|=ShouldCapture;workInProgress.expirationTime=renderExpirationTime;// Schedule the error boundary to re-render using updated state
var _update2=createClassErrorUpdate(workInProgress,errorInfo,renderExpirationTime);enqueueCapturedUpdate(workInProgress,_update2);return;}break;default:break;}workInProgress=workInProgress.return;}while(workInProgress!==null);}function unwindWork(workInProgress,renderExpirationTime){switch(workInProgress.tag){case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}var effectTag=workInProgress.effectTag;if(effectTag&ShouldCapture){workInProgress.effectTag=effectTag&~ShouldCapture|DidCapture;return workInProgress;}return null;}case HostRoot:{popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);var _effectTag=workInProgress.effectTag;!((_effectTag&DidCapture)===NoEffect)?invariant(false,'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.'):void 0;workInProgress.effectTag=_effectTag&~ShouldCapture|DidCapture;return workInProgress;}case HostComponent:{// TODO: popHydrationState
popHostContext(workInProgress);return null;}case SuspenseComponent:{var _effectTag2=workInProgress.effectTag;if(_effectTag2&ShouldCapture){workInProgress.effectTag=_effectTag2&~ShouldCapture|DidCapture;// Captured a suspense effect. Re-render the boundary.
return workInProgress;}return null;}case DehydratedSuspenseComponent:{if(enableSuspenseServerRenderer){// TODO: popHydrationState
var _effectTag3=workInProgress.effectTag;if(_effectTag3&ShouldCapture){workInProgress.effectTag=_effectTag3&~ShouldCapture|DidCapture;// Captured a suspense effect. Re-render the boundary.
return workInProgress;}}return null;}case HostPortal:popHostContainer(workInProgress);return null;case ContextProvider:popProvider(workInProgress);return null;default:return null;}}function unwindInterruptedWork(interruptedWork){switch(interruptedWork.tag){case ClassComponent:{var childContextTypes=interruptedWork.type.childContextTypes;if(childContextTypes!==null&&childContextTypes!==undefined){popContext(interruptedWork);}break;}case HostRoot:{popHostContainer(interruptedWork);popTopLevelContextObject(interruptedWork);break;}case HostComponent:{popHostContext(interruptedWork);break;}case HostPortal:popHostContainer(interruptedWork);break;case ContextProvider:popProvider(interruptedWork);break;default:break;}}var ReactCurrentDispatcher=ReactSharedInternals.ReactCurrentDispatcher;var ReactCurrentOwner$2=ReactSharedInternals.ReactCurrentOwner;var didWarnAboutStateTransition=void 0;var didWarnSetStateChildContext=void 0;var warnAboutUpdateOnUnmounted=void 0;var warnAboutInvalidUpdates=void 0;if(enableSchedulerTracing){// Provide explicit error message when production+profiling bundle of e.g. react-dom
// is used with production (non-profiling) bundle of scheduler/tracing
!(tracing.__interactionsRef!=null&&tracing.__interactionsRef.current!=null)?invariant(false,'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling'):void 0;}{didWarnAboutStateTransition=false;didWarnSetStateChildContext=false;var didWarnStateUpdateForUnmountedComponent={};warnAboutUpdateOnUnmounted=function warnAboutUpdateOnUnmounted(fiber,isClass){// We show the whole stack but dedupe on the top component's name because
// the problematic code almost always lies inside that component.
var componentName=getComponentName(fiber.type)||'ReactComponent';if(didWarnStateUpdateForUnmountedComponent[componentName]){return;}warningWithoutStack$1(false,"Can't perform a React state update on an unmounted component. This "+'is a no-op, but it indicates a memory leak in your application. To '+'fix, cancel all subscriptions and asynchronous tasks in %s.%s',isClass?'the componentWillUnmount method':'a useEffect cleanup function',getStackByFiberInDevAndProd(fiber));didWarnStateUpdateForUnmountedComponent[componentName]=true;};warnAboutInvalidUpdates=function warnAboutInvalidUpdates(instance){switch(phase){case'getChildContext':if(didWarnSetStateChildContext){return;}warningWithoutStack$1(false,'setState(...): Cannot call setState() inside getChildContext()');didWarnSetStateChildContext=true;break;case'render':if(didWarnAboutStateTransition){return;}warningWithoutStack$1(false,'Cannot update during an existing state transition (such as within '+'`render`). Render methods should be a pure function of props and state.');didWarnAboutStateTransition=true;break;}};}// Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.
var lastUniqueAsyncExpiration=Sync-1;var isWorking=false;// The next work in progress fiber that we're currently working on.
var nextUnitOfWork=null;var nextRoot=null;// The time at which we're currently rendering work.
var nextRenderExpirationTime=NoWork;var nextLatestAbsoluteTimeoutMs=-1;var nextRenderDidError=false;// The next fiber with an effect that we're currently committing.
var nextEffect=null;var isCommitting$1=false;var rootWithPendingPassiveEffects=null;var passiveEffectCallbackHandle=null;var passiveEffectCallback=null;var legacyErrorBoundariesThatAlreadyFailed=null;// Used for performance tracking.
var interruptedBy=null;var stashedWorkInProgressProperties=void 0;var replayUnitOfWork=void 0;var mayReplayFailedUnitOfWork=void 0;var isReplayingFailedUnitOfWork=void 0;var originalReplayError=void 0;var rethrowOriginalError=void 0;if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){stashedWorkInProgressProperties=null;mayReplayFailedUnitOfWork=true;isReplayingFailedUnitOfWork=false;originalReplayError=null;replayUnitOfWork=function replayUnitOfWork(failedUnitOfWork,thrownValue,isYieldy){if(thrownValue!==null&&(typeof thrownValue==='undefined'?'undefined':_typeof(thrownValue))==='object'&&typeof thrownValue.then==='function'){// Don't replay promises. Treat everything else like an error.
// TODO: Need to figure out a different strategy if/when we add
// support for catching other types.
return;}// Restore the original state of the work-in-progress
if(stashedWorkInProgressProperties===null){// This should never happen. Don't throw because this code is DEV-only.
warningWithoutStack$1(false,'Could not replay rendering after an error. This is likely a bug in React. '+'Please file an issue.');return;}assignFiberPropertiesInDEV(failedUnitOfWork,stashedWorkInProgressProperties);switch(failedUnitOfWork.tag){case HostRoot:popHostContainer(failedUnitOfWork);popTopLevelContextObject(failedUnitOfWork);break;case HostComponent:popHostContext(failedUnitOfWork);break;case ClassComponent:{var Component=failedUnitOfWork.type;if(isContextProvider(Component)){popContext(failedUnitOfWork);}break;}case HostPortal:popHostContainer(failedUnitOfWork);break;case ContextProvider:popProvider(failedUnitOfWork);break;}// Replay the begin phase.
isReplayingFailedUnitOfWork=true;originalReplayError=thrownValue;invokeGuardedCallback(null,workLoop,null,isYieldy);isReplayingFailedUnitOfWork=false;originalReplayError=null;if(hasCaughtError()){var replayError=clearCaughtError();if(replayError!=null&&thrownValue!=null){try{// Reading the expando property is intentionally
// inside `try` because it might be a getter or Proxy.
if(replayError._suppressLogging){// Also suppress logging for the original error.
thrownValue._suppressLogging=true;}}catch(inner){// Ignore.
}}}else{// If the begin phase did not fail the second time, set this pointer
// back to the original value.
nextUnitOfWork=failedUnitOfWork;}};rethrowOriginalError=function rethrowOriginalError(){throw originalReplayError;};}function resetStack(){if(nextUnitOfWork!==null){var interruptedWork=nextUnitOfWork.return;while(interruptedWork!==null){unwindInterruptedWork(interruptedWork);interruptedWork=interruptedWork.return;}}{ReactStrictModeWarnings.discardPendingWarnings();checkThatStackIsEmpty();}nextRoot=null;nextRenderExpirationTime=NoWork;nextLatestAbsoluteTimeoutMs=-1;nextRenderDidError=false;nextUnitOfWork=null;}function commitAllHostEffects(){while(nextEffect!==null){{setCurrentFiber(nextEffect);}recordEffect();var effectTag=nextEffect.effectTag;if(effectTag&ContentReset){commitResetTextContent(nextEffect);}if(effectTag&Ref){var current$$1=nextEffect.alternate;if(current$$1!==null){commitDetachRef(current$$1);}}// The following switch statement is only concerned about placement,
// updates, and deletions. To avoid needing to add a case for every
// possible bitmap value, we remove the secondary effects from the
// effect tag and switch on that value.
var primaryEffectTag=effectTag&(Placement|Update|Deletion);switch(primaryEffectTag){case Placement:{commitPlacement(nextEffect);// Clear the "placement" from effect tag so that we know that this is inserted, before
// any life-cycles like componentDidMount gets called.
// TODO: findDOMNode doesn't rely on this any more but isMounted
// does and isMounted is deprecated anyway so we should be able
// to kill this.
nextEffect.effectTag&=~Placement;break;}case PlacementAndUpdate:{// Placement
commitPlacement(nextEffect);// Clear the "placement" from effect tag so that we know that this is inserted, before
// any life-cycles like componentDidMount gets called.
nextEffect.effectTag&=~Placement;// Update
var _current=nextEffect.alternate;commitWork(_current,nextEffect);break;}case Update:{var _current2=nextEffect.alternate;commitWork(_current2,nextEffect);break;}case Deletion:{commitDeletion(nextEffect);break;}}nextEffect=nextEffect.nextEffect;}{resetCurrentFiber();}}function commitBeforeMutationLifecycles(){while(nextEffect!==null){{setCurrentFiber(nextEffect);}var effectTag=nextEffect.effectTag;if(effectTag&Snapshot){recordEffect();var current$$1=nextEffect.alternate;commitBeforeMutationLifeCycles(current$$1,nextEffect);}nextEffect=nextEffect.nextEffect;}{resetCurrentFiber();}}function commitAllLifeCycles(finishedRoot,committedExpirationTime){{ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();ReactStrictModeWarnings.flushLegacyContextWarning();if(warnAboutDeprecatedLifecycles){ReactStrictModeWarnings.flushPendingDeprecationWarnings();}}while(nextEffect!==null){{setCurrentFiber(nextEffect);}var effectTag=nextEffect.effectTag;if(effectTag&(Update|Callback)){recordEffect();var current$$1=nextEffect.alternate;commitLifeCycles(finishedRoot,current$$1,nextEffect,committedExpirationTime);}if(effectTag&Ref){recordEffect();commitAttachRef(nextEffect);}if(effectTag&Passive){rootWithPendingPassiveEffects=finishedRoot;}nextEffect=nextEffect.nextEffect;}{resetCurrentFiber();}}function commitPassiveEffects(root,firstEffect){rootWithPendingPassiveEffects=null;passiveEffectCallbackHandle=null;passiveEffectCallback=null;// Set this to true to prevent re-entrancy
var previousIsRendering=isRendering;isRendering=true;var effect=firstEffect;do{{setCurrentFiber(effect);}if(effect.effectTag&Passive){var didError=false;var error=void 0;{invokeGuardedCallback(null,commitPassiveHookEffects,null,effect);if(hasCaughtError()){didError=true;error=clearCaughtError();}}if(didError){captureCommitPhaseError(effect,error);}}effect=effect.nextEffect;}while(effect!==null);{resetCurrentFiber();}isRendering=previousIsRendering;// Check if work was scheduled by one of the effects
var rootExpirationTime=root.expirationTime;if(rootExpirationTime!==NoWork){requestWork(root,rootExpirationTime);}// Flush any sync work that was scheduled by effects
if(!isBatchingUpdates&&!isRendering){performSyncWork();}}function isAlreadyFailedLegacyErrorBoundary(instance){return legacyErrorBoundariesThatAlreadyFailed!==null&&legacyErrorBoundariesThatAlreadyFailed.has(instance);}function markLegacyErrorBoundaryAsFailed(instance){if(legacyErrorBoundariesThatAlreadyFailed===null){legacyErrorBoundariesThatAlreadyFailed=new Set([instance]);}else{legacyErrorBoundariesThatAlreadyFailed.add(instance);}}function flushPassiveEffects(){if(passiveEffectCallbackHandle!==null){cancelPassiveEffects(passiveEffectCallbackHandle);}if(passiveEffectCallback!==null){// We call the scheduled callback instead of commitPassiveEffects directly
// to ensure tracing works correctly.
passiveEffectCallback();}}function commitRoot(root,finishedWork){isWorking=true;isCommitting$1=true;startCommitTimer();!(root.current!==finishedWork)?invariant(false,'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.'):void 0;var committedExpirationTime=root.pendingCommitExpirationTime;!(committedExpirationTime!==NoWork)?invariant(false,'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.'):void 0;root.pendingCommitExpirationTime=NoWork;// Update the pending priority levels to account for the work that we are
// about to commit. This needs to happen before calling the lifecycles, since
// they may schedule additional updates.
var updateExpirationTimeBeforeCommit=finishedWork.expirationTime;var childExpirationTimeBeforeCommit=finishedWork.childExpirationTime;var earliestRemainingTimeBeforeCommit=childExpirationTimeBeforeCommit>updateExpirationTimeBeforeCommit?childExpirationTimeBeforeCommit:updateExpirationTimeBeforeCommit;markCommittedPriorityLevels(root,earliestRemainingTimeBeforeCommit);var prevInteractions=null;if(enableSchedulerTracing){// Restore any pending interactions at this point,
// So that cascading work triggered during the render phase will be accounted for.
prevInteractions=tracing.__interactionsRef.current;tracing.__interactionsRef.current=root.memoizedInteractions;}// Reset this to null before calling lifecycles
ReactCurrentOwner$2.current=null;var firstEffect=void 0;if(finishedWork.effectTag>PerformedWork){// A fiber's effect list consists only of its children, not itself. So if
// the root has an effect, we need to add it to the end of the list. The
// resulting list is the set that would belong to the root's parent, if
// it had one; that is, all the effects in the tree including the root.
if(finishedWork.lastEffect!==null){finishedWork.lastEffect.nextEffect=finishedWork;firstEffect=finishedWork.firstEffect;}else{firstEffect=finishedWork;}}else{// There is no effect on the root.
firstEffect=finishedWork.firstEffect;}prepareForCommit(root.containerInfo);// Invoke instances of getSnapshotBeforeUpdate before mutation.
nextEffect=firstEffect;startCommitSnapshotEffectsTimer();while(nextEffect!==null){var didError=false;var error=void 0;{invokeGuardedCallback(null,commitBeforeMutationLifecycles,null);if(hasCaughtError()){didError=true;error=clearCaughtError();}}if(didError){!(nextEffect!==null)?invariant(false,'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'):void 0;captureCommitPhaseError(nextEffect,error);// Clean-up
if(nextEffect!==null){nextEffect=nextEffect.nextEffect;}}}stopCommitSnapshotEffectsTimer();if(enableProfilerTimer){// Mark the current commit time to be shared by all Profilers in this batch.
// This enables them to be grouped later.
recordCommitTime();}// Commit all the side-effects within a tree. We'll do this in two passes.
// The first pass performs all the host insertions, updates, deletions and
// ref unmounts.
nextEffect=firstEffect;startCommitHostEffectsTimer();while(nextEffect!==null){var _didError=false;var _error=void 0;{invokeGuardedCallback(null,commitAllHostEffects,null);if(hasCaughtError()){_didError=true;_error=clearCaughtError();}}if(_didError){!(nextEffect!==null)?invariant(false,'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'):void 0;captureCommitPhaseError(nextEffect,_error);// Clean-up
if(nextEffect!==null){nextEffect=nextEffect.nextEffect;}}}stopCommitHostEffectsTimer();resetAfterCommit(root.containerInfo);// The work-in-progress tree is now the current tree. This must come after
// the first pass of the commit phase, so that the previous tree is still
// current during componentWillUnmount, but before the second pass, so that
// the finished work is current during componentDidMount/Update.
root.current=finishedWork;// In the second pass we'll perform all life-cycles and ref callbacks.
// Life-cycles happen as a separate pass so that all placements, updates,
// and deletions in the entire tree have already been invoked.
// This pass also triggers any renderer-specific initial effects.
nextEffect=firstEffect;startCommitLifeCyclesTimer();while(nextEffect!==null){var _didError2=false;var _error2=void 0;{invokeGuardedCallback(null,commitAllLifeCycles,null,root,committedExpirationTime);if(hasCaughtError()){_didError2=true;_error2=clearCaughtError();}}if(_didError2){!(nextEffect!==null)?invariant(false,'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'):void 0;captureCommitPhaseError(nextEffect,_error2);if(nextEffect!==null){nextEffect=nextEffect.nextEffect;}}}if(firstEffect!==null&&rootWithPendingPassiveEffects!==null){// This commit included a passive effect. These do not need to fire until
// after the next paint. Schedule an callback to fire them in an async
// event. To ensure serial execution, the callback will be flushed early if
// we enter rootWithPendingPassiveEffects commit phase before then.
var callback=commitPassiveEffects.bind(null,root,firstEffect);if(enableSchedulerTracing){// TODO: Avoid this extra callback by mutating the tracing ref directly,
// like we do at the beginning of commitRoot. I've opted not to do that
// here because that code is still in flux.
callback=tracing.unstable_wrap(callback);}passiveEffectCallbackHandle=scheduler.unstable_runWithPriority(scheduler.unstable_NormalPriority,function(){return schedulePassiveEffects(callback);});passiveEffectCallback=callback;}isCommitting$1=false;isWorking=false;stopCommitLifeCyclesTimer();stopCommitTimer();onCommitRoot(finishedWork.stateNode);if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);}var updateExpirationTimeAfterCommit=finishedWork.expirationTime;var childExpirationTimeAfterCommit=finishedWork.childExpirationTime;var earliestRemainingTimeAfterCommit=childExpirationTimeAfterCommit>updateExpirationTimeAfterCommit?childExpirationTimeAfterCommit:updateExpirationTimeAfterCommit;if(earliestRemainingTimeAfterCommit===NoWork){// If there's no remaining work, we can clear the set of already failed
// error boundaries.
legacyErrorBoundariesThatAlreadyFailed=null;}onCommit(root,earliestRemainingTimeAfterCommit);if(enableSchedulerTracing){tracing.__interactionsRef.current=prevInteractions;var subscriber=void 0;try{subscriber=tracing.__subscriberRef.current;if(subscriber!==null&&root.memoizedInteractions.size>0){var threadID=computeThreadID(committedExpirationTime,root.interactionThreadID);subscriber.onWorkStopped(root.memoizedInteractions,threadID);}}catch(error){// It's not safe for commitRoot() to throw.
// Store the error for now and we'll re-throw in finishRendering().
if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}finally{// Clear completed interactions from the pending Map.
// Unless the render was suspended or cascading work was scheduled,
// In which case– leave pending interactions until the subsequent render.
var pendingInteractionMap=root.pendingInteractionMap;pendingInteractionMap.forEach(function(scheduledInteractions,scheduledExpirationTime){// Only decrement the pending interaction count if we're done.
// If there's still work at the current priority,
// That indicates that we are waiting for suspense data.
if(scheduledExpirationTime>earliestRemainingTimeAfterCommit){pendingInteractionMap.delete(scheduledExpirationTime);scheduledInteractions.forEach(function(interaction){interaction.__count--;if(subscriber!==null&&interaction.__count===0){try{subscriber.onInteractionScheduledWorkCompleted(interaction);}catch(error){// It's not safe for commitRoot() to throw.
// Store the error for now and we'll re-throw in finishRendering().
if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}}});}});}}}function resetChildExpirationTime(workInProgress,renderTime){if(renderTime!==Never&&workInProgress.childExpirationTime===Never){// The children of this component are hidden. Don't bubble their
// expiration times.
return;}var newChildExpirationTime=NoWork;// Bubble up the earliest expiration time.
if(enableProfilerTimer&&workInProgress.mode&ProfileMode){// We're in profiling mode.
// Let's use this same traversal to update the render durations.
var actualDuration=workInProgress.actualDuration;var treeBaseDuration=workInProgress.selfBaseDuration;// When a fiber is cloned, its actualDuration is reset to 0.
// This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
// When work is done, it should bubble to the parent's actualDuration.
// If the fiber has not been cloned though, (meaning no work was done),
// Then this value will reflect the amount of time spent working on a previous render.
// In that case it should not bubble.
// We determine whether it was cloned by comparing the child pointer.
var shouldBubbleActualDurations=workInProgress.alternate===null||workInProgress.child!==workInProgress.alternate.child;var child=workInProgress.child;while(child!==null){var childUpdateExpirationTime=child.expirationTime;var childChildExpirationTime=child.childExpirationTime;if(childUpdateExpirationTime>newChildExpirationTime){newChildExpirationTime=childUpdateExpirationTime;}if(childChildExpirationTime>newChildExpirationTime){newChildExpirationTime=childChildExpirationTime;}if(shouldBubbleActualDurations){actualDuration+=child.actualDuration;}treeBaseDuration+=child.treeBaseDuration;child=child.sibling;}workInProgress.actualDuration=actualDuration;workInProgress.treeBaseDuration=treeBaseDuration;}else{var _child=workInProgress.child;while(_child!==null){var _childUpdateExpirationTime=_child.expirationTime;var _childChildExpirationTime=_child.childExpirationTime;if(_childUpdateExpirationTime>newChildExpirationTime){newChildExpirationTime=_childUpdateExpirationTime;}if(_childChildExpirationTime>newChildExpirationTime){newChildExpirationTime=_childChildExpirationTime;}_child=_child.sibling;}}workInProgress.childExpirationTime=newChildExpirationTime;}function completeUnitOfWork(workInProgress){// Attempt to complete the current unit of work, then move to the
// next sibling. If there are no more siblings, return to the
// parent fiber.
while(true){// The current, flushed, state of this fiber is the alternate.
// Ideally nothing should rely on this, but relying on it here
// means that we don't need an additional field on the work in
// progress.
var current$$1=workInProgress.alternate;{setCurrentFiber(workInProgress);}var returnFiber=workInProgress.return;var siblingFiber=workInProgress.sibling;if((workInProgress.effectTag&Incomplete)===NoEffect){if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){// Don't replay if it fails during completion phase.
mayReplayFailedUnitOfWork=false;}// This fiber completed.
// Remember we're completing this unit so we can find a boundary if it fails.
nextUnitOfWork=workInProgress;if(enableProfilerTimer){if(workInProgress.mode&ProfileMode){startProfilerTimer(workInProgress);}nextUnitOfWork=completeWork(current$$1,workInProgress,nextRenderExpirationTime);if(workInProgress.mode&ProfileMode){// Update render duration assuming we didn't error.
stopProfilerTimerIfRunningAndRecordDelta(workInProgress,false);}}else{nextUnitOfWork=completeWork(current$$1,workInProgress,nextRenderExpirationTime);}if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){// We're out of completion phase so replaying is fine now.
mayReplayFailedUnitOfWork=true;}stopWorkTimer(workInProgress);resetChildExpirationTime(workInProgress,nextRenderExpirationTime);{resetCurrentFiber();}if(nextUnitOfWork!==null){// Completing this fiber spawned new work. Work on that next.
return nextUnitOfWork;}if(returnFiber!==null&&// Do not append effects to parents if a sibling failed to complete
(returnFiber.effectTag&Incomplete)===NoEffect){// Append all the effects of the subtree and this fiber onto the effect
// list of the parent. The completion order of the children affects the
// side-effect order.
if(returnFiber.firstEffect===null){returnFiber.firstEffect=workInProgress.firstEffect;}if(workInProgress.lastEffect!==null){if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=workInProgress.firstEffect;}returnFiber.lastEffect=workInProgress.lastEffect;}// If this fiber had side-effects, we append it AFTER the children's
// side-effects. We can perform certain side-effects earlier if
// needed, by doing multiple passes over the effect list. We don't want
// to schedule our own side-effect on our own list because if end up
// reusing children we'll schedule this effect onto itself since we're
// at the end.
var effectTag=workInProgress.effectTag;// Skip both NoWork and PerformedWork tags when creating the effect list.
// PerformedWork effect is read by React DevTools but shouldn't be committed.
if(effectTag>PerformedWork){if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=workInProgress;}else{returnFiber.firstEffect=workInProgress;}returnFiber.lastEffect=workInProgress;}}if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);}if(siblingFiber!==null){// If there is more work to do in this returnFiber, do that next.
return siblingFiber;}else if(returnFiber!==null){// If there's no more work in this returnFiber. Complete the returnFiber.
workInProgress=returnFiber;continue;}else{// We've reached the root.
return null;}}else{if(enableProfilerTimer&&workInProgress.mode&ProfileMode){// Record the render duration for the fiber that errored.
stopProfilerTimerIfRunningAndRecordDelta(workInProgress,false);// Include the time spent working on failed children before continuing.
var actualDuration=workInProgress.actualDuration;var child=workInProgress.child;while(child!==null){actualDuration+=child.actualDuration;child=child.sibling;}workInProgress.actualDuration=actualDuration;}// This fiber did not complete because something threw. Pop values off
// the stack without entering the complete phase. If this is a boundary,
// capture values if possible.
var next=unwindWork(workInProgress,nextRenderExpirationTime);// Because this fiber did not complete, don't reset its expiration time.
if(workInProgress.effectTag&DidCapture){// Restarting an error boundary
stopFailedWorkTimer(workInProgress);}else{stopWorkTimer(workInProgress);}{resetCurrentFiber();}if(next!==null){stopWorkTimer(workInProgress);if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);}// If completing this work spawned new work, do that next. We'll come
// back here again.
// Since we're restarting, remove anything that is not a host effect
// from the effect tag.
next.effectTag&=HostEffectMask;return next;}if(returnFiber!==null){// Mark the parent fiber as incomplete and clear its effect list.
returnFiber.firstEffect=returnFiber.lastEffect=null;returnFiber.effectTag|=Incomplete;}if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);}if(siblingFiber!==null){// If there is more work to do in this returnFiber, do that next.
return siblingFiber;}else if(returnFiber!==null){// If there's no more work in this returnFiber. Complete the returnFiber.
workInProgress=returnFiber;continue;}else{return null;}}}// Without this explicit null return Flow complains of invalid return type
// TODO Remove the above while(true) loop
// eslint-disable-next-line no-unreachable
return null;}function performUnitOfWork(workInProgress){// The current, flushed, state of this fiber is the alternate.
// Ideally nothing should rely on this, but relying on it here
// means that we don't need an additional field on the work in
// progress.
var current$$1=workInProgress.alternate;// See if beginning this work spawns more work.
startWorkTimer(workInProgress);{setCurrentFiber(workInProgress);}if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){stashedWorkInProgressProperties=assignFiberPropertiesInDEV(stashedWorkInProgressProperties,workInProgress);}var next=void 0;if(enableProfilerTimer){if(workInProgress.mode&ProfileMode){startProfilerTimer(workInProgress);}next=beginWork(current$$1,workInProgress,nextRenderExpirationTime);workInProgress.memoizedProps=workInProgress.pendingProps;if(workInProgress.mode&ProfileMode){// Record the render duration assuming we didn't bailout (or error).
stopProfilerTimerIfRunningAndRecordDelta(workInProgress,true);}}else{next=beginWork(current$$1,workInProgress,nextRenderExpirationTime);workInProgress.memoizedProps=workInProgress.pendingProps;}{resetCurrentFiber();if(isReplayingFailedUnitOfWork){// Currently replaying a failed unit of work. This should be unreachable,
// because the render phase is meant to be idempotent, and it should
// have thrown again. Since it didn't, rethrow the original error, so
// React's internal stack is not misaligned.
rethrowOriginalError();}}if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);}if(next===null){// If this doesn't spawn new work, complete the current work.
next=completeUnitOfWork(workInProgress);}ReactCurrentOwner$2.current=null;return next;}function workLoop(isYieldy){if(!isYieldy){// Flush work without yielding
while(nextUnitOfWork!==null){nextUnitOfWork=performUnitOfWork(nextUnitOfWork);}}else{// Flush asynchronous work until there's a higher priority event
while(nextUnitOfWork!==null&&!shouldYieldToRenderer()){nextUnitOfWork=performUnitOfWork(nextUnitOfWork);}}}function renderRoot(root,isYieldy){!!isWorking?invariant(false,'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'):void 0;flushPassiveEffects();isWorking=true;var previousDispatcher=ReactCurrentDispatcher.current;ReactCurrentDispatcher.current=ContextOnlyDispatcher;var expirationTime=root.nextExpirationTimeToWorkOn;// Check if we're starting from a fresh stack, or if we're resuming from
// previously yielded work.
if(expirationTime!==nextRenderExpirationTime||root!==nextRoot||nextUnitOfWork===null){// Reset the stack and start working from the root.
resetStack();nextRoot=root;nextRenderExpirationTime=expirationTime;nextUnitOfWork=createWorkInProgress(nextRoot.current,null,nextRenderExpirationTime);root.pendingCommitExpirationTime=NoWork;if(enableSchedulerTracing){// Determine which interactions this batch of work currently includes,
// So that we can accurately attribute time spent working on it,
var interactions=new Set();root.pendingInteractionMap.forEach(function(scheduledInteractions,scheduledExpirationTime){if(scheduledExpirationTime>=expirationTime){scheduledInteractions.forEach(function(interaction){return interactions.add(interaction);});}});// Store the current set of interactions on the FiberRoot for a few reasons:
// We can re-use it in hot functions like renderRoot() without having to recalculate it.
// We will also use it in commitWork() to pass to any Profiler onRender() hooks.
// This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
root.memoizedInteractions=interactions;if(interactions.size>0){var subscriber=tracing.__subscriberRef.current;if(subscriber!==null){var threadID=computeThreadID(expirationTime,root.interactionThreadID);try{subscriber.onWorkStarted(interactions,threadID);}catch(error){// Work thrown by an interaction tracing subscriber should be rethrown,
// But only once it's safe (to avoid leaving the scheduler in an invalid state).
// Store the error for now and we'll re-throw in finishRendering().
if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}}}}}var prevInteractions=null;if(enableSchedulerTracing){// We're about to start new traced work.
// Restore pending interactions so cascading work triggered during the render phase will be accounted for.
prevInteractions=tracing.__interactionsRef.current;tracing.__interactionsRef.current=root.memoizedInteractions;}var didFatal=false;startWorkLoopTimer(nextUnitOfWork);do{try{workLoop(isYieldy);}catch(thrownValue){resetContextDependences();resetHooks();// Reset in case completion throws.
// This is only used in DEV and when replaying is on.
var mayReplay=void 0;if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){mayReplay=mayReplayFailedUnitOfWork;mayReplayFailedUnitOfWork=true;}if(nextUnitOfWork===null){// This is a fatal error.
didFatal=true;onUncaughtError(thrownValue);}else{if(enableProfilerTimer&&nextUnitOfWork.mode&ProfileMode){// Record the time spent rendering before an error was thrown.
// This avoids inaccurate Profiler durations in the case of a suspended render.
stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork,true);}{// Reset global debug state
// We assume this is defined in DEV
resetCurrentlyProcessingQueue();}if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){if(mayReplay){var failedUnitOfWork=nextUnitOfWork;replayUnitOfWork(failedUnitOfWork,thrownValue,isYieldy);}}// TODO: we already know this isn't true in some cases.
// At least this shows a nicer error message until we figure out the cause.
// https://github.com/facebook/react/issues/12449#issuecomment-386727431
!(nextUnitOfWork!==null)?invariant(false,'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.'):void 0;var sourceFiber=nextUnitOfWork;var returnFiber=sourceFiber.return;if(returnFiber===null){// This is the root. The root could capture its own errors. However,
// we don't know if it errors before or after we pushed the host
// context. This information is needed to avoid a stack mismatch.
// Because we're not sure, treat this as a fatal error. We could track
// which phase it fails in, but doesn't seem worth it. At least
// for now.
didFatal=true;onUncaughtError(thrownValue);}else{throwException(root,returnFiber,sourceFiber,thrownValue,nextRenderExpirationTime);nextUnitOfWork=completeUnitOfWork(sourceFiber);continue;}}}break;}while(true);if(enableSchedulerTracing){// Traced work is done for now; restore the previous interactions.
tracing.__interactionsRef.current=prevInteractions;}// We're done performing work. Time to clean up.
isWorking=false;ReactCurrentDispatcher.current=previousDispatcher;resetContextDependences();resetHooks();// Yield back to main thread.
if(didFatal){var _didCompleteRoot=false;stopWorkLoopTimer(interruptedBy,_didCompleteRoot);interruptedBy=null;// There was a fatal error.
{resetStackAfterFatalErrorInDev();}// `nextRoot` points to the in-progress root. A non-null value indicates
// that we're in the middle of an async render. Set it to null to indicate
// there's no more work to be done in the current batch.
nextRoot=null;onFatal(root);return;}if(nextUnitOfWork!==null){// There's still remaining async work in this tree, but we ran out of time
// in the current frame. Yield back to the renderer. Unless we're
// interrupted by a higher priority update, we'll continue later from where
// we left off.
var _didCompleteRoot2=false;stopWorkLoopTimer(interruptedBy,_didCompleteRoot2);interruptedBy=null;onYield(root);return;}// We completed the whole tree.
var didCompleteRoot=true;stopWorkLoopTimer(interruptedBy,didCompleteRoot);var rootWorkInProgress=root.current.alternate;!(rootWorkInProgress!==null)?invariant(false,'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.'):void 0;// `nextRoot` points to the in-progress root. A non-null value indicates
// that we're in the middle of an async render. Set it to null to indicate
// there's no more work to be done in the current batch.
nextRoot=null;interruptedBy=null;if(nextRenderDidError){// There was an error
if(hasLowerPriorityWork(root,expirationTime)){// There's lower priority work. If so, it may have the effect of fixing
// the exception that was just thrown. Exit without committing. This is
// similar to a suspend, but without a timeout because we're not waiting
// for a promise to resolve. React will restart at the lower
// priority level.
markSuspendedPriorityLevel(root,expirationTime);var suspendedExpirationTime=expirationTime;var rootExpirationTime=root.expirationTime;onSuspend(root,rootWorkInProgress,suspendedExpirationTime,rootExpirationTime,-1// Indicates no timeout
);return;}else if(// There's no lower priority work, but we're rendering asynchronously.
// Synchronously attempt to render the same level one more time. This is
// similar to a suspend, but without a timeout because we're not waiting
// for a promise to resolve.
!root.didError&&isYieldy){root.didError=true;var _suspendedExpirationTime=root.nextExpirationTimeToWorkOn=expirationTime;var _rootExpirationTime=root.expirationTime=Sync;onSuspend(root,rootWorkInProgress,_suspendedExpirationTime,_rootExpirationTime,-1// Indicates no timeout
);return;}}if(isYieldy&&nextLatestAbsoluteTimeoutMs!==-1){// The tree was suspended.
var _suspendedExpirationTime2=expirationTime;markSuspendedPriorityLevel(root,_suspendedExpirationTime2);// Find the earliest uncommitted expiration time in the tree, including
// work that is suspended. The timeout threshold cannot be longer than
// the overall expiration.
var earliestExpirationTime=findEarliestOutstandingPriorityLevel(root,expirationTime);var earliestExpirationTimeMs=expirationTimeToMs(earliestExpirationTime);if(earliestExpirationTimeMs<nextLatestAbsoluteTimeoutMs){nextLatestAbsoluteTimeoutMs=earliestExpirationTimeMs;}// Subtract the current time from the absolute timeout to get the number
// of milliseconds until the timeout. In other words, convert an absolute
// timestamp to a relative time. This is the value that is passed
// to `setTimeout`.
var currentTimeMs=expirationTimeToMs(requestCurrentTime());var msUntilTimeout=nextLatestAbsoluteTimeoutMs-currentTimeMs;msUntilTimeout=msUntilTimeout<0?0:msUntilTimeout;// TODO: Account for the Just Noticeable Difference
var _rootExpirationTime2=root.expirationTime;onSuspend(root,rootWorkInProgress,_suspendedExpirationTime2,_rootExpirationTime2,msUntilTimeout);return;}// Ready to commit.
onComplete(root,rootWorkInProgress,expirationTime);}function captureCommitPhaseError(sourceFiber,value){var expirationTime=Sync;var fiber=sourceFiber.return;while(fiber!==null){switch(fiber.tag){case ClassComponent:var ctor=fiber.type;var instance=fiber.stateNode;if(typeof ctor.getDerivedStateFromError==='function'||typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance)){var errorInfo=createCapturedValue(value,sourceFiber);var update=createClassErrorUpdate(fiber,errorInfo,expirationTime);enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);return;}break;case HostRoot:{var _errorInfo=createCapturedValue(value,sourceFiber);var _update=createRootErrorUpdate(fiber,_errorInfo,expirationTime);enqueueUpdate(fiber,_update);scheduleWork(fiber,expirationTime);return;}}fiber=fiber.return;}if(sourceFiber.tag===HostRoot){// Error was thrown at the root. There is no parent, so the root
// itself should capture it.
var rootFiber=sourceFiber;var _errorInfo2=createCapturedValue(value,rootFiber);var _update2=createRootErrorUpdate(rootFiber,_errorInfo2,expirationTime);enqueueUpdate(rootFiber,_update2);scheduleWork(rootFiber,expirationTime);}}function computeThreadID(expirationTime,interactionThreadID){// Interaction threads are unique per root and expiration time.
return expirationTime*1000+interactionThreadID;}// Creates a unique async expiration time.
function computeUniqueAsyncExpiration(){var currentTime=requestCurrentTime();var result=computeAsyncExpiration(currentTime);if(result>=lastUniqueAsyncExpiration){// Since we assume the current time monotonically increases, we only hit
// this branch when computeUniqueAsyncExpiration is fired multiple times
// within a 200ms window (or whatever the async bucket size is).
result=lastUniqueAsyncExpiration-1;}lastUniqueAsyncExpiration=result;return lastUniqueAsyncExpiration;}function computeExpirationForFiber(currentTime,fiber){var priorityLevel=scheduler.unstable_getCurrentPriorityLevel();var expirationTime=void 0;if((fiber.mode&ConcurrentMode)===NoContext){// Outside of concurrent mode, updates are always synchronous.
expirationTime=Sync;}else if(isWorking&&!isCommitting$1){// During render phase, updates expire during as the current render.
expirationTime=nextRenderExpirationTime;}else{switch(priorityLevel){case scheduler.unstable_ImmediatePriority:expirationTime=Sync;break;case scheduler.unstable_UserBlockingPriority:expirationTime=computeInteractiveExpiration(currentTime);break;case scheduler.unstable_NormalPriority:// This is a normal, concurrent update
expirationTime=computeAsyncExpiration(currentTime);break;case scheduler.unstable_LowPriority:case scheduler.unstable_IdlePriority:expirationTime=Never;break;default:invariant(false,'Unknown priority level. This error is likely caused by a bug in React. Please file an issue.');}// If we're in the middle of rendering a tree, do not update at the same
// expiration time that is already rendering.
if(nextRoot!==null&&expirationTime===nextRenderExpirationTime){expirationTime-=1;}}// Keep track of the lowest pending interactive expiration time. This
// allows us to synchronously flush all interactive updates
// when needed.
// TODO: Move this to renderer?
if(priorityLevel===scheduler.unstable_UserBlockingPriority&&(lowestPriorityPendingInteractiveExpirationTime===NoWork||expirationTime<lowestPriorityPendingInteractiveExpirationTime)){lowestPriorityPendingInteractiveExpirationTime=expirationTime;}return expirationTime;}function renderDidSuspend(root,absoluteTimeoutMs,suspendedTime){// Schedule the timeout.
if(absoluteTimeoutMs>=0&&nextLatestAbsoluteTimeoutMs<absoluteTimeoutMs){nextLatestAbsoluteTimeoutMs=absoluteTimeoutMs;}}function renderDidError(){nextRenderDidError=true;}function pingSuspendedRoot(root,thenable,pingTime){// A promise that previously suspended React from committing has resolved.
// If React is still suspended, try again at the previous level (pingTime).
var pingCache=root.pingCache;if(pingCache!==null){// The thenable resolved, so we no longer need to memoize, because it will
// never be thrown again.
pingCache.delete(thenable);}if(nextRoot!==null&&nextRenderExpirationTime===pingTime){// Received a ping at the same priority level at which we're currently
// rendering. Restart from the root.
nextRoot=null;}else{// Confirm that the root is still suspended at this level. Otherwise exit.
if(isPriorityLevelSuspended(root,pingTime)){// Ping at the original level
markPingedPriorityLevel(root,pingTime);var rootExpirationTime=root.expirationTime;if(rootExpirationTime!==NoWork){requestWork(root,rootExpirationTime);}}}}function retryTimedOutBoundary(boundaryFiber,thenable){// The boundary fiber (a Suspense component) previously timed out and was
// rendered in its fallback state. One of the promises that suspended it has
// resolved, which means at least part of the tree was likely unblocked. Try
var retryCache=void 0;if(enableSuspenseServerRenderer){switch(boundaryFiber.tag){case SuspenseComponent:retryCache=boundaryFiber.stateNode;break;case DehydratedSuspenseComponent:retryCache=boundaryFiber.memoizedState;break;default:invariant(false,'Pinged unknown suspense boundary type. This is probably a bug in React.');}}else{retryCache=boundaryFiber.stateNode;}if(retryCache!==null){// The thenable resolved, so we no longer need to memoize, because it will
// never be thrown again.
retryCache.delete(thenable);}var currentTime=requestCurrentTime();var retryTime=computeExpirationForFiber(currentTime,boundaryFiber);var root=scheduleWorkToRoot(boundaryFiber,retryTime);if(root!==null){markPendingPriorityLevel(root,retryTime);var rootExpirationTime=root.expirationTime;if(rootExpirationTime!==NoWork){requestWork(root,rootExpirationTime);}}}function scheduleWorkToRoot(fiber,expirationTime){recordScheduleUpdate();{if(fiber.tag===ClassComponent){var instance=fiber.stateNode;warnAboutInvalidUpdates(instance);}}// Update the source fiber's expiration time
if(fiber.expirationTime<expirationTime){fiber.expirationTime=expirationTime;}var alternate=fiber.alternate;if(alternate!==null&&alternate.expirationTime<expirationTime){alternate.expirationTime=expirationTime;}// Walk the parent path to the root and update the child expiration time.
var node=fiber.return;var root=null;if(node===null&&fiber.tag===HostRoot){root=fiber.stateNode;}else{while(node!==null){alternate=node.alternate;if(node.childExpirationTime<expirationTime){node.childExpirationTime=expirationTime;if(alternate!==null&&alternate.childExpirationTime<expirationTime){alternate.childExpirationTime=expirationTime;}}else if(alternate!==null&&alternate.childExpirationTime<expirationTime){alternate.childExpirationTime=expirationTime;}if(node.return===null&&node.tag===HostRoot){root=node.stateNode;break;}node=node.return;}}if(enableSchedulerTracing){if(root!==null){var interactions=tracing.__interactionsRef.current;if(interactions.size>0){var pendingInteractionMap=root.pendingInteractionMap;var pendingInteractions=pendingInteractionMap.get(expirationTime);if(pendingInteractions!=null){interactions.forEach(function(interaction){if(!pendingInteractions.has(interaction)){// Update the pending async work count for previously unscheduled interaction.
interaction.__count++;}pendingInteractions.add(interaction);});}else{pendingInteractionMap.set(expirationTime,new Set(interactions));// Update the pending async work count for the current interactions.
interactions.forEach(function(interaction){interaction.__count++;});}var subscriber=tracing.__subscriberRef.current;if(subscriber!==null){var threadID=computeThreadID(expirationTime,root.interactionThreadID);subscriber.onWorkScheduled(interactions,threadID);}}}}return root;}function warnIfNotCurrentlyBatchingInDev(fiber){{if(isRendering===false&&isBatchingUpdates===false){warningWithoutStack$1(false,'An update to %s inside a test was not wrapped in act(...).\n\n'+'When testing, code that causes React state updates should be wrapped into act(...):\n\n'+'act(() => {\n'+'  /* fire events that update state */\n'+'});\n'+'/* assert on the output */\n\n'+"This ensures that you're testing the behavior the user would see in the browser."+' Learn more at https://fb.me/react-wrap-tests-with-act'+'%s',getComponentName(fiber.type),getStackByFiberInDevAndProd(fiber));}}}function scheduleWork(fiber,expirationTime){var root=scheduleWorkToRoot(fiber,expirationTime);if(root===null){{switch(fiber.tag){case ClassComponent:warnAboutUpdateOnUnmounted(fiber,true);break;case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:warnAboutUpdateOnUnmounted(fiber,false);break;}}return;}if(!isWorking&&nextRenderExpirationTime!==NoWork&&expirationTime>nextRenderExpirationTime){// This is an interruption. (Used for performance tracking.)
interruptedBy=fiber;resetStack();}markPendingPriorityLevel(root,expirationTime);if(// If we're in the render phase, we don't need to schedule this root
// for an update, because we'll do it before we exit...
!isWorking||isCommitting$1||// ...unless this is a different root than the one we're rendering.
nextRoot!==root){var rootExpirationTime=root.expirationTime;requestWork(root,rootExpirationTime);}if(nestedUpdateCount>NESTED_UPDATE_LIMIT){// Reset this back to zero so subsequent updates don't throw.
nestedUpdateCount=0;invariant(false,'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');}}function syncUpdates(fn,a,b,c,d){return scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority,function(){return fn(a,b,c,d);});}// TODO: Everything below this is written as if it has been lifted to the
// renderers. I'll do this in a follow-up.
// Linked-list of roots
var firstScheduledRoot=null;var lastScheduledRoot=null;var callbackExpirationTime=NoWork;var callbackID=void 0;var isRendering=false;var nextFlushedRoot=null;var nextFlushedExpirationTime=NoWork;var lowestPriorityPendingInteractiveExpirationTime=NoWork;var hasUnhandledError=false;var unhandledError=null;var isBatchingUpdates=false;var isUnbatchingUpdates=false;var completedBatches=null;var originalStartTimeMs=scheduler.unstable_now();var currentRendererTime=msToExpirationTime(originalStartTimeMs);var currentSchedulerTime=currentRendererTime;// Use these to prevent an infinite loop of nested updates
var NESTED_UPDATE_LIMIT=50;var nestedUpdateCount=0;var lastCommittedRootDuringThisBatch=null;function recomputeCurrentRendererTime(){var currentTimeMs=scheduler.unstable_now()-originalStartTimeMs;currentRendererTime=msToExpirationTime(currentTimeMs);}function scheduleCallbackWithExpirationTime(root,expirationTime){if(callbackExpirationTime!==NoWork){// A callback is already scheduled. Check its expiration time (timeout).
if(expirationTime<callbackExpirationTime){// Existing callback has sufficient timeout. Exit.
return;}else{if(callbackID!==null){// Existing callback has insufficient timeout. Cancel and schedule a
// new one.
scheduler.unstable_cancelCallback(callbackID);}}// The request callback timer is already running. Don't start a new one.
}else{startRequestCallbackTimer();}callbackExpirationTime=expirationTime;var currentMs=scheduler.unstable_now()-originalStartTimeMs;var expirationTimeMs=expirationTimeToMs(expirationTime);var timeout=expirationTimeMs-currentMs;callbackID=scheduler.unstable_scheduleCallback(performAsyncWork,{timeout:timeout});}// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
// onYield is called upon exiting. We use these in lieu of returning a tuple.
// I've also chosen not to inline them into renderRoot because these will
// eventually be lifted into the renderer.
function onFatal(root){root.finishedWork=null;}function onComplete(root,finishedWork,expirationTime){root.pendingCommitExpirationTime=expirationTime;root.finishedWork=finishedWork;}function onSuspend(root,finishedWork,suspendedExpirationTime,rootExpirationTime,msUntilTimeout){root.expirationTime=rootExpirationTime;if(msUntilTimeout===0&&!shouldYieldToRenderer()){// Don't wait an additional tick. Commit the tree immediately.
root.pendingCommitExpirationTime=suspendedExpirationTime;root.finishedWork=finishedWork;}else if(msUntilTimeout>0){// Wait `msUntilTimeout` milliseconds before committing.
root.timeoutHandle=scheduleTimeout(onTimeout.bind(null,root,finishedWork,suspendedExpirationTime),msUntilTimeout);}}function onYield(root){root.finishedWork=null;}function onTimeout(root,finishedWork,suspendedExpirationTime){// The root timed out. Commit it.
root.pendingCommitExpirationTime=suspendedExpirationTime;root.finishedWork=finishedWork;// Read the current time before entering the commit phase. We can be
// certain this won't cause tearing related to batching of event updates
// because we're at the top of a timer event.
recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;flushRoot(root,suspendedExpirationTime);}function onCommit(root,expirationTime){root.expirationTime=expirationTime;root.finishedWork=null;}function requestCurrentTime(){// requestCurrentTime is called by the scheduler to compute an expiration
// time.
//
// Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.
//
// We keep track of two separate times: the current "renderer" time and the
// current "scheduler" time. The renderer time can be updated whenever; it
// only exists to minimize the calls performance.now.
//
// But the scheduler time can only be updated if there's no pending work, or
// if we know for certain that we're not in the middle of an event.
if(isRendering){// We're already rendering. Return the most recently read time.
return currentSchedulerTime;}// Check if there's pending work.
findHighestPriorityRoot();if(nextFlushedExpirationTime===NoWork||nextFlushedExpirationTime===Never){// If there's no pending work, or if the pending work is offscreen, we can
// read the current time without risk of tearing.
recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;return currentSchedulerTime;}// There's already pending work. We might be in the middle of a browser
// event. If we were to read the current time, it could cause multiple updates
// within the same event to receive different expiration times, leading to
// tearing. Return the last read time. During the next idle callback, the
// time will be updated.
return currentSchedulerTime;}// requestWork is called by the scheduler whenever a root receives an update.
// It's up to the renderer to call renderRoot at some point in the future.
function requestWork(root,expirationTime){addRootToSchedule(root,expirationTime);if(isRendering){// Prevent reentrancy. Remaining work will be scheduled at the end of
// the currently rendering batch.
return;}if(isBatchingUpdates){// Flush work at the end of the batch.
if(isUnbatchingUpdates){// ...unless we're inside unbatchedUpdates, in which case we should
// flush it now.
nextFlushedRoot=root;nextFlushedExpirationTime=Sync;performWorkOnRoot(root,Sync,false);}return;}// TODO: Get rid of Sync and use current time?
if(expirationTime===Sync){performSyncWork();}else{scheduleCallbackWithExpirationTime(root,expirationTime);}}function addRootToSchedule(root,expirationTime){// Add the root to the schedule.
// Check if this root is already part of the schedule.
if(root.nextScheduledRoot===null){// This root is not already scheduled. Add it.
root.expirationTime=expirationTime;if(lastScheduledRoot===null){firstScheduledRoot=lastScheduledRoot=root;root.nextScheduledRoot=root;}else{lastScheduledRoot.nextScheduledRoot=root;lastScheduledRoot=root;lastScheduledRoot.nextScheduledRoot=firstScheduledRoot;}}else{// This root is already scheduled, but its priority may have increased.
var remainingExpirationTime=root.expirationTime;if(expirationTime>remainingExpirationTime){// Update the priority.
root.expirationTime=expirationTime;}}}function findHighestPriorityRoot(){var highestPriorityWork=NoWork;var highestPriorityRoot=null;if(lastScheduledRoot!==null){var previousScheduledRoot=lastScheduledRoot;var root=firstScheduledRoot;while(root!==null){var remainingExpirationTime=root.expirationTime;if(remainingExpirationTime===NoWork){// This root no longer has work. Remove it from the scheduler.
// TODO: This check is redudant, but Flow is confused by the branch
// below where we set lastScheduledRoot to null, even though we break
// from the loop right after.
!(previousScheduledRoot!==null&&lastScheduledRoot!==null)?invariant(false,'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.'):void 0;if(root===root.nextScheduledRoot){// This is the only root in the list.
root.nextScheduledRoot=null;firstScheduledRoot=lastScheduledRoot=null;break;}else if(root===firstScheduledRoot){// This is the first root in the list.
var next=root.nextScheduledRoot;firstScheduledRoot=next;lastScheduledRoot.nextScheduledRoot=next;root.nextScheduledRoot=null;}else if(root===lastScheduledRoot){// This is the last root in the list.
lastScheduledRoot=previousScheduledRoot;lastScheduledRoot.nextScheduledRoot=firstScheduledRoot;root.nextScheduledRoot=null;break;}else{previousScheduledRoot.nextScheduledRoot=root.nextScheduledRoot;root.nextScheduledRoot=null;}root=previousScheduledRoot.nextScheduledRoot;}else{if(remainingExpirationTime>highestPriorityWork){// Update the priority, if it's higher
highestPriorityWork=remainingExpirationTime;highestPriorityRoot=root;}if(root===lastScheduledRoot){break;}if(highestPriorityWork===Sync){// Sync is highest priority by definition so
// we can stop searching.
break;}previousScheduledRoot=root;root=root.nextScheduledRoot;}}}nextFlushedRoot=highestPriorityRoot;nextFlushedExpirationTime=highestPriorityWork;}// TODO: This wrapper exists because many of the older tests (the ones that use
// flushDeferredPri) rely on the number of times `shouldYield` is called. We
// should get rid of it.
var didYield=false;function shouldYieldToRenderer(){if(didYield){return true;}if(scheduler.unstable_shouldYield()){didYield=true;return true;}return false;}function performAsyncWork(){try{if(!shouldYieldToRenderer()){// The callback timed out. That means at least one update has expired.
// Iterate through the root schedule. If they contain expired work, set
// the next render expiration time to the current time. This has the effect
// of flushing all expired work in a single batch, instead of flushing each
// level one at a time.
if(firstScheduledRoot!==null){recomputeCurrentRendererTime();var root=firstScheduledRoot;do{didExpireAtExpirationTime(root,currentRendererTime);// The root schedule is circular, so this is never null.
root=root.nextScheduledRoot;}while(root!==firstScheduledRoot);}}performWork(NoWork,true);}finally{didYield=false;}}function performSyncWork(){performWork(Sync,false);}function performWork(minExpirationTime,isYieldy){// Keep working on roots until there's no more work, or until there's a higher
// priority event.
findHighestPriorityRoot();if(isYieldy){recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;if(enableUserTimingAPI){var didExpire=nextFlushedExpirationTime>currentRendererTime;var timeout=expirationTimeToMs(nextFlushedExpirationTime);stopRequestCallbackTimer(didExpire,timeout);}while(nextFlushedRoot!==null&&nextFlushedExpirationTime!==NoWork&&minExpirationTime<=nextFlushedExpirationTime&&!(didYield&&currentRendererTime>nextFlushedExpirationTime)){performWorkOnRoot(nextFlushedRoot,nextFlushedExpirationTime,currentRendererTime>nextFlushedExpirationTime);findHighestPriorityRoot();recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;}}else{while(nextFlushedRoot!==null&&nextFlushedExpirationTime!==NoWork&&minExpirationTime<=nextFlushedExpirationTime){performWorkOnRoot(nextFlushedRoot,nextFlushedExpirationTime,false);findHighestPriorityRoot();}}// We're done flushing work. Either we ran out of time in this callback,
// or there's no more work left with sufficient priority.
// If we're inside a callback, set this to false since we just completed it.
if(isYieldy){callbackExpirationTime=NoWork;callbackID=null;}// If there's work left over, schedule a new callback.
if(nextFlushedExpirationTime!==NoWork){scheduleCallbackWithExpirationTime(nextFlushedRoot,nextFlushedExpirationTime);}// Clean-up.
finishRendering();}function flushRoot(root,expirationTime){!!isRendering?invariant(false,'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.'):void 0;// Perform work on root as if the given expiration time is the current time.
// This has the effect of synchronously flushing all work up to and
// including the given time.
nextFlushedRoot=root;nextFlushedExpirationTime=expirationTime;performWorkOnRoot(root,expirationTime,false);// Flush any sync work that was scheduled by lifecycles
performSyncWork();}function finishRendering(){nestedUpdateCount=0;lastCommittedRootDuringThisBatch=null;if(completedBatches!==null){var batches=completedBatches;completedBatches=null;for(var i=0;i<batches.length;i++){var batch=batches[i];try{batch._onComplete();}catch(error){if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}}}if(hasUnhandledError){var error=unhandledError;unhandledError=null;hasUnhandledError=false;throw error;}}function performWorkOnRoot(root,expirationTime,isYieldy){!!isRendering?invariant(false,'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'):void 0;isRendering=true;// Check if this is async work or sync/expired work.
if(!isYieldy){// Flush work without yielding.
// TODO: Non-yieldy work does not necessarily imply expired work. A renderer
// may want to perform some work without yielding, but also without
// requiring the root to complete (by triggering placeholders).
var finishedWork=root.finishedWork;if(finishedWork!==null){// This root is already complete. We can commit it.
completeRoot(root,finishedWork,expirationTime);}else{root.finishedWork=null;// If this root previously suspended, clear its existing timeout, since
// we're about to try rendering again.
var timeoutHandle=root.timeoutHandle;if(timeoutHandle!==noTimeout){root.timeoutHandle=noTimeout;// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
cancelTimeout(timeoutHandle);}renderRoot(root,isYieldy);finishedWork=root.finishedWork;if(finishedWork!==null){// We've completed the root. Commit it.
completeRoot(root,finishedWork,expirationTime);}}}else{// Flush async work.
var _finishedWork=root.finishedWork;if(_finishedWork!==null){// This root is already complete. We can commit it.
completeRoot(root,_finishedWork,expirationTime);}else{root.finishedWork=null;// If this root previously suspended, clear its existing timeout, since
// we're about to try rendering again.
var _timeoutHandle=root.timeoutHandle;if(_timeoutHandle!==noTimeout){root.timeoutHandle=noTimeout;// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
cancelTimeout(_timeoutHandle);}renderRoot(root,isYieldy);_finishedWork=root.finishedWork;if(_finishedWork!==null){// We've completed the root. Check the if we should yield one more time
// before committing.
if(!shouldYieldToRenderer()){// Still time left. Commit the root.
completeRoot(root,_finishedWork,expirationTime);}else{// There's no time left. Mark this root as complete. We'll come
// back and commit it later.
root.finishedWork=_finishedWork;}}}}isRendering=false;}function completeRoot(root,finishedWork,expirationTime){// Check if there's a batch that matches this expiration time.
var firstBatch=root.firstBatch;if(firstBatch!==null&&firstBatch._expirationTime>=expirationTime){if(completedBatches===null){completedBatches=[firstBatch];}else{completedBatches.push(firstBatch);}if(firstBatch._defer){// This root is blocked from committing by a batch. Unschedule it until
// we receive another update.
root.finishedWork=finishedWork;root.expirationTime=NoWork;return;}}// Commit the root.
root.finishedWork=null;// Check if this is a nested update (a sync update scheduled during the
// commit phase).
if(root===lastCommittedRootDuringThisBatch){// If the next root is the same as the previous root, this is a nested
// update. To prevent an infinite loop, increment the nested update count.
nestedUpdateCount++;}else{// Reset whenever we switch roots.
lastCommittedRootDuringThisBatch=root;nestedUpdateCount=0;}scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority,function(){commitRoot(root,finishedWork);});}function onUncaughtError(error){!(nextFlushedRoot!==null)?invariant(false,'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.'):void 0;// Unschedule this root so we don't work on it again until there's
// another update.
nextFlushedRoot.expirationTime=NoWork;if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function batchedUpdates$1(fn,a){var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{return fn(a);}finally{isBatchingUpdates=previousIsBatchingUpdates;if(!isBatchingUpdates&&!isRendering){performSyncWork();}}}// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function unbatchedUpdates(fn,a){if(isBatchingUpdates&&!isUnbatchingUpdates){isUnbatchingUpdates=true;try{return fn(a);}finally{isUnbatchingUpdates=false;}}return fn(a);}// TODO: Batching should be implemented at the renderer level, not within
// the reconciler.
function flushSync(fn,a){!!isRendering?invariant(false,'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.'):void 0;var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{return syncUpdates(fn,a);}finally{isBatchingUpdates=previousIsBatchingUpdates;performSyncWork();}}function interactiveUpdates$1(fn,a,b){// If there are any pending interactive updates, synchronously flush them.
// This needs to happen before we read any handlers, because the effect of
// the previous event may influence which handlers are called during
// this event.
if(!isBatchingUpdates&&!isRendering&&lowestPriorityPendingInteractiveExpirationTime!==NoWork){// Synchronously flush pending interactive updates.
performWork(lowestPriorityPendingInteractiveExpirationTime,false);lowestPriorityPendingInteractiveExpirationTime=NoWork;}var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{return scheduler.unstable_runWithPriority(scheduler.unstable_UserBlockingPriority,function(){return fn(a,b);});}finally{isBatchingUpdates=previousIsBatchingUpdates;if(!isBatchingUpdates&&!isRendering){performSyncWork();}}}function flushInteractiveUpdates$1(){if(!isRendering&&lowestPriorityPendingInteractiveExpirationTime!==NoWork){// Synchronously flush pending interactive updates.
performWork(lowestPriorityPendingInteractiveExpirationTime,false);lowestPriorityPendingInteractiveExpirationTime=NoWork;}}function flushControlled(fn){var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{syncUpdates(fn);}finally{isBatchingUpdates=previousIsBatchingUpdates;if(!isBatchingUpdates&&!isRendering){performSyncWork();}}}// 0 is PROD, 1 is DEV.
// Might add PROFILE later.
var didWarnAboutNestedUpdates=void 0;var didWarnAboutFindNodeInStrictMode=void 0;{didWarnAboutNestedUpdates=false;didWarnAboutFindNodeInStrictMode={};}function getContextForSubtree(parentComponent){if(!parentComponent){return emptyContextObject;}var fiber=get(parentComponent);var parentContext=findCurrentUnmaskedContext(fiber);if(fiber.tag===ClassComponent){var Component=fiber.type;if(isContextProvider(Component)){return processChildContext(fiber,Component,parentContext);}}return parentContext;}function scheduleRootUpdate(current$$1,element,expirationTime,callback){{if(phase==='render'&&current!==null&&!didWarnAboutNestedUpdates){didWarnAboutNestedUpdates=true;warningWithoutStack$1(false,'Render methods should be a pure function of props and state; '+'triggering nested component updates from render is not allowed. '+'If necessary, trigger nested updates in componentDidUpdate.\n\n'+'Check the render method of %s.',getComponentName(current.type)||'Unknown');}}var update=createUpdate(expirationTime);// Caution: React DevTools currently depends on this property
// being called "element".
update.payload={element:element};callback=callback===undefined?null:callback;if(callback!==null){!(typeof callback==='function')?warningWithoutStack$1(false,'render(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callback):void 0;update.callback=callback;}flushPassiveEffects();enqueueUpdate(current$$1,update);scheduleWork(current$$1,expirationTime);return expirationTime;}function updateContainerAtExpirationTime(element,container,parentComponent,expirationTime,callback){// TODO: If this is a nested container, this won't be the root.
var current$$1=container.current;{if(ReactFiberInstrumentation_1.debugTool){if(current$$1.alternate===null){ReactFiberInstrumentation_1.debugTool.onMountContainer(container);}else if(element===null){ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);}else{ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);}}}var context=getContextForSubtree(parentComponent);if(container.context===null){container.context=context;}else{container.pendingContext=context;}return scheduleRootUpdate(current$$1,element,expirationTime,callback);}function findHostInstance(component){var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){invariant(false,'Unable to find node on an unmounted component.');}else{invariant(false,'Argument appears to not be a ReactComponent. Keys: %s',Object.keys(component));}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}function findHostInstanceWithWarning(component,methodName){{var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){invariant(false,'Unable to find node on an unmounted component.');}else{invariant(false,'Argument appears to not be a ReactComponent. Keys: %s',Object.keys(component));}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}if(hostFiber.mode&StrictMode){var componentName=getComponentName(fiber.type)||'Component';if(!didWarnAboutFindNodeInStrictMode[componentName]){didWarnAboutFindNodeInStrictMode[componentName]=true;if(fiber.mode&StrictMode){warningWithoutStack$1(false,'%s is deprecated in StrictMode. '+'%s was passed an instance of %s which is inside StrictMode. '+'Instead, add a ref directly to the element you want to reference.'+'\n%s'+'\n\nLearn more about using refs safely here:'+'\nhttps://fb.me/react-strict-mode-find-node',methodName,methodName,componentName,getStackByFiberInDevAndProd(hostFiber));}else{warningWithoutStack$1(false,'%s is deprecated in StrictMode. '+'%s was passed an instance of %s which renders StrictMode children. '+'Instead, add a ref directly to the element you want to reference.'+'\n%s'+'\n\nLearn more about using refs safely here:'+'\nhttps://fb.me/react-strict-mode-find-node',methodName,methodName,componentName,getStackByFiberInDevAndProd(hostFiber));}}}return hostFiber.stateNode;}return findHostInstance(component);}function createContainer(containerInfo,isConcurrent,hydrate){return createFiberRoot(containerInfo,isConcurrent,hydrate);}function updateContainer(element,container,parentComponent,callback){var current$$1=container.current;var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,current$$1);return updateContainerAtExpirationTime(element,container,parentComponent,expirationTime,callback);}function getPublicRootInstance(container){var containerFiber=container.current;if(!containerFiber.child){return null;}switch(containerFiber.child.tag){case HostComponent:return getPublicInstance(containerFiber.child.stateNode);default:return containerFiber.child.stateNode;}}function findHostInstanceWithNoPortals(fiber){var hostFiber=findCurrentHostFiberWithNoPortals(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}var overrideProps=null;{var copyWithSetImpl=function copyWithSetImpl(obj,path,idx,value){if(idx>=path.length){return value;}var key=path[idx];var updated=Array.isArray(obj)?obj.slice():_assign({},obj);// $FlowFixMe number or string is fine here
updated[key]=copyWithSetImpl(obj[key],path,idx+1,value);return updated;};var copyWithSet=function copyWithSet(obj,path,value){return copyWithSetImpl(obj,path,0,value);};// Support DevTools props for function components, forwardRef, memo, host components, etc.
overrideProps=function overrideProps(fiber,path,value){flushPassiveEffects();fiber.pendingProps=copyWithSet(fiber.memoizedProps,path,value);if(fiber.alternate){fiber.alternate.pendingProps=fiber.pendingProps;}scheduleWork(fiber,Sync);};}function injectIntoDevTools(devToolsConfig){var _findFiberByHostInstance=devToolsConfig.findFiberByHostInstance;var ReactCurrentDispatcher=ReactSharedInternals.ReactCurrentDispatcher;return injectInternals(_assign({},devToolsConfig,{overrideProps:overrideProps,currentDispatcherRef:ReactCurrentDispatcher,findHostInstanceByFiber:function findHostInstanceByFiber(fiber){var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;},findFiberByHostInstance:function findFiberByHostInstance(instance){if(!_findFiberByHostInstance){// Might not be implemented by the renderer.
return null;}return _findFiberByHostInstance(instance);}}));}// This file intentionally does *not* have the Flow annotation.
// Don't add it. See `./inline-typed.js` for an explanation.
function createPortal$1(children,containerInfo,// TODO: figure out the API for cross-renderer implementation.
implementation){var key=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;return{// This tag allow us to uniquely identify this as a React Portal
$$typeof:REACT_PORTAL_TYPE,key:key==null?null:''+key,children:children,containerInfo:containerInfo,implementation:implementation};}// TODO: this is special because it gets imported during build.
var ReactVersion='16.8.6';// TODO: This type is shared between the reconciler and ReactDOM, but will
// eventually be lifted out to the renderer.
var ReactCurrentOwner=ReactSharedInternals.ReactCurrentOwner;var topLevelUpdateWarnings=void 0;var warnOnInvalidCallback=void 0;var didWarnAboutUnstableCreatePortal=false;{if(typeof Map!=='function'||// $FlowIssue Flow incorrectly thinks Map has no prototype
Map.prototype==null||typeof Map.prototype.forEach!=='function'||typeof Set!=='function'||// $FlowIssue Flow incorrectly thinks Set has no prototype
Set.prototype==null||typeof Set.prototype.clear!=='function'||typeof Set.prototype.forEach!=='function'){warningWithoutStack$1(false,'React depends on Map and Set built-in types. Make sure that you load a '+'polyfill in older browsers. https://fb.me/react-polyfills');}topLevelUpdateWarnings=function topLevelUpdateWarnings(container){if(container._reactRootContainer&&container.nodeType!==COMMENT_NODE){var hostInstance=findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);if(hostInstance){!(hostInstance.parentNode===container)?warningWithoutStack$1(false,'render(...): It looks like the React-rendered content of this '+'container was removed without using React. This is not '+'supported and will cause errors. Instead, call '+'ReactDOM.unmountComponentAtNode to empty a container.'):void 0;}}var isRootRenderedBySomeReact=!!container._reactRootContainer;var rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(rootEl&&getInstanceFromNode$1(rootEl));!(!hasNonRootReactChild||isRootRenderedBySomeReact)?warningWithoutStack$1(false,'render(...): Replacing React-rendered children with a new root '+'component. If you intended to update the children of this node, '+'you should instead have the existing children update their state '+'and render the new components instead of calling ReactDOM.render.'):void 0;!(container.nodeType!==ELEMENT_NODE||!container.tagName||container.tagName.toUpperCase()!=='BODY')?warningWithoutStack$1(false,'render(): Rendering components directly into document.body is '+'discouraged, since its children are often manipulated by third-party '+'scripts and browser extensions. This may lead to subtle '+'reconciliation issues. Try rendering into a container element created '+'for your app.'):void 0;};warnOnInvalidCallback=function warnOnInvalidCallback(callback,callerName){!(callback===null||typeof callback==='function')?warningWithoutStack$1(false,'%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback):void 0;};}setRestoreImplementation(restoreControlledState$1);function ReactBatch(root){var expirationTime=computeUniqueAsyncExpiration();this._expirationTime=expirationTime;this._root=root;this._next=null;this._callbacks=null;this._didComplete=false;this._hasChildren=false;this._children=null;this._defer=true;}ReactBatch.prototype.render=function(children){!this._defer?invariant(false,'batch.render: Cannot render a batch that already committed.'):void 0;this._hasChildren=true;this._children=children;var internalRoot=this._root._internalRoot;var expirationTime=this._expirationTime;var work=new ReactWork();updateContainerAtExpirationTime(children,internalRoot,null,expirationTime,work._onCommit);return work;};ReactBatch.prototype.then=function(onComplete){if(this._didComplete){onComplete();return;}var callbacks=this._callbacks;if(callbacks===null){callbacks=this._callbacks=[];}callbacks.push(onComplete);};ReactBatch.prototype.commit=function(){var internalRoot=this._root._internalRoot;var firstBatch=internalRoot.firstBatch;!(this._defer&&firstBatch!==null)?invariant(false,'batch.commit: Cannot commit a batch multiple times.'):void 0;if(!this._hasChildren){// This batch is empty. Return.
this._next=null;this._defer=false;return;}var expirationTime=this._expirationTime;// Ensure this is the first batch in the list.
if(firstBatch!==this){// This batch is not the earliest batch. We need to move it to the front.
// Update its expiration time to be the expiration time of the earliest
// batch, so that we can flush it without flushing the other batches.
if(this._hasChildren){expirationTime=this._expirationTime=firstBatch._expirationTime;// Rendering this batch again ensures its children will be the final state
// when we flush (updates are processed in insertion order: last
// update wins).
// TODO: This forces a restart. Should we print a warning?
this.render(this._children);}// Remove the batch from the list.
var previous=null;var batch=firstBatch;while(batch!==this){previous=batch;batch=batch._next;}!(previous!==null)?invariant(false,'batch.commit: Cannot commit a batch multiple times.'):void 0;previous._next=batch._next;// Add it to the front.
this._next=firstBatch;firstBatch=internalRoot.firstBatch=this;}// Synchronously flush all the work up to this batch's expiration time.
this._defer=false;flushRoot(internalRoot,expirationTime);// Pop the batch from the list.
var next=this._next;this._next=null;firstBatch=internalRoot.firstBatch=next;// Append the next earliest batch's children to the update queue.
if(firstBatch!==null&&firstBatch._hasChildren){firstBatch.render(firstBatch._children);}};ReactBatch.prototype._onComplete=function(){if(this._didComplete){return;}this._didComplete=true;var callbacks=this._callbacks;if(callbacks===null){return;}// TODO: Error handling.
for(var i=0;i<callbacks.length;i++){var _callback=callbacks[i];_callback();}};function ReactWork(){this._callbacks=null;this._didCommit=false;// TODO: Avoid need to bind by replacing callbacks in the update queue with
// list of Work objects.
this._onCommit=this._onCommit.bind(this);}ReactWork.prototype.then=function(onCommit){if(this._didCommit){onCommit();return;}var callbacks=this._callbacks;if(callbacks===null){callbacks=this._callbacks=[];}callbacks.push(onCommit);};ReactWork.prototype._onCommit=function(){if(this._didCommit){return;}this._didCommit=true;var callbacks=this._callbacks;if(callbacks===null){return;}// TODO: Error handling.
for(var i=0;i<callbacks.length;i++){var _callback2=callbacks[i];!(typeof _callback2==='function')?invariant(false,'Invalid argument passed as callback. Expected a function. Instead received: %s',_callback2):void 0;_callback2();}};function ReactRoot(container,isConcurrent,hydrate){var root=createContainer(container,isConcurrent,hydrate);this._internalRoot=root;}ReactRoot.prototype.render=function(children,callback){var root=this._internalRoot;var work=new ReactWork();callback=callback===undefined?null:callback;{warnOnInvalidCallback(callback,'render');}if(callback!==null){work.then(callback);}updateContainer(children,root,null,work._onCommit);return work;};ReactRoot.prototype.unmount=function(callback){var root=this._internalRoot;var work=new ReactWork();callback=callback===undefined?null:callback;{warnOnInvalidCallback(callback,'render');}if(callback!==null){work.then(callback);}updateContainer(null,root,null,work._onCommit);return work;};ReactRoot.prototype.legacy_renderSubtreeIntoContainer=function(parentComponent,children,callback){var root=this._internalRoot;var work=new ReactWork();callback=callback===undefined?null:callback;{warnOnInvalidCallback(callback,'render');}if(callback!==null){work.then(callback);}updateContainer(children,root,parentComponent,work._onCommit);return work;};ReactRoot.prototype.createBatch=function(){var batch=new ReactBatch(this);var expirationTime=batch._expirationTime;var internalRoot=this._internalRoot;var firstBatch=internalRoot.firstBatch;if(firstBatch===null){internalRoot.firstBatch=batch;batch._next=null;}else{// Insert sorted by expiration time then insertion order
var insertAfter=null;var insertBefore=firstBatch;while(insertBefore!==null&&insertBefore._expirationTime>=expirationTime){insertAfter=insertBefore;insertBefore=insertBefore._next;}batch._next=insertBefore;if(insertAfter!==null){insertAfter._next=batch;}}return batch;};/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */function isValidContainer(node){return!!(node&&(node.nodeType===ELEMENT_NODE||node.nodeType===DOCUMENT_NODE||node.nodeType===DOCUMENT_FRAGMENT_NODE||node.nodeType===COMMENT_NODE&&node.nodeValue===' react-mount-point-unstable '));}function getReactRootElementInContainer(container){if(!container){return null;}if(container.nodeType===DOCUMENT_NODE){return container.documentElement;}else{return container.firstChild;}}function shouldHydrateDueToLegacyHeuristic(container){var rootElement=getReactRootElementInContainer(container);return!!(rootElement&&rootElement.nodeType===ELEMENT_NODE&&rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));}setBatchingImplementation(batchedUpdates$1,interactiveUpdates$1,flushInteractiveUpdates$1);var warnedAboutHydrateAPI=false;function legacyCreateRootFromDOMContainer(container,forceHydrate){var shouldHydrate=forceHydrate||shouldHydrateDueToLegacyHeuristic(container);// First clear any existing content.
if(!shouldHydrate){var warned=false;var rootSibling=void 0;while(rootSibling=container.lastChild){{if(!warned&&rootSibling.nodeType===ELEMENT_NODE&&rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)){warned=true;warningWithoutStack$1(false,'render(): Target node has markup rendered by React, but there '+'are unrelated nodes as well. This is most commonly caused by '+'white-space inserted around server-rendered markup.');}}container.removeChild(rootSibling);}}{if(shouldHydrate&&!forceHydrate&&!warnedAboutHydrateAPI){warnedAboutHydrateAPI=true;lowPriorityWarning$1(false,'render(): Calling ReactDOM.render() to hydrate server-rendered markup '+'will stop working in React v17. Replace the ReactDOM.render() call '+'with ReactDOM.hydrate() if you want React to attach to the server HTML.');}}// Legacy roots are not async by default.
var isConcurrent=false;return new ReactRoot(container,isConcurrent,shouldHydrate);}function legacyRenderSubtreeIntoContainer(parentComponent,children,container,forceHydrate,callback){{topLevelUpdateWarnings(container);}// TODO: Without `any` type, Flow says "Property cannot be accessed on any
// member of intersection type." Whyyyyyy.
var root=container._reactRootContainer;if(!root){// Initial mount
root=container._reactRootContainer=legacyCreateRootFromDOMContainer(container,forceHydrate);if(typeof callback==='function'){var originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(root._internalRoot);originalCallback.call(instance);};}// Initial mount should not be batched.
unbatchedUpdates(function(){if(parentComponent!=null){root.legacy_renderSubtreeIntoContainer(parentComponent,children,callback);}else{root.render(children,callback);}});}else{if(typeof callback==='function'){var _originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(root._internalRoot);_originalCallback.call(instance);};}// Update
if(parentComponent!=null){root.legacy_renderSubtreeIntoContainer(parentComponent,children,callback);}else{root.render(children,callback);}}return getPublicRootInstance(root._internalRoot);}function createPortal$$1(children,container){var key=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;!isValidContainer(container)?invariant(false,'Target container is not a DOM element.'):void 0;// TODO: pass ReactDOM portal implementation as third argument
return createPortal$1(children,container,null,key);}var ReactDOM={createPortal:createPortal$$1,findDOMNode:function findDOMNode(componentOrElement){{var owner=ReactCurrentOwner.current;if(owner!==null&&owner.stateNode!==null){var warnedAboutRefsInRender=owner.stateNode._warnedAboutRefsInRender;!warnedAboutRefsInRender?warningWithoutStack$1(false,'%s is accessing findDOMNode inside its render(). '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentName(owner.type)||'A component'):void 0;owner.stateNode._warnedAboutRefsInRender=true;}}if(componentOrElement==null){return null;}if(componentOrElement.nodeType===ELEMENT_NODE){return componentOrElement;}{return findHostInstanceWithWarning(componentOrElement,'findDOMNode');}return findHostInstance(componentOrElement);},hydrate:function hydrate(element,container,callback){!isValidContainer(container)?invariant(false,'Target container is not a DOM element.'):void 0;{!!container._reactHasBeenPassedToCreateRootDEV?warningWithoutStack$1(false,'You are calling ReactDOM.hydrate() on a container that was previously '+'passed to ReactDOM.%s(). This is not supported. '+'Did you mean to call createRoot(container, {hydrate: true}).render(element)?',enableStableConcurrentModeAPIs?'createRoot':'unstable_createRoot'):void 0;}// TODO: throw or warn if we couldn't hydrate?
return legacyRenderSubtreeIntoContainer(null,element,container,true,callback);},render:function render(element,container,callback){!isValidContainer(container)?invariant(false,'Target container is not a DOM element.'):void 0;{!!container._reactHasBeenPassedToCreateRootDEV?warningWithoutStack$1(false,'You are calling ReactDOM.render() on a container that was previously '+'passed to ReactDOM.%s(). This is not supported. '+'Did you mean to call root.render(element)?',enableStableConcurrentModeAPIs?'createRoot':'unstable_createRoot'):void 0;}return legacyRenderSubtreeIntoContainer(null,element,container,false,callback);},unstable_renderSubtreeIntoContainer:function unstable_renderSubtreeIntoContainer(parentComponent,element,containerNode,callback){!isValidContainer(containerNode)?invariant(false,'Target container is not a DOM element.'):void 0;!(parentComponent!=null&&has(parentComponent))?invariant(false,'parentComponent must be a valid React Component'):void 0;return legacyRenderSubtreeIntoContainer(parentComponent,element,containerNode,false,callback);},unmountComponentAtNode:function unmountComponentAtNode(container){!isValidContainer(container)?invariant(false,'unmountComponentAtNode(...): Target container is not a DOM element.'):void 0;{!!container._reactHasBeenPassedToCreateRootDEV?warningWithoutStack$1(false,'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously '+'passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?',enableStableConcurrentModeAPIs?'createRoot':'unstable_createRoot'):void 0;}if(container._reactRootContainer){{var rootEl=getReactRootElementInContainer(container);var renderedByDifferentReact=rootEl&&!getInstanceFromNode$1(rootEl);!!renderedByDifferentReact?warningWithoutStack$1(false,"unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by another copy of React.'):void 0;}// Unmount should not be batched.
unbatchedUpdates(function(){legacyRenderSubtreeIntoContainer(null,null,container,false,function(){container._reactRootContainer=null;});});// If you call unmountComponentAtNode twice in quick succession, you'll
// get `true` twice. That's probably fine?
return true;}else{{var _rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(_rootEl&&getInstanceFromNode$1(_rootEl));// Check if the container itself is a React root node.
var isContainerReactRoot=container.nodeType===ELEMENT_NODE&&isValidContainer(container.parentNode)&&!!container.parentNode._reactRootContainer;!!hasNonRootReactChild?warningWithoutStack$1(false,"unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by React and is not a top-level container. %s',isContainerReactRoot?'You may have accidentally passed in a React root node instead '+'of its container.':'Instead, have the parent component update its state and '+'rerender in order to remove this component.'):void 0;}return false;}},// Temporary alias since we already shipped React 16 RC with it.
// TODO: remove in React 17.
unstable_createPortal:function unstable_createPortal(){if(!didWarnAboutUnstableCreatePortal){didWarnAboutUnstableCreatePortal=true;lowPriorityWarning$1(false,'The ReactDOM.unstable_createPortal() alias has been deprecated, '+'and will be removed in React 17+. Update your code to use '+'ReactDOM.createPortal() instead. It has the exact same API, '+'but without the "unstable_" prefix.');}return createPortal$$1.apply(undefined,arguments);},unstable_batchedUpdates:batchedUpdates$1,unstable_interactiveUpdates:interactiveUpdates$1,flushSync:flushSync,unstable_createRoot:createRoot,unstable_flushControlled:flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{// Keep in sync with ReactDOMUnstableNativeDependencies.js
// and ReactTestUtils.js. This is an array for better minification.
Events:[getInstanceFromNode$1,getNodeFromInstance$1,getFiberCurrentPropsFromNode$1,injection.injectEventPluginsByName,eventNameDispatchConfigs,accumulateTwoPhaseDispatches,accumulateDirectDispatches,enqueueStateRestore,restoreStateIfNeeded,dispatchEvent,runEventsInBatch]}};function createRoot(container,options){var functionName=enableStableConcurrentModeAPIs?'createRoot':'unstable_createRoot';!isValidContainer(container)?invariant(false,'%s(...): Target container is not a DOM element.',functionName):void 0;{!!container._reactRootContainer?warningWithoutStack$1(false,'You are calling ReactDOM.%s() on a container that was previously '+'passed to ReactDOM.render(). This is not supported.',enableStableConcurrentModeAPIs?'createRoot':'unstable_createRoot'):void 0;container._reactHasBeenPassedToCreateRootDEV=true;}var hydrate=options!=null&&options.hydrate===true;return new ReactRoot(container,true,hydrate);}if(enableStableConcurrentModeAPIs){ReactDOM.createRoot=createRoot;ReactDOM.unstable_createRoot=undefined;}var foundDevTools=injectIntoDevTools({findFiberByHostInstance:getClosestInstanceFromNode,bundleType:1,version:ReactVersion,rendererPackageName:'react-dom'});{if(!foundDevTools&&canUseDOM&&window.top===window.self){// If we're in Chrome or Firefox, provide a download link if not installed.
if(navigator.userAgent.indexOf('Chrome')>-1&&navigator.userAgent.indexOf('Edge')===-1||navigator.userAgent.indexOf('Firefox')>-1){var protocol=window.location.protocol;// Don't warn in exotic cases like chrome-extension://.
if(/^(https?|file):$/.test(protocol)){console.info('%cDownload the React DevTools '+'for a better development experience: '+'https://fb.me/react-devtools'+(protocol==='file:'?'\nYou might need to use a local HTTP server (instead of file://): '+'https://fb.me/react-devtools-faq':''),'font-weight:bold');}}}}var ReactDOM$2=Object.freeze({default:ReactDOM});var ReactDOM$3=ReactDOM$2&&ReactDOM||ReactDOM$2;// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom=ReactDOM$3.default||ReactDOM$3;module.exports=reactDom;})();}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var aa = __webpack_require__(2),
    n = __webpack_require__(4),
    r = __webpack_require__(26);function ba(a, b, c, d, e, f, g, h) {
  if (!a) {
    a = void 0;if (void 0 === b) a = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
      var l = [c, d, e, f, g, h],
          k = 0;a = Error(b.replace(/%s/g, function () {
        return l[k++];
      }));a.name = "Invariant Violation";
    }a.framesToPop = 1;throw a;
  }
}
function x(a) {
  for (var b = arguments.length - 1, c = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, d = 0; d < b; d++) {
    c += "&args[]=" + encodeURIComponent(arguments[d + 1]);
  }ba(!1, "Minified React error #" + a + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", c);
}aa ? void 0 : x("227");function ca(a, b, c, d, e, f, g, h, l) {
  var k = Array.prototype.slice.call(arguments, 3);try {
    b.apply(c, k);
  } catch (m) {
    this.onError(m);
  }
}
var da = !1,
    ea = null,
    fa = !1,
    ha = null,
    ia = { onError: function onError(a) {
    da = !0;ea = a;
  } };function ja(a, b, c, d, e, f, g, h, l) {
  da = !1;ea = null;ca.apply(ia, arguments);
}function ka(a, b, c, d, e, f, g, h, l) {
  ja.apply(this, arguments);if (da) {
    if (da) {
      var k = ea;da = !1;ea = null;
    } else x("198"), k = void 0;fa || (fa = !0, ha = k);
  }
}var la = null,
    ma = {};
function na() {
  if (la) for (var a in ma) {
    var b = ma[a],
        c = la.indexOf(a);-1 < c ? void 0 : x("96", a);if (!oa[c]) {
      b.extractEvents ? void 0 : x("97", a);oa[c] = b;c = b.eventTypes;for (var d in c) {
        var e = void 0;var f = c[d],
            g = b,
            h = d;pa.hasOwnProperty(h) ? x("99", h) : void 0;pa[h] = f;var l = f.phasedRegistrationNames;if (l) {
          for (e in l) {
            l.hasOwnProperty(e) && qa(l[e], g, h);
          }e = !0;
        } else f.registrationName ? (qa(f.registrationName, g, h), e = !0) : e = !1;e ? void 0 : x("98", d, a);
      }
    }
  }
}
function qa(a, b, c) {
  ra[a] ? x("100", a) : void 0;ra[a] = b;sa[a] = b.eventTypes[c].dependencies;
}var oa = [],
    pa = {},
    ra = {},
    sa = {},
    ta = null,
    ua = null,
    va = null;function wa(a, b, c) {
  var d = a.type || "unknown-event";a.currentTarget = va(c);ka(d, b, void 0, a);a.currentTarget = null;
}function xa(a, b) {
  null == b ? x("30") : void 0;if (null == a) return b;if (Array.isArray(a)) {
    if (Array.isArray(b)) return a.push.apply(a, b), a;a.push(b);return a;
  }return Array.isArray(b) ? [a].concat(b) : [a, b];
}
function ya(a, b, c) {
  Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);
}var za = null;function Aa(a) {
  if (a) {
    var b = a._dispatchListeners,
        c = a._dispatchInstances;if (Array.isArray(b)) for (var d = 0; d < b.length && !a.isPropagationStopped(); d++) {
      wa(a, b[d], c[d]);
    } else b && wa(a, b, c);a._dispatchListeners = null;a._dispatchInstances = null;a.isPersistent() || a.constructor.release(a);
  }
}
var Ba = { injectEventPluginOrder: function injectEventPluginOrder(a) {
    la ? x("101") : void 0;la = Array.prototype.slice.call(a);na();
  }, injectEventPluginsByName: function injectEventPluginsByName(a) {
    var b = !1,
        c;for (c in a) {
      if (a.hasOwnProperty(c)) {
        var d = a[c];ma.hasOwnProperty(c) && ma[c] === d || (ma[c] ? x("102", c) : void 0, ma[c] = d, b = !0);
      }
    }b && na();
  } };
function Ca(a, b) {
  var c = a.stateNode;if (!c) return null;var d = ta(c);if (!d) return null;c = d[b];a: switch (b) {case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":
      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));a = !d;break a;default:
      a = !1;}if (a) return null;c && "function" !== typeof c ? x("231", b, typeof c === "undefined" ? "undefined" : _typeof(c)) : void 0;
  return c;
}function Da(a) {
  null !== a && (za = xa(za, a));a = za;za = null;if (a && (ya(a, Aa), za ? x("95") : void 0, fa)) throw a = ha, fa = !1, ha = null, a;
}var Ea = Math.random().toString(36).slice(2),
    Fa = "__reactInternalInstance$" + Ea,
    Ga = "__reactEventHandlers$" + Ea;function Ha(a) {
  if (a[Fa]) return a[Fa];for (; !a[Fa];) {
    if (a.parentNode) a = a.parentNode;else return null;
  }a = a[Fa];return 5 === a.tag || 6 === a.tag ? a : null;
}function Ia(a) {
  a = a[Fa];return !a || 5 !== a.tag && 6 !== a.tag ? null : a;
}
function Ja(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;x("33");
}function Ka(a) {
  return a[Ga] || null;
}function La(a) {
  do {
    a = a.return;
  } while (a && 5 !== a.tag);return a ? a : null;
}function Ma(a, b, c) {
  if (b = Ca(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = xa(c._dispatchListeners, b), c._dispatchInstances = xa(c._dispatchInstances, a);
}
function Na(a) {
  if (a && a.dispatchConfig.phasedRegistrationNames) {
    for (var b = a._targetInst, c = []; b;) {
      c.push(b), b = La(b);
    }for (b = c.length; 0 < b--;) {
      Ma(c[b], "captured", a);
    }for (b = 0; b < c.length; b++) {
      Ma(c[b], "bubbled", a);
    }
  }
}function Oa(a, b, c) {
  a && c && c.dispatchConfig.registrationName && (b = Ca(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = xa(c._dispatchListeners, b), c._dispatchInstances = xa(c._dispatchInstances, a));
}function Pa(a) {
  a && a.dispatchConfig.registrationName && Oa(a._targetInst, null, a);
}
function Qa(a) {
  ya(a, Na);
}var Ra = !("undefined" === typeof window || !window.document || !window.document.createElement);function Sa(a, b) {
  var c = {};c[a.toLowerCase()] = b.toLowerCase();c["Webkit" + a] = "webkit" + b;c["Moz" + a] = "moz" + b;return c;
}var Ta = { animationend: Sa("Animation", "AnimationEnd"), animationiteration: Sa("Animation", "AnimationIteration"), animationstart: Sa("Animation", "AnimationStart"), transitionend: Sa("Transition", "TransitionEnd") },
    Ua = {},
    Va = {};
Ra && (Va = document.createElement("div").style, "AnimationEvent" in window || (delete Ta.animationend.animation, delete Ta.animationiteration.animation, delete Ta.animationstart.animation), "TransitionEvent" in window || delete Ta.transitionend.transition);function Wa(a) {
  if (Ua[a]) return Ua[a];if (!Ta[a]) return a;var b = Ta[a],
      c;for (c in b) {
    if (b.hasOwnProperty(c) && c in Va) return Ua[a] = b[c];
  }return a;
}
var Xa = Wa("animationend"),
    Ya = Wa("animationiteration"),
    Za = Wa("animationstart"),
    $a = Wa("transitionend"),
    ab = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
    bb = null,
    cb = null,
    db = null;
function eb() {
  if (db) return db;var a,
      b = cb,
      c = b.length,
      d,
      e = "value" in bb ? bb.value : bb.textContent,
      f = e.length;for (a = 0; a < c && b[a] === e[a]; a++) {}var g = c - a;for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {}return db = e.slice(a, 1 < d ? 1 - d : void 0);
}function fb() {
  return !0;
}function gb() {
  return !1;
}
function y(a, b, c, d) {
  this.dispatchConfig = a;this._targetInst = b;this.nativeEvent = c;a = this.constructor.Interface;for (var e in a) {
    a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : "target" === e ? this.target = d : this[e] = c[e]);
  }this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? fb : gb;this.isPropagationStopped = gb;return this;
}
n(y.prototype, { preventDefault: function preventDefault() {
    this.defaultPrevented = !0;var a = this.nativeEvent;a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = fb);
  }, stopPropagation: function stopPropagation() {
    var a = this.nativeEvent;a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = fb);
  }, persist: function persist() {
    this.isPersistent = fb;
  }, isPersistent: gb, destructor: function destructor() {
    var a = this.constructor.Interface,
        b;for (b in a) {
      this[b] = null;
    }this.nativeEvent = this._targetInst = this.dispatchConfig = null;this.isPropagationStopped = this.isDefaultPrevented = gb;this._dispatchInstances = this._dispatchListeners = null;
  } });y.Interface = { type: null, target: null, currentTarget: function currentTarget() {
    return null;
  }, eventPhase: null, bubbles: null, cancelable: null, timeStamp: function timeStamp(a) {
    return a.timeStamp || Date.now();
  }, defaultPrevented: null, isTrusted: null };
y.extend = function (a) {
  function b() {}function c() {
    return d.apply(this, arguments);
  }var d = this;b.prototype = d.prototype;var e = new b();n(e, c.prototype);c.prototype = e;c.prototype.constructor = c;c.Interface = n({}, d.Interface, a);c.extend = d.extend;hb(c);return c;
};hb(y);function ib(a, b, c, d) {
  if (this.eventPool.length) {
    var e = this.eventPool.pop();this.call(e, a, b, c, d);return e;
  }return new this(a, b, c, d);
}function jb(a) {
  a instanceof this ? void 0 : x("279");a.destructor();10 > this.eventPool.length && this.eventPool.push(a);
}
function hb(a) {
  a.eventPool = [];a.getPooled = ib;a.release = jb;
}var kb = y.extend({ data: null }),
    lb = y.extend({ data: null }),
    mb = [9, 13, 27, 32],
    nb = Ra && "CompositionEvent" in window,
    ob = null;Ra && "documentMode" in document && (ob = document.documentMode);
var pb = Ra && "TextEvent" in window && !ob,
    qb = Ra && (!nb || ob && 8 < ob && 11 >= ob),
    rb = String.fromCharCode(32),
    sb = { beforeInput: { phasedRegistrationNames: { bubbled: "onBeforeInput", captured: "onBeforeInputCapture" }, dependencies: ["compositionend", "keypress", "textInput", "paste"] }, compositionEnd: { phasedRegistrationNames: { bubbled: "onCompositionEnd", captured: "onCompositionEndCapture" }, dependencies: "blur compositionend keydown keypress keyup mousedown".split(" ") }, compositionStart: { phasedRegistrationNames: { bubbled: "onCompositionStart",
      captured: "onCompositionStartCapture" }, dependencies: "blur compositionstart keydown keypress keyup mousedown".split(" ") }, compositionUpdate: { phasedRegistrationNames: { bubbled: "onCompositionUpdate", captured: "onCompositionUpdateCapture" }, dependencies: "blur compositionupdate keydown keypress keyup mousedown".split(" ") } },
    tb = !1;
function ub(a, b) {
  switch (a) {case "keyup":
      return -1 !== mb.indexOf(b.keyCode);case "keydown":
      return 229 !== b.keyCode;case "keypress":case "mousedown":case "blur":
      return !0;default:
      return !1;}
}function vb(a) {
  a = a.detail;return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && "data" in a ? a.data : null;
}var wb = !1;function xb(a, b) {
  switch (a) {case "compositionend":
      return vb(b);case "keypress":
      if (32 !== b.which) return null;tb = !0;return rb;case "textInput":
      return a = b.data, a === rb && tb ? null : a;default:
      return null;}
}
function yb(a, b) {
  if (wb) return "compositionend" === a || !nb && ub(a, b) ? (a = eb(), db = cb = bb = null, wb = !1, a) : null;switch (a) {case "paste":
      return null;case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length) return b.char;if (b.which) return String.fromCharCode(b.which);
      }return null;case "compositionend":
      return qb && "ko" !== b.locale ? null : b.data;default:
      return null;}
}
var zb = { eventTypes: sb, extractEvents: function extractEvents(a, b, c, d) {
    var e = void 0;var f = void 0;if (nb) b: {
      switch (a) {case "compositionstart":
          e = sb.compositionStart;break b;case "compositionend":
          e = sb.compositionEnd;break b;case "compositionupdate":
          e = sb.compositionUpdate;break b;}e = void 0;
    } else wb ? ub(a, c) && (e = sb.compositionEnd) : "keydown" === a && 229 === c.keyCode && (e = sb.compositionStart);e ? (qb && "ko" !== c.locale && (wb || e !== sb.compositionStart ? e === sb.compositionEnd && wb && (f = eb()) : (bb = d, cb = "value" in bb ? bb.value : bb.textContent, wb = !0)), e = kb.getPooled(e, b, c, d), f ? e.data = f : (f = vb(c), null !== f && (e.data = f)), Qa(e), f = e) : f = null;(a = pb ? xb(a, c) : yb(a, c)) ? (b = lb.getPooled(sb.beforeInput, b, c, d), b.data = a, Qa(b)) : b = null;return null === f ? b : null === b ? f : [f, b];
  } },
    Ab = null,
    Bb = null,
    Cb = null;function Db(a) {
  if (a = ua(a)) {
    "function" !== typeof Ab ? x("280") : void 0;var b = ta(a.stateNode);Ab(a.stateNode, a.type, b);
  }
}function Eb(a) {
  Bb ? Cb ? Cb.push(a) : Cb = [a] : Bb = a;
}function Fb() {
  if (Bb) {
    var a = Bb,
        b = Cb;Cb = Bb = null;Db(a);if (b) for (a = 0; a < b.length; a++) {
      Db(b[a]);
    }
  }
}
function Gb(a, b) {
  return a(b);
}function Hb(a, b, c) {
  return a(b, c);
}function Ib() {}var Jb = !1;function Kb(a, b) {
  if (Jb) return a(b);Jb = !0;try {
    return Gb(a, b);
  } finally {
    if (Jb = !1, null !== Bb || null !== Cb) Ib(), Fb();
  }
}var Lb = { color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 };function Mb(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();return "input" === b ? !!Lb[a.type] : "textarea" === b ? !0 : !1;
}
function Nb(a) {
  a = a.target || a.srcElement || window;a.correspondingUseElement && (a = a.correspondingUseElement);return 3 === a.nodeType ? a.parentNode : a;
}function Ob(a) {
  if (!Ra) return !1;a = "on" + a;var b = a in document;b || (b = document.createElement("div"), b.setAttribute(a, "return;"), b = "function" === typeof b[a]);return b;
}function Pb(a) {
  var b = a.type;return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function Qb(a) {
  var b = Pb(a) ? "checked" : "value",
      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
      d = "" + a[b];if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e = c.get,
        f = c.set;Object.defineProperty(a, b, { configurable: !0, get: function get() {
        return e.call(this);
      }, set: function set(a) {
        d = "" + a;f.call(this, a);
      } });Object.defineProperty(a, b, { enumerable: c.enumerable });return { getValue: function getValue() {
        return d;
      }, setValue: function setValue(a) {
        d = "" + a;
      }, stopTracking: function stopTracking() {
        a._valueTracker = null;delete a[b];
      } };
  }
}function Rb(a) {
  a._valueTracker || (a._valueTracker = Qb(a));
}function Sb(a) {
  if (!a) return !1;var b = a._valueTracker;if (!b) return !0;var c = b.getValue();var d = "";a && (d = Pb(a) ? a.checked ? "true" : "false" : a.value);a = d;return a !== c ? (b.setValue(a), !0) : !1;
}var Tb = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Tb.hasOwnProperty("ReactCurrentDispatcher") || (Tb.ReactCurrentDispatcher = { current: null });
var Ub = /^(.*)[\\\/]/,
    z = "function" === typeof Symbol && Symbol.for,
    Vb = z ? Symbol.for("react.element") : 60103,
    Wb = z ? Symbol.for("react.portal") : 60106,
    Xb = z ? Symbol.for("react.fragment") : 60107,
    Yb = z ? Symbol.for("react.strict_mode") : 60108,
    Zb = z ? Symbol.for("react.profiler") : 60114,
    $b = z ? Symbol.for("react.provider") : 60109,
    ac = z ? Symbol.for("react.context") : 60110,
    bc = z ? Symbol.for("react.concurrent_mode") : 60111,
    cc = z ? Symbol.for("react.forward_ref") : 60112,
    dc = z ? Symbol.for("react.suspense") : 60113,
    ec = z ? Symbol.for("react.memo") : 60115,
    fc = z ? Symbol.for("react.lazy") : 60116,
    gc = "function" === typeof Symbol && Symbol.iterator;function hc(a) {
  if (null === a || "object" !== (typeof a === "undefined" ? "undefined" : _typeof(a))) return null;a = gc && a[gc] || a["@@iterator"];return "function" === typeof a ? a : null;
}
function ic(a) {
  if (null == a) return null;if ("function" === typeof a) return a.displayName || a.name || null;if ("string" === typeof a) return a;switch (a) {case bc:
      return "ConcurrentMode";case Xb:
      return "Fragment";case Wb:
      return "Portal";case Zb:
      return "Profiler";case Yb:
      return "StrictMode";case dc:
      return "Suspense";}if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a))) switch (a.$$typeof) {case ac:
      return "Context.Consumer";case $b:
      return "Context.Provider";case cc:
      var b = a.render;b = b.displayName || b.name || "";return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");case ec:
      return ic(a.type);case fc:
      if (a = 1 === a._status ? a._result : null) return ic(a);}return null;
}function jc(a) {
  var b = "";do {
    a: switch (a.tag) {case 3:case 4:case 6:case 7:case 10:case 9:
        var c = "";break a;default:
        var d = a._debugOwner,
            e = a._debugSource,
            f = ic(a.type);c = null;d && (c = ic(d.type));d = f;f = "";e ? f = " (at " + e.fileName.replace(Ub, "") + ":" + e.lineNumber + ")" : c && (f = " (created by " + c + ")");c = "\n    in " + (d || "Unknown") + f;}b += c;a = a.return;
  } while (a);return b;
}
var kc = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
    lc = Object.prototype.hasOwnProperty,
    mc = {},
    nc = {};
function oc(a) {
  if (lc.call(nc, a)) return !0;if (lc.call(mc, a)) return !1;if (kc.test(a)) return nc[a] = !0;mc[a] = !0;return !1;
}function pc(a, b, c, d) {
  if (null !== c && 0 === c.type) return !1;switch (typeof b === "undefined" ? "undefined" : _typeof(b)) {case "function":case "symbol":
      return !0;case "boolean":
      if (d) return !1;if (null !== c) return !c.acceptsBooleans;a = a.toLowerCase().slice(0, 5);return "data-" !== a && "aria-" !== a;default:
      return !1;}
}
function qc(a, b, c, d) {
  if (null === b || "undefined" === typeof b || pc(a, b, c, d)) return !0;if (d) return !1;if (null !== c) switch (c.type) {case 3:
      return !b;case 4:
      return !1 === b;case 5:
      return isNaN(b);case 6:
      return isNaN(b) || 1 > b;}return !1;
}function C(a, b, c, d, e) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;this.attributeName = d;this.attributeNamespace = e;this.mustUseProperty = c;this.propertyName = a;this.type = b;
}var D = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
  D[a] = new C(a, 0, !1, a, null);
});[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
  var b = a[0];D[b] = new C(b, 1, !1, a[1], null);
});["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
  D[a] = new C(a, 2, !1, a.toLowerCase(), null);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
  D[a] = new C(a, 2, !1, a, null);
});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
  D[a] = new C(a, 3, !1, a.toLowerCase(), null);
});["checked", "multiple", "muted", "selected"].forEach(function (a) {
  D[a] = new C(a, 3, !0, a, null);
});
["capture", "download"].forEach(function (a) {
  D[a] = new C(a, 4, !1, a, null);
});["cols", "rows", "size", "span"].forEach(function (a) {
  D[a] = new C(a, 6, !1, a, null);
});["rowSpan", "start"].forEach(function (a) {
  D[a] = new C(a, 5, !1, a.toLowerCase(), null);
});var rc = /[\-:]([a-z])/g;function sc(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
  var b = a.replace(rc, sc);D[b] = new C(b, 1, !1, a, null);
});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
  var b = a.replace(rc, sc);D[b] = new C(b, 1, !1, a, "http://www.w3.org/1999/xlink");
});["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
  var b = a.replace(rc, sc);D[b] = new C(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace");
});["tabIndex", "crossOrigin"].forEach(function (a) {
  D[a] = new C(a, 1, !1, a.toLowerCase(), null);
});
function tc(a, b, c, d) {
  var e = D.hasOwnProperty(b) ? D[b] : null;var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;f || (qc(b, c, e, d) && (c = null), d || null === e ? oc(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}
function uc(a) {
  switch (typeof a === "undefined" ? "undefined" : _typeof(a)) {case "boolean":case "number":case "object":case "string":case "undefined":
      return a;default:
      return "";}
}function vc(a, b) {
  var c = b.checked;return n({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
}
function wc(a, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue,
      d = null != b.checked ? b.checked : b.defaultChecked;c = uc(null != b.value ? b.value : c);a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
}function xc(a, b) {
  b = b.checked;null != b && tc(a, "checked", b, !1);
}
function yc(a, b) {
  xc(a, b);var c = uc(b.value),
      d = b.type;if (null != c) {
    if ("number" === d) {
      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
    } else a.value !== "" + c && (a.value = "" + c);
  } else if ("submit" === d || "reset" === d) {
    a.removeAttribute("value");return;
  }b.hasOwnProperty("value") ? zc(a, b.type, c) : b.hasOwnProperty("defaultValue") && zc(a, b.type, uc(b.defaultValue));null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function Ac(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;b = "" + a._wrapperState.initialValue;c || b === a.value || (a.value = b);a.defaultValue = b;
  }c = a.name;"" !== c && (a.name = "");a.defaultChecked = !a.defaultChecked;a.defaultChecked = !!a._wrapperState.initialChecked;"" !== c && (a.name = c);
}
function zc(a, b, c) {
  if ("number" !== b || a.ownerDocument.activeElement !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}var Bc = { change: { phasedRegistrationNames: { bubbled: "onChange", captured: "onChangeCapture" }, dependencies: "blur change click focus input keydown keyup selectionchange".split(" ") } };function Cc(a, b, c) {
  a = y.getPooled(Bc.change, a, b, c);a.type = "change";Eb(c);Qa(a);return a;
}var Dc = null,
    Ec = null;function Fc(a) {
  Da(a);
}
function Gc(a) {
  var b = Ja(a);if (Sb(b)) return a;
}function Hc(a, b) {
  if ("change" === a) return b;
}var Ic = !1;Ra && (Ic = Ob("input") && (!document.documentMode || 9 < document.documentMode));function Jc() {
  Dc && (Dc.detachEvent("onpropertychange", Kc), Ec = Dc = null);
}function Kc(a) {
  "value" === a.propertyName && Gc(Ec) && (a = Cc(Ec, a, Nb(a)), Kb(Fc, a));
}function Lc(a, b, c) {
  "focus" === a ? (Jc(), Dc = b, Ec = c, Dc.attachEvent("onpropertychange", Kc)) : "blur" === a && Jc();
}function Mc(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return Gc(Ec);
}
function Nc(a, b) {
  if ("click" === a) return Gc(b);
}function Oc(a, b) {
  if ("input" === a || "change" === a) return Gc(b);
}
var Pc = { eventTypes: Bc, _isInputEventSupported: Ic, extractEvents: function extractEvents(a, b, c, d) {
    var e = b ? Ja(b) : window,
        f = void 0,
        g = void 0,
        h = e.nodeName && e.nodeName.toLowerCase();"select" === h || "input" === h && "file" === e.type ? f = Hc : Mb(e) ? Ic ? f = Oc : (f = Mc, g = Lc) : (h = e.nodeName) && "input" === h.toLowerCase() && ("checkbox" === e.type || "radio" === e.type) && (f = Nc);if (f && (f = f(a, b))) return Cc(f, c, d);g && g(a, e, b);"blur" === a && (a = e._wrapperState) && a.controlled && "number" === e.type && zc(e, "number", e.value);
  } },
    Qc = y.extend({ view: null, detail: null }),
    Rc = { Alt: "altKey",
  Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };function Sc(a) {
  var b = this.nativeEvent;return b.getModifierState ? b.getModifierState(a) : (a = Rc[a]) ? !!b[a] : !1;
}function Tc() {
  return Sc;
}
var Uc = 0,
    Vc = 0,
    Wc = !1,
    Xc = !1,
    Yc = Qc.extend({ screenX: null, screenY: null, clientX: null, clientY: null, pageX: null, pageY: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, getModifierState: Tc, button: null, buttons: null, relatedTarget: function relatedTarget(a) {
    return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
  }, movementX: function movementX(a) {
    if ("movementX" in a) return a.movementX;var b = Uc;Uc = a.screenX;return Wc ? "mousemove" === a.type ? a.screenX - b : 0 : (Wc = !0, 0);
  }, movementY: function movementY(a) {
    if ("movementY" in a) return a.movementY;
    var b = Vc;Vc = a.screenY;return Xc ? "mousemove" === a.type ? a.screenY - b : 0 : (Xc = !0, 0);
  } }),
    Zc = Yc.extend({ pointerId: null, width: null, height: null, pressure: null, tangentialPressure: null, tiltX: null, tiltY: null, twist: null, pointerType: null, isPrimary: null }),
    $c = { mouseEnter: { registrationName: "onMouseEnter", dependencies: ["mouseout", "mouseover"] }, mouseLeave: { registrationName: "onMouseLeave", dependencies: ["mouseout", "mouseover"] }, pointerEnter: { registrationName: "onPointerEnter", dependencies: ["pointerout", "pointerover"] }, pointerLeave: { registrationName: "onPointerLeave",
    dependencies: ["pointerout", "pointerover"] } },
    ad = { eventTypes: $c, extractEvents: function extractEvents(a, b, c, d) {
    var e = "mouseover" === a || "pointerover" === a,
        f = "mouseout" === a || "pointerout" === a;if (e && (c.relatedTarget || c.fromElement) || !f && !e) return null;e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;f ? (f = b, b = (b = c.relatedTarget || c.toElement) ? Ha(b) : null) : f = null;if (f === b) return null;var g = void 0,
        h = void 0,
        l = void 0,
        k = void 0;if ("mouseout" === a || "mouseover" === a) g = Yc, h = $c.mouseLeave, l = $c.mouseEnter, k = "mouse";else if ("pointerout" === a || "pointerover" === a) g = Zc, h = $c.pointerLeave, l = $c.pointerEnter, k = "pointer";var m = null == f ? e : Ja(f);e = null == b ? e : Ja(b);a = g.getPooled(h, f, c, d);a.type = k + "leave";a.target = m;a.relatedTarget = e;c = g.getPooled(l, b, c, d);c.type = k + "enter";c.target = e;c.relatedTarget = m;d = b;if (f && d) a: {
      b = f;e = d;k = 0;for (g = b; g; g = La(g)) {
        k++;
      }g = 0;for (l = e; l; l = La(l)) {
        g++;
      }for (; 0 < k - g;) {
        b = La(b), k--;
      }for (; 0 < g - k;) {
        e = La(e), g--;
      }for (; k--;) {
        if (b === e || b === e.alternate) break a;b = La(b);e = La(e);
      }b = null;
    } else b = null;e = b;for (b = []; f && f !== e;) {
      k = f.alternate;if (null !== k && k === e) break;b.push(f);f = La(f);
    }for (f = []; d && d !== e;) {
      k = d.alternate;if (null !== k && k === e) break;f.push(d);d = La(d);
    }for (d = 0; d < b.length; d++) {
      Oa(b[d], "bubbled", a);
    }for (d = f.length; 0 < d--;) {
      Oa(f[d], "captured", c);
    }return [a, c];
  } };function bd(a, b) {
  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}var cd = Object.prototype.hasOwnProperty;
function dd(a, b) {
  if (bd(a, b)) return !0;if ("object" !== (typeof a === "undefined" ? "undefined" : _typeof(a)) || null === a || "object" !== (typeof b === "undefined" ? "undefined" : _typeof(b)) || null === b) return !1;var c = Object.keys(a),
      d = Object.keys(b);if (c.length !== d.length) return !1;for (d = 0; d < c.length; d++) {
    if (!cd.call(b, c[d]) || !bd(a[c[d]], b[c[d]])) return !1;
  }return !0;
}function ed(a) {
  var b = a;if (a.alternate) for (; b.return;) {
    b = b.return;
  } else {
    if (0 !== (b.effectTag & 2)) return 1;for (; b.return;) {
      if (b = b.return, 0 !== (b.effectTag & 2)) return 1;
    }
  }return 3 === b.tag ? 2 : 3;
}function fd(a) {
  2 !== ed(a) ? x("188") : void 0;
}
function gd(a) {
  var b = a.alternate;if (!b) return b = ed(a), 3 === b ? x("188") : void 0, 1 === b ? null : a;for (var c = a, d = b;;) {
    var e = c.return,
        f = e ? e.alternate : null;if (!e || !f) break;if (e.child === f.child) {
      for (var g = e.child; g;) {
        if (g === c) return fd(e), a;if (g === d) return fd(e), b;g = g.sibling;
      }x("188");
    }if (c.return !== d.return) c = e, d = f;else {
      g = !1;for (var h = e.child; h;) {
        if (h === c) {
          g = !0;c = e;d = f;break;
        }if (h === d) {
          g = !0;d = e;c = f;break;
        }h = h.sibling;
      }if (!g) {
        for (h = f.child; h;) {
          if (h === c) {
            g = !0;c = f;d = e;break;
          }if (h === d) {
            g = !0;d = f;c = e;break;
          }h = h.sibling;
        }g ? void 0 : x("189");
      }
    }c.alternate !== d ? x("190") : void 0;
  }3 !== c.tag ? x("188") : void 0;return c.stateNode.current === c ? a : b;
}function hd(a) {
  a = gd(a);if (!a) return null;for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag) return b;if (b.child) b.child.return = b, b = b.child;else {
      if (b === a) break;for (; !b.sibling;) {
        if (!b.return || b.return === a) return null;b = b.return;
      }b.sibling.return = b.return;b = b.sibling;
    }
  }return null;
}
var id = y.extend({ animationName: null, elapsedTime: null, pseudoElement: null }),
    jd = y.extend({ clipboardData: function clipboardData(a) {
    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
  } }),
    kd = Qc.extend({ relatedTarget: null });function ld(a) {
  var b = a.keyCode;"charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;10 === a && (a = 13);return 32 <= a || 13 === a ? a : 0;
}
var md = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" },
    nd = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4",
  116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" },
    od = Qc.extend({ key: function key(a) {
    if (a.key) {
      var b = md[a.key] || a.key;if ("Unidentified" !== b) return b;
    }return "keypress" === a.type ? (a = ld(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? nd[a.keyCode] || "Unidentified" : "";
  }, location: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, repeat: null, locale: null, getModifierState: Tc, charCode: function charCode(a) {
    return "keypress" === a.type ? ld(a) : 0;
  }, keyCode: function keyCode(a) {
    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  }, which: function which(a) {
    return "keypress" === a.type ? ld(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  } }),
    pd = Yc.extend({ dataTransfer: null }),
    qd = Qc.extend({ touches: null, targetTouches: null, changedTouches: null, altKey: null, metaKey: null, ctrlKey: null, shiftKey: null, getModifierState: Tc }),
    rd = y.extend({ propertyName: null, elapsedTime: null, pseudoElement: null }),
    sd = Yc.extend({ deltaX: function deltaX(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  }, deltaY: function deltaY(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  }, deltaZ: null, deltaMode: null }),
    td = [["abort", "abort"], [Xa, "animationEnd"], [Ya, "animationIteration"], [Za, "animationStart"], ["canplay", "canPlay"], ["canplaythrough", "canPlayThrough"], ["drag", "drag"], ["dragenter", "dragEnter"], ["dragexit", "dragExit"], ["dragleave", "dragLeave"], ["dragover", "dragOver"], ["durationchange", "durationChange"], ["emptied", "emptied"], ["encrypted", "encrypted"], ["ended", "ended"], ["error", "error"], ["gotpointercapture", "gotPointerCapture"], ["load", "load"], ["loadeddata", "loadedData"], ["loadedmetadata", "loadedMetadata"], ["loadstart", "loadStart"], ["lostpointercapture", "lostPointerCapture"], ["mousemove", "mouseMove"], ["mouseout", "mouseOut"], ["mouseover", "mouseOver"], ["playing", "playing"], ["pointermove", "pointerMove"], ["pointerout", "pointerOut"], ["pointerover", "pointerOver"], ["progress", "progress"], ["scroll", "scroll"], ["seeking", "seeking"], ["stalled", "stalled"], ["suspend", "suspend"], ["timeupdate", "timeUpdate"], ["toggle", "toggle"], ["touchmove", "touchMove"], [$a, "transitionEnd"], ["waiting", "waiting"], ["wheel", "wheel"]],
    ud = {},
    vd = {};function wd(a, b) {
  var c = a[0];a = a[1];var d = "on" + (a[0].toUpperCase() + a.slice(1));b = { phasedRegistrationNames: { bubbled: d, captured: d + "Capture" }, dependencies: [c], isInteractive: b };ud[a] = b;vd[c] = b;
}
[["blur", "blur"], ["cancel", "cancel"], ["click", "click"], ["close", "close"], ["contextmenu", "contextMenu"], ["copy", "copy"], ["cut", "cut"], ["auxclick", "auxClick"], ["dblclick", "doubleClick"], ["dragend", "dragEnd"], ["dragstart", "dragStart"], ["drop", "drop"], ["focus", "focus"], ["input", "input"], ["invalid", "invalid"], ["keydown", "keyDown"], ["keypress", "keyPress"], ["keyup", "keyUp"], ["mousedown", "mouseDown"], ["mouseup", "mouseUp"], ["paste", "paste"], ["pause", "pause"], ["play", "play"], ["pointercancel", "pointerCancel"], ["pointerdown", "pointerDown"], ["pointerup", "pointerUp"], ["ratechange", "rateChange"], ["reset", "reset"], ["seeked", "seeked"], ["submit", "submit"], ["touchcancel", "touchCancel"], ["touchend", "touchEnd"], ["touchstart", "touchStart"], ["volumechange", "volumeChange"]].forEach(function (a) {
  wd(a, !0);
});td.forEach(function (a) {
  wd(a, !1);
});
var xd = { eventTypes: ud, isInteractiveTopLevelEventType: function isInteractiveTopLevelEventType(a) {
    a = vd[a];return void 0 !== a && !0 === a.isInteractive;
  }, extractEvents: function extractEvents(a, b, c, d) {
    var e = vd[a];if (!e) return null;switch (a) {case "keypress":
        if (0 === ld(c)) return null;case "keydown":case "keyup":
        a = od;break;case "blur":case "focus":
        a = kd;break;case "click":
        if (2 === c.button) return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":
        a = Yc;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":
        a = pd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":
        a = qd;break;case Xa:case Ya:case Za:
        a = id;break;case $a:
        a = rd;break;case "scroll":
        a = Qc;break;case "wheel":
        a = sd;break;case "copy":case "cut":case "paste":
        a = jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":
        a = Zc;break;default:
        a = y;}b = a.getPooled(e, b, c, d);Qa(b);return b;
  } },
    yd = xd.isInteractiveTopLevelEventType,
    zd = [];function Ad(a) {
  var b = a.targetInst,
      c = b;do {
    if (!c) {
      a.ancestors.push(c);break;
    }var d;for (d = c; d.return;) {
      d = d.return;
    }d = 3 !== d.tag ? null : d.stateNode.containerInfo;if (!d) break;a.ancestors.push(c);c = Ha(d);
  } while (c);for (c = 0; c < a.ancestors.length; c++) {
    b = a.ancestors[c];var e = Nb(a.nativeEvent);d = a.topLevelType;for (var f = a.nativeEvent, g = null, h = 0; h < oa.length; h++) {
      var l = oa[h];l && (l = l.extractEvents(d, b, f, e)) && (g = xa(g, l));
    }Da(g);
  }
}var Bd = !0;
function E(a, b) {
  if (!b) return null;var c = (yd(a) ? Cd : Dd).bind(null, a);b.addEventListener(a, c, !1);
}function Ed(a, b) {
  if (!b) return null;var c = (yd(a) ? Cd : Dd).bind(null, a);b.addEventListener(a, c, !0);
}function Cd(a, b) {
  Hb(Dd, a, b);
}
function Dd(a, b) {
  if (Bd) {
    var c = Nb(b);c = Ha(c);null === c || "number" !== typeof c.tag || 2 === ed(c) || (c = null);if (zd.length) {
      var d = zd.pop();d.topLevelType = a;d.nativeEvent = b;d.targetInst = c;a = d;
    } else a = { topLevelType: a, nativeEvent: b, targetInst: c, ancestors: [] };try {
      Kb(Ad, a);
    } finally {
      a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, 10 > zd.length && zd.push(a);
    }
  }
}var Fd = {},
    Gd = 0,
    Hd = "_reactListenersID" + ("" + Math.random()).slice(2);
function Id(a) {
  Object.prototype.hasOwnProperty.call(a, Hd) || (a[Hd] = Gd++, Fd[a[Hd]] = {});return Fd[a[Hd]];
}function Jd(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);if ("undefined" === typeof a) return null;try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}function Kd(a) {
  for (; a && a.firstChild;) {
    a = a.firstChild;
  }return a;
}
function Ld(a, b) {
  var c = Kd(a);a = 0;for (var d; c;) {
    if (3 === c.nodeType) {
      d = a + c.textContent.length;if (a <= b && d >= b) return { node: c, offset: b - a };a = d;
    }a: {
      for (; c;) {
        if (c.nextSibling) {
          c = c.nextSibling;break a;
        }c = c.parentNode;
      }c = void 0;
    }c = Kd(c);
  }
}function Md(a, b) {
  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Md(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}
function Nd() {
  for (var a = window, b = Jd(); b instanceof a.HTMLIFrameElement;) {
    try {
      var c = "string" === typeof b.contentWindow.location.href;
    } catch (d) {
      c = !1;
    }if (c) a = b.contentWindow;else break;b = Jd(a.document);
  }return b;
}function Od(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}
function Pd() {
  var a = Nd();if (Od(a)) {
    if ("selectionStart" in a) var b = { start: a.selectionStart, end: a.selectionEnd };else a: {
      b = (b = a.ownerDocument) && b.defaultView || window;var c = b.getSelection && b.getSelection();if (c && 0 !== c.rangeCount) {
        b = c.anchorNode;var d = c.anchorOffset,
            e = c.focusNode;c = c.focusOffset;try {
          b.nodeType, e.nodeType;
        } catch (A) {
          b = null;break a;
        }var f = 0,
            g = -1,
            h = -1,
            l = 0,
            k = 0,
            m = a,
            p = null;b: for (;;) {
          for (var t;;) {
            m !== b || 0 !== d && 3 !== m.nodeType || (g = f + d);m !== e || 0 !== c && 3 !== m.nodeType || (h = f + c);3 === m.nodeType && (f += m.nodeValue.length);
            if (null === (t = m.firstChild)) break;p = m;m = t;
          }for (;;) {
            if (m === a) break b;p === b && ++l === d && (g = f);p === e && ++k === c && (h = f);if (null !== (t = m.nextSibling)) break;m = p;p = m.parentNode;
          }m = t;
        }b = -1 === g || -1 === h ? null : { start: g, end: h };
      } else b = null;
    }b = b || { start: 0, end: 0 };
  } else b = null;return { focusedElem: a, selectionRange: b };
}
function Qd(a) {
  var b = Nd(),
      c = a.focusedElem,
      d = a.selectionRange;if (b !== c && c && c.ownerDocument && Md(c.ownerDocument.documentElement, c)) {
    if (null !== d && Od(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
      a = a.getSelection();var e = c.textContent.length,
          f = Math.min(d.start, e);d = void 0 === d.end ? f : Math.min(d.end, e);!a.extend && f > d && (e = d, d = f, f = e);e = Ld(c, f);var g = Ld(c, d);e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
    }b = [];for (a = c; a = a.parentNode;) {
      1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
    }"function" === typeof c.focus && c.focus();for (c = 0; c < b.length; c++) {
      a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
    }
  }
}
var Rd = Ra && "documentMode" in document && 11 >= document.documentMode,
    Sd = { select: { phasedRegistrationNames: { bubbled: "onSelect", captured: "onSelectCapture" }, dependencies: "blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ") } },
    Td = null,
    Ud = null,
    Vd = null,
    Wd = !1;
function Xd(a, b) {
  var c = b.window === b ? b.document : 9 === b.nodeType ? b : b.ownerDocument;if (Wd || null == Td || Td !== Jd(c)) return null;c = Td;"selectionStart" in c && Od(c) ? c = { start: c.selectionStart, end: c.selectionEnd } : (c = (c.ownerDocument && c.ownerDocument.defaultView || window).getSelection(), c = { anchorNode: c.anchorNode, anchorOffset: c.anchorOffset, focusNode: c.focusNode, focusOffset: c.focusOffset });return Vd && dd(Vd, c) ? null : (Vd = c, a = y.getPooled(Sd.select, Ud, a, b), a.type = "select", a.target = Td, Qa(a), a);
}
var Yd = { eventTypes: Sd, extractEvents: function extractEvents(a, b, c, d) {
    var e = d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument,
        f;if (!(f = !e)) {
      a: {
        e = Id(e);f = sa.onSelect;for (var g = 0; g < f.length; g++) {
          var h = f[g];if (!e.hasOwnProperty(h) || !e[h]) {
            e = !1;break a;
          }
        }e = !0;
      }f = !e;
    }if (f) return null;e = b ? Ja(b) : window;switch (a) {case "focus":
        if (Mb(e) || "true" === e.contentEditable) Td = e, Ud = b, Vd = null;break;case "blur":
        Vd = Ud = Td = null;break;case "mousedown":
        Wd = !0;break;case "contextmenu":case "mouseup":case "dragend":
        return Wd = !1, Xd(c, d);case "selectionchange":
        if (Rd) break;
      case "keydown":case "keyup":
        return Xd(c, d);}return null;
  } };Ba.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ta = Ka;ua = Ia;va = Ja;Ba.injectEventPluginsByName({ SimpleEventPlugin: xd, EnterLeaveEventPlugin: ad, ChangeEventPlugin: Pc, SelectEventPlugin: Yd, BeforeInputEventPlugin: zb });function Zd(a) {
  var b = "";aa.Children.forEach(a, function (a) {
    null != a && (b += a);
  });return b;
}
function $d(a, b) {
  a = n({ children: void 0 }, b);if (b = Zd(b.children)) a.children = b;return a;
}function ae(a, b, c, d) {
  a = a.options;if (b) {
    b = {};for (var e = 0; e < c.length; e++) {
      b["$" + c[e]] = !0;
    }for (c = 0; c < a.length; c++) {
      e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    }
  } else {
    c = "" + uc(c);b = null;for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = !0;d && (a[e].defaultSelected = !0);return;
      }null !== b || a[e].disabled || (b = a[e]);
    }null !== b && (b.selected = !0);
  }
}
function be(a, b) {
  null != b.dangerouslySetInnerHTML ? x("91") : void 0;return n({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
}function ce(a, b) {
  var c = b.value;null == c && (c = b.defaultValue, b = b.children, null != b && (null != c ? x("92") : void 0, Array.isArray(b) && (1 >= b.length ? void 0 : x("93"), b = b[0]), c = b), null == c && (c = ""));a._wrapperState = { initialValue: uc(c) };
}
function de(a, b) {
  var c = uc(b.value),
      d = uc(b.defaultValue);null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));null != d && (a.defaultValue = "" + d);
}function ee(a) {
  var b = a.textContent;b === a._wrapperState.initialValue && (a.value = b);
}var fe = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
function ge(a) {
  switch (a) {case "svg":
      return "http://www.w3.org/2000/svg";case "math":
      return "http://www.w3.org/1998/Math/MathML";default:
      return "http://www.w3.org/1999/xhtml";}
}function he(a, b) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? ge(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}
var ie = void 0,
    je = function (a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function () {
      return a(b, c, d, e);
    });
  } : a;
}(function (a, b) {
  if (a.namespaceURI !== fe.svg || "innerHTML" in a) a.innerHTML = b;else {
    ie = ie || document.createElement("div");ie.innerHTML = "<svg>" + b + "</svg>";for (b = ie.firstChild; a.firstChild;) {
      a.removeChild(a.firstChild);
    }for (; b.firstChild;) {
      a.appendChild(b.firstChild);
    }
  }
});
function ke(a, b) {
  if (b) {
    var c = a.firstChild;if (c && c === a.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;return;
    }
  }a.textContent = b;
}
var le = { animationIterationCount: !0, borderImageOutset: !0, borderImageSlice: !0, borderImageWidth: !0, boxFlex: !0, boxFlexGroup: !0, boxOrdinalGroup: !0, columnCount: !0, columns: !0, flex: !0, flexGrow: !0, flexPositive: !0, flexShrink: !0, flexNegative: !0, flexOrder: !0, gridArea: !0, gridRow: !0, gridRowEnd: !0, gridRowSpan: !0, gridRowStart: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnSpan: !0, gridColumnStart: !0, fontWeight: !0, lineClamp: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, tabSize: !0, widows: !0, zIndex: !0, zoom: !0, fillOpacity: !0,
  floodOpacity: !0, stopOpacity: !0, strokeDasharray: !0, strokeDashoffset: !0, strokeMiterlimit: !0, strokeOpacity: !0, strokeWidth: !0 },
    me = ["Webkit", "ms", "Moz", "O"];Object.keys(le).forEach(function (a) {
  me.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);le[b] = le[a];
  });
});function ne(a, b, c) {
  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || le.hasOwnProperty(a) && le[a] ? ("" + b).trim() : b + "px";
}
function oe(a, b) {
  a = a.style;for (var c in b) {
    if (b.hasOwnProperty(c)) {
      var d = 0 === c.indexOf("--"),
          e = ne(c, b[c], d);"float" === c && (c = "cssFloat");d ? a.setProperty(c, e) : a[c] = e;
    }
  }
}var pe = n({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });
function qe(a, b) {
  b && (pe[a] && (null != b.children || null != b.dangerouslySetInnerHTML ? x("137", a, "") : void 0), null != b.dangerouslySetInnerHTML && (null != b.children ? x("60") : void 0, "object" === _typeof(b.dangerouslySetInnerHTML) && "__html" in b.dangerouslySetInnerHTML ? void 0 : x("61")), null != b.style && "object" !== _typeof(b.style) ? x("62", "") : void 0);
}
function re(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;switch (a) {case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":
      return !1;default:
      return !0;}
}
function se(a, b) {
  a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument;var c = Id(a);b = sa[b];for (var d = 0; d < b.length; d++) {
    var e = b[d];if (!c.hasOwnProperty(e) || !c[e]) {
      switch (e) {case "scroll":
          Ed("scroll", a);break;case "focus":case "blur":
          Ed("focus", a);Ed("blur", a);c.blur = !0;c.focus = !0;break;case "cancel":case "close":
          Ob(e) && Ed(e, a);break;case "invalid":case "submit":case "reset":
          break;default:
          -1 === ab.indexOf(e) && E(e, a);}c[e] = !0;
    }
  }
}function te() {}var ue = null,
    ve = null;
function we(a, b) {
  switch (a) {case "button":case "input":case "select":case "textarea":
      return !!b.autoFocus;}return !1;
}function xe(a, b) {
  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === _typeof(b.dangerouslySetInnerHTML) && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}
var ye = "function" === typeof setTimeout ? setTimeout : void 0,
    ze = "function" === typeof clearTimeout ? clearTimeout : void 0,
    Ae = r.unstable_scheduleCallback,
    Be = r.unstable_cancelCallback;
function Ce(a, b, c, d, e) {
  a[Ga] = e;"input" === c && "radio" === e.type && null != e.name && xc(a, e);re(c, d);d = re(c, e);for (var f = 0; f < b.length; f += 2) {
    var g = b[f],
        h = b[f + 1];"style" === g ? oe(a, h) : "dangerouslySetInnerHTML" === g ? je(a, h) : "children" === g ? ke(a, h) : tc(a, g, h, d);
  }switch (c) {case "input":
      yc(a, e);break;case "textarea":
      de(a, e);break;case "select":
      b = a._wrapperState.wasMultiple, a._wrapperState.wasMultiple = !!e.multiple, c = e.value, null != c ? ae(a, !!e.multiple, c, !1) : b !== !!e.multiple && (null != e.defaultValue ? ae(a, !!e.multiple, e.defaultValue, !0) : ae(a, !!e.multiple, e.multiple ? [] : "", !1));}
}function De(a) {
  for (a = a.nextSibling; a && 1 !== a.nodeType && 3 !== a.nodeType;) {
    a = a.nextSibling;
  }return a;
}function Ee(a) {
  for (a = a.firstChild; a && 1 !== a.nodeType && 3 !== a.nodeType;) {
    a = a.nextSibling;
  }return a;
}new Set();var Fe = [],
    Ge = -1;function F(a) {
  0 > Ge || (a.current = Fe[Ge], Fe[Ge] = null, Ge--);
}function G(a, b) {
  Ge++;Fe[Ge] = a.current;a.current = b;
}var He = {},
    H = { current: He },
    I = { current: !1 },
    Ie = He;
function Je(a, b) {
  var c = a.type.contextTypes;if (!c) return He;var d = a.stateNode;if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;var e = {},
      f;for (f in c) {
    e[f] = b[f];
  }d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);return e;
}function J(a) {
  a = a.childContextTypes;return null !== a && void 0 !== a;
}function Ke(a) {
  F(I, a);F(H, a);
}function Le(a) {
  F(I, a);F(H, a);
}
function Me(a, b, c) {
  H.current !== He ? x("168") : void 0;G(H, b, a);G(I, c, a);
}function Ne(a, b, c) {
  var d = a.stateNode;a = b.childContextTypes;if ("function" !== typeof d.getChildContext) return c;d = d.getChildContext();for (var e in d) {
    e in a ? void 0 : x("108", ic(b) || "Unknown", e);
  }return n({}, c, d);
}function Oe(a) {
  var b = a.stateNode;b = b && b.__reactInternalMemoizedMergedChildContext || He;Ie = H.current;G(H, b, a);G(I, I.current, a);return !0;
}
function Pe(a, b, c) {
  var d = a.stateNode;d ? void 0 : x("169");c ? (b = Ne(a, b, Ie), d.__reactInternalMemoizedMergedChildContext = b, F(I, a), F(H, a), G(H, b, a)) : F(I, a);G(I, c, a);
}var Qe = null,
    Re = null;function Se(a) {
  return function (b) {
    try {
      return a(b);
    } catch (c) {}
  };
}
function Te(a) {
  if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;if (b.isDisabled || !b.supportsFiber) return !0;try {
    var c = b.inject(a);Qe = Se(function (a) {
      return b.onCommitFiberRoot(c, a);
    });Re = Se(function (a) {
      return b.onCommitFiberUnmount(c, a);
    });
  } catch (d) {}return !0;
}
function Ue(a, b, c, d) {
  this.tag = a;this.key = c;this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;this.index = 0;this.ref = null;this.pendingProps = b;this.contextDependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;this.mode = d;this.effectTag = 0;this.lastEffect = this.firstEffect = this.nextEffect = null;this.childExpirationTime = this.expirationTime = 0;this.alternate = null;
}function K(a, b, c, d) {
  return new Ue(a, b, c, d);
}
function Ve(a) {
  a = a.prototype;return !(!a || !a.isReactComponent);
}function We(a) {
  if ("function" === typeof a) return Ve(a) ? 1 : 0;if (void 0 !== a && null !== a) {
    a = a.$$typeof;if (a === cc) return 11;if (a === ec) return 14;
  }return 2;
}
function Xe(a, b) {
  var c = a.alternate;null === c ? (c = K(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);c.childExpirationTime = a.childExpirationTime;c.expirationTime = a.expirationTime;c.child = a.child;c.memoizedProps = a.memoizedProps;c.memoizedState = a.memoizedState;c.updateQueue = a.updateQueue;c.contextDependencies = a.contextDependencies;c.sibling = a.sibling;
  c.index = a.index;c.ref = a.ref;return c;
}
function Ye(a, b, c, d, e, f) {
  var g = 2;d = a;if ("function" === typeof a) Ve(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {case Xb:
      return Ze(c.children, e, f, b);case bc:
      return $e(c, e | 3, f, b);case Yb:
      return $e(c, e | 2, f, b);case Zb:
      return a = K(12, c, b, e | 4), a.elementType = Zb, a.type = Zb, a.expirationTime = f, a;case dc:
      return a = K(13, c, b, e), a.elementType = dc, a.type = dc, a.expirationTime = f, a;default:
      if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a) switch (a.$$typeof) {case $b:
          g = 10;break a;case ac:
          g = 9;break a;case cc:
          g = 11;break a;case ec:
          g = 14;break a;case fc:
          g = 16;d = null;break a;}x("130", null == a ? a : typeof a === "undefined" ? "undefined" : _typeof(a), "");}b = K(g, c, b, e);b.elementType = a;b.type = d;b.expirationTime = f;return b;
}function Ze(a, b, c, d) {
  a = K(7, a, d, b);a.expirationTime = c;return a;
}function $e(a, b, c, d) {
  a = K(8, a, d, b);b = 0 === (b & 1) ? Yb : bc;a.elementType = b;a.type = b;a.expirationTime = c;return a;
}function af(a, b, c) {
  a = K(6, a, null, b);a.expirationTime = c;return a;
}
function bf(a, b, c) {
  b = K(4, null !== a.children ? a.children : [], a.key, b);b.expirationTime = c;b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };return b;
}function cf(a, b) {
  a.didError = !1;var c = a.earliestPendingTime;0 === c ? a.earliestPendingTime = a.latestPendingTime = b : c < b ? a.earliestPendingTime = b : a.latestPendingTime > b && (a.latestPendingTime = b);df(b, a);
}
function ef(a, b) {
  a.didError = !1;if (0 === b) a.earliestPendingTime = 0, a.latestPendingTime = 0, a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0;else {
    b < a.latestPingedTime && (a.latestPingedTime = 0);var c = a.latestPendingTime;0 !== c && (c > b ? a.earliestPendingTime = a.latestPendingTime = 0 : a.earliestPendingTime > b && (a.earliestPendingTime = a.latestPendingTime));c = a.earliestSuspendedTime;0 === c ? cf(a, b) : b < a.latestSuspendedTime ? (a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0, cf(a, b)) : b > c && cf(a, b);
  }df(0, a);
}function ff(a, b) {
  a.didError = !1;a.latestPingedTime >= b && (a.latestPingedTime = 0);var c = a.earliestPendingTime,
      d = a.latestPendingTime;c === b ? a.earliestPendingTime = d === b ? a.latestPendingTime = 0 : d : d === b && (a.latestPendingTime = c);c = a.earliestSuspendedTime;d = a.latestSuspendedTime;0 === c ? a.earliestSuspendedTime = a.latestSuspendedTime = b : c < b ? a.earliestSuspendedTime = b : d > b && (a.latestSuspendedTime = b);df(b, a);
}
function gf(a, b) {
  var c = a.earliestPendingTime;a = a.earliestSuspendedTime;c > b && (b = c);a > b && (b = a);return b;
}function df(a, b) {
  var c = b.earliestSuspendedTime,
      d = b.latestSuspendedTime,
      e = b.earliestPendingTime,
      f = b.latestPingedTime;e = 0 !== e ? e : f;0 === e && (0 === a || d < a) && (e = d);a = e;0 !== a && c > a && (a = c);b.nextExpirationTimeToWorkOn = e;b.expirationTime = a;
}function L(a, b) {
  if (a && a.defaultProps) {
    b = n({}, b);a = a.defaultProps;for (var c in a) {
      void 0 === b[c] && (b[c] = a[c]);
    }
  }return b;
}
function hf(a) {
  var b = a._result;switch (a._status) {case 1:
      return b;case 2:
      throw b;case 0:
      throw b;default:
      a._status = 0;b = a._ctor;b = b();b.then(function (b) {
        0 === a._status && (b = b.default, a._status = 1, a._result = b);
      }, function (b) {
        0 === a._status && (a._status = 2, a._result = b);
      });switch (a._status) {case 1:
          return a._result;case 2:
          throw a._result;}a._result = b;throw b;}
}var jf = new aa.Component().refs;
function kf(a, b, c, d) {
  b = a.memoizedState;c = c(d, b);c = null === c || void 0 === c ? b : n({}, b, c);a.memoizedState = c;d = a.updateQueue;null !== d && 0 === a.expirationTime && (d.baseState = c);
}
var tf = { isMounted: function isMounted(a) {
    return (a = a._reactInternalFiber) ? 2 === ed(a) : !1;
  }, enqueueSetState: function enqueueSetState(a, b, c) {
    a = a._reactInternalFiber;var d = lf();d = mf(d, a);var e = nf(d);e.payload = b;void 0 !== c && null !== c && (e.callback = c);of();pf(a, e);qf(a, d);
  }, enqueueReplaceState: function enqueueReplaceState(a, b, c) {
    a = a._reactInternalFiber;var d = lf();d = mf(d, a);var e = nf(d);e.tag = rf;e.payload = b;void 0 !== c && null !== c && (e.callback = c);of();pf(a, e);qf(a, d);
  }, enqueueForceUpdate: function enqueueForceUpdate(a, b) {
    a = a._reactInternalFiber;var c = lf();c = mf(c, a);var d = nf(c);d.tag = sf;void 0 !== b && null !== b && (d.callback = b);of();pf(a, d);qf(a, c);
  } };function uf(a, b, c, d, e, f, g) {
  a = a.stateNode;return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !dd(c, d) || !dd(e, f) : !0;
}
function vf(a, b, c) {
  var d = !1,
      e = He;var f = b.contextType;"object" === (typeof f === "undefined" ? "undefined" : _typeof(f)) && null !== f ? f = M(f) : (e = J(b) ? Ie : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Je(a, e) : He);b = new b(c, f);a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;b.updater = tf;a.stateNode = b;b._reactInternalFiber = a;d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);return b;
}
function wf(a, b, c, d) {
  a = b.state;"function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);"function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);b.state !== a && tf.enqueueReplaceState(b, b.state, null);
}
function xf(a, b, c, d) {
  var e = a.stateNode;e.props = c;e.state = a.memoizedState;e.refs = jf;var f = b.contextType;"object" === (typeof f === "undefined" ? "undefined" : _typeof(f)) && null !== f ? e.context = M(f) : (f = J(b) ? Ie : H.current, e.context = Je(a, f));f = a.updateQueue;null !== f && (yf(a, f, c, e, d), e.state = a.memoizedState);f = b.getDerivedStateFromProps;"function" === typeof f && (kf(a, b, f, c), e.state = a.memoizedState);"function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && tf.enqueueReplaceState(e, e.state, null), f = a.updateQueue, null !== f && (yf(a, f, c, e, d), e.state = a.memoizedState));"function" === typeof e.componentDidMount && (a.effectTag |= 4);
}var zf = Array.isArray;
function Af(a, b, c) {
  a = c.ref;if (null !== a && "function" !== typeof a && "object" !== (typeof a === "undefined" ? "undefined" : _typeof(a))) {
    if (c._owner) {
      c = c._owner;var d = void 0;c && (1 !== c.tag ? x("309") : void 0, d = c.stateNode);d ? void 0 : x("147", a);var e = "" + a;if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;b = function b(a) {
        var b = d.refs;b === jf && (b = d.refs = {});null === a ? delete b[e] : b[e] = a;
      };b._stringRef = e;return b;
    }"string" !== typeof a ? x("284") : void 0;c._owner ? void 0 : x("290", a);
  }return a;
}
function Bf(a, b) {
  "textarea" !== a.type && x("31", "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, "");
}
function Cf(a) {
  function b(b, c) {
    if (a) {
      var d = b.lastEffect;null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;c.nextEffect = null;c.effectTag = 8;
    }
  }function c(c, d) {
    if (!a) return null;for (; null !== d;) {
      b(c, d), d = d.sibling;
    }return null;
  }function d(a, b) {
    for (a = new Map(); null !== b;) {
      null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
    }return a;
  }function e(a, b, c) {
    a = Xe(a, b, c);a.index = 0;a.sibling = null;return a;
  }function f(b, c, d) {
    b.index = d;if (!a) return c;d = b.alternate;if (null !== d) return d = d.index, d < c ? (b.effectTag = 2, c) : d;b.effectTag = 2;return c;
  }function g(b) {
    a && null === b.alternate && (b.effectTag = 2);return b;
  }function h(a, b, c, d) {
    if (null === b || 6 !== b.tag) return b = af(c, a.mode, d), b.return = a, b;b = e(b, c, d);b.return = a;return b;
  }function l(a, b, c, d) {
    if (null !== b && b.elementType === c.type) return d = e(b, c.props, d), d.ref = Af(a, b, c), d.return = a, d;d = Ye(c.type, c.key, c.props, null, a.mode, d);d.ref = Af(a, b, c);d.return = a;return d;
  }function k(a, b, c, d) {
    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = bf(c, a.mode, d), b.return = a, b;b = e(b, c.children || [], d);b.return = a;return b;
  }function m(a, b, c, d, f) {
    if (null === b || 7 !== b.tag) return b = Ze(c, a.mode, d, f), b.return = a, b;b = e(b, c, d);b.return = a;return b;
  }function p(a, b, c) {
    if ("string" === typeof b || "number" === typeof b) return b = af("" + b, a.mode, c), b.return = a, b;if ("object" === (typeof b === "undefined" ? "undefined" : _typeof(b)) && null !== b) {
      switch (b.$$typeof) {case Vb:
          return c = Ye(b.type, b.key, b.props, null, a.mode, c), c.ref = Af(a, null, b), c.return = a, c;case Wb:
          return b = bf(b, a.mode, c), b.return = a, b;}if (zf(b) || hc(b)) return b = Ze(b, a.mode, c, null), b.return = a, b;Bf(a, b);
    }return null;
  }function t(a, b, c, d) {
    var e = null !== b ? b.key : null;if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);if ("object" === (typeof c === "undefined" ? "undefined" : _typeof(c)) && null !== c) {
      switch (c.$$typeof) {case Vb:
          return c.key === e ? c.type === Xb ? m(a, b, c.props.children, d, e) : l(a, b, c, d) : null;case Wb:
          return c.key === e ? k(a, b, c, d) : null;}if (zf(c) || hc(c)) return null !== e ? null : m(a, b, c, d, null);Bf(a, c);
    }return null;
  }function A(a, b, c, d, e) {
    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);if ("object" === (typeof d === "undefined" ? "undefined" : _typeof(d)) && null !== d) {
      switch (d.$$typeof) {case Vb:
          return a = a.get(null === d.key ? c : d.key) || null, d.type === Xb ? m(b, a, d.props.children, e, d.key) : l(b, a, d, e);case Wb:
          return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);}if (zf(d) || hc(d)) return a = a.get(c) || null, m(b, a, d, e, null);Bf(b, d);
    }return null;
  }function v(e, g, h, k) {
    for (var l = null, m = null, q = g, u = g = 0, B = null; null !== q && u < h.length; u++) {
      q.index > u ? (B = q, q = null) : B = q.sibling;var w = t(e, q, h[u], k);if (null === w) {
        null === q && (q = B);break;
      }a && q && null === w.alternate && b(e, q);g = f(w, g, u);null === m ? l = w : m.sibling = w;m = w;q = B;
    }if (u === h.length) return c(e, q), l;if (null === q) {
      for (; u < h.length; u++) {
        if (q = p(e, h[u], k)) g = f(q, g, u), null === m ? l = q : m.sibling = q, m = q;
      }return l;
    }for (q = d(e, q); u < h.length; u++) {
      if (B = A(q, e, u, h[u], k)) a && null !== B.alternate && q.delete(null === B.key ? u : B.key), g = f(B, g, u), null === m ? l = B : m.sibling = B, m = B;
    }a && q.forEach(function (a) {
      return b(e, a);
    });return l;
  }function R(e, g, h, k) {
    var l = hc(h);"function" !== typeof l ? x("150") : void 0;h = l.call(h);null == h ? x("151") : void 0;
    for (var m = l = null, q = g, u = g = 0, B = null, w = h.next(); null !== q && !w.done; u++, w = h.next()) {
      q.index > u ? (B = q, q = null) : B = q.sibling;var v = t(e, q, w.value, k);if (null === v) {
        q || (q = B);break;
      }a && q && null === v.alternate && b(e, q);g = f(v, g, u);null === m ? l = v : m.sibling = v;m = v;q = B;
    }if (w.done) return c(e, q), l;if (null === q) {
      for (; !w.done; u++, w = h.next()) {
        w = p(e, w.value, k), null !== w && (g = f(w, g, u), null === m ? l = w : m.sibling = w, m = w);
      }return l;
    }for (q = d(e, q); !w.done; u++, w = h.next()) {
      w = A(q, e, u, w.value, k), null !== w && (a && null !== w.alternate && q.delete(null === w.key ? u : w.key), g = f(w, g, u), null === m ? l = w : m.sibling = w, m = w);
    }a && q.forEach(function (a) {
      return b(e, a);
    });return l;
  }return function (a, d, f, h) {
    var k = "object" === (typeof f === "undefined" ? "undefined" : _typeof(f)) && null !== f && f.type === Xb && null === f.key;k && (f = f.props.children);var l = "object" === (typeof f === "undefined" ? "undefined" : _typeof(f)) && null !== f;if (l) switch (f.$$typeof) {case Vb:
        a: {
          l = f.key;for (k = d; null !== k;) {
            if (k.key === l) {
              if (7 === k.tag ? f.type === Xb : k.elementType === f.type) {
                c(a, k.sibling);d = e(k, f.type === Xb ? f.props.children : f.props, h);d.ref = Af(a, k, f);d.return = a;a = d;break a;
              } else {
                c(a, k);break;
              }
            } else b(a, k);k = k.sibling;
          }f.type === Xb ? (d = Ze(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Ye(f.type, f.key, f.props, null, a.mode, h), h.ref = Af(a, d, f), h.return = a, a = h);
        }return g(a);case Wb:
        a: {
          for (k = f.key; null !== d;) {
            if (d.key === k) {
              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                c(a, d.sibling);d = e(d, f.children || [], h);d.return = a;a = d;break a;
              } else {
                c(a, d);break;
              }
            } else b(a, d);d = d.sibling;
          }d = bf(f, a.mode, h);d.return = a;a = d;
        }return g(a);}if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f, h), d.return = a, a = d) : (c(a, d), d = af(f, a.mode, h), d.return = a, a = d), g(a);if (zf(f)) return v(a, d, f, h);if (hc(f)) return R(a, d, f, h);l && Bf(a, f);if ("undefined" === typeof f && !k) switch (a.tag) {case 1:case 0:
        h = a.type, x("152", h.displayName || h.name || "Component");}return c(a, d);
  };
}var Df = Cf(!0),
    Ef = Cf(!1),
    Ff = {},
    N = { current: Ff },
    Gf = { current: Ff },
    Hf = { current: Ff };function If(a) {
  a === Ff ? x("174") : void 0;return a;
}
function Jf(a, b) {
  G(Hf, b, a);G(Gf, a, a);G(N, Ff, a);var c = b.nodeType;switch (c) {case 9:case 11:
      b = (b = b.documentElement) ? b.namespaceURI : he(null, "");break;default:
      c = 8 === c ? b.parentNode : b, b = c.namespaceURI || null, c = c.tagName, b = he(b, c);}F(N, a);G(N, b, a);
}function Kf(a) {
  F(N, a);F(Gf, a);F(Hf, a);
}function Lf(a) {
  If(Hf.current);var b = If(N.current);var c = he(b, a.type);b !== c && (G(Gf, a, a), G(N, c, a));
}function Mf(a) {
  Gf.current === a && (F(N, a), F(Gf, a));
}
var Nf = 0,
    Of = 2,
    Pf = 4,
    Qf = 8,
    Rf = 16,
    Sf = 32,
    Tf = 64,
    Uf = 128,
    Vf = Tb.ReactCurrentDispatcher,
    Wf = 0,
    Xf = null,
    O = null,
    P = null,
    Yf = null,
    Q = null,
    Zf = null,
    $f = 0,
    ag = null,
    bg = 0,
    cg = !1,
    dg = null,
    eg = 0;function fg() {
  x("321");
}function gg(a, b) {
  if (null === b) return !1;for (var c = 0; c < b.length && c < a.length; c++) {
    if (!bd(a[c], b[c])) return !1;
  }return !0;
}
function hg(a, b, c, d, e, f) {
  Wf = f;Xf = b;P = null !== a ? a.memoizedState : null;Vf.current = null === P ? ig : jg;b = c(d, e);if (cg) {
    do {
      cg = !1, eg += 1, P = null !== a ? a.memoizedState : null, Zf = Yf, ag = Q = O = null, Vf.current = jg, b = c(d, e);
    } while (cg);dg = null;eg = 0;
  }Vf.current = kg;a = Xf;a.memoizedState = Yf;a.expirationTime = $f;a.updateQueue = ag;a.effectTag |= bg;a = null !== O && null !== O.next;Wf = 0;Zf = Q = Yf = P = O = Xf = null;$f = 0;ag = null;bg = 0;a ? x("300") : void 0;return b;
}function lg() {
  Vf.current = kg;Wf = 0;Zf = Q = Yf = P = O = Xf = null;$f = 0;ag = null;bg = 0;cg = !1;dg = null;eg = 0;
}
function mg() {
  var a = { memoizedState: null, baseState: null, queue: null, baseUpdate: null, next: null };null === Q ? Yf = Q = a : Q = Q.next = a;return Q;
}function ng() {
  if (null !== Zf) Q = Zf, Zf = Q.next, O = P, P = null !== O ? O.next : null;else {
    null === P ? x("310") : void 0;O = P;var a = { memoizedState: O.memoizedState, baseState: O.baseState, queue: O.queue, baseUpdate: O.baseUpdate, next: null };Q = null === Q ? Yf = a : Q.next = a;P = O.next;
  }return Q;
}function og(a, b) {
  return "function" === typeof b ? b(a) : b;
}
function pg(a) {
  var b = ng(),
      c = b.queue;null === c ? x("311") : void 0;c.lastRenderedReducer = a;if (0 < eg) {
    var d = c.dispatch;if (null !== dg) {
      var e = dg.get(c);if (void 0 !== e) {
        dg.delete(c);var f = b.memoizedState;do {
          f = a(f, e.action), e = e.next;
        } while (null !== e);bd(f, b.memoizedState) || (qg = !0);b.memoizedState = f;b.baseUpdate === c.last && (b.baseState = f);c.lastRenderedState = f;return [f, d];
      }
    }return [b.memoizedState, d];
  }d = c.last;var g = b.baseUpdate;f = b.baseState;null !== g ? (null !== d && (d.next = null), d = g.next) : d = null !== d ? d.next : null;if (null !== d) {
    var h = e = null,
        l = d,
        k = !1;do {
      var m = l.expirationTime;m < Wf ? (k || (k = !0, h = g, e = f), m > $f && ($f = m)) : f = l.eagerReducer === a ? l.eagerState : a(f, l.action);g = l;l = l.next;
    } while (null !== l && l !== d);k || (h = g, e = f);bd(f, b.memoizedState) || (qg = !0);b.memoizedState = f;b.baseUpdate = h;b.baseState = e;c.lastRenderedState = f;
  }return [b.memoizedState, c.dispatch];
}
function rg(a, b, c, d) {
  a = { tag: a, create: b, destroy: c, deps: d, next: null };null === ag ? (ag = { lastEffect: null }, ag.lastEffect = a.next = a) : (b = ag.lastEffect, null === b ? ag.lastEffect = a.next = a : (c = b.next, b.next = a, a.next = c, ag.lastEffect = a));return a;
}function sg(a, b, c, d) {
  var e = mg();bg |= a;e.memoizedState = rg(b, c, void 0, void 0 === d ? null : d);
}
function tg(a, b, c, d) {
  var e = ng();d = void 0 === d ? null : d;var f = void 0;if (null !== O) {
    var g = O.memoizedState;f = g.destroy;if (null !== d && gg(d, g.deps)) {
      rg(Nf, c, f, d);return;
    }
  }bg |= a;e.memoizedState = rg(b, c, f, d);
}function ug(a, b) {
  if ("function" === typeof b) return a = a(), b(a), function () {
    b(null);
  };if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
    b.current = null;
  };
}function vg() {}
function wg(a, b, c) {
  25 > eg ? void 0 : x("301");var d = a.alternate;if (a === Xf || null !== d && d === Xf) {
    if (cg = !0, a = { expirationTime: Wf, action: c, eagerReducer: null, eagerState: null, next: null }, null === dg && (dg = new Map()), c = dg.get(b), void 0 === c) dg.set(b, a);else {
      for (b = c; null !== b.next;) {
        b = b.next;
      }b.next = a;
    }
  } else {
    of();var e = lf();e = mf(e, a);var f = { expirationTime: e, action: c, eagerReducer: null, eagerState: null, next: null },
        g = b.last;if (null === g) f.next = f;else {
      var h = g.next;null !== h && (f.next = h);g.next = f;
    }b.last = f;if (0 === a.expirationTime && (null === d || 0 === d.expirationTime) && (d = b.lastRenderedReducer, null !== d)) try {
      var l = b.lastRenderedState,
          k = d(l, c);f.eagerReducer = d;f.eagerState = k;if (bd(k, l)) return;
    } catch (m) {} finally {}qf(a, e);
  }
}
var kg = { readContext: M, useCallback: fg, useContext: fg, useEffect: fg, useImperativeHandle: fg, useLayoutEffect: fg, useMemo: fg, useReducer: fg, useRef: fg, useState: fg, useDebugValue: fg },
    ig = { readContext: M, useCallback: function useCallback(a, b) {
    mg().memoizedState = [a, void 0 === b ? null : b];return a;
  }, useContext: M, useEffect: function useEffect(a, b) {
    return sg(516, Uf | Tf, a, b);
  }, useImperativeHandle: function useImperativeHandle(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;return sg(4, Pf | Sf, ug.bind(null, b, a), c);
  }, useLayoutEffect: function useLayoutEffect(a, b) {
    return sg(4, Pf | Sf, a, b);
  },
  useMemo: function useMemo(a, b) {
    var c = mg();b = void 0 === b ? null : b;a = a();c.memoizedState = [a, b];return a;
  }, useReducer: function useReducer(a, b, c) {
    var d = mg();b = void 0 !== c ? c(b) : b;d.memoizedState = d.baseState = b;a = d.queue = { last: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };a = a.dispatch = wg.bind(null, Xf, a);return [d.memoizedState, a];
  }, useRef: function useRef(a) {
    var b = mg();a = { current: a };return b.memoizedState = a;
  }, useState: function useState(a) {
    var b = mg();"function" === typeof a && (a = a());b.memoizedState = b.baseState = a;a = b.queue = { last: null, dispatch: null,
      lastRenderedReducer: og, lastRenderedState: a };a = a.dispatch = wg.bind(null, Xf, a);return [b.memoizedState, a];
  }, useDebugValue: vg },
    jg = { readContext: M, useCallback: function useCallback(a, b) {
    var c = ng();b = void 0 === b ? null : b;var d = c.memoizedState;if (null !== d && null !== b && gg(b, d[1])) return d[0];c.memoizedState = [a, b];return a;
  }, useContext: M, useEffect: function useEffect(a, b) {
    return tg(516, Uf | Tf, a, b);
  }, useImperativeHandle: function useImperativeHandle(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;return tg(4, Pf | Sf, ug.bind(null, b, a), c);
  }, useLayoutEffect: function useLayoutEffect(a, b) {
    return tg(4, Pf | Sf, a, b);
  }, useMemo: function useMemo(a, b) {
    var c = ng();b = void 0 === b ? null : b;var d = c.memoizedState;if (null !== d && null !== b && gg(b, d[1])) return d[0];a = a();c.memoizedState = [a, b];return a;
  }, useReducer: pg, useRef: function useRef() {
    return ng().memoizedState;
  }, useState: function useState(a) {
    return pg(og, a);
  }, useDebugValue: vg },
    xg = null,
    yg = null,
    zg = !1;
function Ag(a, b) {
  var c = K(5, null, null, 0);c.elementType = "DELETED";c.type = "DELETED";c.stateNode = b;c.return = a;c.effectTag = 8;null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
}function Bg(a, b) {
  switch (a.tag) {case 5:
      var c = a.type;b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;return null !== b ? (a.stateNode = b, !0) : !1;case 6:
      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;case 13:
      return !1;default:
      return !1;}
}
function Cg(a) {
  if (zg) {
    var b = yg;if (b) {
      var c = b;if (!Bg(a, b)) {
        b = De(c);if (!b || !Bg(a, b)) {
          a.effectTag |= 2;zg = !1;xg = a;return;
        }Ag(xg, c);
      }xg = a;yg = Ee(b);
    } else a.effectTag |= 2, zg = !1, xg = a;
  }
}function Dg(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 18 !== a.tag;) {
    a = a.return;
  }xg = a;
}function Eg(a) {
  if (a !== xg) return !1;if (!zg) return Dg(a), zg = !0, !1;var b = a.type;if (5 !== a.tag || "head" !== b && "body" !== b && !xe(b, a.memoizedProps)) for (b = yg; b;) {
    Ag(a, b), b = De(b);
  }Dg(a);yg = xg ? De(a.stateNode) : null;return !0;
}function Fg() {
  yg = xg = null;zg = !1;
}
var Gg = Tb.ReactCurrentOwner,
    qg = !1;function S(a, b, c, d) {
  b.child = null === a ? Ef(b, null, c, d) : Df(b, a.child, c, d);
}function Hg(a, b, c, d, e) {
  c = c.render;var f = b.ref;Ig(b, e);d = hg(a, b, c, d, f, e);if (null !== a && !qg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), Jg(a, b, e);b.effectTag |= 1;S(a, b, d, e);return b.child;
}
function Kg(a, b, c, d, e, f) {
  if (null === a) {
    var g = c.type;if ("function" === typeof g && !Ve(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, Lg(a, b, g, d, e, f);a = Ye(c.type, null, d, null, b.mode, f);a.ref = b.ref;a.return = b;return b.child = a;
  }g = a.child;if (e < f && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : dd, c(e, d) && a.ref === b.ref)) return Jg(a, b, f);b.effectTag |= 1;a = Xe(g, d, f);a.ref = b.ref;a.return = b;return b.child = a;
}
function Lg(a, b, c, d, e, f) {
  return null !== a && dd(a.memoizedProps, d) && a.ref === b.ref && (qg = !1, e < f) ? Jg(a, b, f) : Mg(a, b, c, d, f);
}function Ng(a, b) {
  var c = b.ref;if (null === a && null !== c || null !== a && a.ref !== c) b.effectTag |= 128;
}function Mg(a, b, c, d, e) {
  var f = J(c) ? Ie : H.current;f = Je(b, f);Ig(b, e);c = hg(a, b, c, d, f, e);if (null !== a && !qg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), Jg(a, b, e);b.effectTag |= 1;S(a, b, c, e);return b.child;
}
function Og(a, b, c, d, e) {
  if (J(c)) {
    var f = !0;Oe(b);
  } else f = !1;Ig(b, e);if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), vf(b, c, d, e), xf(b, c, d, e), d = !0;else if (null === a) {
    var g = b.stateNode,
        h = b.memoizedProps;g.props = h;var l = g.context,
        k = c.contextType;"object" === (typeof k === "undefined" ? "undefined" : _typeof(k)) && null !== k ? k = M(k) : (k = J(c) ? Ie : H.current, k = Je(b, k));var m = c.getDerivedStateFromProps,
        p = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;p || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || l !== k) && wf(b, g, d, k);Pg = !1;var t = b.memoizedState;l = g.state = t;var A = b.updateQueue;null !== A && (yf(b, A, d, g, e), l = b.memoizedState);h !== d || t !== l || I.current || Pg ? ("function" === typeof m && (kf(b, c, m, d), l = b.memoizedState), (h = Pg || uf(b, c, h, d, t, l, k)) ? (p || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.effectTag |= 4)) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = l), g.props = d, g.state = l, g.context = k, d = h) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), d = !1);
  } else g = b.stateNode, h = b.memoizedProps, g.props = b.type === b.elementType ? h : L(b.type, h), l = g.context, k = c.contextType, "object" === (typeof k === "undefined" ? "undefined" : _typeof(k)) && null !== k ? k = M(k) : (k = J(c) ? Ie : H.current, k = Je(b, k)), m = c.getDerivedStateFromProps, (p = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || l !== k) && wf(b, g, d, k), Pg = !1, l = b.memoizedState, t = g.state = l, A = b.updateQueue, null !== A && (yf(b, A, d, g, e), t = b.memoizedState), h !== d || l !== t || I.current || Pg ? ("function" === typeof m && (kf(b, c, m, d), t = b.memoizedState), (m = Pg || uf(b, c, h, d, l, t, k)) ? (p || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, t, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, t, k)), "function" === typeof g.componentDidUpdate && (b.effectTag |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = t), g.props = d, g.state = t, g.context = k, d = m) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 256), d = !1);return Qg(a, b, c, d, f, e);
}
function Qg(a, b, c, d, e, f) {
  Ng(a, b);var g = 0 !== (b.effectTag & 64);if (!d && !g) return e && Pe(b, c, !1), Jg(a, b, f);d = b.stateNode;Gg.current = b;var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();b.effectTag |= 1;null !== a && g ? (b.child = Df(b, a.child, null, f), b.child = Df(b, null, h, f)) : S(a, b, h, f);b.memoizedState = d.state;e && Pe(b, c, !0);return b.child;
}function Rg(a) {
  var b = a.stateNode;b.pendingContext ? Me(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Me(a, b.context, !1);Jf(a, b.containerInfo);
}
function Sg(a, b, c) {
  var d = b.mode,
      e = b.pendingProps,
      f = b.memoizedState;if (0 === (b.effectTag & 64)) {
    f = null;var g = !1;
  } else f = { timedOutAt: null !== f ? f.timedOutAt : 0 }, g = !0, b.effectTag &= -65;if (null === a) {
    if (g) {
      var h = e.fallback;a = Ze(null, d, 0, null);0 === (b.mode & 1) && (a.child = null !== b.memoizedState ? b.child.child : b.child);d = Ze(h, d, c, null);a.sibling = d;c = a;c.return = d.return = b;
    } else c = d = Ef(b, null, e.children, c);
  } else null !== a.memoizedState ? (d = a.child, h = d.sibling, g ? (c = e.fallback, e = Xe(d, d.pendingProps, 0), 0 === (b.mode & 1) && (g = null !== b.memoizedState ? b.child.child : b.child, g !== d.child && (e.child = g)), d = e.sibling = Xe(h, c, h.expirationTime), c = e, e.childExpirationTime = 0, c.return = d.return = b) : c = d = Df(b, d.child, e.children, c)) : (h = a.child, g ? (g = e.fallback, e = Ze(null, d, 0, null), e.child = h, 0 === (b.mode & 1) && (e.child = null !== b.memoizedState ? b.child.child : b.child), d = e.sibling = Ze(g, d, c, null), d.effectTag |= 2, c = e, e.childExpirationTime = 0, c.return = d.return = b) : d = c = Df(b, h, e.children, c)), b.stateNode = a.stateNode;b.memoizedState = f;b.child = c;return d;
}
function Jg(a, b, c) {
  null !== a && (b.contextDependencies = a.contextDependencies);if (b.childExpirationTime < c) return null;null !== a && b.child !== a.child ? x("153") : void 0;if (null !== b.child) {
    a = b.child;c = Xe(a, a.pendingProps, a.expirationTime);b.child = c;for (c.return = b; null !== a.sibling;) {
      a = a.sibling, c = c.sibling = Xe(a, a.pendingProps, a.expirationTime), c.return = b;
    }c.sibling = null;
  }return b.child;
}
function Tg(a, b, c) {
  var d = b.expirationTime;if (null !== a) {
    if (a.memoizedProps !== b.pendingProps || I.current) qg = !0;else {
      if (d < c) {
        qg = !1;switch (b.tag) {case 3:
            Rg(b);Fg();break;case 5:
            Lf(b);break;case 1:
            J(b.type) && Oe(b);break;case 4:
            Jf(b, b.stateNode.containerInfo);break;case 10:
            Ug(b, b.memoizedProps.value);break;case 13:
            if (null !== b.memoizedState) {
              d = b.child.childExpirationTime;if (0 !== d && d >= c) return Sg(a, b, c);b = Jg(a, b, c);return null !== b ? b.sibling : null;
            }}return Jg(a, b, c);
      }
    }
  } else qg = !1;b.expirationTime = 0;switch (b.tag) {case 2:
      d = b.elementType;null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);a = b.pendingProps;var e = Je(b, H.current);Ig(b, c);e = hg(null, b, d, a, e, c);b.effectTag |= 1;if ("object" === (typeof e === "undefined" ? "undefined" : _typeof(e)) && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
        b.tag = 1;lg();if (J(d)) {
          var f = !0;Oe(b);
        } else f = !1;b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;var g = d.getDerivedStateFromProps;"function" === typeof g && kf(b, d, g, a);e.updater = tf;b.stateNode = e;e._reactInternalFiber = b;xf(b, d, a, c);b = Qg(null, b, d, !0, f, c);
      } else b.tag = 0, S(null, b, e, c), b = b.child;return b;case 16:
      e = b.elementType;null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);f = b.pendingProps;a = hf(e);b.type = a;e = b.tag = We(a);f = L(a, f);g = void 0;switch (e) {case 0:
          g = Mg(null, b, a, f, c);break;case 1:
          g = Og(null, b, a, f, c);break;case 11:
          g = Hg(null, b, a, f, c);break;case 14:
          g = Kg(null, b, a, L(a.type, f), d, c);break;default:
          x("306", a, "");}return g;case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : L(d, e), Mg(a, b, d, e, c);case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : L(d, e), Og(a, b, d, e, c);case 3:
      Rg(b);d = b.updateQueue;null === d ? x("282") : void 0;e = b.memoizedState;e = null !== e ? e.element : null;yf(b, d, b.pendingProps, null, c);d = b.memoizedState.element;if (d === e) Fg(), b = Jg(a, b, c);else {
        e = b.stateNode;if (e = (null === a || null === a.child) && e.hydrate) yg = Ee(b.stateNode.containerInfo), xg = b, e = zg = !0;e ? (b.effectTag |= 2, b.child = Ef(b, null, d, c)) : (S(a, b, d, c), Fg());b = b.child;
      }return b;case 5:
      return Lf(b), null === a && Cg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, xe(d, e) ? g = null : null !== f && xe(d, f) && (b.effectTag |= 16), Ng(a, b), 1 !== c && b.mode & 1 && e.hidden ? (b.expirationTime = b.childExpirationTime = 1, b = null) : (S(a, b, g, c), b = b.child), b;case 6:
      return null === a && Cg(b), null;case 13:
      return Sg(a, b, c);case 4:
      return Jf(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Df(b, null, d, c) : S(a, b, d, c), b.child;case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : L(d, e), Hg(a, b, d, e, c);case 7:
      return S(a, b, b.pendingProps, c), b.child;case 8:
      return S(a, b, b.pendingProps.children, c), b.child;case 12:
      return S(a, b, b.pendingProps.children, c), b.child;case 10:
      a: {
        d = b.type._context;e = b.pendingProps;g = b.memoizedProps;f = e.value;Ug(b, f);if (null !== g) {
          var h = g.value;f = bd(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0;if (0 === f) {
            if (g.children === e.children && !I.current) {
              b = Jg(a, b, c);break a;
            }
          } else for (h = b.child, null !== h && (h.return = b); null !== h;) {
            var l = h.contextDependencies;if (null !== l) {
              g = h.child;for (var k = l.first; null !== k;) {
                if (k.context === d && 0 !== (k.observedBits & f)) {
                  1 === h.tag && (k = nf(c), k.tag = sf, pf(h, k));h.expirationTime < c && (h.expirationTime = c);k = h.alternate;null !== k && k.expirationTime < c && (k.expirationTime = c);k = c;for (var m = h.return; null !== m;) {
                    var p = m.alternate;if (m.childExpirationTime < k) m.childExpirationTime = k, null !== p && p.childExpirationTime < k && (p.childExpirationTime = k);else if (null !== p && p.childExpirationTime < k) p.childExpirationTime = k;else break;m = m.return;
                  }l.expirationTime < c && (l.expirationTime = c);break;
                }k = k.next;
              }
            } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;if (null !== g) g.return = h;else for (g = h; null !== g;) {
              if (g === b) {
                g = null;break;
              }h = g.sibling;if (null !== h) {
                h.return = g.return;g = h;break;
              }g = g.return;
            }h = g;
          }
        }S(a, b, e.children, c);b = b.child;
      }return b;case 9:
      return e = b.type, f = b.pendingProps, d = f.children, Ig(b, c), e = M(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, S(a, b, d, c), b.child;case 14:
      return e = b.type, f = L(e, b.pendingProps), f = L(e.type, f), Kg(a, b, e, f, d, c);case 15:
      return Lg(a, b, b.type, b.pendingProps, d, c);case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : L(d, e), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, J(d) ? (a = !0, Oe(b)) : a = !1, Ig(b, c), vf(b, d, e, c), xf(b, d, e, c), Qg(null, b, d, !0, a, c);}x("156");
}var Vg = { current: null },
    Wg = null,
    Xg = null,
    Yg = null;function Ug(a, b) {
  var c = a.type._context;G(Vg, c._currentValue, a);c._currentValue = b;
}function Zg(a) {
  var b = Vg.current;F(Vg, a);a.type._context._currentValue = b;
}function Ig(a, b) {
  Wg = a;Yg = Xg = null;var c = a.contextDependencies;null !== c && c.expirationTime >= b && (qg = !0);a.contextDependencies = null;
}
function M(a, b) {
  if (Yg !== a && !1 !== b && 0 !== b) {
    if ("number" !== typeof b || 1073741823 === b) Yg = a, b = 1073741823;b = { context: a, observedBits: b, next: null };null === Xg ? (null === Wg ? x("308") : void 0, Xg = b, Wg.contextDependencies = { first: b, expirationTime: 0 }) : Xg = Xg.next = b;
  }return a._currentValue;
}var $g = 0,
    rf = 1,
    sf = 2,
    ah = 3,
    Pg = !1;function bh(a) {
  return { baseState: a, firstUpdate: null, lastUpdate: null, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null };
}
function ch(a) {
  return { baseState: a.baseState, firstUpdate: a.firstUpdate, lastUpdate: a.lastUpdate, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null };
}function nf(a) {
  return { expirationTime: a, tag: $g, payload: null, callback: null, next: null, nextEffect: null };
}function dh(a, b) {
  null === a.lastUpdate ? a.firstUpdate = a.lastUpdate = b : (a.lastUpdate.next = b, a.lastUpdate = b);
}
function pf(a, b) {
  var c = a.alternate;if (null === c) {
    var d = a.updateQueue;var e = null;null === d && (d = a.updateQueue = bh(a.memoizedState));
  } else d = a.updateQueue, e = c.updateQueue, null === d ? null === e ? (d = a.updateQueue = bh(a.memoizedState), e = c.updateQueue = bh(c.memoizedState)) : d = a.updateQueue = ch(e) : null === e && (e = c.updateQueue = ch(d));null === e || d === e ? dh(d, b) : null === d.lastUpdate || null === e.lastUpdate ? (dh(d, b), dh(e, b)) : (dh(d, b), e.lastUpdate = b);
}
function eh(a, b) {
  var c = a.updateQueue;c = null === c ? a.updateQueue = bh(a.memoizedState) : fh(a, c);null === c.lastCapturedUpdate ? c.firstCapturedUpdate = c.lastCapturedUpdate = b : (c.lastCapturedUpdate.next = b, c.lastCapturedUpdate = b);
}function fh(a, b) {
  var c = a.alternate;null !== c && b === c.updateQueue && (b = a.updateQueue = ch(b));return b;
}
function gh(a, b, c, d, e, f) {
  switch (c.tag) {case rf:
      return a = c.payload, "function" === typeof a ? a.call(f, d, e) : a;case ah:
      a.effectTag = a.effectTag & -2049 | 64;case $g:
      a = c.payload;e = "function" === typeof a ? a.call(f, d, e) : a;if (null === e || void 0 === e) break;return n({}, d, e);case sf:
      Pg = !0;}return d;
}
function yf(a, b, c, d, e) {
  Pg = !1;b = fh(a, b);for (var f = b.baseState, g = null, h = 0, l = b.firstUpdate, k = f; null !== l;) {
    var m = l.expirationTime;m < e ? (null === g && (g = l, f = k), h < m && (h = m)) : (k = gh(a, b, l, k, c, d), null !== l.callback && (a.effectTag |= 32, l.nextEffect = null, null === b.lastEffect ? b.firstEffect = b.lastEffect = l : (b.lastEffect.nextEffect = l, b.lastEffect = l)));l = l.next;
  }m = null;for (l = b.firstCapturedUpdate; null !== l;) {
    var p = l.expirationTime;p < e ? (null === m && (m = l, null === g && (f = k)), h < p && (h = p)) : (k = gh(a, b, l, k, c, d), null !== l.callback && (a.effectTag |= 32, l.nextEffect = null, null === b.lastCapturedEffect ? b.firstCapturedEffect = b.lastCapturedEffect = l : (b.lastCapturedEffect.nextEffect = l, b.lastCapturedEffect = l)));l = l.next;
  }null === g && (b.lastUpdate = null);null === m ? b.lastCapturedUpdate = null : a.effectTag |= 32;null === g && null === m && (f = k);b.baseState = f;b.firstUpdate = g;b.firstCapturedUpdate = m;a.expirationTime = h;a.memoizedState = k;
}
function hh(a, b, c) {
  null !== b.firstCapturedUpdate && (null !== b.lastUpdate && (b.lastUpdate.next = b.firstCapturedUpdate, b.lastUpdate = b.lastCapturedUpdate), b.firstCapturedUpdate = b.lastCapturedUpdate = null);ih(b.firstEffect, c);b.firstEffect = b.lastEffect = null;ih(b.firstCapturedEffect, c);b.firstCapturedEffect = b.lastCapturedEffect = null;
}function ih(a, b) {
  for (; null !== a;) {
    var c = a.callback;if (null !== c) {
      a.callback = null;var d = b;"function" !== typeof c ? x("191", c) : void 0;c.call(d);
    }a = a.nextEffect;
  }
}
function jh(a, b) {
  return { value: a, source: b, stack: jc(b) };
}function kh(a) {
  a.effectTag |= 4;
}var lh = void 0,
    mh = void 0,
    nh = void 0,
    oh = void 0;lh = function lh(a, b) {
  for (var c = b.child; null !== c;) {
    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
      c.child.return = c;c = c.child;continue;
    }if (c === b) break;for (; null === c.sibling;) {
      if (null === c.return || c.return === b) return;c = c.return;
    }c.sibling.return = c.return;c = c.sibling;
  }
};mh = function mh() {};
nh = function nh(a, b, c, d, e) {
  var f = a.memoizedProps;if (f !== d) {
    var g = b.stateNode;If(N.current);a = null;switch (c) {case "input":
        f = vc(g, f);d = vc(g, d);a = [];break;case "option":
        f = $d(g, f);d = $d(g, d);a = [];break;case "select":
        f = n({}, f, { value: void 0 });d = n({}, d, { value: void 0 });a = [];break;case "textarea":
        f = be(g, f);d = be(g, d);a = [];break;default:
        "function" !== typeof f.onClick && "function" === typeof d.onClick && (g.onclick = te);}qe(c, d);g = c = void 0;var h = null;for (c in f) {
      if (!d.hasOwnProperty(c) && f.hasOwnProperty(c) && null != f[c]) if ("style" === c) {
        var l = f[c];for (g in l) {
          l.hasOwnProperty(g) && (h || (h = {}), h[g] = "");
        }
      } else "dangerouslySetInnerHTML" !== c && "children" !== c && "suppressContentEditableWarning" !== c && "suppressHydrationWarning" !== c && "autoFocus" !== c && (ra.hasOwnProperty(c) ? a || (a = []) : (a = a || []).push(c, null));
    }for (c in d) {
      var k = d[c];l = null != f ? f[c] : void 0;if (d.hasOwnProperty(c) && k !== l && (null != k || null != l)) if ("style" === c) {
        if (l) {
          for (g in l) {
            !l.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (h || (h = {}), h[g] = "");
          }for (g in k) {
            k.hasOwnProperty(g) && l[g] !== k[g] && (h || (h = {}), h[g] = k[g]);
          }
        } else h || (a || (a = []), a.push(c, h)), h = k;
      } else "dangerouslySetInnerHTML" === c ? (k = k ? k.__html : void 0, l = l ? l.__html : void 0, null != k && l !== k && (a = a || []).push(c, "" + k)) : "children" === c ? l === k || "string" !== typeof k && "number" !== typeof k || (a = a || []).push(c, "" + k) : "suppressContentEditableWarning" !== c && "suppressHydrationWarning" !== c && (ra.hasOwnProperty(c) ? (null != k && se(e, c), a || l === k || (a = [])) : (a = a || []).push(c, k));
    }h && (a = a || []).push("style", h);e = a;(b.updateQueue = e) && kh(b);
  }
};oh = function oh(a, b, c, d) {
  c !== d && kh(b);
};
var ph = "function" === typeof WeakSet ? WeakSet : Set;function qh(a, b) {
  var c = b.source,
      d = b.stack;null === d && null !== c && (d = jc(c));null !== c && ic(c.type);b = b.value;null !== a && 1 === a.tag && ic(a.type);try {
    console.error(b);
  } catch (e) {
    setTimeout(function () {
      throw e;
    });
  }
}function rh(a) {
  var b = a.ref;if (null !== b) if ("function" === typeof b) try {
    b(null);
  } catch (c) {
    sh(a, c);
  } else b.current = null;
}
function th(a, b, c) {
  c = c.updateQueue;c = null !== c ? c.lastEffect : null;if (null !== c) {
    var d = c = c.next;do {
      if ((d.tag & a) !== Nf) {
        var e = d.destroy;d.destroy = void 0;void 0 !== e && e();
      }(d.tag & b) !== Nf && (e = d.create, d.destroy = e());d = d.next;
    } while (d !== c);
  }
}
function uh(a, b) {
  for (var c = a;;) {
    if (5 === c.tag) {
      var d = c.stateNode;if (b) d.style.display = "none";else {
        d = c.stateNode;var e = c.memoizedProps.style;e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;d.style.display = ne("display", e);
      }
    } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;else if (13 === c.tag && null !== c.memoizedState) {
      d = c.child.sibling;d.return = c;c = d;continue;
    } else if (null !== c.child) {
      c.child.return = c;c = c.child;continue;
    }if (c === a) break;for (; null === c.sibling;) {
      if (null === c.return || c.return === a) return;c = c.return;
    }c.sibling.return = c.return;c = c.sibling;
  }
}
function vh(a) {
  "function" === typeof Re && Re(a);switch (a.tag) {case 0:case 11:case 14:case 15:
      var b = a.updateQueue;if (null !== b && (b = b.lastEffect, null !== b)) {
        var c = b = b.next;do {
          var d = c.destroy;if (void 0 !== d) {
            var e = a;try {
              d();
            } catch (f) {
              sh(e, f);
            }
          }c = c.next;
        } while (c !== b);
      }break;case 1:
      rh(a);b = a.stateNode;if ("function" === typeof b.componentWillUnmount) try {
        b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();
      } catch (f) {
        sh(a, f);
      }break;case 5:
      rh(a);break;case 4:
      wh(a);}
}
function xh(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function yh(a) {
  a: {
    for (var b = a.return; null !== b;) {
      if (xh(b)) {
        var c = b;break a;
      }b = b.return;
    }x("160");c = void 0;
  }var d = b = void 0;switch (c.tag) {case 5:
      b = c.stateNode;d = !1;break;case 3:
      b = c.stateNode.containerInfo;d = !0;break;case 4:
      b = c.stateNode.containerInfo;d = !0;break;default:
      x("161");}c.effectTag & 16 && (ke(b, ""), c.effectTag &= -17);a: b: for (c = a;;) {
    for (; null === c.sibling;) {
      if (null === c.return || xh(c.return)) {
        c = null;break a;
      }c = c.return;
    }c.sibling.return = c.return;for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {
      if (c.effectTag & 2) continue b;if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;
    }if (!(c.effectTag & 2)) {
      c = c.stateNode;break a;
    }
  }for (var e = a;;) {
    if (5 === e.tag || 6 === e.tag) {
      if (c) {
        if (d) {
          var f = b,
              g = e.stateNode,
              h = c;8 === f.nodeType ? f.parentNode.insertBefore(g, h) : f.insertBefore(g, h);
        } else b.insertBefore(e.stateNode, c);
      } else d ? (g = b, h = e.stateNode, 8 === g.nodeType ? (f = g.parentNode, f.insertBefore(h, g)) : (f = g, f.appendChild(h)), g = g._reactRootContainer, null !== g && void 0 !== g || null !== f.onclick || (f.onclick = te)) : b.appendChild(e.stateNode);
    } else if (4 !== e.tag && null !== e.child) {
      e.child.return = e;e = e.child;continue;
    }if (e === a) break;for (; null === e.sibling;) {
      if (null === e.return || e.return === a) return;e = e.return;
    }e.sibling.return = e.return;e = e.sibling;
  }
}
function wh(a) {
  for (var b = a, c = !1, d = void 0, e = void 0;;) {
    if (!c) {
      c = b.return;a: for (;;) {
        null === c ? x("160") : void 0;switch (c.tag) {case 5:
            d = c.stateNode;e = !1;break a;case 3:
            d = c.stateNode.containerInfo;e = !0;break a;case 4:
            d = c.stateNode.containerInfo;e = !0;break a;}c = c.return;
      }c = !0;
    }if (5 === b.tag || 6 === b.tag) {
      a: for (var f = b, g = f;;) {
        if (vh(g), null !== g.child && 4 !== g.tag) g.child.return = g, g = g.child;else {
          if (g === f) break;for (; null === g.sibling;) {
            if (null === g.return || g.return === f) break a;g = g.return;
          }g.sibling.return = g.return;g = g.sibling;
        }
      }e ? (f = d, g = b.stateNode, 8 === f.nodeType ? f.parentNode.removeChild(g) : f.removeChild(g)) : d.removeChild(b.stateNode);
    } else if (4 === b.tag) {
      if (null !== b.child) {
        d = b.stateNode.containerInfo;e = !0;b.child.return = b;b = b.child;continue;
      }
    } else if (vh(b), null !== b.child) {
      b.child.return = b;b = b.child;continue;
    }if (b === a) break;for (; null === b.sibling;) {
      if (null === b.return || b.return === a) return;b = b.return;4 === b.tag && (c = !1);
    }b.sibling.return = b.return;b = b.sibling;
  }
}
function zh(a, b) {
  switch (b.tag) {case 0:case 11:case 14:case 15:
      th(Pf, Qf, b);break;case 1:
      break;case 5:
      var c = b.stateNode;if (null != c) {
        var d = b.memoizedProps;a = null !== a ? a.memoizedProps : d;var e = b.type,
            f = b.updateQueue;b.updateQueue = null;null !== f && Ce(c, f, e, a, d, b);
      }break;case 6:
      null === b.stateNode ? x("162") : void 0;b.stateNode.nodeValue = b.memoizedProps;break;case 3:
      break;case 12:
      break;case 13:
      c = b.memoizedState;d = void 0;a = b;null === c ? d = !1 : (d = !0, a = b.child, 0 === c.timedOutAt && (c.timedOutAt = lf()));null !== a && uh(a, d);c = b.updateQueue;if (null !== c) {
        b.updateQueue = null;var g = b.stateNode;null === g && (g = b.stateNode = new ph());c.forEach(function (a) {
          var c = Ah.bind(null, b, a);g.has(a) || (g.add(a), a.then(c, c));
        });
      }break;case 17:
      break;default:
      x("163");}
}var Bh = "function" === typeof WeakMap ? WeakMap : Map;function Ch(a, b, c) {
  c = nf(c);c.tag = ah;c.payload = { element: null };var d = b.value;c.callback = function () {
    Dh(d);qh(a, b);
  };return c;
}
function Eh(a, b, c) {
  c = nf(c);c.tag = ah;var d = a.type.getDerivedStateFromError;if ("function" === typeof d) {
    var e = b.value;c.payload = function () {
      return d(e);
    };
  }var f = a.stateNode;null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
    "function" !== typeof d && (null === Fh ? Fh = new Set([this]) : Fh.add(this));var c = b.value,
        e = b.stack;qh(a, b);this.componentDidCatch(c, { componentStack: null !== e ? e : "" });
  });return c;
}
function Gh(a) {
  switch (a.tag) {case 1:
      J(a.type) && Ke(a);var b = a.effectTag;return b & 2048 ? (a.effectTag = b & -2049 | 64, a) : null;case 3:
      return Kf(a), Le(a), b = a.effectTag, 0 !== (b & 64) ? x("285") : void 0, a.effectTag = b & -2049 | 64, a;case 5:
      return Mf(a), null;case 13:
      return b = a.effectTag, b & 2048 ? (a.effectTag = b & -2049 | 64, a) : null;case 18:
      return null;case 4:
      return Kf(a), null;case 10:
      return Zg(a), null;default:
      return null;}
}
var Hh = Tb.ReactCurrentDispatcher,
    Ih = Tb.ReactCurrentOwner,
    Jh = 1073741822,
    Kh = !1,
    T = null,
    Lh = null,
    U = 0,
    Mh = -1,
    Nh = !1,
    V = null,
    Oh = !1,
    Ph = null,
    Qh = null,
    Rh = null,
    Fh = null;function Sh() {
  if (null !== T) for (var a = T.return; null !== a;) {
    var b = a;switch (b.tag) {case 1:
        var c = b.type.childContextTypes;null !== c && void 0 !== c && Ke(b);break;case 3:
        Kf(b);Le(b);break;case 5:
        Mf(b);break;case 4:
        Kf(b);break;case 10:
        Zg(b);}a = a.return;
  }Lh = null;U = 0;Mh = -1;Nh = !1;T = null;
}
function Th() {
  for (; null !== V;) {
    var a = V.effectTag;a & 16 && ke(V.stateNode, "");if (a & 128) {
      var b = V.alternate;null !== b && (b = b.ref, null !== b && ("function" === typeof b ? b(null) : b.current = null));
    }switch (a & 14) {case 2:
        yh(V);V.effectTag &= -3;break;case 6:
        yh(V);V.effectTag &= -3;zh(V.alternate, V);break;case 4:
        zh(V.alternate, V);break;case 8:
        a = V, wh(a), a.return = null, a.child = null, a.memoizedState = null, a.updateQueue = null, a = a.alternate, null !== a && (a.return = null, a.child = null, a.memoizedState = null, a.updateQueue = null);}V = V.nextEffect;
  }
}
function Uh() {
  for (; null !== V;) {
    if (V.effectTag & 256) a: {
      var a = V.alternate,
          b = V;switch (b.tag) {case 0:case 11:case 15:
          th(Of, Nf, b);break a;case 1:
          if (b.effectTag & 256 && null !== a) {
            var c = a.memoizedProps,
                d = a.memoizedState;a = b.stateNode;b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : L(b.type, c), d);a.__reactInternalSnapshotBeforeUpdate = b;
          }break a;case 3:case 5:case 6:case 4:case 17:
          break a;default:
          x("163");}
    }V = V.nextEffect;
  }
}
function Vh(a, b) {
  for (; null !== V;) {
    var c = V.effectTag;if (c & 36) {
      var d = V.alternate,
          e = V,
          f = b;switch (e.tag) {case 0:case 11:case 15:
          th(Rf, Sf, e);break;case 1:
          var g = e.stateNode;if (e.effectTag & 4) if (null === d) g.componentDidMount();else {
            var h = e.elementType === e.type ? d.memoizedProps : L(e.type, d.memoizedProps);g.componentDidUpdate(h, d.memoizedState, g.__reactInternalSnapshotBeforeUpdate);
          }d = e.updateQueue;null !== d && hh(e, d, g, f);break;case 3:
          d = e.updateQueue;if (null !== d) {
            g = null;if (null !== e.child) switch (e.child.tag) {case 5:
                g = e.child.stateNode;break;case 1:
                g = e.child.stateNode;}hh(e, d, g, f);
          }break;case 5:
          f = e.stateNode;null === d && e.effectTag & 4 && we(e.type, e.memoizedProps) && f.focus();break;case 6:
          break;case 4:
          break;case 12:
          break;case 13:
          break;case 17:
          break;default:
          x("163");}
    }c & 128 && (e = V.ref, null !== e && (f = V.stateNode, "function" === typeof e ? e(f) : e.current = f));c & 512 && (Ph = a);V = V.nextEffect;
  }
}
function Wh(a, b) {
  Rh = Qh = Ph = null;var c = W;W = !0;do {
    if (b.effectTag & 512) {
      var d = !1,
          e = void 0;try {
        var f = b;th(Uf, Nf, f);th(Nf, Tf, f);
      } catch (g) {
        d = !0, e = g;
      }d && sh(b, e);
    }b = b.nextEffect;
  } while (null !== b);W = c;c = a.expirationTime;0 !== c && Xh(a, c);X || W || Yh(1073741823, !1);
}function of() {
  null !== Qh && Be(Qh);null !== Rh && Rh();
}
function Zh(a, b) {
  Oh = Kh = !0;a.current === b ? x("177") : void 0;var c = a.pendingCommitExpirationTime;0 === c ? x("261") : void 0;a.pendingCommitExpirationTime = 0;var d = b.expirationTime,
      e = b.childExpirationTime;ef(a, e > d ? e : d);Ih.current = null;d = void 0;1 < b.effectTag ? null !== b.lastEffect ? (b.lastEffect.nextEffect = b, d = b.firstEffect) : d = b : d = b.firstEffect;ue = Bd;ve = Pd();Bd = !1;for (V = d; null !== V;) {
    e = !1;var f = void 0;try {
      Uh();
    } catch (h) {
      e = !0, f = h;
    }e && (null === V ? x("178") : void 0, sh(V, f), null !== V && (V = V.nextEffect));
  }for (V = d; null !== V;) {
    e = !1;
    f = void 0;try {
      Th();
    } catch (h) {
      e = !0, f = h;
    }e && (null === V ? x("178") : void 0, sh(V, f), null !== V && (V = V.nextEffect));
  }Qd(ve);ve = null;Bd = !!ue;ue = null;a.current = b;for (V = d; null !== V;) {
    e = !1;f = void 0;try {
      Vh(a, c);
    } catch (h) {
      e = !0, f = h;
    }e && (null === V ? x("178") : void 0, sh(V, f), null !== V && (V = V.nextEffect));
  }if (null !== d && null !== Ph) {
    var g = Wh.bind(null, a, d);Qh = r.unstable_runWithPriority(r.unstable_NormalPriority, function () {
      return Ae(g);
    });Rh = g;
  }Kh = Oh = !1;"function" === typeof Qe && Qe(b.stateNode);c = b.expirationTime;b = b.childExpirationTime;b = b > c ? b : c;0 === b && (Fh = null);$h(a, b);
}
function ai(a) {
  for (;;) {
    var b = a.alternate,
        c = a.return,
        d = a.sibling;if (0 === (a.effectTag & 1024)) {
      T = a;a: {
        var e = b;b = a;var f = U;var g = b.pendingProps;switch (b.tag) {case 2:
            break;case 16:
            break;case 15:case 0:
            break;case 1:
            J(b.type) && Ke(b);break;case 3:
            Kf(b);Le(b);g = b.stateNode;g.pendingContext && (g.context = g.pendingContext, g.pendingContext = null);if (null === e || null === e.child) Eg(b), b.effectTag &= -3;mh(b);break;case 5:
            Mf(b);var h = If(Hf.current);f = b.type;if (null !== e && null != b.stateNode) nh(e, b, f, g, h), e.ref !== b.ref && (b.effectTag |= 128);else if (g) {
              var l = If(N.current);if (Eg(b)) {
                g = b;e = g.stateNode;var k = g.type,
                    m = g.memoizedProps,
                    p = h;e[Fa] = g;e[Ga] = m;f = void 0;h = k;switch (h) {case "iframe":case "object":
                    E("load", e);break;case "video":case "audio":
                    for (k = 0; k < ab.length; k++) {
                      E(ab[k], e);
                    }break;case "source":
                    E("error", e);break;case "img":case "image":case "link":
                    E("error", e);E("load", e);break;case "form":
                    E("reset", e);E("submit", e);break;case "details":
                    E("toggle", e);break;case "input":
                    wc(e, m);E("invalid", e);se(p, "onChange");break;case "select":
                    e._wrapperState = { wasMultiple: !!m.multiple };E("invalid", e);se(p, "onChange");break;case "textarea":
                    ce(e, m), E("invalid", e), se(p, "onChange");}qe(h, m);k = null;for (f in m) {
                  m.hasOwnProperty(f) && (l = m[f], "children" === f ? "string" === typeof l ? e.textContent !== l && (k = ["children", l]) : "number" === typeof l && e.textContent !== "" + l && (k = ["children", "" + l]) : ra.hasOwnProperty(f) && null != l && se(p, f));
                }switch (h) {case "input":
                    Rb(e);Ac(e, m, !0);break;case "textarea":
                    Rb(e);ee(e, m);break;case "select":case "option":
                    break;default:
                    "function" === typeof m.onClick && (e.onclick = te);}f = k;g.updateQueue = f;g = null !== f ? !0 : !1;g && kh(b);
              } else {
                m = b;p = f;e = g;k = 9 === h.nodeType ? h : h.ownerDocument;l === fe.html && (l = ge(p));l === fe.html ? "script" === p ? (e = k.createElement("div"), e.innerHTML = "<script>\x3c/script>", k = e.removeChild(e.firstChild)) : "string" === typeof e.is ? k = k.createElement(p, { is: e.is }) : (k = k.createElement(p), "select" === p && (p = k, e.multiple ? p.multiple = !0 : e.size && (p.size = e.size))) : k = k.createElementNS(l, p);e = k;e[Fa] = m;e[Ga] = g;lh(e, b, !1, !1);p = e;k = f;m = g;var t = h,
                    A = re(k, m);switch (k) {case "iframe":case "object":
                    E("load", p);h = m;break;case "video":case "audio":
                    for (h = 0; h < ab.length; h++) {
                      E(ab[h], p);
                    }h = m;break;case "source":
                    E("error", p);h = m;break;case "img":case "image":case "link":
                    E("error", p);E("load", p);h = m;break;case "form":
                    E("reset", p);E("submit", p);h = m;break;case "details":
                    E("toggle", p);h = m;break;case "input":
                    wc(p, m);h = vc(p, m);E("invalid", p);se(t, "onChange");break;case "option":
                    h = $d(p, m);break;case "select":
                    p._wrapperState = { wasMultiple: !!m.multiple };h = n({}, m, { value: void 0 });E("invalid", p);se(t, "onChange");break;case "textarea":
                    ce(p, m);h = be(p, m);E("invalid", p);se(t, "onChange");break;default:
                    h = m;}qe(k, h);l = void 0;var v = k,
                    R = p,
                    u = h;for (l in u) {
                  if (u.hasOwnProperty(l)) {
                    var q = u[l];"style" === l ? oe(R, q) : "dangerouslySetInnerHTML" === l ? (q = q ? q.__html : void 0, null != q && je(R, q)) : "children" === l ? "string" === typeof q ? ("textarea" !== v || "" !== q) && ke(R, q) : "number" === typeof q && ke(R, "" + q) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ra.hasOwnProperty(l) ? null != q && se(t, l) : null != q && tc(R, l, q, A));
                  }
                }switch (k) {case "input":
                    Rb(p);
                    Ac(p, m, !1);break;case "textarea":
                    Rb(p);ee(p, m);break;case "option":
                    null != m.value && p.setAttribute("value", "" + uc(m.value));break;case "select":
                    h = p;h.multiple = !!m.multiple;p = m.value;null != p ? ae(h, !!m.multiple, p, !1) : null != m.defaultValue && ae(h, !!m.multiple, m.defaultValue, !0);break;default:
                    "function" === typeof h.onClick && (p.onclick = te);}(g = we(f, g)) && kh(b);b.stateNode = e;
              }null !== b.ref && (b.effectTag |= 128);
            } else null === b.stateNode ? x("166") : void 0;break;case 6:
            e && null != b.stateNode ? oh(e, b, e.memoizedProps, g) : ("string" !== typeof g && (null === b.stateNode ? x("166") : void 0), e = If(Hf.current), If(N.current), Eg(b) ? (g = b, f = g.stateNode, e = g.memoizedProps, f[Fa] = g, (g = f.nodeValue !== e) && kh(b)) : (f = b, g = (9 === e.nodeType ? e : e.ownerDocument).createTextNode(g), g[Fa] = b, f.stateNode = g));break;case 11:
            break;case 13:
            g = b.memoizedState;if (0 !== (b.effectTag & 64)) {
              b.expirationTime = f;T = b;break a;
            }g = null !== g;f = null !== e && null !== e.memoizedState;null !== e && !g && f && (e = e.child.sibling, null !== e && (h = b.firstEffect, null !== h ? (b.firstEffect = e, e.nextEffect = h) : (b.firstEffect = b.lastEffect = e, e.nextEffect = null), e.effectTag = 8));if (g || f) b.effectTag |= 4;break;case 7:
            break;case 8:
            break;case 12:
            break;case 4:
            Kf(b);mh(b);break;case 10:
            Zg(b);break;case 9:
            break;case 14:
            break;case 17:
            J(b.type) && Ke(b);break;case 18:
            break;default:
            x("156");}T = null;
      }b = a;if (1 === U || 1 !== b.childExpirationTime) {
        g = 0;for (f = b.child; null !== f;) {
          e = f.expirationTime, h = f.childExpirationTime, e > g && (g = e), h > g && (g = h), f = f.sibling;
        }b.childExpirationTime = g;
      }if (null !== T) return T;null !== c && 0 === (c.effectTag & 1024) && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), 1 < a.effectTag && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));
    } else {
      a = Gh(a, U);if (null !== a) return a.effectTag &= 1023, a;null !== c && (c.firstEffect = c.lastEffect = null, c.effectTag |= 1024);
    }if (null !== d) return d;if (null !== c) a = c;else break;
  }return null;
}
function bi(a) {
  var b = Tg(a.alternate, a, U);a.memoizedProps = a.pendingProps;null === b && (b = ai(a));Ih.current = null;return b;
}
function ci(a, b) {
  Kh ? x("243") : void 0;of();Kh = !0;var c = Hh.current;Hh.current = kg;var d = a.nextExpirationTimeToWorkOn;if (d !== U || a !== Lh || null === T) Sh(), Lh = a, U = d, T = Xe(Lh.current, null, U), a.pendingCommitExpirationTime = 0;var e = !1;do {
    try {
      if (b) for (; null !== T && !di();) {
        T = bi(T);
      } else for (; null !== T;) {
        T = bi(T);
      }
    } catch (u) {
      if (Yg = Xg = Wg = null, lg(), null === T) e = !0, Dh(u);else {
        null === T ? x("271") : void 0;var f = T,
            g = f.return;if (null === g) e = !0, Dh(u);else {
          a: {
            var h = a,
                l = g,
                k = f,
                m = u;g = U;k.effectTag |= 1024;k.firstEffect = k.lastEffect = null;if (null !== m && "object" === (typeof m === "undefined" ? "undefined" : _typeof(m)) && "function" === typeof m.then) {
              var p = m;m = l;var t = -1,
                  A = -1;do {
                if (13 === m.tag) {
                  var v = m.alternate;if (null !== v && (v = v.memoizedState, null !== v)) {
                    A = 10 * (1073741822 - v.timedOutAt);break;
                  }v = m.pendingProps.maxDuration;if ("number" === typeof v) if (0 >= v) t = 0;else if (-1 === t || v < t) t = v;
                }m = m.return;
              } while (null !== m);m = l;do {
                if (v = 13 === m.tag) v = void 0 === m.memoizedProps.fallback ? !1 : null === m.memoizedState;if (v) {
                  l = m.updateQueue;null === l ? (l = new Set(), l.add(p), m.updateQueue = l) : l.add(p);if (0 === (m.mode & 1)) {
                    m.effectTag |= 64;k.effectTag &= -1957;1 === k.tag && (null === k.alternate ? k.tag = 17 : (g = nf(1073741823), g.tag = sf, pf(k, g)));k.expirationTime = 1073741823;break a;
                  }k = h;l = g;var R = k.pingCache;null === R ? (R = k.pingCache = new Bh(), v = new Set(), R.set(p, v)) : (v = R.get(p), void 0 === v && (v = new Set(), R.set(p, v)));v.has(l) || (v.add(l), k = ei.bind(null, k, p, l), p.then(k, k));-1 === t ? h = 1073741823 : (-1 === A && (A = 10 * (1073741822 - gf(h, g)) - 5E3), h = A + t);0 <= h && Mh < h && (Mh = h);m.effectTag |= 2048;m.expirationTime = g;break a;
                }m = m.return;
              } while (null !== m);m = Error((ic(k.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + jc(k));
            }Nh = !0;m = jh(m, k);h = l;do {
              switch (h.tag) {case 3:
                  h.effectTag |= 2048;h.expirationTime = g;g = Ch(h, m, g);eh(h, g);break a;case 1:
                  if (t = m, A = h.type, k = h.stateNode, 0 === (h.effectTag & 64) && ("function" === typeof A.getDerivedStateFromError || null !== k && "function" === typeof k.componentDidCatch && (null === Fh || !Fh.has(k)))) {
                    h.effectTag |= 2048;
                    h.expirationTime = g;g = Eh(h, t, g);eh(h, g);break a;
                  }}h = h.return;
            } while (null !== h);
          }T = ai(f);continue;
        }
      }
    }break;
  } while (1);Kh = !1;Hh.current = c;Yg = Xg = Wg = null;lg();if (e) Lh = null, a.finishedWork = null;else if (null !== T) a.finishedWork = null;else {
    c = a.current.alternate;null === c ? x("281") : void 0;Lh = null;if (Nh) {
      e = a.latestPendingTime;f = a.latestSuspendedTime;g = a.latestPingedTime;if (0 !== e && e < d || 0 !== f && f < d || 0 !== g && g < d) {
        ff(a, d);fi(a, c, d, a.expirationTime, -1);return;
      }if (!a.didError && b) {
        a.didError = !0;d = a.nextExpirationTimeToWorkOn = d;
        b = a.expirationTime = 1073741823;fi(a, c, d, b, -1);return;
      }
    }b && -1 !== Mh ? (ff(a, d), b = 10 * (1073741822 - gf(a, d)), b < Mh && (Mh = b), b = 10 * (1073741822 - lf()), b = Mh - b, fi(a, c, d, a.expirationTime, 0 > b ? 0 : b)) : (a.pendingCommitExpirationTime = d, a.finishedWork = c);
  }
}
function sh(a, b) {
  for (var c = a.return; null !== c;) {
    switch (c.tag) {case 1:
        var d = c.stateNode;if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Fh || !Fh.has(d))) {
          a = jh(b, a);a = Eh(c, a, 1073741823);pf(c, a);qf(c, 1073741823);return;
        }break;case 3:
        a = jh(b, a);a = Ch(c, a, 1073741823);pf(c, a);qf(c, 1073741823);return;}c = c.return;
  }3 === a.tag && (c = jh(b, a), c = Ch(a, c, 1073741823), pf(a, c), qf(a, 1073741823));
}
function mf(a, b) {
  var c = r.unstable_getCurrentPriorityLevel(),
      d = void 0;if (0 === (b.mode & 1)) d = 1073741823;else if (Kh && !Oh) d = U;else {
    switch (c) {case r.unstable_ImmediatePriority:
        d = 1073741823;break;case r.unstable_UserBlockingPriority:
        d = 1073741822 - 10 * (((1073741822 - a + 15) / 10 | 0) + 1);break;case r.unstable_NormalPriority:
        d = 1073741822 - 25 * (((1073741822 - a + 500) / 25 | 0) + 1);break;case r.unstable_LowPriority:case r.unstable_IdlePriority:
        d = 1;break;default:
        x("313");}null !== Lh && d === U && --d;
  }c === r.unstable_UserBlockingPriority && (0 === gi || d < gi) && (gi = d);return d;
}function ei(a, b, c) {
  var d = a.pingCache;null !== d && d.delete(b);if (null !== Lh && U === c) Lh = null;else if (b = a.earliestSuspendedTime, d = a.latestSuspendedTime, 0 !== b && c <= b && c >= d) {
    a.didError = !1;b = a.latestPingedTime;if (0 === b || b > c) a.latestPingedTime = c;df(c, a);c = a.expirationTime;0 !== c && Xh(a, c);
  }
}function Ah(a, b) {
  var c = a.stateNode;null !== c && c.delete(b);b = lf();b = mf(b, a);a = hi(a, b);null !== a && (cf(a, b), b = a.expirationTime, 0 !== b && Xh(a, b));
}
function hi(a, b) {
  a.expirationTime < b && (a.expirationTime = b);var c = a.alternate;null !== c && c.expirationTime < b && (c.expirationTime = b);var d = a.return,
      e = null;if (null === d && 3 === a.tag) e = a.stateNode;else for (; null !== d;) {
    c = d.alternate;d.childExpirationTime < b && (d.childExpirationTime = b);null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);if (null === d.return && 3 === d.tag) {
      e = d.stateNode;break;
    }d = d.return;
  }return e;
}
function qf(a, b) {
  a = hi(a, b);null !== a && (!Kh && 0 !== U && b > U && Sh(), cf(a, b), Kh && !Oh && Lh === a || Xh(a, a.expirationTime), ii > ji && (ii = 0, x("185")));
}function ki(a, b, c, d, e) {
  return r.unstable_runWithPriority(r.unstable_ImmediatePriority, function () {
    return a(b, c, d, e);
  });
}var li = null,
    Y = null,
    mi = 0,
    ni = void 0,
    W = !1,
    oi = null,
    Z = 0,
    gi = 0,
    pi = !1,
    qi = null,
    X = !1,
    ri = !1,
    si = null,
    ti = r.unstable_now(),
    ui = 1073741822 - (ti / 10 | 0),
    vi = ui,
    ji = 50,
    ii = 0,
    wi = null;function xi() {
  ui = 1073741822 - ((r.unstable_now() - ti) / 10 | 0);
}
function yi(a, b) {
  if (0 !== mi) {
    if (b < mi) return;null !== ni && r.unstable_cancelCallback(ni);
  }mi = b;a = r.unstable_now() - ti;ni = r.unstable_scheduleCallback(zi, { timeout: 10 * (1073741822 - b) - a });
}function fi(a, b, c, d, e) {
  a.expirationTime = d;0 !== e || di() ? 0 < e && (a.timeoutHandle = ye(Ai.bind(null, a, b, c), e)) : (a.pendingCommitExpirationTime = c, a.finishedWork = b);
}function Ai(a, b, c) {
  a.pendingCommitExpirationTime = c;a.finishedWork = b;xi();vi = ui;Bi(a, c);
}function $h(a, b) {
  a.expirationTime = b;a.finishedWork = null;
}
function lf() {
  if (W) return vi;Ci();if (0 === Z || 1 === Z) xi(), vi = ui;return vi;
}function Xh(a, b) {
  null === a.nextScheduledRoot ? (a.expirationTime = b, null === Y ? (li = Y = a, a.nextScheduledRoot = a) : (Y = Y.nextScheduledRoot = a, Y.nextScheduledRoot = li)) : b > a.expirationTime && (a.expirationTime = b);W || (X ? ri && (oi = a, Z = 1073741823, Di(a, 1073741823, !1)) : 1073741823 === b ? Yh(1073741823, !1) : yi(a, b));
}
function Ci() {
  var a = 0,
      b = null;if (null !== Y) for (var c = Y, d = li; null !== d;) {
    var e = d.expirationTime;if (0 === e) {
      null === c || null === Y ? x("244") : void 0;if (d === d.nextScheduledRoot) {
        li = Y = d.nextScheduledRoot = null;break;
      } else if (d === li) li = e = d.nextScheduledRoot, Y.nextScheduledRoot = e, d.nextScheduledRoot = null;else if (d === Y) {
        Y = c;Y.nextScheduledRoot = li;d.nextScheduledRoot = null;break;
      } else c.nextScheduledRoot = d.nextScheduledRoot, d.nextScheduledRoot = null;d = c.nextScheduledRoot;
    } else {
      e > a && (a = e, b = d);if (d === Y) break;if (1073741823 === a) break;c = d;d = d.nextScheduledRoot;
    }
  }oi = b;Z = a;
}var Ei = !1;function di() {
  return Ei ? !0 : r.unstable_shouldYield() ? Ei = !0 : !1;
}function zi() {
  try {
    if (!di() && null !== li) {
      xi();var a = li;do {
        var b = a.expirationTime;0 !== b && ui <= b && (a.nextExpirationTimeToWorkOn = ui);a = a.nextScheduledRoot;
      } while (a !== li);
    }Yh(0, !0);
  } finally {
    Ei = !1;
  }
}
function Yh(a, b) {
  Ci();if (b) for (xi(), vi = ui; null !== oi && 0 !== Z && a <= Z && !(Ei && ui > Z);) {
    Di(oi, Z, ui > Z), Ci(), xi(), vi = ui;
  } else for (; null !== oi && 0 !== Z && a <= Z;) {
    Di(oi, Z, !1), Ci();
  }b && (mi = 0, ni = null);0 !== Z && yi(oi, Z);ii = 0;wi = null;if (null !== si) for (a = si, si = null, b = 0; b < a.length; b++) {
    var c = a[b];try {
      c._onComplete();
    } catch (d) {
      pi || (pi = !0, qi = d);
    }
  }if (pi) throw a = qi, qi = null, pi = !1, a;
}function Bi(a, b) {
  W ? x("253") : void 0;oi = a;Z = b;Di(a, b, !1);Yh(1073741823, !1);
}
function Di(a, b, c) {
  W ? x("245") : void 0;W = !0;if (c) {
    var d = a.finishedWork;null !== d ? Fi(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, -1 !== d && (a.timeoutHandle = -1, ze(d)), ci(a, c), d = a.finishedWork, null !== d && (di() ? a.finishedWork = d : Fi(a, d, b)));
  } else d = a.finishedWork, null !== d ? Fi(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, -1 !== d && (a.timeoutHandle = -1, ze(d)), ci(a, c), d = a.finishedWork, null !== d && Fi(a, d, b));W = !1;
}
function Fi(a, b, c) {
  var d = a.firstBatch;if (null !== d && d._expirationTime >= c && (null === si ? si = [d] : si.push(d), d._defer)) {
    a.finishedWork = b;a.expirationTime = 0;return;
  }a.finishedWork = null;a === wi ? ii++ : (wi = a, ii = 0);r.unstable_runWithPriority(r.unstable_ImmediatePriority, function () {
    Zh(a, b);
  });
}function Dh(a) {
  null === oi ? x("246") : void 0;oi.expirationTime = 0;pi || (pi = !0, qi = a);
}function Gi(a, b) {
  var c = X;X = !0;try {
    return a(b);
  } finally {
    (X = c) || W || Yh(1073741823, !1);
  }
}
function Hi(a, b) {
  if (X && !ri) {
    ri = !0;try {
      return a(b);
    } finally {
      ri = !1;
    }
  }return a(b);
}function Ii(a, b, c) {
  X || W || 0 === gi || (Yh(gi, !1), gi = 0);var d = X;X = !0;try {
    return r.unstable_runWithPriority(r.unstable_UserBlockingPriority, function () {
      return a(b, c);
    });
  } finally {
    (X = d) || W || Yh(1073741823, !1);
  }
}
function Ji(a, b, c, d, e) {
  var f = b.current;a: if (c) {
    c = c._reactInternalFiber;b: {
      2 === ed(c) && 1 === c.tag ? void 0 : x("170");var g = c;do {
        switch (g.tag) {case 3:
            g = g.stateNode.context;break b;case 1:
            if (J(g.type)) {
              g = g.stateNode.__reactInternalMemoizedMergedChildContext;break b;
            }}g = g.return;
      } while (null !== g);x("171");g = void 0;
    }if (1 === c.tag) {
      var h = c.type;if (J(h)) {
        c = Ne(c, h, g);break a;
      }
    }c = g;
  } else c = He;null === b.context ? b.context = c : b.pendingContext = c;b = e;e = nf(d);e.payload = { element: a };b = void 0 === b ? null : b;null !== b && (e.callback = b);
  of();pf(f, e);qf(f, d);return d;
}function Ki(a, b, c, d) {
  var e = b.current,
      f = lf();e = mf(f, e);return Ji(a, b, c, e, d);
}function Li(a) {
  a = a.current;if (!a.child) return null;switch (a.child.tag) {case 5:
      return a.child.stateNode;default:
      return a.child.stateNode;}
}function Mi(a, b, c) {
  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;return { $$typeof: Wb, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
}
Ab = function Ab(a, b, c) {
  switch (b) {case "input":
      yc(a, c);b = c.name;if ("radio" === c.type && null != b) {
        for (c = a; c.parentNode;) {
          c = c.parentNode;
        }c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');for (b = 0; b < c.length; b++) {
          var d = c[b];if (d !== a && d.form === a.form) {
            var e = Ka(d);e ? void 0 : x("90");Sb(d);yc(d, e);
          }
        }
      }break;case "textarea":
      de(a, c);break;case "select":
      b = c.value, null != b && ae(a, !!c.multiple, b, !1);}
};
function Ni(a) {
  var b = 1073741822 - 25 * (((1073741822 - lf() + 500) / 25 | 0) + 1);b >= Jh && (b = Jh - 1);this._expirationTime = Jh = b;this._root = a;this._callbacks = this._next = null;this._hasChildren = this._didComplete = !1;this._children = null;this._defer = !0;
}Ni.prototype.render = function (a) {
  this._defer ? void 0 : x("250");this._hasChildren = !0;this._children = a;var b = this._root._internalRoot,
      c = this._expirationTime,
      d = new Oi();Ji(a, b, null, c, d._onCommit);return d;
};
Ni.prototype.then = function (a) {
  if (this._didComplete) a();else {
    var b = this._callbacks;null === b && (b = this._callbacks = []);b.push(a);
  }
};
Ni.prototype.commit = function () {
  var a = this._root._internalRoot,
      b = a.firstBatch;this._defer && null !== b ? void 0 : x("251");if (this._hasChildren) {
    var c = this._expirationTime;if (b !== this) {
      this._hasChildren && (c = this._expirationTime = b._expirationTime, this.render(this._children));for (var d = null, e = b; e !== this;) {
        d = e, e = e._next;
      }null === d ? x("251") : void 0;d._next = e._next;this._next = b;a.firstBatch = this;
    }this._defer = !1;Bi(a, c);b = this._next;this._next = null;b = a.firstBatch = b;null !== b && b._hasChildren && b.render(b._children);
  } else this._next = null, this._defer = !1;
};Ni.prototype._onComplete = function () {
  if (!this._didComplete) {
    this._didComplete = !0;var a = this._callbacks;if (null !== a) for (var b = 0; b < a.length; b++) {
      (0, a[b])();
    }
  }
};function Oi() {
  this._callbacks = null;this._didCommit = !1;this._onCommit = this._onCommit.bind(this);
}Oi.prototype.then = function (a) {
  if (this._didCommit) a();else {
    var b = this._callbacks;null === b && (b = this._callbacks = []);b.push(a);
  }
};
Oi.prototype._onCommit = function () {
  if (!this._didCommit) {
    this._didCommit = !0;var a = this._callbacks;if (null !== a) for (var b = 0; b < a.length; b++) {
      var c = a[b];"function" !== typeof c ? x("191", c) : void 0;c();
    }
  }
};
function Pi(a, b, c) {
  b = K(3, null, null, b ? 3 : 0);a = { current: b, containerInfo: a, pendingChildren: null, pingCache: null, earliestPendingTime: 0, latestPendingTime: 0, earliestSuspendedTime: 0, latestSuspendedTime: 0, latestPingedTime: 0, didError: !1, pendingCommitExpirationTime: 0, finishedWork: null, timeoutHandle: -1, context: null, pendingContext: null, hydrate: c, nextExpirationTimeToWorkOn: 0, expirationTime: 0, firstBatch: null, nextScheduledRoot: null };this._internalRoot = b.stateNode = a;
}
Pi.prototype.render = function (a, b) {
  var c = this._internalRoot,
      d = new Oi();b = void 0 === b ? null : b;null !== b && d.then(b);Ki(a, c, null, d._onCommit);return d;
};Pi.prototype.unmount = function (a) {
  var b = this._internalRoot,
      c = new Oi();a = void 0 === a ? null : a;null !== a && c.then(a);Ki(null, b, null, c._onCommit);return c;
};Pi.prototype.legacy_renderSubtreeIntoContainer = function (a, b, c) {
  var d = this._internalRoot,
      e = new Oi();c = void 0 === c ? null : c;null !== c && e.then(c);Ki(b, d, a, e._onCommit);return e;
};
Pi.prototype.createBatch = function () {
  var a = new Ni(this),
      b = a._expirationTime,
      c = this._internalRoot,
      d = c.firstBatch;if (null === d) c.firstBatch = a, a._next = null;else {
    for (c = null; null !== d && d._expirationTime >= b;) {
      c = d, d = d._next;
    }a._next = d;null !== c && (c._next = a);
  }return a;
};function Qi(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}Gb = Gi;Hb = Ii;Ib = function Ib() {
  W || 0 === gi || (Yh(gi, !1), gi = 0);
};
function Ri(a, b) {
  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));if (!b) for (var c; c = a.lastChild;) {
    a.removeChild(c);
  }return new Pi(a, !1, b);
}
function Si(a, b, c, d, e) {
  var f = c._reactRootContainer;if (f) {
    if ("function" === typeof e) {
      var g = e;e = function e() {
        var a = Li(f._internalRoot);g.call(a);
      };
    }null != a ? f.legacy_renderSubtreeIntoContainer(a, b, e) : f.render(b, e);
  } else {
    f = c._reactRootContainer = Ri(c, d);if ("function" === typeof e) {
      var h = e;e = function e() {
        var a = Li(f._internalRoot);h.call(a);
      };
    }Hi(function () {
      null != a ? f.legacy_renderSubtreeIntoContainer(a, b, e) : f.render(b, e);
    });
  }return Li(f._internalRoot);
}
function Ti(a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;Qi(b) ? void 0 : x("200");return Mi(a, b, null, c);
}
var Vi = { createPortal: Ti, findDOMNode: function findDOMNode(a) {
    if (null == a) return null;if (1 === a.nodeType) return a;var b = a._reactInternalFiber;void 0 === b && ("function" === typeof a.render ? x("188") : x("268", Object.keys(a)));a = hd(b);a = null === a ? null : a.stateNode;return a;
  }, hydrate: function hydrate(a, b, c) {
    Qi(b) ? void 0 : x("200");return Si(null, a, b, !0, c);
  }, render: function render(a, b, c) {
    Qi(b) ? void 0 : x("200");return Si(null, a, b, !1, c);
  }, unstable_renderSubtreeIntoContainer: function unstable_renderSubtreeIntoContainer(a, b, c, d) {
    Qi(c) ? void 0 : x("200");null == a || void 0 === a._reactInternalFiber ? x("38") : void 0;return Si(a, b, c, !1, d);
  }, unmountComponentAtNode: function unmountComponentAtNode(a) {
    Qi(a) ? void 0 : x("40");return a._reactRootContainer ? (Hi(function () {
      Si(null, null, a, !1, function () {
        a._reactRootContainer = null;
      });
    }), !0) : !1;
  }, unstable_createPortal: function unstable_createPortal() {
    return Ti.apply(void 0, arguments);
  }, unstable_batchedUpdates: Gi, unstable_interactiveUpdates: Ii, flushSync: function flushSync(a, b) {
    W ? x("187") : void 0;var c = X;X = !0;try {
      return ki(a, b);
    } finally {
      X = c, Yh(1073741823, !1);
    }
  }, unstable_createRoot: Ui, unstable_flushControlled: function unstable_flushControlled(a) {
    var b = X;X = !0;try {
      ki(a);
    } finally {
      (X = b) || W || Yh(1073741823, !1);
    }
  }, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { Events: [Ia, Ja, Ka, Ba.injectEventPluginsByName, pa, Qa, function (a) {
      ya(a, Pa);
    }, Eb, Fb, Dd, Da] } };function Ui(a, b) {
  Qi(a) ? void 0 : x("299", "unstable_createRoot");return new Pi(a, !0, null != b && !0 === b.hydrate);
}
(function (a) {
  var b = a.findFiberByHostInstance;return Te(n({}, a, { overrideProps: null, currentDispatcherRef: Tb.ReactCurrentDispatcher, findHostInstanceByFiber: function findHostInstanceByFiber(a) {
      a = hd(a);return null === a ? null : a.stateNode;
    }, findFiberByHostInstance: function findFiberByHostInstance(a) {
      return b ? b(a) : null;
    } }));
})({ findFiberByHostInstance: Ha, bundleType: 0, version: "16.8.6", rendererPackageName: "react-dom" });var Wi = { default: Vi },
    Xi = Wi && Vi || Wi;module.exports = Xi.default || Xi;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.8.6
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', { value: true });

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;

    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function lowPriorityWarning() {};

    {
      var printWarning = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function lowPriorityWarning(condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning$1 = lowPriorityWarning;

    function typeOf(object) {
      if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_LAZY_TYPE:
          case REACT_MEMO_TYPE:
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    }

    // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;

    var hasWarnedAboutDeprecatedIsAsyncMode = false;

    // AsyncMode should be deprecated
    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", { value: !0 });
var b = "function" === typeof Symbol && Symbol.for,
    c = b ? Symbol.for("react.element") : 60103,
    d = b ? Symbol.for("react.portal") : 60106,
    e = b ? Symbol.for("react.fragment") : 60107,
    f = b ? Symbol.for("react.strict_mode") : 60108,
    g = b ? Symbol.for("react.profiler") : 60114,
    h = b ? Symbol.for("react.provider") : 60109,
    k = b ? Symbol.for("react.context") : 60110,
    l = b ? Symbol.for("react.async_mode") : 60111,
    m = b ? Symbol.for("react.concurrent_mode") : 60111,
    n = b ? Symbol.for("react.forward_ref") : 60112,
    p = b ? Symbol.for("react.suspense") : 60113,
    q = b ? Symbol.for("react.memo") : 60115,
    r = b ? Symbol.for("react.lazy") : 60116;function t(a) {
  if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a) {
    var u = a.$$typeof;switch (u) {case c:
        switch (a = a.type, a) {case l:case m:case e:case g:case f:case p:
            return a;default:
            switch (a = a && a.$$typeof, a) {case k:case n:case h:
                return a;default:
                return u;}}case r:case q:case d:
        return u;}
  }
}function v(a) {
  return t(a) === m;
}exports.typeOf = t;exports.AsyncMode = l;exports.ConcurrentMode = m;exports.ContextConsumer = k;exports.ContextProvider = h;exports.Element = c;exports.ForwardRef = n;
exports.Fragment = e;exports.Lazy = r;exports.Memo = q;exports.Portal = d;exports.Profiler = g;exports.StrictMode = f;exports.Suspense = p;exports.isValidElementType = function (a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
};exports.isAsyncMode = function (a) {
  return v(a) || t(a) === l;
};exports.isConcurrentMode = v;exports.isContextConsumer = function (a) {
  return t(a) === k;
};
exports.isContextProvider = function (a) {
  return t(a) === h;
};exports.isElement = function (a) {
  return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && a.$$typeof === c;
};exports.isForwardRef = function (a) {
  return t(a) === n;
};exports.isFragment = function (a) {
  return t(a) === e;
};exports.isLazy = function (a) {
  return t(a) === r;
};exports.isMemo = function (a) {
  return t(a) === q;
};exports.isPortal = function (a) {
  return t(a) === d;
};exports.isProfiler = function (a) {
  return t(a) === g;
};exports.isStrictMode = function (a) {
  return t(a) === f;
};
exports.isSuspense = function (a) {
  return t(a) === p;
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (member) {
  printWarning('Please use `import { %s } from "react-router-dom"` instead of `import %s from "react-router-dom/es/%s"`. ' + "Support for the latter will be removed in the next major release.", [member, member]);
};

var printWarning = function printWarning() {};

if (process.env.NODE_ENV !== "production") {
  printWarning = function printWarning(format, subs) {
    var index = 0;
    var message = "Warning: " + (subs.length > 0 ? format.replace(/%s/g, function () {
      return subs[index++];
    }) : format);

    if (typeof console !== "undefined") {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React Router ---
      // This error was thrown as a convenience so that you can use the
      // stack trace to find the callsite that triggered this warning.
      throw new Error(message);
    } catch (e) {}
  };
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__RouterContext = exports.withRouter = exports.matchPath = exports.generatePath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.MemoryRouter = undefined;

var _miniCreateReactContext = __webpack_require__(48);

var _miniCreateReactContext2 = _interopRequireDefault(_miniCreateReactContext);

var _inheritsLoose2 = __webpack_require__(14);

var _inheritsLoose3 = _interopRequireDefault(_inheritsLoose2);

var _react = __webpack_require__(2);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(10);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _tinyWarning = __webpack_require__(7);

var _tinyWarning2 = _interopRequireDefault(_tinyWarning);

var _history = __webpack_require__(24);

var _tinyInvariant = __webpack_require__(12);

var _tinyInvariant2 = _interopRequireDefault(_tinyInvariant);

var _pathToRegexp = __webpack_require__(58);

var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

var _extends2 = __webpack_require__(8);

var _extends3 = _interopRequireDefault(_extends2);

var _reactIs = __webpack_require__(5);

var _objectWithoutPropertiesLoose2 = __webpack_require__(15);

var _objectWithoutPropertiesLoose3 = _interopRequireDefault(_objectWithoutPropertiesLoose2);

var _hoistNonReactStatics = __webpack_require__(46);

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: Replace with React.createContext once we can assume React 16+

var createNamedContext = function createNamedContext(name) {
  var context = (0, _miniCreateReactContext2.default)();
  context.displayName = name;
  return context;
};

var context =
/*#__PURE__*/
createNamedContext("Router");

/**
 * The public API for putting history on context.
 */

var Router =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose3.default)(Router, _React$Component);

  Router.computeRootMatch = function computeRootMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };

  function Router(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      location: props.history.location
    }; // This is a bit of a hack. We have to start listening for location
    // changes here in the constructor in case there are any <Redirect>s
    // on the initial render. If there are, they will replace/push when
    // they mount and since cDM fires in children before parents, we may
    // get a new location before the <Router> is mounted.

    _this._isMounted = false;
    _this._pendingLocation = null;

    if (!props.staticContext) {
      _this.unlisten = props.history.listen(function (location) {
        if (_this._isMounted) {
          _this.setState({
            location: location
          });
        } else {
          _this._pendingLocation = location;
        }
      });
    }

    return _this;
  }

  var _proto = Router.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this._isMounted = true;

    if (this._pendingLocation) {
      this.setState({
        location: this._pendingLocation
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unlisten) this.unlisten();
  };

  _proto.render = function render() {
    return _react2.default.createElement(context.Provider, {
      children: this.props.children || null,
      value: {
        history: this.props.history,
        location: this.state.location,
        match: Router.computeRootMatch(this.state.location.pathname),
        staticContext: this.props.staticContext
      }
    });
  };

  return Router;
}(_react2.default.Component);

if (process.env.NODE_ENV !== "production") {
  Router.propTypes = {
    children: _propTypes2.default.node,
    history: _propTypes2.default.object.isRequired,
    staticContext: _propTypes2.default.object
  };

  Router.prototype.componentDidUpdate = function (prevProps) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(prevProps.history === this.props.history, "You cannot change <Router history>") : void 0;
  };
}

/**
 * The public API for a <Router> that stores location in memory.
 */

var MemoryRouter =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose3.default)(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = (0, _history.createMemoryHistory)(_this.props);
    return _this;
  }

  var _proto = MemoryRouter.prototype;

  _proto.render = function render() {
    return _react2.default.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return MemoryRouter;
}(_react2.default.Component);

if (process.env.NODE_ENV !== "production") {
  MemoryRouter.propTypes = {
    initialEntries: _propTypes2.default.array,
    initialIndex: _propTypes2.default.number,
    getUserConfirmation: _propTypes2.default.func,
    keyLength: _propTypes2.default.number,
    children: _propTypes2.default.node
  };

  MemoryRouter.prototype.componentDidMount = function () {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.") : void 0;
  };
}

var Lifecycle =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose3.default)(Lifecycle, _React$Component);

  function Lifecycle() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Lifecycle.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.onMount) this.props.onMount.call(this, this);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.props.onUnmount) this.props.onUnmount.call(this, this);
  };

  _proto.render = function render() {
    return null;
  };

  return Lifecycle;
}(_react2.default.Component);

/**
 * The public API for prompting the user before navigating away from a screen.
 */

function Prompt(_ref) {
  var message = _ref.message,
      _ref$when = _ref.when,
      when = _ref$when === void 0 ? true : _ref$when;
  return _react2.default.createElement(context.Consumer, null, function (context$$1) {
    !context$$1 ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, "You should not use <Prompt> outside a <Router>") : (0, _tinyInvariant2.default)(false) : void 0;
    if (!when || context$$1.staticContext) return null;
    var method = context$$1.history.block;
    return _react2.default.createElement(Lifecycle, {
      onMount: function onMount(self) {
        self.release = method(message);
      },
      onUpdate: function onUpdate(self, prevProps) {
        if (prevProps.message !== message) {
          self.release();
          self.release = method(message);
        }
      },
      onUnmount: function onUnmount(self) {
        self.release();
      },
      message: message
    });
  });
}

if (process.env.NODE_ENV !== "production") {
  var messageType = _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]);
  Prompt.propTypes = {
    when: _propTypes2.default.bool,
    message: messageType.isRequired
  };
}

var cache = {};
var cacheLimit = 10000;
var cacheCount = 0;

function compilePath(path) {
  if (cache[path]) return cache[path];
  var generator = _pathToRegexp2.default.compile(path);

  if (cacheCount < cacheLimit) {
    cache[path] = generator;
    cacheCount++;
  }

  return generator;
}
/**
 * Public API for generating a URL pathname from a path and parameters.
 */

function generatePath(path, params) {
  if (path === void 0) {
    path = "/";
  }

  if (params === void 0) {
    params = {};
  }

  return path === "/" ? path : compilePath(path)(params, {
    pretty: true
  });
}

/**
 * The public API for navigating programmatically with a component.
 */

function Redirect(_ref) {
  var computedMatch = _ref.computedMatch,
      to = _ref.to,
      _ref$push = _ref.push,
      push = _ref$push === void 0 ? false : _ref$push;
  return _react2.default.createElement(context.Consumer, null, function (context$$1) {
    !context$$1 ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, "You should not use <Redirect> outside a <Router>") : (0, _tinyInvariant2.default)(false) : void 0;
    var history = context$$1.history,
        staticContext = context$$1.staticContext;
    var method = push ? history.push : history.replace;
    var location = (0, _history.createLocation)(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : (0, _extends3.default)({}, to, {
      pathname: generatePath(to.pathname, computedMatch.params)
    }) : to); // When rendering in a static context,
    // set the new location immediately.

    if (staticContext) {
      method(location);
      return null;
    }

    return _react2.default.createElement(Lifecycle, {
      onMount: function onMount() {
        method(location);
      },
      onUpdate: function onUpdate(self, prevProps) {
        var prevLocation = (0, _history.createLocation)(prevProps.to);

        if (!(0, _history.locationsAreEqual)(prevLocation, (0, _extends3.default)({}, location, {
          key: prevLocation.key
        }))) {
          method(location);
        }
      },
      to: to
    });
  });
}

if (process.env.NODE_ENV !== "production") {
  Redirect.propTypes = {
    push: _propTypes2.default.bool,
    from: _propTypes2.default.string,
    to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
  };
}

var cache$1 = {};
var cacheLimit$1 = 10000;
var cacheCount$1 = 0;

function compilePath$1(path, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
  if (pathCache[path]) return pathCache[path];
  var keys = [];
  var regexp = (0, _pathToRegexp2.default)(path, keys, options);
  var result = {
    regexp: regexp,
    keys: keys
  };

  if (cacheCount$1 < cacheLimit$1) {
    pathCache[path] = result;
    cacheCount$1++;
  }

  return result;
}
/**
 * Public API for matching a URL pathname to a path.
 */

function matchPath(pathname, options) {
  if (options === void 0) {
    options = {};
  }

  if (typeof options === "string") options = {
    path: options
  };
  var _options = options,
      path = _options.path,
      _options$exact = _options.exact,
      exact = _options$exact === void 0 ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === void 0 ? false : _options$strict,
      _options$sensitive = _options.sensitive,
      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
  var paths = [].concat(path);
  return paths.reduce(function (matched, path) {
    if (!path) return null;
    if (matched) return matched;

    var _compilePath = compilePath$1(path, {
      end: exact,
      strict: strict,
      sensitive: sensitive
    }),
        regexp = _compilePath.regexp,
        keys = _compilePath.keys;

    var match = regexp.exec(pathname);
    if (!match) return null;
    var url = match[0],
        values = match.slice(1);
    var isExact = pathname === url;
    if (exact && !isExact) return null;
    return {
      path: path,
      // the path used to match
      url: path === "/" && url === "" ? "/" : url,
      // the matched portion of the URL
      isExact: isExact,
      // whether or not we matched exactly
      params: keys.reduce(function (memo, key, index) {
        memo[key.name] = values[index];
        return memo;
      }, {})
    };
  }, null);
}

function isEmptyChildren(children) {
  return _react2.default.Children.count(children) === 0;
}
/**
 * The public API for matching a single path and rendering.
 */

var Route =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose3.default)(Route, _React$Component);

  function Route() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Route.prototype;

  _proto.render = function render() {
    var _this = this;

    return _react2.default.createElement(context.Consumer, null, function (context$$1) {
      !context$$1 ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, "You should not use <Route> outside a <Router>") : (0, _tinyInvariant2.default)(false) : void 0;
      var location = _this.props.location || context$$1.location;
      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
      : _this.props.path ? matchPath(location.pathname, _this.props) : context$$1.match;

      var props = (0, _extends3.default)({}, context$$1, {
        location: location,
        match: match
      });

      var _this$props = _this.props,
          children = _this$props.children,
          component = _this$props.component,
          render = _this$props.render; // Preact uses an empty array as children by
      // default, so use null if that's the case.

      if (Array.isArray(children) && children.length === 0) {
        children = null;
      }

      if (typeof children === "function") {
        children = children(props);

        if (children === undefined) {
          if (process.env.NODE_ENV !== "production") {
            var path = _this.props.path;
            process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(false, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") : void 0;
          }

          children = null;
        }
      }

      return _react2.default.createElement(context.Provider, {
        value: props
      }, children && !isEmptyChildren(children) ? children : props.match ? component ? _react2.default.createElement(component, props) : render ? render(props) : null : null);
    });
  };

  return Route;
}(_react2.default.Component);

if (process.env.NODE_ENV !== "production") {
  Route.propTypes = {
    children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
    component: function component(props, propName) {
      if (props[propName] && !(0, _reactIs.isValidElementType)(props[propName])) {
        return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
      }
    },
    exact: _propTypes2.default.bool,
    location: _propTypes2.default.object,
    path: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
    render: _propTypes2.default.func,
    sensitive: _propTypes2.default.bool,
    strict: _propTypes2.default.bool
  };

  Route.prototype.componentDidMount = function () {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") : void 0;
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") : void 0;
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") : void 0;
  };

  Route.prototype.componentDidUpdate = function (prevProps) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : void 0;
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : void 0;
  };
}

function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
}

function addBasename(basename, location) {
  if (!basename) return location;
  return (0, _extends3.default)({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
}

function stripBasename(basename, location) {
  if (!basename) return location;
  var base = addLeadingSlash(basename);
  if (location.pathname.indexOf(base) !== 0) return location;
  return (0, _extends3.default)({}, location, {
    pathname: location.pathname.substr(base.length)
  });
}

function createURL(location) {
  return typeof location === "string" ? location : (0, _history.createPath)(location);
}

function staticHandler(methodName) {
  return function () {
    process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, "You cannot %s with <StaticRouter>", methodName) : (0, _tinyInvariant2.default)(false);
  };
}

function noop() {}
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

var StaticRouter =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose3.default)(StaticRouter, _React$Component);

  function StaticRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handlePush = function (location) {
      return _this.navigateTo(location, "PUSH");
    };

    _this.handleReplace = function (location) {
      return _this.navigateTo(location, "REPLACE");
    };

    _this.handleListen = function () {
      return noop;
    };

    _this.handleBlock = function () {
      return noop;
    };

    return _this;
  }

  var _proto = StaticRouter.prototype;

  _proto.navigateTo = function navigateTo(location, action) {
    var _this$props = this.props,
        _this$props$basename = _this$props.basename,
        basename = _this$props$basename === void 0 ? "" : _this$props$basename,
        _this$props$context = _this$props.context,
        context = _this$props$context === void 0 ? {} : _this$props$context;
    context.action = action;
    context.location = addBasename(basename, (0, _history.createLocation)(location));
    context.url = createURL(context.location);
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        _this$props2$basename = _this$props2.basename,
        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
        _this$props2$context = _this$props2.context,
        context = _this$props2$context === void 0 ? {} : _this$props2$context,
        _this$props2$location = _this$props2.location,
        location = _this$props2$location === void 0 ? "/" : _this$props2$location,
        rest = (0, _objectWithoutPropertiesLoose3.default)(_this$props2, ["basename", "context", "location"]);

    var history = {
      createHref: function createHref(path) {
        return addLeadingSlash(basename + createURL(path));
      },
      action: "POP",
      location: stripBasename(basename, (0, _history.createLocation)(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };
    return _react2.default.createElement(Router, (0, _extends3.default)({}, rest, {
      history: history,
      staticContext: context
    }));
  };

  return StaticRouter;
}(_react2.default.Component);

if (process.env.NODE_ENV !== "production") {
  StaticRouter.propTypes = {
    basename: _propTypes2.default.string,
    context: _propTypes2.default.object,
    location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
  };

  StaticRouter.prototype.componentDidMount = function () {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.") : void 0;
  };
}

/**
 * The public API for rendering the first <Route> that matches.
 */

var Switch =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose3.default)(Switch, _React$Component);

  function Switch() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Switch.prototype;

  _proto.render = function render() {
    var _this = this;

    return _react2.default.createElement(context.Consumer, null, function (context$$1) {
      !context$$1 ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, "You should not use <Switch> outside a <Router>") : (0, _tinyInvariant2.default)(false) : void 0;
      var location = _this.props.location || context$$1.location;
      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
      // here because toArray adds keys to all child elements and we do not want
      // to trigger an unmount/remount for two <Route>s that render the same
      // component at different URLs.

      _react2.default.Children.forEach(_this.props.children, function (child) {
        if (match == null && _react2.default.isValidElement(child)) {
          element = child;
          var path = child.props.path || child.props.from;
          match = path ? matchPath(location.pathname, (0, _extends3.default)({}, child.props, {
            path: path
          })) : context$$1.match;
        }
      });
      return match ? _react2.default.cloneElement(element, {
        location: location,
        computedMatch: match
      }) : null;
    });
  };

  return Switch;
}(_react2.default.Component);

if (process.env.NODE_ENV !== "production") {
  Switch.propTypes = {
    children: _propTypes2.default.node,
    location: _propTypes2.default.object
  };

  Switch.prototype.componentDidUpdate = function (prevProps) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : void 0;
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : void 0;
  };
}

/**
 * A public higher-order component to access the imperative API
 */

function withRouter(Component) {
  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";

  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = (0, _objectWithoutPropertiesLoose3.default)(props, ["wrappedComponentRef"]);

    return _react2.default.createElement(context.Consumer, null, function (context$$1) {
      !context$$1 ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, "You should not use <" + displayName + " /> outside a <Router>") : (0, _tinyInvariant2.default)(false) : void 0;
      return _react2.default.createElement(Component, (0, _extends3.default)({}, remainingProps, context$$1, {
        ref: wrappedComponentRef
      }));
    });
  };

  C.displayName = displayName;
  C.WrappedComponent = Component;

  if (process.env.NODE_ENV !== "production") {
    C.propTypes = {
      wrappedComponentRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.object])
    };
  }

  return (0, _hoistNonReactStatics2.default)(C, Component);
}

if (process.env.NODE_ENV !== "production") {
  if (typeof window !== "undefined") {
    var global = window;
    var key = "__react_router_build__";
    var buildNames = {
      cjs: "CommonJS",
      esm: "ES modules",
      umd: "UMD"
    };

    if (global[key] && global[key] !== "esm") {
      var initialBuildName = buildNames[global[key]];
      var secondaryBuildName = buildNames["esm"]; // TODO: Add link to article that explains in detail how to avoid
      // loading 2 different builds.

      throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }

    global[key] = "esm";
  }
}

exports.MemoryRouter = MemoryRouter;
exports.Prompt = Prompt;
exports.Redirect = Redirect;
exports.Route = Route;
exports.Router = Router;
exports.StaticRouter = StaticRouter;
exports.Switch = Switch;
exports.generatePath = generatePath;
exports.matchPath = matchPath;
exports.withRouter = withRouter;
exports.__RouterContext = context;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isarray = __webpack_require__(57);

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)',
// Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens;
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile(str, options) {
  return tokensToFunction(parse(str, options));
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (_typeof(tokens[i]) === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags(options) {
  return options.sensitive ? '' : 'i';
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys);
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */keys);
  }

  if (isarray(path)) {
    return arrayToRegexp( /** @type {!Array} */path, /** @type {!Array} */keys, options);
  }

  return stringToRegexp( /** @type {string} */path, /** @type {!Array} */keys, options);
}

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.8.6
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    var _assign = __webpack_require__(4);
    var checkPropTypes = __webpack_require__(9);

    // TODO: this is special because it gets imported during build.

    var ReactVersion = '16.8.6';

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;

    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || (typeof maybeIterable === 'undefined' ? 'undefined' : _typeof(maybeIterable)) !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var validateFormat = function validateFormat() {};

    {
      validateFormat = function validateFormat(format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;
        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    }

    // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function lowPriorityWarning() {};

    {
      var printWarning = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function lowPriorityWarning(condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning$1 = lowPriorityWarning;

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function warningWithoutStack() {};

    {
      warningWithoutStack = function warningWithoutStack(condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }
        if (condition) {
          return;
        }
        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format);

          // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610
          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }

    var warningWithoutStack$1 = warningWithoutStack;

    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }
        warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }

    /**
     * This is the abstract API for an update queue.
     */
    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function isMounted(publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };

    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }

    /**
     * Base class helpers for the updating state of a component.
     */
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      // We initialize the default updater but the real one gets injected by the
      // renderer.
      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};

    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */
    Component.prototype.setState = function (partialState, callback) {
      !((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */
    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };

    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */
    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };
      var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function get() {
            lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;

    /**
     * Convenience component with default shallow equality check for sCU.
     */
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;

    // an immutable object with a single mutable value
    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }

    /**
     * Keeps track of the current dispatcher.
     */
    var ReactCurrentDispatcher = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };

    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
      var sourceInfo = '';
      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);
            if (match) {
              var pathBeforeSlash = match[1];
              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }
      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    var Resolved = 1;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case REACT_PROFILER_TYPE:
          return 'Profiler';
        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';
        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }
      if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';
          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            return getComponentName(type.type);
          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);
              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }
      return null;
    }

    var ReactDebugCurrentFrame = {};

    var currentlyValidatingElement = null;

    function setCurrentlyValidatingElement(element) {
      {
        currentlyValidatingElement = element;
      }
    }

    {
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = '';

        // Add an extra top frame while an element is being validated
        if (currentlyValidatingElement) {
          var name = getComponentName(currentlyValidatingElement.type);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        }

        // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) {
          stack += impl() || '';
        }

        return stack;
      };
    }

    var ReactSharedInternals = {
      ReactCurrentDispatcher: ReactCurrentDispatcher,
      ReactCurrentOwner: ReactCurrentOwner,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };

    {
      _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;

    {
      warning = function warning(condition, format) {
        if (condition) {
          return;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }

    var warning$1 = warning;

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };

    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function warnAboutAccessingKey() {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function warnAboutAccessingRef() {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };
      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }

    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */
    var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,

        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,

        // Record the component responsible for creating this element.
        _owner: owner
      };

      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {};

        // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }

      return element;
    };

    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */
    function createElement(type, config, children) {
      var propName = void 0;

      // Reserved names are extracted
      var props = {};

      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source;
        // Remaining properties are added to a new props object
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      }

      // Resolve default props
      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }
      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }

    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */

    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

      return newElement;
    }

    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */
    function cloneElement(element, config, children) {
      !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;

      var propName = void 0;

      // Original props are copied
      var props = _assign({}, element.props);

      // Reserved names are extracted
      var key = element.key;
      var ref = element.ref;
      // Self is preserved since the owner is preserved.
      var self = element._self;
      // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.
      var source = element._source;

      // Owner will be preserved, unless ref is overridden
      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        // Remaining properties override existing props
        var defaultProps = void 0;
        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }

    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */
    function isValidElement(object) {
      return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';

    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */
    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });

      return '$' + escapedString;
    }

    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */

    var didWarnAboutMaps = false;

    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];
    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;
      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }

    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;
          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }
        }
      }

      if (invokeCallback) {
        callback(traverseContext, children,
        // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child = void 0;
      var nextName = void 0;
      var subtreeCount = 0; // Count of children found in the current subtree.
      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);
        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
              didWarnAboutMaps = true;
            }
          }

          var iterator = iteratorFn.call(children);
          var step = void 0;
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }

    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }

    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */
    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if ((typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      }
      // Implicit key determined by the index in the set
      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;

      func.call(context, child, bookKeeping.count++);
    }

    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }
      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;

      var mappedChild = func.call(context, child, bookKeeping.count++);
      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
          return c;
        });
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild,
          // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }
        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';
      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }
      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }

    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */
    function countChildren(children) {
      return traverseAllChildren(children, function () {
        return null;
      }, null);
    }

    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */
    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
        return child;
      });
      return result;
    }

    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */
    function onlyChild(children) {
      !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
        }
      }

      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null
      };

      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };

      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;

      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        };
        // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
          Provider: {
            get: function get() {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }
              return context.Provider;
            },
            set: function set(_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function get() {
              return context._currentValue;
            },
            set: function set(_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function get() {
              return context._currentValue2;
            },
            set: function set(_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function get() {
              return context._threadCount;
            },
            set: function set(_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function get() {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }
              return context.Consumer;
            }
          }
        });
        // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
      }

      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }

      return context;
    }

    function lazy(ctor) {
      var lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _ctor: ctor,
        // React uses these fields to store the result.
        _status: -1,
        _result: null
      };

      {
        // In production, this would just set it on the object.
        var defaultProps = void 0;
        var propTypes = void 0;
        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: true,
            get: function get() {
              return defaultProps;
            },
            set: function set(newDefaultProps) {
              warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              defaultProps = newDefaultProps;
              // Match production behavior more closely:
              Object.defineProperty(lazyType, 'defaultProps', {
                enumerable: true
              });
            }
          },
          propTypes: {
            configurable: true,
            get: function get() {
              return propTypes;
            },
            set: function set(newPropTypes) {
              warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              propTypes = newPropTypes;
              // Match production behavior more closely:
              Object.defineProperty(lazyType, 'propTypes', {
                enumerable: true
              });
            }
          }
        });
      }

      return lazyType;
    }

    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render === 'undefined' ? 'undefined' : _typeof(render));
        } else {
          !(
          // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
          render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
        }

        if (render != null) {
          !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
        }
      }

      return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
    }

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type === 'undefined' ? 'undefined' : _typeof(type));
        }
      }
      return {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
    }

    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      !(dispatcher !== null) ? invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.') : void 0;
      return dispatcher;
    }

    function useContext(Context, unstable_observedBits) {
      var dispatcher = resolveDispatcher();
      {
        !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0;

        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
          var realContext = Context._context;
          // Don't deduplicate because this legitimately causes bugs
          // and nobody should be using this in existing code.
          if (realContext.Consumer === Context) {
            warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
          } else if (realContext.Provider === Context) {
            warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
          }
        }
      }
      return dispatcher.useContext(Context, unstable_observedBits);
    }

    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }

    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }

    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }

    function useEffect(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, inputs);
    }

    function useLayoutEffect(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, inputs);
    }

    function useCallback(callback, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, inputs);
    }

    function useMemo(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, inputs);
    }

    function useImperativeHandle(ref, create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, inputs);
    }

    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }

    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */

    var propTypesMisspellWarningShown = void 0;

    {
      propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);
        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }
      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }
      return '';
    }

    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */
    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }
      return info;
    }

    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;

      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

      // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.
      var childOwner = '';
      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
      }

      setCurrentlyValidatingElement(element);
      {
        warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
      }
      setCurrentlyValidatingElement(null);
    }

    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */
    function validateChildKeys(node, parentType) {
      if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
        return;
      }
      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step = void 0;
            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }

    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */
    function validatePropTypes(element) {
      var type = element.type;
      if (type === null || type === undefined || typeof type === 'string') {
        return;
      }
      var name = getComponentName(type);
      var propTypes = void 0;
      if (typeof type === 'function') {
        propTypes = type.propTypes;
      } else if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
      // Note: Memo only checks outer props here.
      // Inner props are checked in the reconciler.
      type.$$typeof === REACT_MEMO_TYPE)) {
        propTypes = type.propTypes;
      } else {
        return;
      }
      if (propTypes) {
        setCurrentlyValidatingElement(element);
        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
        setCurrentlyValidatingElement(null);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }
      if (typeof type.getDefaultProps === 'function') {
        !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
      }
    }

    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */
    function validateFragmentProps(fragment) {
      setCurrentlyValidatingElement(fragment);

      var keys = Object.keys(fragment.props);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key !== 'children' && key !== 'key') {
          warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
          break;
        }
      }

      if (fragment.ref !== null) {
        warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
      }

      setCurrentlyValidatingElement(null);
    }

    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type);

      // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.
      if (!validType) {
        var info = '';
        if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString = void 0;
        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type === 'undefined' ? 'undefined' : _typeof(type);
        }

        warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }

      var element = createElement.apply(this, arguments);

      // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.
      if (element == null) {
        return element;
      }

      // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)
      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }

    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;
      // Legacy hook: remove it
      {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }

      return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }

    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:


    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.


    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


    // Gather advanced timing metrics for Profiler subtrees.


    // Trace which interactions trigger each commit.


    // Only used in www builds.
    // TODO: true? Here it might just be false.

    // Only used in www builds.


    // Only used in www builds.


    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties


    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
    var enableStableConcurrentModeAPIs = false;

    var React = {
      Children: {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      },

      createRef: createRef,
      Component: Component,
      PureComponent: PureComponent,

      createContext: createContext,
      forwardRef: forwardRef,
      lazy: lazy,
      memo: memo,

      useCallback: useCallback,
      useContext: useContext,
      useEffect: useEffect,
      useImperativeHandle: useImperativeHandle,
      useDebugValue: useDebugValue,
      useLayoutEffect: useLayoutEffect,
      useMemo: useMemo,
      useReducer: useReducer,
      useRef: useRef,
      useState: useState,

      Fragment: REACT_FRAGMENT_TYPE,
      StrictMode: REACT_STRICT_MODE_TYPE,
      Suspense: REACT_SUSPENSE_TYPE,

      createElement: createElementWithValidation,
      cloneElement: cloneElementWithValidation,
      createFactory: createFactoryWithValidation,
      isValidElement: isValidElement,

      version: ReactVersion,

      unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
      unstable_Profiler: REACT_PROFILER_TYPE,

      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    };

    // Note: some APIs are added with feature flags.
    // Make sure that stable builds for open source
    // don't modify the React object to avoid deopts.
    // Also let's not expose their names in stable builds.

    if (enableStableConcurrentModeAPIs) {
      React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      React.Profiler = REACT_PROFILER_TYPE;
      React.unstable_ConcurrentMode = undefined;
      React.unstable_Profiler = undefined;
    }

    var React$2 = Object.freeze({
      default: React
    });

    var React$3 = React$2 && React || React$2;

    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.
    var react = React$3.default || React$3;

    module.exports = react;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var k = __webpack_require__(4),
    n = "function" === typeof Symbol && Symbol.for,
    p = n ? Symbol.for("react.element") : 60103,
    q = n ? Symbol.for("react.portal") : 60106,
    r = n ? Symbol.for("react.fragment") : 60107,
    t = n ? Symbol.for("react.strict_mode") : 60108,
    u = n ? Symbol.for("react.profiler") : 60114,
    v = n ? Symbol.for("react.provider") : 60109,
    w = n ? Symbol.for("react.context") : 60110,
    x = n ? Symbol.for("react.concurrent_mode") : 60111,
    y = n ? Symbol.for("react.forward_ref") : 60112,
    z = n ? Symbol.for("react.suspense") : 60113,
    aa = n ? Symbol.for("react.memo") : 60115,
    ba = n ? Symbol.for("react.lazy") : 60116,
    A = "function" === typeof Symbol && Symbol.iterator;function ca(a, b, d, c, e, g, h, f) {
  if (!a) {
    a = void 0;if (void 0 === b) a = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
      var l = [d, c, e, g, h, f],
          m = 0;a = Error(b.replace(/%s/g, function () {
        return l[m++];
      }));a.name = "Invariant Violation";
    }a.framesToPop = 1;throw a;
  }
}
function B(a) {
  for (var b = arguments.length - 1, d = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 0; c < b; c++) {
    d += "&args[]=" + encodeURIComponent(arguments[c + 1]);
  }ca(!1, "Minified React error #" + a + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", d);
}var C = { isMounted: function isMounted() {
    return !1;
  }, enqueueForceUpdate: function enqueueForceUpdate() {}, enqueueReplaceState: function enqueueReplaceState() {}, enqueueSetState: function enqueueSetState() {} },
    D = {};
function E(a, b, d) {
  this.props = a;this.context = b;this.refs = D;this.updater = d || C;
}E.prototype.isReactComponent = {};E.prototype.setState = function (a, b) {
  "object" !== (typeof a === "undefined" ? "undefined" : _typeof(a)) && "function" !== typeof a && null != a ? B("85") : void 0;this.updater.enqueueSetState(this, a, b, "setState");
};E.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};function F() {}F.prototype = E.prototype;function G(a, b, d) {
  this.props = a;this.context = b;this.refs = D;this.updater = d || C;
}var H = G.prototype = new F();
H.constructor = G;k(H, E.prototype);H.isPureReactComponent = !0;var I = { current: null },
    J = { current: null },
    K = Object.prototype.hasOwnProperty,
    L = { key: !0, ref: !0, __self: !0, __source: !0 };
function M(a, b, d) {
  var c = void 0,
      e = {},
      g = null,
      h = null;if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
    K.call(b, c) && !L.hasOwnProperty(c) && (e[c] = b[c]);
  }var f = arguments.length - 2;if (1 === f) e.children = d;else if (1 < f) {
    for (var l = Array(f), m = 0; m < f; m++) {
      l[m] = arguments[m + 2];
    }e.children = l;
  }if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
    void 0 === e[c] && (e[c] = f[c]);
  }return { $$typeof: p, type: a, key: g, ref: h, props: e, _owner: J.current };
}
function da(a, b) {
  return { $$typeof: p, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
}function N(a) {
  return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && a.$$typeof === p;
}function escape(a) {
  var b = { "=": "=0", ":": "=2" };return "$" + ("" + a).replace(/[=:]/g, function (a) {
    return b[a];
  });
}var O = /\/+/g,
    P = [];function Q(a, b, d, c) {
  if (P.length) {
    var e = P.pop();e.result = a;e.keyPrefix = b;e.func = d;e.context = c;e.count = 0;return e;
  }return { result: a, keyPrefix: b, func: d, context: c, count: 0 };
}
function R(a) {
  a.result = null;a.keyPrefix = null;a.func = null;a.context = null;a.count = 0;10 > P.length && P.push(a);
}
function S(a, b, d, c) {
  var e = typeof a === "undefined" ? "undefined" : _typeof(a);if ("undefined" === e || "boolean" === e) a = null;var g = !1;if (null === a) g = !0;else switch (e) {case "string":case "number":
      g = !0;break;case "object":
      switch (a.$$typeof) {case p:case q:
          g = !0;}}if (g) return d(c, a, "" === b ? "." + T(a, 0) : b), 1;g = 0;b = "" === b ? "." : b + ":";if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
    e = a[h];var f = b + T(e, h);g += S(e, f, d, c);
  } else if (null === a || "object" !== (typeof a === "undefined" ? "undefined" : _typeof(a)) ? f = null : (f = A && a[A] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), h = 0; !(e = a.next()).done;) {
    e = e.value, f = b + T(e, h++), g += S(e, f, d, c);
  } else "object" === e && (d = "" + a, B("31", "[object Object]" === d ? "object with keys {" + Object.keys(a).join(", ") + "}" : d, ""));return g;
}function U(a, b, d) {
  return null == a ? 0 : S(a, "", b, d);
}function T(a, b) {
  return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && null != a.key ? escape(a.key) : b.toString(36);
}function ea(a, b) {
  a.func.call(a.context, b, a.count++);
}
function fa(a, b, d) {
  var c = a.result,
      e = a.keyPrefix;a = a.func.call(a.context, b, a.count++);Array.isArray(a) ? V(a, c, d, function (a) {
    return a;
  }) : null != a && (N(a) && (a = da(a, e + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(O, "$&/") + "/") + d)), c.push(a));
}function V(a, b, d, c, e) {
  var g = "";null != d && (g = ("" + d).replace(O, "$&/") + "/");b = Q(b, g, c, e);U(a, fa, b);R(b);
}function W() {
  var a = I.current;null === a ? B("321") : void 0;return a;
}
var X = { Children: { map: function map(a, b, d) {
      if (null == a) return a;var c = [];V(a, c, null, b, d);return c;
    }, forEach: function forEach(a, b, d) {
      if (null == a) return a;b = Q(null, null, b, d);U(a, ea, b);R(b);
    }, count: function count(a) {
      return U(a, function () {
        return null;
      }, null);
    }, toArray: function toArray(a) {
      var b = [];V(a, b, null, function (a) {
        return a;
      });return b;
    }, only: function only(a) {
      N(a) ? void 0 : B("143");return a;
    } }, createRef: function createRef() {
    return { current: null };
  }, Component: E, PureComponent: G, createContext: function createContext(a, b) {
    void 0 === b && (b = null);a = { $$typeof: w, _calculateChangedBits: b,
      _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null };a.Provider = { $$typeof: v, _context: a };return a.Consumer = a;
  }, forwardRef: function forwardRef(a) {
    return { $$typeof: y, render: a };
  }, lazy: function lazy(a) {
    return { $$typeof: ba, _ctor: a, _status: -1, _result: null };
  }, memo: function memo(a, b) {
    return { $$typeof: aa, type: a, compare: void 0 === b ? null : b };
  }, useCallback: function useCallback(a, b) {
    return W().useCallback(a, b);
  }, useContext: function useContext(a, b) {
    return W().useContext(a, b);
  }, useEffect: function useEffect(a, b) {
    return W().useEffect(a, b);
  }, useImperativeHandle: function useImperativeHandle(a, b, d) {
    return W().useImperativeHandle(a, b, d);
  }, useDebugValue: function useDebugValue() {}, useLayoutEffect: function useLayoutEffect(a, b) {
    return W().useLayoutEffect(a, b);
  }, useMemo: function useMemo(a, b) {
    return W().useMemo(a, b);
  }, useReducer: function useReducer(a, b, d) {
    return W().useReducer(a, b, d);
  }, useRef: function useRef(a) {
    return W().useRef(a);
  }, useState: function useState(a) {
    return W().useState(a);
  }, Fragment: r, StrictMode: t, Suspense: z, createElement: M, cloneElement: function cloneElement(a, b, d) {
    null === a || void 0 === a ? B("267", a) : void 0;var c = void 0,
        e = k({}, a.props),
        g = a.key,
        h = a.ref,
        f = a._owner;if (null != b) {
      void 0 !== b.ref && (h = b.ref, f = J.current);void 0 !== b.key && (g = "" + b.key);var l = void 0;a.type && a.type.defaultProps && (l = a.type.defaultProps);for (c in b) {
        K.call(b, c) && !L.hasOwnProperty(c) && (e[c] = void 0 === b[c] && void 0 !== l ? l[c] : b[c]);
      }
    }c = arguments.length - 2;if (1 === c) e.children = d;else if (1 < c) {
      l = Array(c);for (var m = 0; m < c; m++) {
        l[m] = arguments[m + 2];
      }e.children = l;
    }return { $$typeof: p, type: a.type, key: g, ref: h, props: e, _owner: f };
  }, createFactory: function createFactory(a) {
    var b = M.bind(null, a);b.type = a;return b;
  }, isValidElement: N, version: "16.8.6",
  unstable_ConcurrentMode: x, unstable_Profiler: u, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentDispatcher: I, ReactCurrentOwner: J, assign: k } },
    Y = { default: X },
    Z = Y && X || Y;module.exports = Z.default || Z;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
}

// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

// This implementation is based heavily on node's url.parse
function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash = void 0;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
}

exports.default = resolvePathname;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v0.13.6
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', { value: true });

    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:


    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.


    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


    // Gather advanced timing metrics for Profiler subtrees.


    // Trace which interactions trigger each commit.
    var enableSchedulerTracing = true;

    // Only used in www builds.
    // TODO: true? Here it might just be false.

    // Only used in www builds.


    // Only used in www builds.


    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties


    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

    var DEFAULT_THREAD_ID = 0;

    // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0;

    // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null;

    // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;

    if (enableSchedulerTracing) {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }

    function unstable_clear(callback) {
      if (!enableSchedulerTracing) {
        return callback();
      }

      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();

      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }

    function unstable_getCurrent() {
      if (!enableSchedulerTracing) {
        return null;
      } else {
        return exports.__interactionsRef.current;
      }
    }

    function unstable_getThreadID() {
      return ++threadIDCounter;
    }

    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback();
      }

      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };

      var prevInteractions = exports.__interactionsRef.current;

      // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.
      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;

      var subscriber = exports.__subscriberRef.current;
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--;

              // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.
              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }

      return returnValue;
    }

    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback;
      }

      var wrappedInteractions = exports.__interactionsRef.current;

      var subscriber = exports.__subscriberRef.current;
      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      }

      // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });

      var hasRun = false;

      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;

        subscriber = exports.__subscriberRef.current;

        try {
          var returnValue = void 0;

          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }

          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than once–
            // Only decrement the outstanding interaction counts once.
            hasRun = true;

            // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.
            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }

      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;

        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };

      return wrapped;
    }

    var subscribers = null;
    if (enableSchedulerTracing) {
      subscribers = new Set();
    }

    function unstable_subscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.add(subscriber);

        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }

    function unstable_unsubscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.delete(subscriber);

        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }

    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_trace = unstable_trace;
    exports.unstable_wrap = unstable_wrap;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.13.6
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


Object.defineProperty(exports, "__esModule", { value: !0 });var b = 0;exports.__interactionsRef = null;exports.__subscriberRef = null;exports.unstable_clear = function (a) {
  return a();
};exports.unstable_getCurrent = function () {
  return null;
};exports.unstable_getThreadID = function () {
  return ++b;
};exports.unstable_trace = function (a, d, c) {
  return c();
};exports.unstable_wrap = function (a) {
  return a;
};exports.unstable_subscribe = function () {};exports.unstable_unsubscribe = function () {};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {/** @license React v0.13.6
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', { value: true });

    var enableSchedulerDebugging = false;

    /* eslint-disable no-var */

    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;

    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;

    // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
    // Eventually times out
    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000;
    // Never times out
    var IDLE_PRIORITY = maxSigned31BitInt;

    // Callbacks are stored as a circular, doubly linked list.
    var firstCallbackNode = null;

    var currentDidTimeout = false;
    // Pausing the scheduler is useful for debugging.
    var isSchedulerPaused = false;

    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1;

    // This is set when a callback is being executed, to prevent re-entrancy.
    var isExecutingCallback = false;

    var isHostCallbackScheduled = false;

    var hasNativePerformanceNow = (typeof performance === 'undefined' ? 'undefined' : _typeof(performance)) === 'object' && typeof performance.now === 'function';

    function ensureHostCallbackIsScheduled() {
      if (isExecutingCallback) {
        // Don't schedule work yet; wait until the next time we yield.
        return;
      }
      // Schedule the host callback using the earliest expiration in the list.
      var expirationTime = firstCallbackNode.expirationTime;
      if (!isHostCallbackScheduled) {
        isHostCallbackScheduled = true;
      } else {
        // Cancel the existing host callback.
        cancelHostCallback();
      }
      _requestHostCallback(flushWork, expirationTime);
    }

    function flushFirstCallback() {
      var flushedNode = firstCallbackNode;

      // Remove the node from the list before calling the callback. That way the
      // list is in a consistent state even if the callback throws.
      var next = firstCallbackNode.next;
      if (firstCallbackNode === next) {
        // This is the last callback in the list.
        firstCallbackNode = null;
        next = null;
      } else {
        var lastCallbackNode = firstCallbackNode.previous;
        firstCallbackNode = lastCallbackNode.next = next;
        next.previous = lastCallbackNode;
      }

      flushedNode.next = flushedNode.previous = null;

      // Now it's safe to call the callback.
      var callback = flushedNode.callback;
      var expirationTime = flushedNode.expirationTime;
      var priorityLevel = flushedNode.priorityLevel;
      var previousPriorityLevel = currentPriorityLevel;
      var previousExpirationTime = currentExpirationTime;
      currentPriorityLevel = priorityLevel;
      currentExpirationTime = expirationTime;
      var continuationCallback;
      try {
        continuationCallback = callback();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentExpirationTime = previousExpirationTime;
      }

      // A callback may return a continuation. The continuation should be scheduled
      // with the same priority and expiration as the just-finished callback.
      if (typeof continuationCallback === 'function') {
        var continuationNode = {
          callback: continuationCallback,
          priorityLevel: priorityLevel,
          expirationTime: expirationTime,
          next: null,
          previous: null
        };

        // Insert the new callback into the list, sorted by its expiration. This is
        // almost the same as the code in `scheduleCallback`, except the callback
        // is inserted into the list *before* callbacks of equal expiration instead
        // of after.
        if (firstCallbackNode === null) {
          // This is the first callback in the list.
          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
        } else {
          var nextAfterContinuation = null;
          var node = firstCallbackNode;
          do {
            if (node.expirationTime >= expirationTime) {
              // This callback expires at or after the continuation. We will insert
              // the continuation *before* this callback.
              nextAfterContinuation = node;
              break;
            }
            node = node.next;
          } while (node !== firstCallbackNode);

          if (nextAfterContinuation === null) {
            // No equal or lower priority callback was found, which means the new
            // callback is the lowest priority callback in the list.
            nextAfterContinuation = firstCallbackNode;
          } else if (nextAfterContinuation === firstCallbackNode) {
            // The new callback is the highest priority callback in the list.
            firstCallbackNode = continuationNode;
            ensureHostCallbackIsScheduled();
          }

          var previous = nextAfterContinuation.previous;
          previous.next = nextAfterContinuation.previous = continuationNode;
          continuationNode.next = nextAfterContinuation;
          continuationNode.previous = previous;
        }
      }
    }

    function flushImmediateWork() {
      if (
      // Confirm we've exited the outer most event handler
      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
        isExecutingCallback = true;
        try {
          do {
            flushFirstCallback();
          } while (
          // Keep flushing until there are no more immediate callbacks
          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
        } finally {
          isExecutingCallback = false;
          if (firstCallbackNode !== null) {
            // There's still work remaining. Request another callback.
            ensureHostCallbackIsScheduled();
          } else {
            isHostCallbackScheduled = false;
          }
        }
      }
    }

    function flushWork(didTimeout) {
      // Exit right away if we're currently paused

      if (enableSchedulerDebugging && isSchedulerPaused) {
        return;
      }

      isExecutingCallback = true;
      var previousDidTimeout = currentDidTimeout;
      currentDidTimeout = didTimeout;
      try {
        if (didTimeout) {
          // Flush all the expired callbacks without yielding.
          while (firstCallbackNode !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
            // TODO Wrap in feature flag
            // Read the current time. Flush all the callbacks that expire at or
            // earlier than that time. Then read the current time again and repeat.
            // This optimizes for as few performance.now calls as possible.
            var currentTime = exports.unstable_now();
            if (firstCallbackNode.expirationTime <= currentTime) {
              do {
                flushFirstCallback();
              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused));
              continue;
            }
            break;
          }
        } else {
          // Keep flushing callbacks until we run out of time in the frame.
          if (firstCallbackNode !== null) {
            do {
              if (enableSchedulerDebugging && isSchedulerPaused) {
                break;
              }
              flushFirstCallback();
            } while (firstCallbackNode !== null && !shouldYieldToHost());
          }
        }
      } finally {
        isExecutingCallback = false;
        currentDidTimeout = previousDidTimeout;
        if (firstCallbackNode !== null) {
          // There's still work remaining. Request another callback.
          ensureHostCallbackIsScheduled();
        } else {
          isHostCallbackScheduled = false;
        }
        // Before exiting, flush all the immediate work that was scheduled.
        flushImmediateWork();
      }
    }

    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case LowPriority:
        case IdlePriority:
          break;
        default:
          priorityLevel = NormalPriority;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime;

        // Before exiting, flush all the immediate work that was scheduled.
        flushImmediateWork();
      }
    }

    function unstable_next(eventHandler) {
      var priorityLevel = void 0;
      switch (currentPriorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
          // Shift down to normal priority
          priorityLevel = NormalPriority;
          break;
        default:
          // Anything lower than normal priority should remain at the current level.
          priorityLevel = currentPriorityLevel;
          break;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime;

        // Before exiting, flush all the immediate work that was scheduled.
        flushImmediateWork();
      }
    }

    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        // This is a fork of runWithPriority, inlined for performance.
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = parentPriorityLevel;
        currentEventStartTime = exports.unstable_now();

        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
          currentEventStartTime = previousEventStartTime;
          flushImmediateWork();
        }
      };
    }

    function unstable_scheduleCallback(callback, deprecated_options) {
      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();

      var expirationTime;
      if ((typeof deprecated_options === 'undefined' ? 'undefined' : _typeof(deprecated_options)) === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
        // FIXME: Remove this branch once we lift expiration times out of React.
        expirationTime = startTime + deprecated_options.timeout;
      } else {
        switch (currentPriorityLevel) {
          case ImmediatePriority:
            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            expirationTime = startTime + USER_BLOCKING_PRIORITY;
            break;
          case IdlePriority:
            expirationTime = startTime + IDLE_PRIORITY;
            break;
          case LowPriority:
            expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
        }
      }

      var newNode = {
        callback: callback,
        priorityLevel: currentPriorityLevel,
        expirationTime: expirationTime,
        next: null,
        previous: null
      };

      // Insert the new callback into the list, ordered first by expiration, then
      // by insertion. So the new callback is inserted any other callback with
      // equal expiration.
      if (firstCallbackNode === null) {
        // This is the first callback in the list.
        firstCallbackNode = newNode.next = newNode.previous = newNode;
        ensureHostCallbackIsScheduled();
      } else {
        var next = null;
        var node = firstCallbackNode;
        do {
          if (node.expirationTime > expirationTime) {
            // The new callback expires before this one.
            next = node;
            break;
          }
          node = node.next;
        } while (node !== firstCallbackNode);

        if (next === null) {
          // No callback with a later expiration was found, which means the new
          // callback has the latest expiration in the list.
          next = firstCallbackNode;
        } else if (next === firstCallbackNode) {
          // The new callback has the earliest expiration in the entire list.
          firstCallbackNode = newNode;
          ensureHostCallbackIsScheduled();
        }

        var previous = next.previous;
        previous.next = next.previous = newNode;
        newNode.next = next;
        newNode.previous = previous;
      }

      return newNode;
    }

    function unstable_pauseExecution() {
      isSchedulerPaused = true;
    }

    function unstable_continueExecution() {
      isSchedulerPaused = false;
      if (firstCallbackNode !== null) {
        ensureHostCallbackIsScheduled();
      }
    }

    function unstable_getFirstCallbackNode() {
      return firstCallbackNode;
    }

    function unstable_cancelCallback(callbackNode) {
      var next = callbackNode.next;
      if (next === null) {
        // Already cancelled.
        return;
      }

      if (next === callbackNode) {
        // This is the only scheduled callback. Clear the list.
        firstCallbackNode = null;
      } else {
        // Remove the callback from its position in the list.
        if (callbackNode === firstCallbackNode) {
          firstCallbackNode = next;
        }
        var previous = callbackNode.previous;
        previous.next = next;
        next.previous = previous;
      }

      callbackNode.next = callbackNode.previous = null;
    }

    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    }

    function unstable_shouldYield() {
      return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
    }

    // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.

    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.
    var localDate = Date;

    // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088
    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;

    // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.
    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;

    // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.
    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;
    var requestAnimationFrameWithTimeout = function requestAnimationFrameWithTimeout(callback) {
      // schedule rAF and also a setTimeout
      rAFID = localRequestAnimationFrame(function (timestamp) {
        // cancel the setTimeout
        localClearTimeout(rAFTimeoutID);
        callback(timestamp);
      });
      rAFTimeoutID = localSetTimeout(function () {
        // cancel the requestAnimationFrame
        localCancelAnimationFrame(rAFID);
        callback(exports.unstable_now());
      }, ANIMATION_FRAME_TIMEOUT);
    };

    if (hasNativePerformanceNow) {
      var Performance = performance;
      exports.unstable_now = function () {
        return Performance.now();
      };
    } else {
      exports.unstable_now = function () {
        return localDate.now();
      };
    }

    var _requestHostCallback;
    var cancelHostCallback;
    var shouldYieldToHost;

    var globalValue = null;
    if (typeof window !== 'undefined') {
      globalValue = window;
    } else if (typeof global !== 'undefined') {
      globalValue = global;
    }

    if (globalValue && globalValue._schedMock) {
      // Dynamic injection, only for testing purposes.
      var globalImpl = globalValue._schedMock;
      _requestHostCallback = globalImpl[0];
      cancelHostCallback = globalImpl[1];
      shouldYieldToHost = globalImpl[2];
      exports.unstable_now = globalImpl[3];
    } else if (
    // If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' ||
    // Check if MessageChannel is supported, too.
    typeof MessageChannel !== 'function') {
      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
      // fallback to a naive implementation.
      var _callback = null;
      var _flushCallback = function _flushCallback(didTimeout) {
        if (_callback !== null) {
          try {
            _callback(didTimeout);
          } finally {
            _callback = null;
          }
        }
      };
      _requestHostCallback = function requestHostCallback(cb, ms) {
        if (_callback !== null) {
          // Protect against re-entrancy.
          setTimeout(_requestHostCallback, 0, cb);
        } else {
          _callback = cb;
          setTimeout(_flushCallback, 0, false);
        }
      };
      cancelHostCallback = function cancelHostCallback() {
        _callback = null;
      };
      shouldYieldToHost = function shouldYieldToHost() {
        return false;
      };
    } else {
      if (typeof console !== 'undefined') {
        // TODO: Remove fb.me link
        if (typeof localRequestAnimationFrame !== 'function') {
          console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
        if (typeof localCancelAnimationFrame !== 'function') {
          console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
      }

      var scheduledHostCallback = null;
      var isMessageEventScheduled = false;
      var timeoutTime = -1;

      var isAnimationFrameScheduled = false;

      var isFlushingHostCallback = false;

      var frameDeadline = 0;
      // We start out assuming that we run at 30fps but then the heuristic tracking
      // will adjust this value to a faster fps if we get more frequent animation
      // frames.
      var previousFrameTime = 33;
      var activeFrameTime = 33;

      shouldYieldToHost = function shouldYieldToHost() {
        return frameDeadline <= exports.unstable_now();
      };

      // We use the postMessage trick to defer idle work until after the repaint.
      var channel = new MessageChannel();
      var port = channel.port2;
      channel.port1.onmessage = function (event) {
        isMessageEventScheduled = false;

        var prevScheduledCallback = scheduledHostCallback;
        var prevTimeoutTime = timeoutTime;
        scheduledHostCallback = null;
        timeoutTime = -1;

        var currentTime = exports.unstable_now();

        var didTimeout = false;
        if (frameDeadline - currentTime <= 0) {
          // There's no time left in this idle period. Check if the callback has
          // a timeout and whether it's been exceeded.
          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
            // Exceeded the timeout. Invoke the callback even though there's no
            // time left.
            didTimeout = true;
          } else {
            // No timeout.
            if (!isAnimationFrameScheduled) {
              // Schedule another animation callback so we retry later.
              isAnimationFrameScheduled = true;
              requestAnimationFrameWithTimeout(animationTick);
            }
            // Exit without invoking the callback.
            scheduledHostCallback = prevScheduledCallback;
            timeoutTime = prevTimeoutTime;
            return;
          }
        }

        if (prevScheduledCallback !== null) {
          isFlushingHostCallback = true;
          try {
            prevScheduledCallback(didTimeout);
          } finally {
            isFlushingHostCallback = false;
          }
        }
      };

      var animationTick = function animationTick(rafTime) {
        if (scheduledHostCallback !== null) {
          // Eagerly schedule the next animation callback at the beginning of the
          // frame. If the scheduler queue is not empty at the end of the frame, it
          // will continue flushing inside that callback. If the queue *is* empty,
          // then it will exit immediately. Posting the callback at the start of the
          // frame ensures it's fired within the earliest possible frame. If we
          // waited until the end of the frame to post the callback, we risk the
          // browser skipping a frame and not firing the callback until the frame
          // after that.
          requestAnimationFrameWithTimeout(animationTick);
        } else {
          // No pending work. Exit.
          isAnimationFrameScheduled = false;
          return;
        }

        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
          if (nextFrameTime < 8) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame time gets lower than 8, it is probably a bug.
            nextFrameTime = 8;
          }
          // If one frame goes long, then the next one can be short to catch up.
          // If two frames are short in a row, then that's an indication that we
          // actually have a higher frame rate than what we're currently optimizing.
          // We adjust our heuristic dynamically accordingly. For example, if we're
          // running on 120hz display or 90hz VR display.
          // Take the max of the two in case one of them was an anomaly due to
          // missed frame deadlines.
          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
        } else {
          previousFrameTime = nextFrameTime;
        }
        frameDeadline = rafTime + activeFrameTime;
        if (!isMessageEventScheduled) {
          isMessageEventScheduled = true;
          port.postMessage(undefined);
        }
      };

      _requestHostCallback = function _requestHostCallback(callback, absoluteTimeout) {
        scheduledHostCallback = callback;
        timeoutTime = absoluteTimeout;
        if (isFlushingHostCallback || absoluteTimeout < 0) {
          // Don't wait for the next frame. Continue working ASAP, in a new event.
          port.postMessage(undefined);
        } else if (!isAnimationFrameScheduled) {
          // If rAF didn't already schedule one, we need to schedule a frame.
          // TODO: If this rAF doesn't materialize because the browser throttles, we
          // might want to still have setTimeout trigger rIC as a backup to ensure
          // that we keep performing work.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
      };

      cancelHostCallback = function cancelHostCallback() {
        scheduledHostCallback = null;
        isMessageEventScheduled = false;
        timeoutTime = -1;
      };
    }

    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_next = unstable_next;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_shouldYield = unstable_shouldYield;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(13)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", { value: !0 });var d = null,
    e = !1,
    g = 3,
    k = -1,
    l = -1,
    m = !1,
    n = !1;function p() {
  if (!m) {
    var a = d.expirationTime;n ? q() : n = !0;_r(t, a);
  }
}
function u() {
  var a = d,
      b = d.next;if (d === b) d = null;else {
    var c = d.previous;d = c.next = b;b.previous = c;
  }a.next = a.previous = null;c = a.callback;b = a.expirationTime;a = a.priorityLevel;var f = g,
      Q = l;g = a;l = b;try {
    var h = c();
  } finally {
    g = f, l = Q;
  }if ("function" === typeof h) if (h = { callback: h, priorityLevel: a, expirationTime: b, next: null, previous: null }, null === d) d = h.next = h.previous = h;else {
    c = null;a = d;do {
      if (a.expirationTime >= b) {
        c = a;break;
      }a = a.next;
    } while (a !== d);null === c ? c = d : c === d && (d = h, p());b = c.previous;b.next = c.previous = h;h.next = c;h.previous = b;
  }
}function v() {
  if (-1 === k && null !== d && 1 === d.priorityLevel) {
    m = !0;try {
      do {
        u();
      } while (null !== d && 1 === d.priorityLevel);
    } finally {
      m = !1, null !== d ? p() : n = !1;
    }
  }
}function t(a) {
  m = !0;var b = e;e = a;try {
    if (a) for (; null !== d;) {
      var c = exports.unstable_now();if (d.expirationTime <= c) {
        do {
          u();
        } while (null !== d && d.expirationTime <= c);
      } else break;
    } else if (null !== d) {
      do {
        u();
      } while (null !== d && !w());
    }
  } finally {
    m = !1, e = b, null !== d ? p() : n = !1, v();
  }
}
var x = Date,
    y = "function" === typeof setTimeout ? setTimeout : void 0,
    z = "function" === typeof clearTimeout ? clearTimeout : void 0,
    A = "function" === typeof requestAnimationFrame ? requestAnimationFrame : void 0,
    B = "function" === typeof cancelAnimationFrame ? cancelAnimationFrame : void 0,
    C,
    D;function E(a) {
  C = A(function (b) {
    z(D);a(b);
  });D = y(function () {
    B(C);a(exports.unstable_now());
  }, 100);
}
if ("object" === (typeof performance === "undefined" ? "undefined" : _typeof(performance)) && "function" === typeof performance.now) {
  var F = performance;exports.unstable_now = function () {
    return F.now();
  };
} else exports.unstable_now = function () {
  return x.now();
};var _r,
    q,
    w,
    G = null;"undefined" !== typeof window ? G = window : "undefined" !== typeof global && (G = global);
if (G && G._schedMock) {
  var H = G._schedMock;_r = H[0];q = H[1];w = H[2];exports.unstable_now = H[3];
} else if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
  var I = null,
      J = function J(a) {
    if (null !== I) try {
      I(a);
    } finally {
      I = null;
    }
  };_r = function r(a) {
    null !== I ? setTimeout(_r, 0, a) : (I = a, setTimeout(J, 0, !1));
  };q = function q() {
    I = null;
  };w = function w() {
    return !1;
  };
} else {
  "undefined" !== typeof console && ("function" !== typeof A && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"), "function" !== typeof B && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var K = null,
      L = !1,
      M = -1,
      N = !1,
      O = !1,
      P = 0,
      R = 33,
      S = 33;w = function w() {
    return P <= exports.unstable_now();
  };var T = new MessageChannel(),
      U = T.port2;T.port1.onmessage = function () {
    L = !1;var a = K,
        b = M;K = null;M = -1;var c = exports.unstable_now(),
        f = !1;if (0 >= P - c) if (-1 !== b && b <= c) f = !0;else {
      N || (N = !0, E(V));K = a;M = b;return;
    }if (null !== a) {
      O = !0;try {
        a(f);
      } finally {
        O = !1;
      }
    }
  };
  var V = function V(a) {
    if (null !== K) {
      E(V);var b = a - P + S;b < S && R < S ? (8 > b && (b = 8), S = b < R ? R : b) : R = b;P = a + S;L || (L = !0, U.postMessage(void 0));
    } else N = !1;
  };_r = function _r(a, b) {
    K = a;M = b;O || 0 > b ? U.postMessage(void 0) : N || (N = !0, E(V));
  };q = function q() {
    K = null;L = !1;M = -1;
  };
}exports.unstable_ImmediatePriority = 1;exports.unstable_UserBlockingPriority = 2;exports.unstable_NormalPriority = 3;exports.unstable_IdlePriority = 5;exports.unstable_LowPriority = 4;
exports.unstable_runWithPriority = function (a, b) {
  switch (a) {case 1:case 2:case 3:case 4:case 5:
      break;default:
      a = 3;}var c = g,
      f = k;g = a;k = exports.unstable_now();try {
    return b();
  } finally {
    g = c, k = f, v();
  }
};exports.unstable_next = function (a) {
  switch (g) {case 1:case 2:case 3:
      var b = 3;break;default:
      b = g;}var c = g,
      f = k;g = b;k = exports.unstable_now();try {
    return a();
  } finally {
    g = c, k = f, v();
  }
};
exports.unstable_scheduleCallback = function (a, b) {
  var c = -1 !== k ? k : exports.unstable_now();if ("object" === (typeof b === "undefined" ? "undefined" : _typeof(b)) && null !== b && "number" === typeof b.timeout) b = c + b.timeout;else switch (g) {case 1:
      b = c + -1;break;case 2:
      b = c + 250;break;case 5:
      b = c + 1073741823;break;case 4:
      b = c + 1E4;break;default:
      b = c + 5E3;}a = { callback: a, priorityLevel: g, expirationTime: b, next: null, previous: null };if (null === d) d = a.next = a.previous = a, p();else {
    c = null;var f = d;do {
      if (f.expirationTime > b) {
        c = f;break;
      }f = f.next;
    } while (f !== d);null === c ? c = d : c === d && (d = a, p());
    b = c.previous;b.next = c.previous = a;a.next = c;a.previous = b;
  }return a;
};exports.unstable_cancelCallback = function (a) {
  var b = a.next;if (null !== b) {
    if (b === a) d = null;else {
      a === d && (d = b);var c = a.previous;c.next = b;b.previous = c;
    }a.next = a.previous = null;
  }
};exports.unstable_wrapCallback = function (a) {
  var b = g;return function () {
    var c = g,
        f = k;g = b;k = exports.unstable_now();try {
      return a.apply(this, arguments);
    } finally {
      g = c, k = f, v();
    }
  };
};exports.unstable_getCurrentPriorityLevel = function () {
  return g;
};
exports.unstable_shouldYield = function () {
  return !e && (null !== d && d.expirationTime < l || w());
};exports.unstable_continueExecution = function () {
  null !== d && p();
};exports.unstable_pauseExecution = function () {};exports.unstable_getFirstCallbackNode = function () {
  return d;
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(63);
} else {
  module.exports = __webpack_require__(62);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function valueEqual(a, b) {
  if (a === b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);

    if (aKeys.length !== bKeys.length) return false;

    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

exports.default = valueEqual;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(2);

var _react2 = _interopRequireDefault(_react);

var _axios = __webpack_require__(3);

var _axios2 = _interopRequireDefault(_axios);

var _NavLink = __webpack_require__(25);

var _NavLink2 = _interopRequireDefault(_NavLink);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Home = function (_Component) {
    _inherits(Home, _Component);

    function Home(props) {
        _classCallCheck(this, Home);

        var _this2 = _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this, props));

        _this2.state = {
            team: []
        };

        return _this2;
    }

    //데이터 읽기


    _createClass(Home, [{
        key: "componentWillMount",
        value: function componentWillMount() {
            var _this = this;
            _axios2.default.get('/team').then(function (result) {
                _this.setState({ team: result.data });
            });
        }
        // 화면에 출력하는 함수

    }, {
        key: "render",
        value: function render() {
            var html = this.state.team.map(function (m) {
                return _react2.default.createElement(
                    _NavLink2.default,
                    { to: "/detail/" + m.tno },
                    _react2.default.createElement(
                        "div",
                        { className: "text-center team" },
                        _react2.default.createElement(
                            "div",
                            { className: "circle" },
                            _react2.default.createElement("img", { src: m.emblem }),
                            _react2.default.createElement(
                                "h6",
                                null,
                                m.team_name
                            )
                        )
                    )
                );
            });
            return _react2.default.createElement(
                "div",
                { className: "container" },
                html
            );
        }
    }]);

    return Home;
}(_react.Component);

exports.default = Home;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(2);

var _react2 = _interopRequireDefault(_react);

var _axios = __webpack_require__(3);

var _axios2 = _interopRequireDefault(_axios);

var _reactRouterDom = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Player = function (_Component) {
    _inherits(Player, _Component);

    function Player(props) {
        _classCallCheck(this, Player);

        var _this2 = _possibleConstructorReturn(this, (Player.__proto__ || Object.getPrototypeOf(Player)).call(this, props));

        _this2.state = {
            player: []
        };

        return _this2;
    }

    //데이터 읽기


    _createClass(Player, [{
        key: "componentWillMount",
        value: function componentWillMount() {

            var _this = this;
            _axios2.default.get("/player", {
                params: {
                    tno: this.props.match.params.tno
                }
            }).then(function (result) {
                // response.json(docs);
                //[{}]
                _this.setState({ player: result.data });
            });
        }
        // 화면에 출력하는 함수

    }, {
        key: "render",
        value: function render() {
            var html = this.state.player.map(function (m) {
                return _react2.default.createElement(
                    _reactRouterDom.NavLink,
                    { to: "/player_detail/" + m.tno + "/" + m.pno, style: { "color": "black" } },
                    _react2.default.createElement(
                        "div",
                        { className: "col-sm-3" },
                        _react2.default.createElement(
                            "div",
                            { className: "thumbnail", style: { "height": "240px" } },
                            _react2.default.createElement("img", { src: m.player_picture, width: "150px", height: "150px" }),
                            _react2.default.createElement(
                                "p",
                                { style: { "font-size": "20px" } },
                                m.player_number,
                                " / ",
                                _react2.default.createElement(
                                    "strong",
                                    null,
                                    m.player_name
                                )
                            ),
                            _react2.default.createElement(
                                "p",
                                null,
                                m.position
                            )
                        )
                    )
                );
            });
            return _react2.default.createElement(
                "div",
                { className: "container" },
                _react2.default.createElement(
                    "div",
                    { className: "row" },
                    _react2.default.createElement(
                        "table",
                        { className: "player_List", style: { "margin-top": "800px" } },
                        _react2.default.createElement(
                            "h2",
                            { className: "text-left" },
                            "Player List"
                        ),
                        html
                    )
                )
            );
        }
    }]);

    return Player;
}(_react.Component);

exports.default = Player;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(2);

var _react2 = _interopRequireDefault(_react);

var _axios = __webpack_require__(3);

var _axios2 = _interopRequireDefault(_axios);

var _reactRouterDom = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PlayerDetail = function (_Component) {
    _inherits(PlayerDetail, _Component);

    function PlayerDetail(props) {
        _classCallCheck(this, PlayerDetail);

        var _this2 = _possibleConstructorReturn(this, (PlayerDetail.__proto__ || Object.getPrototypeOf(PlayerDetail)).call(this, props));

        _this2.state = {
            player: {},
            pno: 1,
            tno: 1
        };

        return _this2;
    }

    //데이터 읽기


    _createClass(PlayerDetail, [{
        key: "componentWillMount",
        value: function componentWillMount() {
            var _this = this;
            _axios2.default.get("/player_detail", {
                params: {
                    tno: this.props.match.params.tno,
                    pno: this.props.match.params.pno
                }
            }).then(function (result) {
                // response.json(docs);
                //[{}]
                _this.setState({ player: result.data[0] });
            });
        }
        // 화면에 출력하는 함수

    }, {
        key: "render",
        value: function render() {
            var p = this.state.player.position;
            var pp = null;
            if (p == "Goalkeeper") {
                pp = _react2.default.createElement(
                    "th",
                    { className: "text-center" },
                    "Clean sheets "
                );
            } else {
                pp = _react2.default.createElement(
                    "th",
                    { className: "text-center" },
                    "Goals"
                );
            }

            return _react2.default.createElement(
                "div",
                { className: "container" },
                _react2.default.createElement(
                    "div",
                    { className: "row" },
                    _react2.default.createElement(
                        "div",
                        { className: "player_detail", style: { "margin-top": "800px" } },
                        _react2.default.createElement(
                            "div",
                            { className: "col-sm-5" },
                            _react2.default.createElement(
                                "div",
                                { className: "thumbnail", style: { "height": "450px" } },
                                _react2.default.createElement("img", { src: this.state.player.player_picture, width: "350px", height: "350px" }),
                                _react2.default.createElement(
                                    "p",
                                    { style: { "font-size": "20px" } },
                                    this.state.player.player_number,
                                    " / ",
                                    _react2.default.createElement(
                                        "strong",
                                        null,
                                        this.state.player.player_name
                                    )
                                ),
                                _react2.default.createElement(
                                    "p",
                                    null,
                                    this.state.player.position
                                )
                            )
                        ),
                        _react2.default.createElement(
                            "div",
                            { className: "col-sm-7" },
                            _react2.default.createElement(
                                "div",
                                { className: "panel-group", style: { "font-size": "20px" } },
                                _react2.default.createElement(
                                    "div",
                                    { className: "panel panel-default" },
                                    _react2.default.createElement(
                                        "div",
                                        { className: "panel-heading" },
                                        "\uAD6D\uC801"
                                    ),
                                    _react2.default.createElement(
                                        "div",
                                        { className: "panel-body" },
                                        this.state.player.nation
                                    )
                                ),
                                _react2.default.createElement(
                                    "div",
                                    { className: "panel panel-default" },
                                    _react2.default.createElement(
                                        "div",
                                        { className: "panel-heading" },
                                        "\uC0DD\uB144\uC6D4\uC77C"
                                    ),
                                    _react2.default.createElement(
                                        "div",
                                        { className: "panel-body" },
                                        this.state.player.birth
                                    )
                                ),
                                _react2.default.createElement(
                                    "div",
                                    { className: "panel panel-default" },
                                    _react2.default.createElement(
                                        "div",
                                        { className: "panel-heading" },
                                        "\uD0A4/\uBAB8\uBB34\uAC8C"
                                    ),
                                    _react2.default.createElement(
                                        "div",
                                        { className: "panel-body" },
                                        this.state.player.height,
                                        " / ",
                                        this.state.player.weight
                                    )
                                )
                            ),
                            _react2.default.createElement(
                                "table",
                                { className: "table", width: "100%", style: { "border": "solid #6c92a1", "font-size": "20px" } },
                                _react2.default.createElement(
                                    "thead",
                                    null,
                                    _react2.default.createElement(
                                        "tr",
                                        null,
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center" },
                                            "Appearances"
                                        ),
                                        pp,
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center" },
                                            "Wins"
                                        ),
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center" },
                                            "Losses"
                                        )
                                    )
                                ),
                                _react2.default.createElement(
                                    "tbody",
                                    null,
                                    _react2.default.createElement(
                                        "tr",
                                        null,
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.player.appearances
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.player.goals
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.player.wins
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.player.losses
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        }
    }]);

    return PlayerDetail;
}(_react.Component);

exports.default = PlayerDetail;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(2);

var _react2 = _interopRequireDefault(_react);

var _axios = __webpack_require__(3);

var _axios2 = _interopRequireDefault(_axios);

var _NavLink = __webpack_require__(25);

var _NavLink2 = _interopRequireDefault(_NavLink);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TeamDetail = function (_Component) {
    _inherits(TeamDetail, _Component);

    function TeamDetail(props) {
        _classCallCheck(this, TeamDetail);

        //변수 선언
        var _this2 = _possibleConstructorReturn(this, (TeamDetail.__proto__ || Object.getPrototypeOf(TeamDetail)).call(this, props));

        _this2.state = {
            list: {},
            tno: 1
        };

        return _this2;
    }

    _createClass(TeamDetail, [{
        key: "componentWillMount",
        value: function componentWillMount() {
            //서버에서 데이터 읽는 부분
            var _this = this;
            _axios2.default.get("/team_detail", {
                params: {
                    tno: this.props.match.params.tno
                }
            }).then(function (result) {
                // response.json(docs);
                //[{}]
                _this.setState({ list: result.data[0] });
            });
            console.log("componentWillMount");
            console.log("tno");
        }
    }, {
        key: "render",
        value: function render() {
            //화면에 출력 부분
            return _react2.default.createElement(
                "div",
                { className: "container" },
                _react2.default.createElement(
                    "div",
                    { className: "row" },
                    _react2.default.createElement(
                        "div",
                        { className: "team_detail", style: { "margin-top": "800px" } },
                        _react2.default.createElement(
                            "div",
                            { className: "col-sm-6" },
                            _react2.default.createElement(
                                "table",
                                { className: "table" },
                                _react2.default.createElement(
                                    "tbody",
                                    { style: { "font-size": "20px" } },
                                    _react2.default.createElement(
                                        "tr",
                                        null,
                                        _react2.default.createElement(
                                            "td",
                                            { className: "text-center", width: "30%", rowSpan: "5" },
                                            _react2.default.createElement("img", { src: this.state.list.emblem, width: "100%" })
                                        ),
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center", colSpan: "2", style: { "font-size": "50px" } },
                                            this.state.list.team_name
                                        )
                                    ),
                                    _react2.default.createElement(
                                        "tr",
                                        null,
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-right", width: "20%" },
                                            "\uC2A4\uD0C0\uB514\uC6C0"
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            { className: "text-left", width: "50%" },
                                            this.state.list.stadium
                                        )
                                    ),
                                    _react2.default.createElement(
                                        "tr",
                                        null,
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-right", width: "20%" },
                                            "\uACF5\uC2DD \uD648\uD398\uC774\uC9C0"
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            { className: "text-left", width: "50%" },
                                            _react2.default.createElement(
                                                "a",
                                                { href: this.state.list.homePageLink },
                                                this.state.list.homePageLink
                                            )
                                        )
                                    ),
                                    _react2.default.createElement(
                                        "tr",
                                        null,
                                        _react2.default.createElement(
                                            "td",
                                            { colSpan: "3", className: "text-right" },
                                            _react2.default.createElement(
                                                _NavLink2.default,
                                                { to: "/player/" + this.state.list.tno },
                                                _react2.default.createElement(
                                                    "td",
                                                    { style: { "color": "blue" } },
                                                    _react2.default.createElement(
                                                        "strong",
                                                        null,
                                                        "\uC120\uC218\uB2E8 \uC815\uBCF4"
                                                    )
                                                )
                                            )
                                        )
                                    ),
                                    _react2.default.createElement(
                                        "tr",
                                        null,
                                        _react2.default.createElement(
                                            "td",
                                            { colSpan: "3", className: "text-right" },
                                            _react2.default.createElement(
                                                _NavLink2.default,
                                                { to: "/", "class": "btn btn-sm btn-danger" },
                                                "\uBAA9\uB85D"
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        _react2.default.createElement(
                            "div",
                            { className: "col-sm-6" },
                            _react2.default.createElement(
                                "table",
                                { className: "table", width: "100%", style: { "border": "solid #6c92a1", "font-size": "20px" } },
                                _react2.default.createElement(
                                    "thead",
                                    null,
                                    _react2.default.createElement(
                                        "tr",
                                        null,
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center" },
                                            "Matches played"
                                        ),
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center" },
                                            "Wins"
                                        ),
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center" },
                                            "Losses"
                                        ),
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center" },
                                            "Goals"
                                        ),
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center" },
                                            "Goals conceded"
                                        ),
                                        _react2.default.createElement(
                                            "th",
                                            { className: "text-center" },
                                            "Clean sheets"
                                        )
                                    )
                                ),
                                _react2.default.createElement(
                                    "tbody",
                                    null,
                                    _react2.default.createElement(
                                        "tr",
                                        null,
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.list.matches_play
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.list.wins
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.list.losses
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.list.goals
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.list.goals_conceded
                                        ),
                                        _react2.default.createElement(
                                            "td",
                                            null,
                                            this.state.list.clean_sheets
                                        )
                                    )
                                )
                            ),
                            _react2.default.createElement("br", null),
                            _react2.default.createElement(
                                "div",
                                { className: "col-sm-6" },
                                _react2.default.createElement(
                                    "div",
                                    { className: "thumbnail" },
                                    _react2.default.createElement("img", { src: this.state.list.home_kit, width: "200", height: "150" }),
                                    _react2.default.createElement(
                                        "p",
                                        null,
                                        _react2.default.createElement(
                                            "strong",
                                            null,
                                            "Home Kit"
                                        )
                                    )
                                )
                            ),
                            _react2.default.createElement(
                                "div",
                                { className: "col-sm-6" },
                                _react2.default.createElement(
                                    "div",
                                    { className: "thumbnail" },
                                    _react2.default.createElement("img", { src: this.state.list.away_kit, width: "200", height: "150" }),
                                    _react2.default.createElement(
                                        "p",
                                        null,
                                        _react2.default.createElement(
                                            "strong",
                                            null,
                                            "Away Kit"
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        }
    }]);

    return TeamDetail;
}(_react.Component);

exports.default = TeamDetail;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _react = __webpack_require__(2);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(27);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _App = __webpack_require__(28);

var _App2 = _interopRequireDefault(_App);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import * as serviceWorker from './serviceWorker';

_reactDom2.default.render(_react2.default.createElement(_App2.default, null), document.getElementById('root'));

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
// serviceWorker.unregister();

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOTc0MzIwNWIzZmIyNzFkMWE0MmQiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly8vLi9+L3Rpbnktd2FybmluZy9kaXN0L3Rpbnktd2FybmluZy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL34vcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9+L3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL34vQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL34vaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvTmF2TGluay5qcyIsIndlYnBhY2s6Ly8vLi9+L3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmpzIiwid2VicGFjazovLy8uL34vQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL34vZ3VkL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvd2FybkFib3V0RGVwcmVjYXRlZEVTTUltcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyL34vaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci9+L3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL34vcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3NjaGVkdWxlci9janMvc2NoZWR1bGVyLXRyYWNpbmcuZGV2ZWxvcG1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci10cmFjaW5nLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL34vc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3NjaGVkdWxlci90cmFjaW5nLmpzIiwid2VicGFjazovLy8uL34vdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9Ib21lLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvUGxheWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvUGxheWVyRGV0YWlsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvVGVhbURldGFpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJlIiwiY2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhbGwiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImxlbmd0aCIsImNvbmNhdCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibmV4dFRpY2siLCJhcmdzIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJpIiwicHVzaCIsIkl0ZW0iLCJhcnJheSIsInByb3RvdHlwZSIsImFwcGx5IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm5vb3AiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJuYW1lIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJiaW5kIiwicmVxdWlyZSIsImlzQnVmZmVyIiwidG9TdHJpbmciLCJPYmplY3QiLCJpc0FycmF5IiwidmFsIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwicmVzdWx0IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc09iamVjdCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzRnVuY3Rpb24iLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInRyaW0iLCJzdHIiLCJyZXBsYWNlIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJsIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwiZGVlcE1lcmdlIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwiTk9ERV9FTlYiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsInNob3VsZFVzZU5hdGl2ZSIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwib3JkZXIyIiwibWFwIiwibiIsImpvaW4iLCJ0ZXN0MyIsInNwbGl0IiwibGV0dGVyIiwia2V5cyIsImVyciIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJ0byIsInN5bWJvbHMiLCJzIiwiQnJvd3NlclJvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGhpcyIsIl9sZW4iLCJfa2V5IiwiaGlzdG9yeSIsInByb3BzIiwiX3Byb3RvIiwicmVuZGVyIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiUm91dGVyIiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJiYXNlbmFtZSIsIlByb3BUeXBlcyIsInN0cmluZyIsIm5vZGUiLCJmb3JjZVJlZnJlc2giLCJib29sIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImZ1bmMiLCJrZXlMZW5ndGgiLCJudW1iZXIiLCJjb21wb25lbnREaWRNb3VudCIsIkhhc2hSb3V0ZXIiLCJoYXNoVHlwZSIsIm9uZU9mIiwiaXNNb2RpZmllZEV2ZW50IiwiZXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiTGluayIsImhhbmRsZUNsaWNrIiwib25DbGljayIsImV4IiwicHJldmVudERlZmF1bHQiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwibWV0aG9kIiwiX3RoaXMkcHJvcHMiLCJpbm5lclJlZiIsInJlc3QiLCJfX1JvdXRlckNvbnRleHQiLCJDb25zdW1lciIsImNvbnRleHQiLCJsb2NhdGlvbiIsImhyZWYiLCJjcmVhdGVIcmVmIiwicmVmIiwidG9UeXBlIiwib25lT2ZUeXBlIiwib2JqZWN0IiwiaW5uZXJSZWZUeXBlIiwic2hhcGUiLCJjdXJyZW50IiwiYW55IiwiaXNSZXF1aXJlZCIsImpvaW5DbGFzc25hbWVzIiwiY2xhc3NuYW1lcyIsImZpbHRlciIsIk5hdkxpbmsiLCJfcmVmIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJleGFjdCIsImlzQWN0aXZlUHJvcCIsImlzQWN0aXZlIiwibG9jYXRpb25Qcm9wIiwic3RyaWN0Iiwic3R5bGVQcm9wIiwic3R5bGUiLCJwYXRoIiwicGF0aG5hbWUiLCJlc2NhcGVkUGF0aCIsInBhdGhUb01hdGNoIiwibWF0Y2giLCJhcmlhQ3VycmVudFR5cGUiLCJpc1Byb2R1Y3Rpb24iLCJ3YXJuaW5nIiwiY29uZGl0aW9uIiwibWVzc2FnZSIsInRleHQiLCJjb25zb2xlIiwid2FybiIsIngiLCJfZXh0ZW5kcyIsInByaW50V2FybmluZyIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwibG9nZ2VkVHlwZUZhaWx1cmVzIiwiaGFzIiwiRnVuY3Rpb24iLCJlcnJvciIsImNoZWNrUHJvcFR5cGVzIiwidHlwZVNwZWNzIiwidmFsdWVzIiwiY29tcG9uZW50TmFtZSIsImdldFN0YWNrIiwidHlwZVNwZWNOYW1lIiwic3RhY2siLCJyZXNldFdhcm5pbmdDYWNoZSIsIlJlYWN0SXMiLCJ0aHJvd09uRGlyZWN0QWNjZXNzIiwiaXNFbGVtZW50IiwicHJlZml4IiwiaW52YXJpYW50IiwiZyIsImV2YWwiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJpbmRleE9mIiwidXRpbHMiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwieGhyQWRhcHRlciIsImNvbmZpZyIsIlByb21pc2UiLCJkaXNwYXRjaFhoclJlcXVlc3QiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJkYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsIm9wZW4iLCJ0b1VwcGVyQ2FzZSIsInVybCIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJoYW5kbGVMb2FkIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VEYXRhIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsImhhbmRsZUFib3J0Iiwib25lcnJvciIsImhhbmRsZUVycm9yIiwib250aW1lb3V0IiwiaGFuZGxlVGltZW91dCIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ4c3JmSGVhZGVyTmFtZSIsInNldFJlcXVlc3RIZWFkZXIiLCJ0b0xvd2VyQ2FzZSIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsIm9uQ2FuY2VsZWQiLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJDYW5jZWwiLCJfX0NBTkNFTF9fIiwiaXNDYW5jZWwiLCJ2YWx1ZSIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJtZXJnZUNvbmZpZyIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMiIsInByb3AiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImdldERlZmF1bHRBZGFwdGVyIiwiYWRhcHRlciIsImRlZmF1bHRzIiwidHJhbnNmb3JtUmVxdWVzdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwiZm9yRWFjaE1ldGhvZE5vRGF0YSIsImZvckVhY2hNZXRob2RXaXRoRGF0YSIsIndyYXAiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJzZXJpYWxpemUiLCJwYXJzZVZhbHVlIiwidiIsInRvSVNPU3RyaW5nIiwiaGFzaG1hcmtJbmRleCIsInNsaWNlIiwiYWRkTGVhZGluZ1NsYXNoIiwiY2hhckF0Iiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdWJzdHIiLCJoYXNCYXNlbmFtZSIsIlJlZ0V4cCIsInRlc3QiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwicGFyc2VQYXRoIiwic2VhcmNoIiwiaGFzaCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwic3RhdGUiLCJjdXJyZW50TG9jYXRpb24iLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImxvY2F0aW9uc0FyZUVxdWFsIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFjdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJsaXN0ZW5lciIsIml0ZW0iLCJub3RpZnlMaXN0ZW5lcnMiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwic3VwcG9ydHNIaXN0b3J5IiwidWEiLCJ1c2VyQWdlbnQiLCJzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlIiwic3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2giLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImdldEhpc3RvcnlTdGF0ZSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwiTWF0aCIsInJhbmRvbSIsInRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJpbml0aWFsTG9jYXRpb24iLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0Jsb2NrZWQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hDaGFuZ2VFdmVudCQxIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJwdXNoSGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJoYXNoQ2hhbmdlZCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtaW4iLCJtYXgiLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsImluZGV4IiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsInNwbGljZSIsImNhbkdvIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJBcHAiLCJIb21lIiwiVGVhbURldGFpbCIsIlBsYXllciIsIlBsYXllckRldGFpbCIsIkF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiaW5zdGFuY2UiLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImRlZmF1bHQiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwicHJvbWlzZUV4ZWN1dG9yIiwidG9rZW4iLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYyIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwidW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInB1c2hSZXNwb25zZUludGVyY2VwdG9ycyIsInNoaWZ0IiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImlkIiwiZm9yRWFjaEhhbmRsZXIiLCJoIiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJiYXNlVVJMIiwiY2xlYW5IZWFkZXJDb25maWciLCJvbkFkYXB0ZXJSZXNvbHV0aW9uIiwib25BZGFwdGVyUmVqZWN0aW9uIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJmbnMiLCJ0cmFuc2Zvcm0iLCJyZWxhdGl2ZVVSTCIsInN0YW5kYXJkQnJvd3NlckVudiIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsIm5vblN0YW5kYXJkQnJvd3NlckVudiIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwibm9ybWFsaXplZE5hbWUiLCJwcm9jZXNzSGVhZGVyIiwiaWdub3JlRHVwbGljYXRlT2YiLCJwYXJzZXIiLCJsaW5lIiwiYXJyIiwiZ2xvYmFsIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJGT1JXQVJEX1JFRl9TVEFUSUNTIiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsIkZvcndhcmRSZWYiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwib2JqZWN0SXMiLCJ5IiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlciIsImdldCIsInNldCIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJvbmx5Q2hpbGQiLCJjcmVhdGVSZWFjdENvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwiZW1pdHRlciIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwiZ2V0VmFsdWUiLCJvblVwZGF0ZSIsIm9ic2VydmVkQml0cyIsIl9wcm90bzIiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNyZWF0ZUNvbnRleHQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInNoaW0iLCJwcm9wTmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFycmF5T2YiLCJlbGVtZW50IiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsIiwiaXNWYWxpZEVsZW1lbnQiLCJJVEVSQVRPUl9TWU1CT0wiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkZBVVhfSVRFUkFUT1JfU1lNQk9MIiwiZ2V0SXRlcmF0b3JGbiIsIm1heWJlSXRlcmFibGUiLCJpdGVyYXRvckZuIiwiQU5PTllNT1VTIiwiY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIiLCJjcmVhdGVBbnlUeXBlQ2hlY2tlciIsImNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlciIsImNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlciIsImNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIiLCJjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyIiwiY3JlYXRlTm9kZUNoZWNrZXIiLCJjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyIiwiY3JlYXRlRW51bVR5cGVDaGVja2VyIiwiY3JlYXRlVW5pb25UeXBlQ2hlY2tlciIsImNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIiLCJjcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyIiwiaXMiLCJQcm9wVHlwZUVycm9yIiwiY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIiLCJ2YWxpZGF0ZSIsIm1hbnVhbFByb3BUeXBlQ2FsbENhY2hlIiwibWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQiLCJjaGVja1R5cGUiLCJjYWNoZUtleSIsImNoYWluZWRDaGVja1R5cGUiLCJleHBlY3RlZFR5cGUiLCJwcm9wVmFsdWUiLCJwcm9wVHlwZSIsImdldFByb3BUeXBlIiwicHJlY2lzZVR5cGUiLCJnZXRQcmVjaXNlVHlwZSIsInR5cGVDaGVja2VyIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiZXhwZWN0ZWRDbGFzcyIsImV4cGVjdGVkQ2xhc3NOYW1lIiwiYWN0dWFsQ2xhc3NOYW1lIiwiZ2V0Q2xhc3NOYW1lIiwiZXhwZWN0ZWRWYWx1ZXMiLCJ2YWx1ZXNTdHJpbmciLCJyZXBsYWNlciIsImFycmF5T2ZUeXBlQ2hlY2tlcnMiLCJjaGVja2VyIiwiZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nIiwiaXNOb2RlIiwic2hhcGVUeXBlcyIsImV2ZXJ5Iiwic3RlcCIsIm5leHQiLCJkb25lIiwiaXNTeW1ib2wiLCJfYXNzaWduIiwic2NoZWR1bGVyIiwidHJhY2luZyIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiZCIsImYiLCJhcmdJbmRleCIsImZyYW1lc1RvUG9wIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrSW1wbCIsImZ1bmNBcmdzIiwib25FcnJvciIsImRpc3BhdGNoRXZlbnQiLCJjcmVhdGVFdmVudCIsImZha2VOb2RlIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrRGV2IiwiZXZ0IiwiZGlkRXJyb3IiLCJ3aW5kb3dFdmVudCIsIndpbmRvd0V2ZW50RGVzY3JpcHRvciIsImNhbGxDYWxsYmFjayIsImV2dFR5cGUiLCJkaWRTZXRFcnJvciIsImlzQ3Jvc3NPcmlnaW5FcnJvciIsImhhbmRsZVdpbmRvd0Vycm9yIiwiY29sbm8iLCJsaW5lbm8iLCJfc3VwcHJlc3NMb2dnaW5nIiwiaW5uZXIiLCJpbml0RXZlbnQiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tJbXBsJDEiLCJoYXNFcnJvciIsImNhdWdodEVycm9yIiwiaGFzUmV0aHJvd0Vycm9yIiwicmV0aHJvd0Vycm9yIiwicmVwb3J0ZXIiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJjbGVhckNhdWdodEVycm9yIiwicmV0aHJvd0NhdWdodEVycm9yIiwiaGFzQ2F1Z2h0RXJyb3IiLCJldmVudFBsdWdpbk9yZGVyIiwibmFtZXNUb1BsdWdpbnMiLCJyZWNvbXB1dGVQbHVnaW5PcmRlcmluZyIsInBsdWdpbk5hbWUiLCJwbHVnaW5Nb2R1bGUiLCJwbHVnaW5JbmRleCIsInBsdWdpbnMiLCJleHRyYWN0RXZlbnRzIiwicHVibGlzaGVkRXZlbnRzIiwiZXZlbnRUeXBlcyIsImV2ZW50TmFtZSIsInB1Ymxpc2hFdmVudEZvclBsdWdpbiIsImRpc3BhdGNoQ29uZmlnIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJwaGFzZU5hbWUiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lIiwicHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUiLCJyZWdpc3RyYXRpb25OYW1lIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jaWVzIiwibG93ZXJDYXNlZE5hbWUiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwib25kYmxjbGljayIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJpbmplY3RlZE5hbWVzVG9QbHVnaW5zIiwiaXNPcmRlcmluZ0RpcnR5Iiwid2FybmluZ1dpdGhvdXRTdGFjayIsImFyZ3NXaXRoRm9ybWF0Iiwid2FybmluZ1dpdGhvdXRTdGFjayQxIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwic2V0Q29tcG9uZW50VHJlZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGVJbXBsIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZUltcGwiLCJnZXROb2RlRnJvbUluc3RhbmNlSW1wbCIsInZhbGlkYXRlRXZlbnREaXNwYXRjaGVzIiwiZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJkaXNwYXRjaEluc3RhbmNlcyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImxpc3RlbmVyc0lzQXJyIiwibGlzdGVuZXJzTGVuIiwiaW5zdGFuY2VzSXNBcnIiLCJpbnN0YW5jZXNMZW4iLCJleGVjdXRlRGlzcGF0Y2giLCJpbnN0IiwiY3VycmVudFRhcmdldCIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlciIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiYWNjdW11bGF0ZUludG8iLCJmb3JFYWNoQWNjdW11bGF0ZWQiLCJjYiIsInNjb3BlIiwiZXZlbnRRdWV1ZSIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCIsImlzSW50ZXJhY3RpdmUiLCJ0YWciLCJzaG91bGRQcmV2ZW50TW91c2VFdmVudCIsImRpc2FibGVkIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJzdGF0ZU5vZGUiLCJ0b3BMZXZlbFR5cGUiLCJ0YXJnZXRJbnN0IiwibmF0aXZlRXZlbnQiLCJuYXRpdmVFdmVudFRhcmdldCIsImV2ZW50cyIsInBvc3NpYmxlUGx1Z2luIiwiZXh0cmFjdGVkRXZlbnRzIiwicnVuRXZlbnRzSW5CYXRjaCIsInByb2Nlc3NpbmdFdmVudFF1ZXVlIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIkZ1bmN0aW9uQ29tcG9uZW50IiwiQ2xhc3NDb21wb25lbnQiLCJJbmRldGVybWluYXRlQ29tcG9uZW50IiwiSG9zdFJvb3QiLCJIb3N0UG9ydGFsIiwiSG9zdENvbXBvbmVudCIsIkhvc3RUZXh0IiwiRnJhZ21lbnQiLCJNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiUHJvZmlsZXIiLCJTdXNwZW5zZUNvbXBvbmVudCIsIk1lbW9Db21wb25lbnQiLCJTaW1wbGVNZW1vQ29tcG9uZW50IiwiTGF6eUNvbXBvbmVudCIsIkluY29tcGxldGVDbGFzc0NvbXBvbmVudCIsIkRlaHlkcmF0ZWRTdXNwZW5zZUNvbXBvbmVudCIsInJhbmRvbUtleSIsImludGVybmFsSW5zdGFuY2VLZXkiLCJpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXkiLCJwcmVjYWNoZUZpYmVyTm9kZSIsImhvc3RJbnN0IiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJwYXJlbnROb2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSQxIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSQxIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSQxIiwidXBkYXRlRmliZXJQcm9wcyIsImdldFBhcmVudCIsInJldHVybiIsImdldExvd2VzdENvbW1vbkFuY2VzdG9yIiwiaW5zdEEiLCJpbnN0QiIsImRlcHRoQSIsInRlbXBBIiwiZGVwdGhCIiwidGVtcEIiLCJkZXB0aCIsImFsdGVybmF0ZSIsInRyYXZlcnNlVHdvUGhhc2UiLCJhcmciLCJ0cmF2ZXJzZUVudGVyTGVhdmUiLCJhcmdGcm9tIiwiYXJnVG8iLCJwYXRoRnJvbSIsInBhdGhUbyIsIl9hbHRlcm5hdGUiLCJfaSIsImxpc3RlbmVyQXRQaGFzZSIsInByb3BhZ2F0aW9uUGhhc2UiLCJhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzIiwicGhhc2UiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlIiwiX3RhcmdldEluc3QiLCJhY2N1bXVsYXRlRGlzcGF0Y2hlcyIsImlnbm9yZWREaXJlY3Rpb24iLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJsZWF2ZSIsImVudGVyIiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLCJ1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUiLCJ1bnNhZmVDYXN0RE9NVG9wTGV2ZWxUeXBlVG9TdHJpbmciLCJtYWtlUHJlZml4TWFwIiwicHJlZml4ZXMiLCJ2ZW5kb3JQcmVmaXhlcyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsInByZWZpeGVkRXZlbnROYW1lcyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeE1hcCIsIlRPUF9BQk9SVCIsIlRPUF9BTklNQVRJT05fRU5EIiwiVE9QX0FOSU1BVElPTl9JVEVSQVRJT04iLCJUT1BfQU5JTUFUSU9OX1NUQVJUIiwiVE9QX0JMVVIiLCJUT1BfQ0FOX1BMQVkiLCJUT1BfQ0FOX1BMQVlfVEhST1VHSCIsIlRPUF9DQU5DRUwiLCJUT1BfQ0hBTkdFIiwiVE9QX0NMSUNLIiwiVE9QX0NMT1NFIiwiVE9QX0NPTVBPU0lUSU9OX0VORCIsIlRPUF9DT01QT1NJVElPTl9TVEFSVCIsIlRPUF9DT01QT1NJVElPTl9VUERBVEUiLCJUT1BfQ09OVEVYVF9NRU5VIiwiVE9QX0NPUFkiLCJUT1BfQ1VUIiwiVE9QX0RPVUJMRV9DTElDSyIsIlRPUF9BVVhfQ0xJQ0siLCJUT1BfRFJBRyIsIlRPUF9EUkFHX0VORCIsIlRPUF9EUkFHX0VOVEVSIiwiVE9QX0RSQUdfRVhJVCIsIlRPUF9EUkFHX0xFQVZFIiwiVE9QX0RSQUdfT1ZFUiIsIlRPUF9EUkFHX1NUQVJUIiwiVE9QX0RST1AiLCJUT1BfRFVSQVRJT05fQ0hBTkdFIiwiVE9QX0VNUFRJRUQiLCJUT1BfRU5DUllQVEVEIiwiVE9QX0VOREVEIiwiVE9QX0VSUk9SIiwiVE9QX0ZPQ1VTIiwiVE9QX0dPVF9QT0lOVEVSX0NBUFRVUkUiLCJUT1BfSU5QVVQiLCJUT1BfSU5WQUxJRCIsIlRPUF9LRVlfRE9XTiIsIlRPUF9LRVlfUFJFU1MiLCJUT1BfS0VZX1VQIiwiVE9QX0xPQUQiLCJUT1BfTE9BRF9TVEFSVCIsIlRPUF9MT0FERURfREFUQSIsIlRPUF9MT0FERURfTUVUQURBVEEiLCJUT1BfTE9TVF9QT0lOVEVSX0NBUFRVUkUiLCJUT1BfTU9VU0VfRE9XTiIsIlRPUF9NT1VTRV9NT1ZFIiwiVE9QX01PVVNFX09VVCIsIlRPUF9NT1VTRV9PVkVSIiwiVE9QX01PVVNFX1VQIiwiVE9QX1BBU1RFIiwiVE9QX1BBVVNFIiwiVE9QX1BMQVkiLCJUT1BfUExBWUlORyIsIlRPUF9QT0lOVEVSX0NBTkNFTCIsIlRPUF9QT0lOVEVSX0RPV04iLCJUT1BfUE9JTlRFUl9NT1ZFIiwiVE9QX1BPSU5URVJfT1VUIiwiVE9QX1BPSU5URVJfT1ZFUiIsIlRPUF9QT0lOVEVSX1VQIiwiVE9QX1BST0dSRVNTIiwiVE9QX1JBVEVfQ0hBTkdFIiwiVE9QX1JFU0VUIiwiVE9QX1NDUk9MTCIsIlRPUF9TRUVLRUQiLCJUT1BfU0VFS0lORyIsIlRPUF9TRUxFQ1RJT05fQ0hBTkdFIiwiVE9QX1NUQUxMRUQiLCJUT1BfU1VCTUlUIiwiVE9QX1NVU1BFTkQiLCJUT1BfVEVYVF9JTlBVVCIsIlRPUF9USU1FX1VQREFURSIsIlRPUF9UT0dHTEUiLCJUT1BfVE9VQ0hfQ0FOQ0VMIiwiVE9QX1RPVUNIX0VORCIsIlRPUF9UT1VDSF9NT1ZFIiwiVE9QX1RPVUNIX1NUQVJUIiwiVE9QX1RSQU5TSVRJT05fRU5EIiwiVE9QX1ZPTFVNRV9DSEFOR0UiLCJUT1BfV0FJVElORyIsIlRPUF9XSEVFTCIsIm1lZGlhRXZlbnRUeXBlcyIsImdldFJhd0V2ZW50TmFtZSIsInJvb3QiLCJzdGFydFRleHQiLCJmYWxsYmFja1RleHQiLCJpbml0aWFsaXplIiwiZ2V0VGV4dCIsInJlc2V0IiwiZ2V0RGF0YSIsInN0YXJ0Iiwic3RhcnRWYWx1ZSIsInN0YXJ0TGVuZ3RoIiwiZW5kIiwiZW5kVmFsdWUiLCJlbmRMZW5ndGgiLCJtaW5FbmQiLCJzbGljZVRhaWwiLCJ0ZXh0Q29udGVudCIsIkVWRU5UX1BPT0xfU0laRSIsIkV2ZW50SW50ZXJmYWNlIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUiLCJmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UiLCJTeW50aGV0aWNFdmVudCIsInN0b3BQcm9wYWdhdGlvbiIsImlzRGVmYXVsdFByZXZlbnRlZCIsIkludGVyZmFjZSIsIm5vcm1hbGl6ZSIsInJldHVyblZhbHVlIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImRlc3RydWN0b3IiLCJnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uIiwiU3VwZXIiLCJFIiwiQ2xhc3MiLCJhZGRFdmVudFBvb2xpbmdUbyIsImdldFZhbCIsImNvbmZpZ3VyYWJsZSIsIndhcm5pbmdDb25kaXRpb24iLCJnZXRQb29sZWRFdmVudCIsIm5hdGl2ZUluc3QiLCJFdmVudENvbnN0cnVjdG9yIiwiZXZlbnRQb29sIiwicG9wIiwicmVsZWFzZVBvb2xlZEV2ZW50IiwiZ2V0UG9vbGVkIiwiU3ludGhldGljQ29tcG9zaXRpb25FdmVudCIsIlN5bnRoZXRpY0lucHV0RXZlbnQiLCJFTkRfS0VZQ09ERVMiLCJTVEFSVF9LRVlDT0RFIiwiY2FuVXNlQ29tcG9zaXRpb25FdmVudCIsImRvY3VtZW50TW9kZSIsImNhblVzZVRleHRJbnB1dEV2ZW50IiwidXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEiLCJTUEFDRUJBUl9DT0RFIiwiU1BBQ0VCQVJfQ0hBUiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJoYXNTcGFjZUtleXByZXNzIiwiaXNLZXlwcmVzc0NvbW1hbmQiLCJnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSIsImlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0Iiwia2V5Q29kZSIsImlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCIsImdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJpc1VzaW5nS29yZWFuSU1FIiwibG9jYWxlIiwiaXNDb21wb3NpbmciLCJleHRyYWN0Q29tcG9zaXRpb25FdmVudCIsImV2ZW50VHlwZSIsImZhbGxiYWNrRGF0YSIsImN1c3RvbURhdGEiLCJnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzIiwid2hpY2giLCJjaGFycyIsImdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyIsImNoYXIiLCJleHRyYWN0QmVmb3JlSW5wdXRFdmVudCIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJjb21wb3NpdGlvbiIsInJlc3RvcmVJbXBsIiwicmVzdG9yZVRhcmdldCIsInJlc3RvcmVRdWV1ZSIsInJlc3RvcmVTdGF0ZU9mVGFyZ2V0IiwiaW50ZXJuYWxJbnN0YW5jZSIsInNldFJlc3RvcmVJbXBsZW1lbnRhdGlvbiIsImltcGwiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsInF1ZXVlZFRhcmdldHMiLCJfYmF0Y2hlZFVwZGF0ZXNJbXBsIiwiYm9va2tlZXBpbmciLCJfaW50ZXJhY3RpdmVVcGRhdGVzSW1wbCIsIl9mbHVzaEludGVyYWN0aXZlVXBkYXRlc0ltcGwiLCJpc0JhdGNoaW5nIiwiYmF0Y2hlZFVwZGF0ZXMiLCJjb250cm9sbGVkQ29tcG9uZW50c0hhdmVQZW5kaW5nVXBkYXRlcyIsImludGVyYWN0aXZlVXBkYXRlcyIsInNldEJhdGNoaW5nSW1wbGVtZW50YXRpb24iLCJiYXRjaGVkVXBkYXRlc0ltcGwiLCJpbnRlcmFjdGl2ZVVwZGF0ZXNJbXBsIiwiZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXNJbXBsIiwic3VwcG9ydGVkSW5wdXRUeXBlcyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInJhbmdlIiwidGVsIiwidGltZSIsIndlZWsiLCJpc1RleHRJbnB1dEVsZW1lbnQiLCJlbGVtIiwibm9kZU5hbWUiLCJFTEVNRU5UX05PREUiLCJURVhUX05PREUiLCJDT01NRU5UX05PREUiLCJET0NVTUVOVF9OT0RFIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsImdldEV2ZW50VGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwibm9kZVR5cGUiLCJpc0V2ZW50U3VwcG9ydGVkIiwiZXZlbnROYW1lU3VmZml4IiwiaXNTdXBwb3J0ZWQiLCJpc0NoZWNrYWJsZSIsImdldFRyYWNrZXIiLCJfdmFsdWVUcmFja2VyIiwiZGV0YWNoVHJhY2tlciIsImdldFZhbHVlRnJvbU5vZGUiLCJjaGVja2VkIiwidHJhY2tWYWx1ZU9uTm9kZSIsInZhbHVlRmllbGQiLCJjdXJyZW50VmFsdWUiLCJlbnVtZXJhYmxlIiwidHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwidHJhY2siLCJ1cGRhdGVWYWx1ZUlmQ2hhbmdlZCIsImxhc3RWYWx1ZSIsIm5leHRWYWx1ZSIsIlJlYWN0U2hhcmVkSW50ZXJuYWxzIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiQkVGT1JFX1NMQVNIX1JFIiwiZGVzY3JpYmVDb21wb25lbnRGcmFtZSIsIm93bmVyTmFtZSIsInNvdXJjZUluZm8iLCJwYXRoQmVmb3JlU2xhc2giLCJmb2xkZXJOYW1lIiwiaGFzU3ltYm9sIiwiZm9yIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfUE9SVEFMX1RZUEUiLCJSRUFDVF9GUkFHTUVOVF9UWVBFIiwiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsIlJFQUNUX1BST0ZJTEVSX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfQ09OVEVYVF9UWVBFIiwiUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUiLCJSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsIlJFQUNUX01FTU9fVFlQRSIsIlJFQUNUX0xBWllfVFlQRSIsIk1BWUJFX0lURVJBVE9SX1NZTUJPTCIsIm1heWJlSXRlcmF0b3IiLCJQZW5kaW5nIiwiUmVzb2x2ZWQiLCJSZWplY3RlZCIsInJlZmluZVJlc29sdmVkTGF6eUNvbXBvbmVudCIsImxhenlDb21wb25lbnQiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImdldFdyYXBwZWROYW1lIiwib3V0ZXJUeXBlIiwiaW5uZXJUeXBlIiwid3JhcHBlck5hbWUiLCJmdW5jdGlvbk5hbWUiLCJnZXRDb21wb25lbnROYW1lIiwiJCR0eXBlb2YiLCJ0aGVuYWJsZSIsInJlc29sdmVkVGhlbmFibGUiLCJSZWFjdERlYnVnQ3VycmVudEZyYW1lIiwiZGVzY3JpYmVGaWJlciIsImZpYmVyIiwib3duZXIiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZCIsIndvcmtJblByb2dyZXNzIiwiaW5mbyIsImdldEN1cnJlbnRGaWJlck93bmVyTmFtZUluRGV2T3JOdWxsIiwiZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldiIsInJlc2V0Q3VycmVudEZpYmVyIiwiZ2V0Q3VycmVudFN0YWNrIiwic2V0Q3VycmVudEZpYmVyIiwic2V0Q3VycmVudFBoYXNlIiwibGlmZUN5Y2xlUGhhc2UiLCJnZXRTdGFja0FkZGVuZHVtIiwid2FybmluZyQxIiwiUkVTRVJWRUQiLCJTVFJJTkciLCJCT09MRUFOSVNIX1NUUklORyIsIkJPT0xFQU4iLCJPVkVSTE9BREVEX0JPT0xFQU4iLCJOVU1FUklDIiwiUE9TSVRJVkVfTlVNRVJJQyIsIkFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIiLCJBVFRSSUJVVEVfTkFNRV9DSEFSIiwiUk9PVF9BVFRSSUJVVEVfTkFNRSIsIlZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYIiwiaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSIsInZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSIsImlzQXR0cmlidXRlTmFtZVNhZmUiLCJhdHRyaWJ1dGVOYW1lIiwic2hvdWxkSWdub3JlQXR0cmlidXRlIiwicHJvcGVydHlJbmZvIiwiaXNDdXN0b21Db21wb25lbnRUYWciLCJzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyIsImFjY2VwdHNCb29sZWFucyIsInNob3VsZFJlbW92ZUF0dHJpYnV0ZSIsImlzTmFOIiwiZ2V0UHJvcGVydHlJbmZvIiwicHJvcGVydGllcyIsIlByb3BlcnR5SW5mb1JlY29yZCIsIm11c3RVc2VQcm9wZXJ0eSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsInByb3BlcnR5TmFtZSIsIkNBTUVMSVpFIiwiY2FwaXRhbGl6ZSIsImdldFZhbHVlRm9yUHJvcGVydHkiLCJleHBlY3RlZCIsInN0cmluZ1ZhbHVlIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwiZ2V0VmFsdWVGb3JBdHRyaWJ1dGUiLCJzZXRWYWx1ZUZvclByb3BlcnR5IiwiX2F0dHJpYnV0ZU5hbWUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfdHlwZSIsImF0dHJpYnV0ZVZhbHVlIiwic2V0QXR0cmlidXRlTlMiLCJnZXRUb1N0cmluZ1ZhbHVlIiwiUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxIiwiUmVhY3RDb250cm9sbGVkVmFsdWVQcm9wVHlwZXMiLCJoYXNSZWFkT25seVZhbHVlIiwiY2hlY2tib3giLCJpbWFnZSIsImhpZGRlbiIsInJhZGlvIiwic3VibWl0Iiwib25DaGFuZ2UiLCJyZWFkT25seSIsInRhZ05hbWUiLCJlbmFibGVVc2VyVGltaW5nQVBJIiwiZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzIiwiZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSIsInJlcGxheUZhaWxlZFVuaXRPZldvcmtXaXRoSW52b2tlR3VhcmRlZENhbGxiYWNrIiwid2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMiLCJlbmFibGVQcm9maWxlclRpbWVyIiwiZW5hYmxlU2NoZWR1bGVyVHJhY2luZyIsImVuYWJsZVN1c3BlbnNlU2VydmVyUmVuZGVyZXIiLCJkaXNhYmxlSW5wdXRBdHRyaWJ1dGVTeW5jaW5nIiwiZW5hYmxlU3RhYmxlQ29uY3VycmVudE1vZGVBUElzIiwid2FybkFib3V0U2hvcnRoYW5kUHJvcGVydHlDb2xsaXNpb24iLCJkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUiLCJkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkIiwiZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCIsImRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQiLCJpc0NvbnRyb2xsZWQiLCJ1c2VzQ2hlY2tlZCIsImdldEhvc3RQcm9wcyIsImhvc3RQcm9wcyIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiaW5pdFdyYXBwZXJTdGF0ZSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJ1cGRhdGVDaGVja2VkIiwidXBkYXRlV3JhcHBlciIsIl9jb250cm9sbGVkIiwic2V0RGVmYXVsdFZhbHVlIiwicG9zdE1vdW50V3JhcHBlciIsImlzSHlkcmF0aW5nIiwiaXNCdXR0b24iLCJfaW5pdGlhbFZhbHVlIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSIsInVwZGF0ZU5hbWVkQ291c2lucyIsInJvb3ROb2RlIiwicXVlcnlSb290IiwiZ3JvdXAiLCJxdWVyeVNlbGVjdG9yQWxsIiwib3RoZXJOb2RlIiwiZm9ybSIsIm90aGVyUHJvcHMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImV2ZW50VHlwZXMkMSIsImNoYW5nZSIsImNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudCIsImFjdGl2ZUVsZW1lbnRJbnN0Iiwic2hvdWxkVXNlQ2hhbmdlRXZlbnQiLCJtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50IiwicnVuRXZlbnRJbkJhdGNoIiwiZ2V0SW5zdElmVmFsdWVDaGFuZ2VkIiwidGFyZ2V0Tm9kZSIsImdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudCIsImlzSW5wdXRFdmVudFN1cHBvcnRlZCIsInN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsImF0dGFjaEV2ZW50IiwiaGFuZGxlUHJvcGVydHlDaGFuZ2UiLCJzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsImRldGFjaEV2ZW50IiwiaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsIiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbCIsInNob3VsZFVzZUNsaWNrRXZlbnQiLCJnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCIsImdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQiLCJoYW5kbGVDb250cm9sbGVkSW5wdXRCbHVyIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiZ2V0VGFyZ2V0SW5zdEZ1bmMiLCJoYW5kbGVFdmVudEZ1bmMiLCJET01FdmVudFBsdWdpbk9yZGVyIiwiU3ludGhldGljVUlFdmVudCIsInZpZXciLCJtb2RpZmllcktleVRvUHJvcCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJtb2RpZmllclN0YXRlR2V0dGVyIiwia2V5QXJnIiwic3ludGhldGljRXZlbnQiLCJnZXRNb2RpZmllclN0YXRlIiwia2V5UHJvcCIsImdldEV2ZW50TW9kaWZpZXJTdGF0ZSIsInByZXZpb3VzU2NyZWVuWCIsInByZXZpb3VzU2NyZWVuWSIsImlzTW92ZW1lbnRYU2V0IiwiaXNNb3ZlbWVudFlTZXQiLCJTeW50aGV0aWNNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiU3ludGhldGljUG9pbnRlckV2ZW50IiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZXZlbnRUeXBlcyQyIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJpc092ZXJFdmVudCIsImlzT3V0RXZlbnQiLCJ3aW4iLCJkb2MiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsInJlbGF0ZWQiLCJldmVudEludGVyZmFjZSIsImxlYXZlRXZlbnRUeXBlIiwiZW50ZXJFdmVudFR5cGUiLCJldmVudFR5cGVQcmVmaXgiLCJmcm9tTm9kZSIsInRvTm9kZSIsImhhc093blByb3BlcnR5JDEiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiTm9FZmZlY3QiLCJQZXJmb3JtZWRXb3JrIiwiUGxhY2VtZW50IiwiVXBkYXRlIiwiUGxhY2VtZW50QW5kVXBkYXRlIiwiRGVsZXRpb24iLCJDb250ZW50UmVzZXQiLCJDYWxsYmFjayIsIkRpZENhcHR1cmUiLCJSZWYiLCJTbmFwc2hvdCIsIlBhc3NpdmUiLCJMaWZlY3ljbGVFZmZlY3RNYXNrIiwiSG9zdEVmZmVjdE1hc2siLCJJbmNvbXBsZXRlIiwiU2hvdWxkQ2FwdHVyZSIsIlJlYWN0Q3VycmVudE93bmVyJDEiLCJSZWFjdEN1cnJlbnRPd25lciIsIk1PVU5USU5HIiwiTU9VTlRFRCIsIlVOTU9VTlRFRCIsImlzRmliZXJNb3VudGVkSW1wbCIsImVmZmVjdFRhZyIsImlzRmliZXJNb3VudGVkIiwiaXNNb3VudGVkIiwib3duZXJGaWJlciIsIl93YXJuZWRBYm91dFJlZnNJblJlbmRlciIsImFzc2VydElzTW91bnRlZCIsImZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoIiwicGFyZW50QSIsInBhcmVudEIiLCJjaGlsZCIsInNpYmxpbmciLCJkaWRGaW5kQ2hpbGQiLCJfY2hpbGQiLCJmaW5kQ3VycmVudEhvc3RGaWJlciIsInBhcmVudCIsImN1cnJlbnRQYXJlbnQiLCJmaW5kQ3VycmVudEhvc3RGaWJlcldpdGhOb1BvcnRhbHMiLCJhZGRFdmVudEJ1YmJsZUxpc3RlbmVyIiwiYWRkRXZlbnRDYXB0dXJlTGlzdGVuZXIiLCJTeW50aGV0aWNBbmltYXRpb25FdmVudCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJTeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsImNsaXBib2FyZERhdGEiLCJTeW50aGV0aWNGb2N1c0V2ZW50IiwiZ2V0RXZlbnRDaGFyQ29kZSIsImNoYXJDb2RlIiwibm9ybWFsaXplS2V5IiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInRyYW5zbGF0ZVRvS2V5IiwiZ2V0RXZlbnRLZXkiLCJTeW50aGV0aWNLZXlib2FyZEV2ZW50IiwicmVwZWF0IiwiU3ludGhldGljRHJhZ0V2ZW50IiwiZGF0YVRyYW5zZmVyIiwiU3ludGhldGljVG91Y2hFdmVudCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJpbnRlcmFjdGl2ZUV2ZW50VHlwZU5hbWVzIiwibm9uSW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lcyIsImV2ZW50VHlwZXMkNCIsInRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyIsImFkZEV2ZW50VHlwZU5hbWVUb0NvbmZpZyIsInRvcEV2ZW50IiwiY2FwaXRhbGl6ZWRFdmVudCIsIm9uRXZlbnQiLCJldmVudFR1cGxlIiwia25vd25IVE1MVG9wTGV2ZWxUeXBlcyIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiQ0FMTEJBQ0tfQk9PS0tFRVBJTkdfUE9PTF9TSVpFIiwiY2FsbGJhY2tCb29ra2VlcGluZ1Bvb2wiLCJmaW5kUm9vdENvbnRhaW5lck5vZGUiLCJjb250YWluZXJJbmZvIiwiZ2V0VG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nIiwiYW5jZXN0b3JzIiwicmVsZWFzZVRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyIsImhhbmRsZVRvcExldmVsIiwiYm9va0tlZXBpbmciLCJhbmNlc3RvciIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwiZGlzcGF0Y2giLCJkaXNwYXRjaEludGVyYWN0aXZlRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImFscmVhZHlMaXN0ZW5pbmdUbyIsInJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciIsInRvcExpc3RlbmVyc0lES2V5IiwiZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQiLCJtb3VudEF0IiwibGlzdGVuVG8iLCJpc0xpc3RlbmluZyIsImRlcGVuZGVuY3kiLCJpc01lZGlhRXZlbnQiLCJpc0xpc3RlbmluZ1RvQWxsRGVwZW5kZW5jaWVzIiwiZ2V0QWN0aXZlRWxlbWVudCIsImJvZHkiLCJnZXRMZWFmTm9kZSIsImZpcnN0Q2hpbGQiLCJnZXRTaWJsaW5nTm9kZSIsIm5leHRTaWJsaW5nIiwiZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCIsIm9mZnNldCIsIm5vZGVTdGFydCIsIm5vZGVFbmQiLCJnZXRPZmZzZXRzIiwib3V0ZXJOb2RlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImdldE1vZGVybk9mZnNldHNGcm9tUG9pbnRzIiwiaW5kZXhXaXRoaW5BbmNob3IiLCJpbmRleFdpdGhpbkZvY3VzIiwib3V0ZXIiLCJub2RlVmFsdWUiLCJzZXRPZmZzZXRzIiwib2Zmc2V0cyIsInRlbXAiLCJzdGFydE1hcmtlciIsImVuZE1hcmtlciIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiaXNJbkRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiaXNTYW1lT3JpZ2luRnJhbWUiLCJpZnJhbWUiLCJjb250ZW50V2luZG93IiwiZ2V0QWN0aXZlRWxlbWVudERlZXAiLCJIVE1MSUZyYW1lRWxlbWVudCIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImNvbnRlbnRFZGl0YWJsZSIsImdldFNlbGVjdGlvbkluZm9ybWF0aW9uIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImdldFNlbGVjdGlvbiQxIiwicmVzdG9yZVNlbGVjdGlvbiIsInByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24iLCJjdXJGb2N1c2VkRWxlbSIsInByaW9yRm9jdXNlZEVsZW0iLCJwcmlvclNlbGVjdGlvblJhbmdlIiwic2V0U2VsZWN0aW9uIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsImlucHV0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQiLCJldmVudFR5cGVzJDMiLCJzZWxlY3QiLCJhY3RpdmVFbGVtZW50JDEiLCJhY3RpdmVFbGVtZW50SW5zdCQxIiwibGFzdFNlbGVjdGlvbiIsIm1vdXNlRG93biIsImdldEV2ZW50VGFyZ2V0RG9jdW1lbnQiLCJldmVudFRhcmdldCIsImNvbnN0cnVjdFNlbGVjdEV2ZW50IiwiY3VycmVudFNlbGVjdGlvbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiZGlkV2FyblNlbGVjdGVkU2V0T25PcHRpb24iLCJkaWRXYXJuSW52YWxpZENoaWxkIiwiZmxhdHRlbkNoaWxkcmVuIiwiY29udGVudCIsIkNoaWxkcmVuIiwidmFsaWRhdGVQcm9wcyIsInNlbGVjdGVkIiwicG9zdE1vdW50V3JhcHBlciQxIiwiZ2V0SG9zdFByb3BzJDEiLCJkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUkMSIsImdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSIsInZhbHVlUHJvcE5hbWVzIiwiY2hlY2tTZWxlY3RQcm9wVHlwZXMiLCJtdWx0aXBsZSIsInVwZGF0ZU9wdGlvbnMiLCJzZXREZWZhdWx0U2VsZWN0ZWQiLCJvcHRpb25zIiwic2VsZWN0ZWRWYWx1ZXMiLCJzZWxlY3RlZFZhbHVlIiwiZGVmYXVsdFNlbGVjdGVkIiwiX3NlbGVjdGVkVmFsdWUiLCJfaTIiLCJnZXRIb3N0UHJvcHMkMiIsImluaXRXcmFwcGVyU3RhdGUkMSIsIndhc011bHRpcGxlIiwicG9zdE1vdW50V3JhcHBlciQyIiwicG9zdFVwZGF0ZVdyYXBwZXIiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlJDIiLCJkaWRXYXJuVmFsRGVmYXVsdFZhbCIsImdldEhvc3RQcm9wcyQzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJpbml0V3JhcHBlclN0YXRlJDIiLCJ1cGRhdGVXcmFwcGVyJDEiLCJwb3N0TW91bnRXcmFwcGVyJDMiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlJDMiLCJIVE1MX05BTUVTUEFDRSQxIiwiTUFUSF9OQU1FU1BBQ0UiLCJTVkdfTkFNRVNQQUNFIiwiTmFtZXNwYWNlcyIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJnZXRJbnRyaW5zaWNOYW1lc3BhY2UiLCJnZXRDaGlsZE5hbWVzcGFjZSIsInBhcmVudE5hbWVzcGFjZSIsImNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24iLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiYXJnMCIsImFyZzEiLCJhcmcyIiwiYXJnMyIsInJldXNhYmxlU1ZHQ29udGFpbmVyIiwic2V0SW5uZXJIVE1MIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwic3ZnTm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJzZXRUZXh0Q29udGVudCIsImxhc3RDaGlsZCIsInNob3J0aGFuZFRvTG9uZ2hhbmQiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiYm9yZGVyIiwiYm9yZGVyQmxvY2tFbmQiLCJib3JkZXJCbG9ja1N0YXJ0IiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJJbWFnZSIsImJvcmRlcklubGluZUVuZCIsImJvcmRlcklubGluZVN0YXJ0IiwiYm9yZGVyTGVmdCIsImJvcmRlclJhZGl1cyIsImJvcmRlclJpZ2h0IiwiYm9yZGVyU3R5bGUiLCJib3JkZXJUb3AiLCJib3JkZXJXaWR0aCIsImNvbHVtblJ1bGUiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhGbG93IiwiZm9udCIsImZvbnRWYXJpYW50IiwiZ2FwIiwiZ3JpZCIsImdyaWRBcmVhIiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5HYXAiLCJncmlkR2FwIiwiZ3JpZFJvdyIsImdyaWRSb3dHYXAiLCJncmlkVGVtcGxhdGUiLCJsaXN0U3R5bGUiLCJtYXJnaW4iLCJtYXNrIiwibWFza1Bvc2l0aW9uIiwib3V0bGluZSIsIm92ZXJmbG93IiwicGFkZGluZyIsInBsYWNlQ29udGVudCIsInBsYWNlSXRlbXMiLCJwbGFjZVNlbGYiLCJ0ZXh0RGVjb3JhdGlvbiIsInRleHRFbXBoYXNpcyIsIndvcmRXcmFwIiwiaXNVbml0bGVzc051bWJlciIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicHJlZml4S2V5IiwiZGFuZ2Vyb3VzU3R5bGVWYWx1ZSIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc0VtcHR5IiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsIndhcm5WYWxpZFN0eWxlIiwiYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuIiwibXNQYXR0ZXJuJDEiLCJoeXBoZW5QYXR0ZXJuIiwiYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuIiwid2FybmVkU3R5bGVOYW1lcyIsIndhcm5lZFN0eWxlVmFsdWVzIiwid2FybmVkRm9yTmFOVmFsdWUiLCJ3YXJuZWRGb3JJbmZpbml0eVZhbHVlIiwiY2FtZWxpemUiLCJfIiwiY2hhcmFjdGVyIiwid2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUiLCJ3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUiLCJ3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24iLCJ3YXJuU3R5bGVWYWx1ZUlzTmFOIiwid2FyblN0eWxlVmFsdWVJc0luZmluaXR5IiwiaXNGaW5pdGUiLCJ3YXJuVmFsaWRTdHlsZSQxIiwiY3JlYXRlRGFuZ2Vyb3VzU3RyaW5nRm9yU3R5bGVzIiwic3R5bGVzIiwic2VyaWFsaXplZCIsImRlbGltaXRlciIsInN0eWxlTmFtZSIsInN0eWxlVmFsdWUiLCJzZXRWYWx1ZUZvclN0eWxlcyIsInNldFByb3BlcnR5IiwiaXNWYWx1ZUVtcHR5IiwiZXhwYW5kU2hvcnRoYW5kTWFwIiwiZXhwYW5kZWQiLCJsb25naGFuZHMiLCJ2YWxpZGF0ZVNob3J0aGFuZFByb3BlcnR5Q29sbGlzaW9uSW5EZXYiLCJzdHlsZVVwZGF0ZXMiLCJuZXh0U3R5bGVzIiwiZXhwYW5kZWRVcGRhdGVzIiwiZXhwYW5kZWRTdHlsZXMiLCJ3YXJuZWRBYm91dCIsIm9yaWdpbmFsS2V5IiwiY29ycmVjdE9yaWdpbmFsS2V5Iiwid2FybmluZ0tleSIsIm9taXR0ZWRDbG9zZVRhZ3MiLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ3YnIiLCJ2b2lkRWxlbWVudFRhZ3MiLCJtZW51aXRlbSIsIkhUTUwkMSIsIlJlYWN0RGVidWdDdXJyZW50RnJhbWUkMiIsImFzc2VydFZhbGlkUHJvcHMiLCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmciLCJpc0N1c3RvbUNvbXBvbmVudCIsInBvc3NpYmxlU3RhbmRhcmROYW1lcyIsImFjY2VwdCIsImFjY2VwdGNoYXJzZXQiLCJhY2Nlc3NrZXkiLCJhbGxvd2Z1bGxzY3JlZW4iLCJhbHQiLCJhcyIsImFzeW5jIiwiYXV0b2NhcGl0YWxpemUiLCJhdXRvY29tcGxldGUiLCJhdXRvY29ycmVjdCIsImF1dG9mb2N1cyIsImF1dG9wbGF5IiwiYXV0b3NhdmUiLCJjYXB0dXJlIiwiY2VsbHBhZGRpbmciLCJjZWxsc3BhY2luZyIsImNoYWxsZW5nZSIsImNoYXJzZXQiLCJjaXRlIiwiY2xhc3MiLCJjbGFzc2lkIiwiY2xhc3NuYW1lIiwiY29scyIsImNvbHNwYW4iLCJjb250ZW50ZWRpdGFibGUiLCJjb250ZXh0bWVudSIsImNvbnRyb2xzIiwiY29udHJvbHNsaXN0IiwiY29vcmRzIiwiY3Jvc3NvcmlnaW4iLCJkYW5nZXJvdXNseXNldGlubmVyaHRtbCIsImRlZmF1bHRjaGVja2VkIiwiZGVmYXVsdHZhbHVlIiwiZGVmZXIiLCJkb3dubG9hZCIsImRyYWdnYWJsZSIsImVuY3R5cGUiLCJmb3JtbWV0aG9kIiwiZm9ybWFjdGlvbiIsImZvcm1lbmN0eXBlIiwiZm9ybW5vdmFsaWRhdGUiLCJmb3JtdGFyZ2V0IiwiZnJhbWVib3JkZXIiLCJoaWdoIiwiaHJlZmxhbmciLCJodG1sZm9yIiwiaHR0cGVxdWl2IiwiaWNvbiIsImlubmVyaHRtbCIsImlucHV0bW9kZSIsImludGVncml0eSIsIml0ZW1pZCIsIml0ZW1wcm9wIiwiaXRlbXJlZiIsIml0ZW1zY29wZSIsIml0ZW10eXBlIiwia2V5cGFyYW1zIiwia2V5dHlwZSIsImtpbmQiLCJsYWJlbCIsImxhbmciLCJsaXN0IiwibG9vcCIsImxvdyIsIm1hbmlmZXN0IiwibWFyZ2lud2lkdGgiLCJtYXJnaW5oZWlnaHQiLCJtYXhsZW5ndGgiLCJtZWRpYSIsIm1lZGlhZ3JvdXAiLCJtaW5sZW5ndGgiLCJtdXRlZCIsIm5vbW9kdWxlIiwibm9uY2UiLCJub3ZhbGlkYXRlIiwib3B0aW11bSIsInBhdHRlcm4iLCJwbGFjZWhvbGRlciIsInBsYXlzaW5saW5lIiwicG9zdGVyIiwicHJlbG9hZCIsInByb2ZpbGUiLCJyYWRpb2dyb3VwIiwicmVhZG9ubHkiLCJyZWZlcnJlcnBvbGljeSIsInJlbCIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJyb2xlIiwicm93cyIsInJvd3NwYW4iLCJzYW5kYm94Iiwic2NvcGVkIiwic2Nyb2xsaW5nIiwic2VhbWxlc3MiLCJzaXplIiwic2l6ZXMiLCJzcGFuIiwic3BlbGxjaGVjayIsInNyYyIsInNyY2RvYyIsInNyY2xhbmciLCJzcmNzZXQiLCJzdW1tYXJ5IiwidGFiaW5kZXgiLCJ1c2VtYXAiLCJ3bW9kZSIsImFib3V0IiwiYWNjZW50aGVpZ2h0IiwiYWNjdW11bGF0ZSIsImFkZGl0aXZlIiwiYWxpZ25tZW50YmFzZWxpbmUiLCJhbGxvd3Jlb3JkZXIiLCJhbHBoYWJldGljIiwiYW1wbGl0dWRlIiwiYXJhYmljZm9ybSIsImFzY2VudCIsImF0dHJpYnV0ZW5hbWUiLCJhdHRyaWJ1dGV0eXBlIiwiYXV0b3JldmVyc2UiLCJhemltdXRoIiwiYmFzZWZyZXF1ZW5jeSIsImJhc2VsaW5lc2hpZnQiLCJiYXNlcHJvZmlsZSIsImJib3giLCJiZWdpbiIsImJpYXMiLCJieSIsImNhbGNtb2RlIiwiY2FwaGVpZ2h0IiwiY2xpcCIsImNsaXBwYXRoIiwiY2xpcHBhdGh1bml0cyIsImNsaXBydWxlIiwiY29sb3JpbnRlcnBvbGF0aW9uIiwiY29sb3JpbnRlcnBvbGF0aW9uZmlsdGVycyIsImNvbG9ycHJvZmlsZSIsImNvbG9ycmVuZGVyaW5nIiwiY29udGVudHNjcmlwdHR5cGUiLCJjb250ZW50c3R5bGV0eXBlIiwiY3Vyc29yIiwiY3giLCJjeSIsImRhdGF0eXBlIiwiZGVjZWxlcmF0ZSIsImRlc2NlbnQiLCJkaWZmdXNlY29uc3RhbnQiLCJkaXJlY3Rpb24iLCJkaXNwbGF5IiwiZGl2aXNvciIsImRvbWluYW50YmFzZWxpbmUiLCJkdXIiLCJkeCIsImR5IiwiZWRnZW1vZGUiLCJlbGV2YXRpb24iLCJlbmFibGViYWNrZ3JvdW5kIiwiZXhwb25lbnQiLCJleHRlcm5hbHJlc291cmNlc3JlcXVpcmVkIiwiZmlsbCIsImZpbGxvcGFjaXR5IiwiZmlsbHJ1bGUiLCJmaWx0ZXJyZXMiLCJmaWx0ZXJ1bml0cyIsImZsb29kb3BhY2l0eSIsImZsb29kY29sb3IiLCJmb2N1c2FibGUiLCJmb250ZmFtaWx5IiwiZm9udHNpemUiLCJmb250c2l6ZWFkanVzdCIsImZvbnRzdHJldGNoIiwiZm9udHN0eWxlIiwiZm9udHZhcmlhbnQiLCJmb250d2VpZ2h0IiwiZngiLCJmeSIsImcxIiwiZzIiLCJnbHlwaG5hbWUiLCJnbHlwaG9yaWVudGF0aW9uaG9yaXpvbnRhbCIsImdseXBob3JpZW50YXRpb252ZXJ0aWNhbCIsImdseXBocmVmIiwiZ3JhZGllbnR0cmFuc2Zvcm0iLCJncmFkaWVudHVuaXRzIiwiaGFuZ2luZyIsImhvcml6YWR2eCIsImhvcml6b3JpZ2lueCIsImlkZW9ncmFwaGljIiwiaW1hZ2VyZW5kZXJpbmciLCJpbjIiLCJpbiIsImlubGlzdCIsImludGVyY2VwdCIsImsxIiwiazIiLCJrMyIsIms0IiwiayIsImtlcm5lbG1hdHJpeCIsImtlcm5lbHVuaXRsZW5ndGgiLCJrZXJuaW5nIiwia2V5cG9pbnRzIiwia2V5c3BsaW5lcyIsImtleXRpbWVzIiwibGVuZ3RoYWRqdXN0IiwibGV0dGVyc3BhY2luZyIsImxpZ2h0aW5nY29sb3IiLCJsaW1pdGluZ2NvbmVhbmdsZSIsImxvY2FsIiwibWFya2VyZW5kIiwibWFya2VyaGVpZ2h0IiwibWFya2VybWlkIiwibWFya2Vyc3RhcnQiLCJtYXJrZXJ1bml0cyIsIm1hcmtlcndpZHRoIiwibWFza2NvbnRlbnR1bml0cyIsIm1hc2t1bml0cyIsIm1hdGhlbWF0aWNhbCIsIm1vZGUiLCJudW1vY3RhdmVzIiwib3BlcmF0b3IiLCJvcmllbnQiLCJvcmllbnRhdGlvbiIsIm9yaWdpbiIsIm92ZXJsaW5lcG9zaXRpb24iLCJvdmVybGluZXRoaWNrbmVzcyIsInBhaW50b3JkZXIiLCJwYW5vc2UxIiwicGF0aGxlbmd0aCIsInBhdHRlcm5jb250ZW50dW5pdHMiLCJwYXR0ZXJudHJhbnNmb3JtIiwicGF0dGVybnVuaXRzIiwicG9pbnRlcmV2ZW50cyIsInBvaW50cyIsInBvaW50c2F0eCIsInBvaW50c2F0eSIsInBvaW50c2F0eiIsInByZXNlcnZlYWxwaGEiLCJwcmVzZXJ2ZWFzcGVjdHJhdGlvIiwicHJpbWl0aXZldW5pdHMiLCJwcm9wZXJ0eSIsInIiLCJyYWRpdXMiLCJyZWZ4IiwicmVmeSIsInJlbmRlcmluZ2ludGVudCIsInJlcGVhdGNvdW50IiwicmVwZWF0ZHVyIiwicmVxdWlyZWRleHRlbnNpb25zIiwicmVxdWlyZWRmZWF0dXJlcyIsInJlc291cmNlIiwicmVzdGFydCIsInJlc3VsdHMiLCJyb3RhdGUiLCJyeCIsInJ5Iiwic2NhbGUiLCJzZWN1cml0eSIsInNlZWQiLCJzaGFwZXJlbmRlcmluZyIsInNsb3BlIiwic3BhY2luZyIsInNwZWN1bGFyY29uc3RhbnQiLCJzcGVjdWxhcmV4cG9uZW50Iiwic3BlZWQiLCJzcHJlYWRtZXRob2QiLCJzdGFydG9mZnNldCIsInN0ZGRldmlhdGlvbiIsInN0ZW1oIiwic3RlbXYiLCJzdGl0Y2h0aWxlcyIsInN0b3Bjb2xvciIsInN0b3BvcGFjaXR5Iiwic3RyaWtldGhyb3VnaHBvc2l0aW9uIiwic3RyaWtldGhyb3VnaHRoaWNrbmVzcyIsInN0cm9rZSIsInN0cm9rZWRhc2hhcnJheSIsInN0cm9rZWRhc2hvZmZzZXQiLCJzdHJva2VsaW5lY2FwIiwic3Ryb2tlbGluZWpvaW4iLCJzdHJva2VtaXRlcmxpbWl0Iiwic3Ryb2tld2lkdGgiLCJzdHJva2VvcGFjaXR5Iiwic3VwcHJlc3Njb250ZW50ZWRpdGFibGV3YXJuaW5nIiwic3VwcHJlc3NoeWRyYXRpb253YXJuaW5nIiwic3VyZmFjZXNjYWxlIiwic3lzdGVtbGFuZ3VhZ2UiLCJ0YWJsZXZhbHVlcyIsInRhcmdldHgiLCJ0YXJnZXR5IiwidGV4dGFuY2hvciIsInRleHRkZWNvcmF0aW9uIiwidGV4dGxlbmd0aCIsInRleHRyZW5kZXJpbmciLCJ0eXBlb2YiLCJ1MSIsInUyIiwidW5kZXJsaW5lcG9zaXRpb24iLCJ1bmRlcmxpbmV0aGlja25lc3MiLCJ1bmljb2RlIiwidW5pY29kZWJpZGkiLCJ1bmljb2RlcmFuZ2UiLCJ1bml0c3BlcmVtIiwidW5zZWxlY3RhYmxlIiwidmFscGhhYmV0aWMiLCJ2ZWN0b3JlZmZlY3QiLCJ2ZXJ0YWR2eSIsInZlcnRvcmlnaW54IiwidmVydG9yaWdpbnkiLCJ2aGFuZ2luZyIsInZpZGVvZ3JhcGhpYyIsInZpZXdib3giLCJ2aWV3dGFyZ2V0IiwidmlzaWJpbGl0eSIsInZtYXRoZW1hdGljYWwiLCJ2b2NhYiIsIndpZHRocyIsIndvcmRzcGFjaW5nIiwid3JpdGluZ21vZGUiLCJ4MSIsIngyIiwieGNoYW5uZWxzZWxlY3RvciIsInhoZWlnaHQiLCJ4bGlua2FjdHVhdGUiLCJ4bGlua2FyY3JvbGUiLCJ4bGlua2hyZWYiLCJ4bGlua3JvbGUiLCJ4bGlua3Nob3ciLCJ4bGlua3RpdGxlIiwieGxpbmt0eXBlIiwieG1sYmFzZSIsInhtbGxhbmciLCJ4bWxucyIsInhtbG5zeGxpbmsiLCJ4bWxzcGFjZSIsInkxIiwieTIiLCJ5Y2hhbm5lbHNlbGVjdG9yIiwieiIsInpvb21hbmRwYW4iLCJhcmlhUHJvcGVydGllcyIsIndhcm5lZFByb3BlcnRpZXMiLCJyQVJJQSIsInJBUklBQ2FtZWwiLCJoYXNPd25Qcm9wZXJ0eSQyIiwidmFsaWRhdGVQcm9wZXJ0eSIsImFyaWFOYW1lIiwiY29ycmVjdE5hbWUiLCJzdGFuZGFyZE5hbWUiLCJ3YXJuSW52YWxpZEFSSUFQcm9wcyIsImludmFsaWRQcm9wcyIsImlzVmFsaWQiLCJ1bmtub3duUHJvcFN0cmluZyIsInZhbGlkYXRlUHJvcGVydGllcyIsImRpZFdhcm5WYWx1ZU51bGwiLCJ2YWxpZGF0ZVByb3BlcnRpZXMkMSIsInZhbGlkYXRlUHJvcGVydHkkMSIsIndhcm5lZFByb3BlcnRpZXMkMSIsIl9oYXNPd25Qcm9wZXJ0eSIsIkVWRU5UX05BTUVfUkVHRVgiLCJJTlZBTElEX0VWRU5UX05BTUVfUkVHRVgiLCJyQVJJQSQxIiwickFSSUFDYW1lbCQxIiwiY2FuVXNlRXZlbnRTeXN0ZW0iLCJpc1Jlc2VydmVkIiwid2FyblVua25vd25Qcm9wZXJ0aWVzIiwidW5rbm93blByb3BzIiwidmFsaWRhdGVQcm9wZXJ0aWVzJDIiLCJkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiIsImRpZFdhcm5TaGFkeURPTSIsIkRBTkdFUk9VU0xZX1NFVF9JTk5FUl9IVE1MIiwiU1VQUFJFU1NfQ09OVEVOVF9FRElUQUJMRV9XQVJOSU5HIiwiU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMSIsIkFVVE9GT0NVUyIsIkNISUxEUkVOIiwiU1RZTEUkMSIsIkhUTUwiLCJIVE1MX05BTUVTUEFDRSIsIndhcm5lZFVua25vd25UYWdzIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwidmFsaWRhdGVQcm9wZXJ0aWVzSW5EZXZlbG9wbWVudCIsIndhcm5Gb3JUZXh0RGlmZmVyZW5jZSIsIndhcm5Gb3JQcm9wRGlmZmVyZW5jZSIsIndhcm5Gb3JFeHRyYUF0dHJpYnV0ZXMiLCJ3YXJuRm9ySW52YWxpZEV2ZW50TGlzdGVuZXIiLCJjYW5EaWZmU3R5bGVGb3JIeWRyYXRpb25XYXJuaW5nIiwibm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlIiwibm9ybWFsaXplSFRNTCIsImRpYWxvZyIsIndlYnZpZXciLCJOT1JNQUxJWkVfTkVXTElORVNfUkVHRVgiLCJOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVgiLCJtYXJrdXAiLCJtYXJrdXBTdHJpbmciLCJzZXJ2ZXJUZXh0IiwiY2xpZW50VGV4dCIsIm5vcm1hbGl6ZWRDbGllbnRUZXh0Iiwibm9ybWFsaXplZFNlcnZlclRleHQiLCJzZXJ2ZXJWYWx1ZSIsImNsaWVudFZhbHVlIiwibm9ybWFsaXplZENsaWVudFZhbHVlIiwibm9ybWFsaXplZFNlcnZlclZhbHVlIiwiYXR0cmlidXRlTmFtZXMiLCJuYW1lcyIsInRlc3RFbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiZW5zdXJlTGlzdGVuaW5nVG8iLCJyb290Q29udGFpbmVyRWxlbWVudCIsImlzRG9jdW1lbnRPckZyYWdtZW50IiwiZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyIiwidHJhcENsaWNrT25Ob25JbnRlcmFjdGl2ZUVsZW1lbnQiLCJvbmNsaWNrIiwic2V0SW5pdGlhbERPTVByb3BlcnRpZXMiLCJkb21FbGVtZW50IiwicHJvcEtleSIsIm5leHRQcm9wIiwiZnJlZXplIiwibmV4dEh0bWwiLCJjYW5TZXRUZXh0Q29udGVudCIsInVwZGF0ZURPTVByb3BlcnRpZXMiLCJ1cGRhdGVQYXlsb2FkIiwid2FzQ3VzdG9tQ29tcG9uZW50VGFnIiwiZGl2IiwiY3JlYXRlVGV4dE5vZGUiLCJzZXRJbml0aWFsUHJvcGVydGllcyIsInJhd1Byb3BzIiwic2hhZHlSb290IiwiZGlmZlByb3BlcnRpZXMiLCJsYXN0UmF3UHJvcHMiLCJuZXh0UmF3UHJvcHMiLCJsYXN0UHJvcHMiLCJsYXN0U3R5bGUiLCJsYXN0UHJvcCIsImxhc3RIdG1sIiwidXBkYXRlUHJvcGVydGllcyIsImdldFBvc3NpYmxlU3RhbmRhcmROYW1lIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImV4dHJhQXR0cmlidXRlTmFtZXMiLCJTZXQiLCJhdHRyaWJ1dGVzIiwiYWRkIiwic2VydmVySFRNTCIsImV4cGVjdGVkSFRNTCIsImRlbGV0ZSIsImV4cGVjdGVkU3R5bGUiLCJpc01pc21hdGNoRHVlVG9CYWRDYXNpbmciLCJvd25OYW1lc3BhY2UiLCJkaWZmSHlkcmF0ZWRUZXh0IiwidGV4dE5vZGUiLCJpc0RpZmZlcmVudCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlJDEiLCJ2YWxpZGF0ZURPTU5lc3RpbmciLCJ1cGRhdGVkQW5jZXN0b3JJbmZvIiwic3BlY2lhbFRhZ3MiLCJpblNjb3BlVGFncyIsImJ1dHRvblNjb3BlVGFncyIsImltcGxpZWRFbmRUYWdzIiwiZW1wdHlBbmNlc3RvckluZm8iLCJmb3JtVGFnIiwiYVRhZ0luU2NvcGUiLCJidXR0b25UYWdJblNjb3BlIiwibm9iclRhZ0luU2NvcGUiLCJwVGFnSW5CdXR0b25TY29wZSIsImxpc3RJdGVtVGFnQXV0b2Nsb3NpbmciLCJkbEl0ZW1UYWdBdXRvY2xvc2luZyIsIm9sZEluZm8iLCJhbmNlc3RvckluZm8iLCJpc1RhZ1ZhbGlkV2l0aFBhcmVudCIsInBhcmVudFRhZyIsImZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWciLCJkaWRXYXJuIiwiY2hpbGRUYWciLCJjaGlsZFRleHQiLCJwYXJlbnRJbmZvIiwiaW52YWxpZFBhcmVudCIsImludmFsaWRBbmNlc3RvciIsImludmFsaWRQYXJlbnRPckFuY2VzdG9yIiwiYW5jZXN0b3JUYWciLCJhZGRlbmR1bSIsIndhcm5LZXkiLCJ0YWdEaXNwbGF5TmFtZSIsIndoaXRlc3BhY2VJbmZvIiwic3VwcG9ydHNQZXJzaXN0ZW5jZSIsImNsb25lSW5zdGFuY2UiLCJjcmVhdGVDb250YWluZXJDaGlsZFNldCIsImFwcGVuZENoaWxkVG9Db250YWluZXJDaGlsZFNldCIsImZpbmFsaXplQ29udGFpbmVyQ2hpbGRyZW4iLCJyZXBsYWNlQ29udGFpbmVyQ2hpbGRyZW4iLCJjbG9uZUhpZGRlbkluc3RhbmNlIiwiY2xvbmVVbmhpZGRlbkluc3RhbmNlIiwiY3JlYXRlSGlkZGVuVGV4dEluc3RhbmNlIiwiU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkciLCJTVVNQRU5TRV9TVEFSVF9EQVRBIiwiU1VTUEVOU0VfRU5EX0RBVEEiLCJTVFlMRSIsImV2ZW50c0VuYWJsZWQiLCJzZWxlY3Rpb25JbmZvcm1hdGlvbiIsInNob3VsZEF1dG9Gb2N1c0hvc3RDb21wb25lbnQiLCJhdXRvRm9jdXMiLCJnZXRSb290SG9zdENvbnRleHQiLCJyb290Q29udGFpbmVySW5zdGFuY2UiLCJuYW1lc3BhY2UiLCJjb250YWluZXIiLCJ2YWxpZGF0ZWRUYWciLCJfYW5jZXN0b3JJbmZvIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dCIsInBhcmVudEhvc3RDb250ZXh0IiwicGFyZW50SG9zdENvbnRleHREZXYiLCJfbmFtZXNwYWNlIiwiX2FuY2VzdG9ySW5mbzIiLCJnZXRQdWJsaWNJbnN0YW5jZSIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiaG9zdENvbnRleHQiLCJpbnRlcm5hbEluc3RhbmNlSGFuZGxlIiwiaG9zdENvbnRleHREZXYiLCJvd25BbmNlc3RvckluZm8iLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJwYXJlbnRJbnN0YW5jZSIsImZpbmFsaXplSW5pdGlhbENoaWxkcmVuIiwicHJlcGFyZVVwZGF0ZSIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsIl9faHRtbCIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJpc1ByaW1hcnlSZW5kZXJlciIsInNjaGVkdWxlVGltZW91dCIsImNhbmNlbFRpbWVvdXQiLCJub1RpbWVvdXQiLCJzY2hlZHVsZVBhc3NpdmVFZmZlY3RzIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImNhbmNlbFBhc3NpdmVFZmZlY3RzIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJzdXBwb3J0c011dGF0aW9uIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsInRleHRJbnN0YW5jZSIsIm9sZFRleHQiLCJuZXdUZXh0IiwiYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciIsImluc2VydEJlZm9yZSIsInJlYWN0Um9vdENvbnRhaW5lciIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJiZWZvcmVDaGlsZCIsImluc2VydEluQ29udGFpbmVyQmVmb3JlIiwicmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyIiwiY2xlYXJTdXNwZW5zZUJvdW5kYXJ5Iiwic3VzcGVuc2VJbnN0YW5jZSIsIm5leHROb2RlIiwiY2xlYXJTdXNwZW5zZUJvdW5kYXJ5RnJvbUNvbnRhaW5lciIsImhpZGVJbnN0YW5jZSIsImhpZGVUZXh0SW5zdGFuY2UiLCJ1bmhpZGVJbnN0YW5jZSIsInVuaGlkZVRleHRJbnN0YW5jZSIsInN1cHBvcnRzSHlkcmF0aW9uIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImNhbkh5ZHJhdGVTdXNwZW5zZUluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVJbnN0YW5jZUFmdGVyU3VzcGVuc2VJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJwYXJlbnRDb250YWluZXIiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwicGFyZW50VHlwZSIsInBhcmVudFByb3BzIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVTdXNwZW5zZUluc3RhbmNlIiwicmVhY3RFbW9qaSIsIndhcm5pbmdFbW9qaSIsInN1cHBvcnRzVXNlclRpbWluZyIsInBlcmZvcm1hbmNlIiwibWFyayIsImNsZWFyTWFya3MiLCJtZWFzdXJlIiwiY2xlYXJNZWFzdXJlcyIsImN1cnJlbnRGaWJlciIsImN1cnJlbnRQaGFzZSIsImN1cnJlbnRQaGFzZUZpYmVyIiwiaXNDb21taXR0aW5nIiwiaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50Q29tbWl0IiwiaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50UGhhc2UiLCJjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wIiwiZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQiLCJpc1dhaXRpbmdGb3JDYWxsYmFjayIsImxhYmVsc0luQ3VycmVudENvbW1pdCIsImZvcm1hdE1hcmtOYW1lIiwibWFya05hbWUiLCJmb3JtYXRMYWJlbCIsInN1ZmZpeCIsImJlZ2luTWFyayIsImNsZWFyTWFyayIsImVuZE1hcmsiLCJmb3JtYXR0ZWRNYXJrTmFtZSIsImZvcm1hdHRlZExhYmVsIiwiZ2V0RmliZXJNYXJrTmFtZSIsImRlYnVnSUQiLCJnZXRGaWJlckxhYmVsIiwiYmVnaW5GaWJlck1hcmsiLCJfZGVidWdJRCIsImNsZWFyRmliZXJNYXJrIiwiZW5kRmliZXJNYXJrIiwic2hvdWxkSWdub3JlRmliZXIiLCJjbGVhclBlbmRpbmdQaGFzZU1lYXN1cmVtZW50IiwicGF1c2VUaW1lcnMiLCJfZGVidWdJc0N1cnJlbnRseVRpbWluZyIsInJlc3VtZVRpbWVyc1JlY3Vyc2l2ZWx5IiwicmVzdW1lVGltZXJzIiwicmVjb3JkRWZmZWN0IiwicmVjb3JkU2NoZWR1bGVVcGRhdGUiLCJzdGFydFJlcXVlc3RDYWxsYmFja1RpbWVyIiwic3RvcFJlcXVlc3RDYWxsYmFja1RpbWVyIiwiZGlkRXhwaXJlIiwiZXhwaXJhdGlvblRpbWUiLCJzdGFydFdvcmtUaW1lciIsImNhbmNlbFdvcmtUaW1lciIsInN0b3BXb3JrVGltZXIiLCJzdG9wRmFpbGVkV29ya1RpbWVyIiwic3RhcnRQaGFzZVRpbWVyIiwic3RvcFBoYXNlVGltZXIiLCJzdGFydFdvcmtMb29wVGltZXIiLCJuZXh0VW5pdE9mV29yayIsInN0b3BXb3JrTG9vcFRpbWVyIiwiaW50ZXJydXB0ZWRCeSIsImRpZENvbXBsZXRlUm9vdCIsInN0YXJ0Q29tbWl0VGltZXIiLCJjbGVhciIsInN0b3BDb21taXRUaW1lciIsInN0YXJ0Q29tbWl0U25hcHNob3RFZmZlY3RzVGltZXIiLCJzdG9wQ29tbWl0U25hcHNob3RFZmZlY3RzVGltZXIiLCJjb3VudCIsInN0YXJ0Q29tbWl0SG9zdEVmZmVjdHNUaW1lciIsInN0b3BDb21taXRIb3N0RWZmZWN0c1RpbWVyIiwic3RhcnRDb21taXRMaWZlQ3ljbGVzVGltZXIiLCJzdG9wQ29tbWl0TGlmZUN5Y2xlc1RpbWVyIiwidmFsdWVTdGFjayIsImZpYmVyU3RhY2siLCJjcmVhdGVDdXJzb3IiLCJjaGVja1RoYXRTdGFja0lzRW1wdHkiLCJyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYiLCJ3YXJuZWRBYm91dE1pc3NpbmdHZXRDaGlsZENvbnRleHQiLCJlbXB0eUNvbnRleHRPYmplY3QiLCJjb250ZXh0U3RhY2tDdXJzb3IiLCJkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yIiwicHJldmlvdXNDb250ZXh0IiwiZ2V0VW5tYXNrZWRDb250ZXh0IiwiZGlkUHVzaE93bkNvbnRleHRJZlByb3ZpZGVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJjYWNoZUNvbnRleHQiLCJ1bm1hc2tlZENvbnRleHQiLCJtYXNrZWRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiZ2V0TWFza2VkQ29udGV4dCIsImhhc0NvbnRleHRDaGFuZ2VkIiwicG9wQ29udGV4dCIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QiLCJkaWRDaGFuZ2UiLCJwcm9jZXNzQ2hpbGRDb250ZXh0IiwicGFyZW50Q29udGV4dCIsImNoaWxkQ29udGV4dCIsImNvbnRleHRLZXkiLCJwdXNoQ29udGV4dFByb3ZpZGVyIiwibWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIiLCJtZXJnZWRDb250ZXh0IiwiZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiaGFzTG9nZ2VkRXJyb3IiLCJjYXRjaEVycm9ycyIsImlzRGV2VG9vbHNQcmVzZW50IiwiaW5qZWN0SW50ZXJuYWxzIiwiaW50ZXJuYWxzIiwiaG9vayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwicmVuZGVyZXJJRCIsImluamVjdCIsIm9uQ29tbWl0Um9vdCIsIm9uQ29tbWl0VW5tb3VudCIsIm1heFNpZ25lZDMxQml0SW50IiwiTm9Xb3JrIiwiTmV2ZXIiLCJTeW5jIiwiVU5JVF9TSVpFIiwiTUFHSUNfTlVNQkVSX09GRlNFVCIsIm1zVG9FeHBpcmF0aW9uVGltZSIsIm1zIiwiZXhwaXJhdGlvblRpbWVUb01zIiwiY2VpbGluZyIsIm51bSIsInByZWNpc2lvbiIsImNvbXB1dGVFeHBpcmF0aW9uQnVja2V0IiwiY3VycmVudFRpbWUiLCJleHBpcmF0aW9uSW5NcyIsImJ1Y2tldFNpemVNcyIsIkxPV19QUklPUklUWV9FWFBJUkFUSU9OIiwiTE9XX1BSSU9SSVRZX0JBVENIX1NJWkUiLCJjb21wdXRlQXN5bmNFeHBpcmF0aW9uIiwiSElHSF9QUklPUklUWV9FWFBJUkFUSU9OIiwiSElHSF9QUklPUklUWV9CQVRDSF9TSVpFIiwiY29tcHV0ZUludGVyYWN0aXZlRXhwaXJhdGlvbiIsIk5vQ29udGV4dCIsIkNvbmN1cnJlbnRNb2RlIiwiU3RyaWN0TW9kZSIsIlByb2ZpbGVNb2RlIiwiaGFzQmFkTWFwUG9seWZpbGwiLCJub25FeHRlbnNpYmxlT2JqZWN0IiwicHJldmVudEV4dGVuc2lvbnMiLCJ0ZXN0TWFwIiwiTWFwIiwidGVzdFNldCIsImRlYnVnQ291bnRlciIsIkZpYmVyTm9kZSIsInBlbmRpbmdQcm9wcyIsIm1lbW9pemVkUHJvcHMiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkU3RhdGUiLCJjb250ZXh0RGVwZW5kZW5jaWVzIiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibGFzdEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJhY3R1YWxEdXJhdGlvbiIsIk51bWJlciIsIk5hTiIsImFjdHVhbFN0YXJ0VGltZSIsInNlbGZCYXNlRHVyYXRpb24iLCJ0cmVlQmFzZUR1cmF0aW9uIiwiX2RlYnVnSG9va1R5cGVzIiwiY3JlYXRlRmliZXIiLCJzaG91bGRDb25zdHJ1Y3QiLCJpc1JlYWN0Q29tcG9uZW50IiwiaXNTaW1wbGVGdW5jdGlvbkNvbXBvbmVudCIsInJlc29sdmVMYXp5Q29tcG9uZW50VGFnIiwiY3JlYXRlV29ya0luUHJvZ3Jlc3MiLCJjcmVhdGVIb3N0Um9vdEZpYmVyIiwiaXNDb25jdXJyZW50IiwiY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzIiwiZmliZXJUYWciLCJyZXNvbHZlZFR5cGUiLCJnZXRUYWciLCJjcmVhdGVGaWJlckZyb21GcmFnbWVudCIsImNyZWF0ZUZpYmVyRnJvbU1vZGUiLCJjcmVhdGVGaWJlckZyb21Qcm9maWxlciIsImNyZWF0ZUZpYmVyRnJvbVN1c3BlbnNlIiwiY3JlYXRlRmliZXJGcm9tRWxlbWVudCIsIl9vd25lciIsIl9zb3VyY2UiLCJlbGVtZW50cyIsIm9uUmVuZGVyIiwiY3JlYXRlRmliZXJGcm9tVGV4dCIsImNyZWF0ZUZpYmVyRnJvbUhvc3RJbnN0YW5jZUZvckRlbGV0aW9uIiwiY3JlYXRlRmliZXJGcm9tUG9ydGFsIiwicG9ydGFsIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFViIsImNyZWF0ZUZpYmVyUm9vdCIsImh5ZHJhdGUiLCJ1bmluaXRpYWxpemVkRmliZXIiLCJlYXJsaWVzdFBlbmRpbmdUaW1lIiwibGF0ZXN0UGVuZGluZ1RpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0UGluZ2VkVGltZSIsInBpbmdDYWNoZSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImZpbmlzaGVkV29yayIsInRpbWVvdXRIYW5kbGUiLCJwZW5kaW5nQ29udGV4dCIsIm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uIiwiZmlyc3RCYXRjaCIsIm5leHRTY2hlZHVsZWRSb290IiwiaW50ZXJhY3Rpb25UaHJlYWRJRCIsInVuc3RhYmxlX2dldFRocmVhZElEIiwibWVtb2l6ZWRJbnRlcmFjdGlvbnMiLCJwZW5kaW5nSW50ZXJhY3Rpb25NYXAiLCJsb3dQcmlvcml0eVdhcm5pbmciLCJfbGVuMiIsIl9rZXkyIiwibG93UHJpb3JpdHlXYXJuaW5nJDEiLCJSZWFjdFN0cmljdE1vZGVXYXJuaW5ncyIsImRpc2NhcmRQZW5kaW5nV2FybmluZ3MiLCJmbHVzaFBlbmRpbmdEZXByZWNhdGlvbldhcm5pbmdzIiwiZmx1c2hQZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MiLCJyZWNvcmREZXByZWNhdGlvbldhcm5pbmdzIiwicmVjb3JkVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MiLCJyZWNvcmRMZWdhY3lDb250ZXh0V2FybmluZyIsImZsdXNoTGVnYWN5Q29udGV4dFdhcm5pbmciLCJMSUZFQ1lDTEVfU1VHR0VTVElPTlMiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsInBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncyIsInBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MiLCJwZW5kaW5nQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzIiwicGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzIiwicGVuZGluZ0xlZ2FjeUNvbnRleHRXYXJuaW5nIiwiZGlkV2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMiLCJkaWRXYXJuQWJvdXRVbnNhZmVMaWZlY3ljbGVzIiwiZGlkV2FybkFib3V0TGVnYWN5Q29udGV4dCIsInNldFRvU29ydGVkU3RyaW5nIiwic29ydCIsImxpZmVjeWNsZVdhcm5pbmdzTWFwIiwic3RyaWN0Um9vdCIsImxpZmVjeWNsZXNXYXJuaW5nTWVzc2FnZXMiLCJsaWZlY3ljbGUiLCJsaWZlY3ljbGVXYXJuaW5ncyIsImNvbXBvbmVudE5hbWVzIiwiZm9ybWF0dGVkIiwic3VnZ2VzdGlvbiIsInNvcnRlZENvbXBvbmVudE5hbWVzIiwic3RyaWN0Um9vdENvbXBvbmVudFN0YWNrIiwiZmluZFN0cmljdFJvb3QiLCJtYXliZVN0cmljdFJvb3QiLCJ1bmlxdWVOYW1lcyIsInNvcnRlZE5hbWVzIiwiX3VuaXF1ZU5hbWVzIiwiX3NvcnRlZE5hbWVzIiwiX3VuaXF1ZU5hbWVzMiIsIl9zb3J0ZWROYW1lczIiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIndhcm5pbmdzRm9yUm9vdCIsInVuc2FmZUxpZmVjeWNsZXMiLCJmaWJlckFycmF5IiwiUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbiIsImRlYnVnVG9vbCIsIlJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMSIsIm1hcmtQZW5kaW5nUHJpb3JpdHlMZXZlbCIsImZpbmROZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiIsIm1hcmtDb21taXR0ZWRQcmlvcml0eUxldmVscyIsImVhcmxpZXN0UmVtYWluaW5nVGltZSIsImhhc0xvd2VyUHJpb3JpdHlXb3JrIiwiZXJyb3JlZEV4cGlyYXRpb25UaW1lIiwiaXNQcmlvcml0eUxldmVsU3VzcGVuZGVkIiwibWFya1N1c3BlbmRlZFByaW9yaXR5TGV2ZWwiLCJzdXNwZW5kZWRUaW1lIiwiY2xlYXJQaW5nIiwibWFya1BpbmdlZFByaW9yaXR5TGV2ZWwiLCJwaW5nZWRUaW1lIiwiY29tcGxldGVkVGltZSIsImZpbmRFYXJsaWVzdE91dHN0YW5kaW5nUHJpb3JpdHlMZXZlbCIsInJlbmRlckV4cGlyYXRpb25UaW1lIiwiZWFybGllc3RFeHBpcmF0aW9uVGltZSIsImRpZEV4cGlyZUF0RXhwaXJhdGlvblRpbWUiLCJjb21wbGV0ZWRFeHBpcmF0aW9uVGltZSIsInJlc29sdmVEZWZhdWx0UHJvcHMiLCJiYXNlUHJvcHMiLCJyZWFkTGF6eUNvbXBvbmVudFR5cGUiLCJjdG9yIiwiX2N0b3IiLCJfdGhlbmFibGUiLCJtb2R1bGVPYmplY3QiLCJkZWZhdWx0RXhwb3J0IiwiZmFrZUludGVybmFsSW5zdGFuY2UiLCJpc0FycmF5JDEiLCJlbXB0eVJlZnNPYmplY3QiLCJyZWZzIiwiZGlkV2FybkFib3V0U3RhdGVBc3NpZ25tZW50Rm9yQ29tcG9uZW50IiwiZGlkV2FybkFib3V0VW5pbml0aWFsaXplZFN0YXRlIiwiZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlIiwiZGlkV2FybkFib3V0TGVnYWN5TGlmZWN5Y2xlc0FuZERlcml2ZWRTdGF0ZSIsImRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZSIsIndhcm5PblVuZGVmaW5lZERlcml2ZWRTdGF0ZSIsIndhcm5PbkludmFsaWRDYWxsYmFjayQxIiwiZGlkV2FybkFib3V0RGlyZWN0bHlBc3NpZ25pbmdQcm9wc1RvU3RhdGUiLCJkaWRXYXJuQWJvdXRDb250ZXh0VHlwZUFuZENvbnRleHRUeXBlcyIsImRpZFdhcm5BYm91dEludmFsaWRhdGVDb250ZXh0VHlwZSIsImRpZFdhcm5PbkludmFsaWRDYWxsYmFjayIsImNhbGxlck5hbWUiLCJwYXJ0aWFsU3RhdGUiLCJhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInByZXZTdGF0ZSIsImJhc2VTdGF0ZSIsImNsYXNzQ29tcG9uZW50VXBkYXRlciIsImVucXVldWVTZXRTdGF0ZSIsInBheWxvYWQiLCJyZXF1ZXN0Q3VycmVudFRpbWUiLCJjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyIiwidXBkYXRlIiwiY3JlYXRlVXBkYXRlIiwiZmx1c2hQYXNzaXZlRWZmZWN0cyIsImVucXVldWVVcGRhdGUiLCJzY2hlZHVsZVdvcmsiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiRm9yY2VVcGRhdGUiLCJjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSIsIm9sZFN0YXRlIiwibmV3U3RhdGUiLCJuZXh0Q29udGV4dCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInNob3VsZFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiY2hlY2tDbGFzc0luc3RhbmNlIiwicmVuZGVyUHJlc2VudCIsIm5vR2V0SW5pdGlhbFN0YXRlT25FUzYiLCJnZXRJbml0aWFsU3RhdGUiLCJpc1JlYWN0Q2xhc3NBcHByb3ZlZCIsIm5vR2V0RGVmYXVsdFByb3BzT25FUzYiLCJub0luc3RhbmNlUHJvcFR5cGVzIiwibm9JbnN0YW5jZUNvbnRleHRUeXBlIiwibm9JbnN0YW5jZUNvbnRleHRUeXBlcyIsIm5vQ29tcG9uZW50U2hvdWxkVXBkYXRlIiwiY29tcG9uZW50U2hvdWxkVXBkYXRlIiwibm9Db21wb25lbnREaWRVbm1vdW50IiwiY29tcG9uZW50RGlkVW5tb3VudCIsIm5vQ29tcG9uZW50RGlkUmVjZWl2ZVByb3BzIiwiY29tcG9uZW50RGlkUmVjZWl2ZVByb3BzIiwibm9Db21wb25lbnRXaWxsUmVjaWV2ZVByb3BzIiwiY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyIsIm5vVW5zYWZlQ29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzIiwiaGFzTXV0YXRlZFByb3BzIiwibm9JbnN0YW5jZURlZmF1bHRQcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibm9JbnN0YW5jZUdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm5vSW5zdGFuY2VHZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJub1N0YXRpY0dldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiX3N0YXRlIiwiYWRvcHRDbGFzc0luc3RhbmNlIiwidXBkYXRlciIsIl9yZWFjdEludGVybmFsSW5zdGFuY2UiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwiaXNMZWdhY3lDb250ZXh0Q29uc3VtZXIiLCJfY29udGV4dCIsInJlYWRDb250ZXh0IiwiZm91bmRXaWxsTW91bnROYW1lIiwiZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSIsImZvdW5kV2lsbFVwZGF0ZU5hbWUiLCJfY29tcG9uZW50TmFtZSIsIm5ld0FwaU5hbWUiLCJjYWxsQ29tcG9uZW50V2lsbE1vdW50IiwiY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJwcm9jZXNzVXBkYXRlUXVldWUiLCJyZXN1bWVNb3VudENsYXNzSW5zdGFuY2UiLCJvbGRDb250ZXh0IiwibmV4dExlZ2FjeVVubWFza2VkQ29udGV4dCIsImhhc05ld0xpZmVjeWNsZXMiLCJyZXNldEhhc0ZvcmNlVXBkYXRlQmVmb3JlUHJvY2Vzc2luZyIsImNoZWNrSGFzRm9yY2VVcGRhdGVBZnRlclByb2Nlc3NpbmciLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwibmV4dFVubWFza2VkQ29udGV4dCIsImRpZFdhcm5BYm91dE1hcHMiLCJkaWRXYXJuQWJvdXRHZW5lcmF0b3JzIiwiZGlkV2FybkFib3V0U3RyaW5nUmVmSW5TdHJpY3RNb2RlIiwib3duZXJIYXNLZXlVc2VXYXJuaW5nIiwib3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nIiwid2FybkZvck1pc3NpbmdLZXkiLCJfc3RvcmUiLCJ2YWxpZGF0ZWQiLCJjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvIiwiY29lcmNlUmVmIiwicmV0dXJuRmliZXIiLCJjdXJyZW50JCQxIiwibWl4ZWRSZWYiLCJzdHJpbmdSZWYiLCJfc3RyaW5nUmVmIiwidGhyb3dPbkludmFsaWRPYmplY3RUeXBlIiwibmV3Q2hpbGQiLCJ3YXJuT25GdW5jdGlvblR5cGUiLCJDaGlsZFJlY29uY2lsZXIiLCJzaG91bGRUcmFja1NpZGVFZmZlY3RzIiwiZGVsZXRlQ2hpbGQiLCJjaGlsZFRvRGVsZXRlIiwibGFzdCIsImRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuIiwiY3VycmVudEZpcnN0Q2hpbGQiLCJtYXBSZW1haW5pbmdDaGlsZHJlbiIsImV4aXN0aW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkIiwidXNlRmliZXIiLCJjbG9uZSIsInBsYWNlQ2hpbGQiLCJuZXdGaWJlciIsImxhc3RQbGFjZWRJbmRleCIsIm5ld0luZGV4Iiwib2xkSW5kZXgiLCJwbGFjZVNpbmdsZUNoaWxkIiwidXBkYXRlVGV4dE5vZGUiLCJjcmVhdGVkIiwiZXhpc3RpbmciLCJ1cGRhdGVFbGVtZW50IiwidXBkYXRlUG9ydGFsIiwidXBkYXRlRnJhZ21lbnQiLCJmcmFnbWVudCIsImNyZWF0ZUNoaWxkIiwiX2NyZWF0ZWQiLCJfY3JlYXRlZDIiLCJfY3JlYXRlZDMiLCJ1cGRhdGVTbG90Iiwib2xkRmliZXIiLCJ1cGRhdGVGcm9tTWFwIiwibmV3SWR4IiwibWF0Y2hlZEZpYmVyIiwiX21hdGNoZWRGaWJlciIsIl9tYXRjaGVkRmliZXIyIiwiX21hdGNoZWRGaWJlcjMiLCJ3YXJuT25JbnZhbGlkS2V5Iiwia25vd25LZXlzIiwicmVjb25jaWxlQ2hpbGRyZW5BcnJheSIsIm5ld0NoaWxkcmVuIiwicmVzdWx0aW5nRmlyc3RDaGlsZCIsInByZXZpb3VzTmV3RmliZXIiLCJuZXh0T2xkRmliZXIiLCJfbmV3RmliZXIiLCJfbmV3RmliZXIyIiwicmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvciIsIm5ld0NoaWxkcmVuSXRlcmFibGUiLCJ0b1N0cmluZ1RhZyIsIl9uZXdDaGlsZHJlbiIsIl9zdGVwIiwiX25ld0ZpYmVyMyIsIl9uZXdGaWJlcjQiLCJyZWNvbmNpbGVTaW5nbGVUZXh0Tm9kZSIsInJlY29uY2lsZVNpbmdsZUVsZW1lbnQiLCJfY3JlYXRlZDQiLCJyZWNvbmNpbGVTaW5nbGVQb3J0YWwiLCJyZWNvbmNpbGVDaGlsZEZpYmVycyIsImlzVW5rZXllZFRvcExldmVsRnJhZ21lbnQiLCJfaXNNb2NrRnVuY3Rpb24iLCJtb3VudENoaWxkRmliZXJzIiwiY2xvbmVDaGlsZEZpYmVycyIsImN1cnJlbnRDaGlsZCIsIk5PX0NPTlRFWFQiLCJjb250ZXh0U3RhY2tDdXJzb3IkMSIsImNvbnRleHRGaWJlclN0YWNrQ3Vyc29yIiwicm9vdEluc3RhbmNlU3RhY2tDdXJzb3IiLCJyZXF1aXJlZENvbnRleHQiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInJvb3RJbnN0YW5jZSIsInB1c2hIb3N0Q29udGFpbmVyIiwibmV4dFJvb3RJbnN0YW5jZSIsIm5leHRSb290Q29udGV4dCIsInBvcEhvc3RDb250YWluZXIiLCJnZXRIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGV4dCIsInBvcEhvc3RDb250ZXh0IiwiTm9FZmZlY3QkMSIsIlVubW91bnRTbmFwc2hvdCIsIlVubW91bnRNdXRhdGlvbiIsIk1vdW50TXV0YXRpb24iLCJVbm1vdW50TGF5b3V0IiwiTW91bnRMYXlvdXQiLCJNb3VudFBhc3NpdmUiLCJVbm1vdW50UGFzc2l2ZSIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIkMSIsImRpZFdhcm5BYm91dE1pc21hdGNoZWRIb29rc0ZvckNvbXBvbmVudCIsImN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEiLCJjdXJyZW50SG9vayIsIm5leHRDdXJyZW50SG9vayIsImZpcnN0V29ya0luUHJvZ3Jlc3NIb29rIiwid29ya0luUHJvZ3Jlc3NIb29rIiwibmV4dFdvcmtJblByb2dyZXNzSG9vayIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwiY29tcG9uZW50VXBkYXRlUXVldWUiLCJzaWRlRWZmZWN0VGFnIiwiZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSIsInJlbmRlclBoYXNlVXBkYXRlcyIsIm51bWJlck9mUmVSZW5kZXJzIiwiUkVfUkVOREVSX0xJTUlUIiwiY3VycmVudEhvb2tOYW1lSW5EZXYiLCJob29rVHlwZXNEZXYiLCJob29rVHlwZXNVcGRhdGVJbmRleERldiIsIm1vdW50SG9va1R5cGVzRGV2IiwiaG9va05hbWUiLCJ1cGRhdGVIb29rVHlwZXNEZXYiLCJ3YXJuT25Ib29rTWlzbWF0Y2hJbkRldiIsImN1cnJlbnRIb29rTmFtZSIsInRhYmxlIiwic2Vjb25kQ29sdW1uU3RhcnQiLCJvbGRIb29rTmFtZSIsIm5ld0hvb2tOYW1lIiwicm93IiwidGhyb3dJbnZhbGlkSG9va0Vycm9yIiwiYXJlSG9va0lucHV0c0VxdWFsIiwibmV4dERlcHMiLCJwcmV2RGVwcyIsInJlbmRlcldpdGhIb29rcyIsInJlZk9yQ29udGV4dCIsIm5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSIsIkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVYiLCJIb29rc0Rpc3BhdGNoZXJPbk1vdW50V2l0aEhvb2tUeXBlc0luREVWIiwiSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWIiwiQ29udGV4dE9ubHlEaXNwYXRjaGVyIiwicmVuZGVyZWRXb3JrIiwiZGlkUmVuZGVyVG9vRmV3SG9va3MiLCJiYWlsb3V0SG9va3MiLCJyZXNldEhvb2tzIiwibW91bnRXb3JrSW5Qcm9ncmVzc0hvb2siLCJiYXNlVXBkYXRlIiwidXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rIiwibmV3SG9vayIsImNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUiLCJiYXNpY1N0YXRlUmVkdWNlciIsIm1vdW50UmVkdWNlciIsInJlZHVjZXIiLCJpbml0aWFsQXJnIiwiaW5pdCIsImluaXRpYWxTdGF0ZSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoQWN0aW9uIiwidXBkYXRlUmVkdWNlciIsIl9kaXNwYXRjaCIsImZpcnN0UmVuZGVyUGhhc2VVcGRhdGUiLCJfYWN0aW9uIiwibWFya1dvcmtJblByb2dyZXNzUmVjZWl2ZWRVcGRhdGUiLCJmaXJzdCIsIl9uZXdTdGF0ZSIsIm5ld0Jhc2VTdGF0ZSIsIm5ld0Jhc2VVcGRhdGUiLCJwcmV2VXBkYXRlIiwiX3VwZGF0ZSIsImRpZFNraXAiLCJ1cGRhdGVFeHBpcmF0aW9uVGltZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJfYWN0aW9uMiIsIm1vdW50U3RhdGUiLCJ1cGRhdGVTdGF0ZSIsInB1c2hFZmZlY3QiLCJkZXN0cm95IiwiZGVwcyIsImVmZmVjdCIsIl9sYXN0RWZmZWN0IiwibW91bnRSZWYiLCJzZWFsIiwidXBkYXRlUmVmIiwibW91bnRFZmZlY3RJbXBsIiwiZmliZXJFZmZlY3RUYWciLCJob29rRWZmZWN0VGFnIiwidXBkYXRlRWZmZWN0SW1wbCIsInByZXZFZmZlY3QiLCJtb3VudEVmZmVjdCIsInVwZGF0ZUVmZmVjdCIsIm1vdW50TGF5b3V0RWZmZWN0IiwidXBkYXRlTGF5b3V0RWZmZWN0IiwiaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdCIsInJlZkNhbGxiYWNrIiwiX2luc3QiLCJyZWZPYmplY3QiLCJfaW5zdDIiLCJtb3VudEltcGVyYXRpdmVIYW5kbGUiLCJlZmZlY3REZXBzIiwidXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSIsIm1vdW50RGVidWdWYWx1ZSIsImZvcm1hdHRlckZuIiwidXBkYXRlRGVidWdWYWx1ZSIsIm1vdW50Q2FsbGJhY2siLCJ1cGRhdGVDYWxsYmFjayIsIm1vdW50TWVtbyIsIm5leHRDcmVhdGUiLCJ1cGRhdGVNZW1vIiwic2hvdWxkV2FybkZvclVuYmF0Y2hlZFNldFN0YXRlIiwiamVzdCIsImxhc3RSZW5kZXJQaGFzZVVwZGF0ZSIsIl9leHBpcmF0aW9uVGltZSIsIl91cGRhdGUyIiwiX2xhc3QiLCJfbGFzdFJlbmRlcmVkUmVkdWNlciIsInByZXZEaXNwYXRjaGVyIiwiSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVYiLCJjdXJyZW50U3RhdGUiLCJfZWFnZXJTdGF0ZSIsIndhcm5JZk5vdEN1cnJlbnRseUJhdGNoaW5nSW5EZXYiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWIiwid2FybkludmFsaWRDb250ZXh0QWNjZXNzIiwid2FybkludmFsaWRIb29rQWNjZXNzIiwiY29tbWl0VGltZSIsInByb2ZpbGVyU3RhcnRUaW1lIiwiZ2V0Q29tbWl0VGltZSIsInJlY29yZENvbW1pdFRpbWUiLCJ1bnN0YWJsZV9ub3ciLCJzdGFydFByb2ZpbGVyVGltZXIiLCJzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZyIsInN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nQW5kUmVjb3JkRGVsdGEiLCJvdmVycmlkZUJhc2VUaW1lIiwiaHlkcmF0aW9uUGFyZW50RmliZXIiLCJuZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiZW50ZXJIeWRyYXRpb25TdGF0ZSIsInJlZW50ZXJIeWRyYXRpb25TdGF0ZUZyb21EZWh5ZHJhdGVkU3VzcGVuc2VJbnN0YW5jZSIsInBvcFRvTmV4dEhvc3RQYXJlbnQiLCJkZWxldGVIeWRyYXRhYmxlSW5zdGFuY2UiLCJpbnNlcnROb25IeWRyYXRlZEluc3RhbmNlIiwiX3RleHQiLCJ0cnlIeWRyYXRlIiwibmV4dEluc3RhbmNlIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJmaXJzdEF0dGVtcHRlZEluc3RhbmNlIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwic2tpcFBhc3REZWh5ZHJhdGVkU3VzcGVuc2VJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsIlJlYWN0Q3VycmVudE93bmVyJDMiLCJkaWRSZWNlaXZlVXBkYXRlIiwiZGlkV2FybkFib3V0QmFkQ2xhc3MiLCJkaWRXYXJuQWJvdXRDb250ZXh0VHlwZU9uRnVuY3Rpb25Db21wb25lbnQiLCJkaWRXYXJuQWJvdXRHZXREZXJpdmVkU3RhdGVPbkZ1bmN0aW9uQ29tcG9uZW50IiwiZGlkV2FybkFib3V0RnVuY3Rpb25SZWZzIiwiZGlkV2FybkFib3V0UmVhc3NpZ25pbmdQcm9wcyIsInJlY29uY2lsZUNoaWxkcmVuIiwibmV4dENoaWxkcmVuIiwiZm9yY2VVbm1vdW50Q3VycmVudEFuZFJlY29uY2lsZSIsInVwZGF0ZUZvcndhcmRSZWYiLCJpbm5lclByb3BUeXBlcyIsInByZXBhcmVUb1JlYWRDb250ZXh0IiwiYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayIsInVwZGF0ZU1lbW9Db21wb25lbnQiLCJ2YWxpZGF0ZUZ1bmN0aW9uQ29tcG9uZW50SW5EZXYiLCJ1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50IiwiX2lubmVyUHJvcFR5cGVzIiwicHJldlByb3BzIiwib3V0ZXJNZW1vVHlwZSIsIm91dGVyUHJvcFR5cGVzIiwidXBkYXRlRnVuY3Rpb25Db21wb25lbnQiLCJ1cGRhdGVNb2RlIiwidXBkYXRlUHJvZmlsZXIiLCJtYXJrUmVmIiwidXBkYXRlQ2xhc3NDb21wb25lbnQiLCJoYXNDb250ZXh0IiwiZmluaXNoQ2xhc3NDb21wb25lbnQiLCJkaWRDYXB0dXJlRXJyb3IiLCJwdXNoSG9zdFJvb3RDb250ZXh0IiwidXBkYXRlSG9zdFJvb3QiLCJwcmV2Q2hpbGRyZW4iLCJ1cGRhdGVIb3N0Q29tcG9uZW50IiwiaXNEaXJlY3RUZXh0Q2hpbGQiLCJ1cGRhdGVIb3N0VGV4dCIsIm1vdW50TGF6eUNvbXBvbmVudCIsIl9jdXJyZW50IiwicmVzb2x2ZWRUYWciLCJyZXNvbHZlZFByb3BzIiwiaGludCIsIm1vdW50SW5jb21wbGV0ZUNsYXNzQ29tcG9uZW50IiwibW91bnRJbmRldGVybWluYXRlQ29tcG9uZW50IiwiZGVidWdTb3VyY2UiLCJ1cGRhdGVTdXNwZW5zZUNvbXBvbmVudCIsIm5leHREaWRUaW1lb3V0IiwidGltZWRPdXRBdCIsImZhbGxiYWNrIiwidXBkYXRlRGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50IiwibmV4dEZhbGxiYWNrQ2hpbGRyZW4iLCJwcmltYXJ5Q2hpbGRGcmFnbWVudCIsInByb2dyZXNzZWRTdGF0ZSIsInByb2dyZXNzZWRQcmltYXJ5Q2hpbGQiLCJmYWxsYmFja0NoaWxkRnJhZ21lbnQiLCJuZXh0UHJpbWFyeUNoaWxkcmVuIiwicHJldkRpZFRpbWVvdXQiLCJjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQiLCJjdXJyZW50RmFsbGJhY2tDaGlsZEZyYWdtZW50IiwiX25leHRGYWxsYmFja0NoaWxkcmVuIiwiX3ByaW1hcnlDaGlsZEZyYWdtZW50IiwiX3Byb2dyZXNzZWRTdGF0ZSIsIl9wcm9ncmVzc2VkUHJpbWFyeUNoaWxkIiwiaGlkZGVuQ2hpbGQiLCJfZmFsbGJhY2tDaGlsZEZyYWdtZW50IiwiX25leHRQcmltYXJ5Q2hpbGRyZW4iLCJjdXJyZW50UHJpbWFyeUNoaWxkIiwicHJpbWFyeUNoaWxkIiwiX2N1cnJlbnRQcmltYXJ5Q2hpbGQiLCJfbmV4dEZhbGxiYWNrQ2hpbGRyZW4yIiwiX3ByaW1hcnlDaGlsZEZyYWdtZW50MiIsIl9wcm9ncmVzc2VkU3RhdGUyIiwiX3Byb2dyZXNzZWRQcmltYXJ5Q2hpbGQyIiwiX3RyZWVCYXNlRHVyYXRpb24iLCJfaGlkZGVuQ2hpbGQiLCJfZmFsbGJhY2tDaGlsZEZyYWdtZW50MiIsIl9uZXh0UHJpbWFyeUNoaWxkcmVuMiIsImhhc0NvbnRleHRDaGFuZ2VkJCQxIiwidXBkYXRlUG9ydGFsQ29tcG9uZW50IiwidXBkYXRlQ29udGV4dFByb3ZpZGVyIiwicHJvdmlkZXJUeXBlIiwicHJvdmlkZXJQcm9wVHlwZXMiLCJwdXNoUHJvdmlkZXIiLCJwcm9wYWdhdGVDb250ZXh0Q2hhbmdlIiwiaGFzV2FybmVkQWJvdXRVc2luZ0NvbnRleHRBc0NvbnN1bWVyIiwidXBkYXRlQ29udGV4dENvbnN1bWVyIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiYmVnaW5Xb3JrIiwiZGlkVGltZW91dCIsInByaW1hcnlDaGlsZEV4cGlyYXRpb25UaW1lIiwiX2VsZW1lbnRUeXBlIiwidW5yZXNvbHZlZFByb3BzIiwiX3VucmVzb2x2ZWRQcm9wcyIsIl9yZXNvbHZlZFByb3BzIiwiX3VucmVzb2x2ZWRQcm9wczIiLCJfcmVzb2x2ZWRQcm9wczIiLCJfdHlwZTIiLCJfdW5yZXNvbHZlZFByb3BzMyIsIl9yZXNvbHZlZFByb3BzMyIsIl9Db21wb25lbnQzIiwiX3VucmVzb2x2ZWRQcm9wczQiLCJfcmVzb2x2ZWRQcm9wczQiLCJ2YWx1ZUN1cnNvciIsInJlbmRlcmVyU2lnaWwiLCJjdXJyZW50bHlSZW5kZXJpbmdGaWJlciIsImxhc3RDb250ZXh0RGVwZW5kZW5jeSIsImxhc3RDb250ZXh0V2l0aEFsbEJpdHNPYnNlcnZlZCIsImlzRGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYiLCJyZXNldENvbnRleHREZXBlbmRlbmNlcyIsImVudGVyRGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYiLCJleGl0RGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYiLCJwcm92aWRlckZpYmVyIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50UmVuZGVyZXIiLCJfY3VycmVudFZhbHVlMiIsIl9jdXJyZW50UmVuZGVyZXIyIiwicG9wUHJvdmlkZXIiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJzY2hlZHVsZVdvcmtPblBhcmVudFBhdGgiLCJuZXh0RmliZXIiLCJjdXJyZW50RGVwZW5kZW5jaWVzIiwicmVzb2x2ZWRPYnNlcnZlZEJpdHMiLCJjb250ZXh0SXRlbSIsIlVwZGF0ZVN0YXRlIiwiQ2FwdHVyZVVwZGF0ZSIsImhhc0ZvcmNlVXBkYXRlIiwiZGlkV2FyblVwZGF0ZUluc2lkZVVwZGF0ZSIsImN1cnJlbnRseVByb2Nlc3NpbmdRdWV1ZSIsInJlc2V0Q3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlIiwiY3JlYXRlVXBkYXRlUXVldWUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImNsb25lVXBkYXRlUXVldWUiLCJhcHBlbmRVcGRhdGVUb1F1ZXVlIiwicXVldWUxIiwicXVldWUyIiwiZW5xdWV1ZUNhcHR1cmVkVXBkYXRlIiwid29ya0luUHJvZ3Jlc3NRdWV1ZSIsImVuc3VyZVdvcmtJblByb2dyZXNzUXVldWVJc0FDbG9uZSIsImdldFN0YXRlRnJvbVVwZGF0ZSIsIl9wYXlsb2FkIiwiX3BheWxvYWQyIiwibmV3Rmlyc3RVcGRhdGUiLCJuZXdFeHBpcmF0aW9uVGltZSIsInJlc3VsdFN0YXRlIiwiX2NhbGxiYWNrIiwibmV3Rmlyc3RDYXB0dXJlZFVwZGF0ZSIsIl91cGRhdGVFeHBpcmF0aW9uVGltZSIsIl9jYWxsYmFjazIiLCJjb21taXRVcGRhdGVRdWV1ZSIsImZpbmlzaGVkUXVldWUiLCJjb21taXRVcGRhdGVFZmZlY3RzIiwiX2NhbGxiYWNrMyIsImNyZWF0ZUNhcHR1cmVkVmFsdWUiLCJtYXJrVXBkYXRlIiwibWFya1JlZiQxIiwiYXBwZW5kQWxsQ2hpbGRyZW4iLCJ1cGRhdGVIb3N0Q29udGFpbmVyIiwidXBkYXRlSG9zdENvbXBvbmVudCQxIiwidXBkYXRlSG9zdFRleHQkMSIsIm5lZWRzVmlzaWJpbGl0eVRvZ2dsZSIsImlzSGlkZGVuIiwiY3VycmVudEhvc3RDb250ZXh0IiwiYnJhbmNoZXMiLCJfaW5zdGFuY2UiLCJvbGRJc0hpZGRlbiIsIm5ld0lzSGlkZGVuIiwicHJpbWFyeUNoaWxkUGFyZW50IiwiYXBwZW5kQWxsQ2hpbGRyZW5Ub0NvbnRhaW5lciIsImNvbnRhaW5lckNoaWxkU2V0IiwiX2luc3RhbmNlMiIsInBvcnRhbE9yUm9vdCIsImNoaWxkcmVuVW5jaGFuZ2VkIiwibmV3Q2hpbGRTZXQiLCJjdXJyZW50SW5zdGFuY2UiLCJyZWN5Y2xhYmxlSW5zdGFuY2UiLCJuZXdJbnN0YW5jZSIsImNvbXBsZXRlV29yayIsImZpYmVyUm9vdCIsIndhc0h5ZHJhdGVkIiwiX3Jvb3RDb250YWluZXJJbnN0YW5jZSIsIl9jdXJyZW50SG9zdENvbnRleHQiLCJfd2FzSHlkcmF0ZWQiLCJjdXJyZW50RmFsbGJhY2tDaGlsZCIsIl93YXNIeWRyYXRlZDIiLCJzaG91bGRDYXB0dXJlU3VzcGVuc2UiLCJzaG93RXJyb3JEaWFsb2ciLCJjYXB0dXJlZEVycm9yIiwibG9nQ2FwdHVyZWRFcnJvciIsImxvZ0Vycm9yIiwiY29tcG9uZW50U3RhY2siLCJlcnJvckJvdW5kYXJ5TmFtZSIsImVycm9yQm91bmRhcnlGb3VuZCIsIndpbGxSZXRyeSIsImNvbXBvbmVudE5hbWVNZXNzYWdlIiwiZXJyb3JCb3VuZGFyeU1lc3NhZ2UiLCJjb21iaW5lZE1lc3NhZ2UiLCJkaWRXYXJuQWJvdXRVbmRlZmluZWRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlBvc3NpYmx5V2Vha1NldCQxIiwiV2Vha1NldCIsImJvdW5kYXJ5IiwiZXJyb3JJbmZvIiwiZXJyb3JCb3VuZGFyeSIsImNhbGxDb21wb25lbnRXaWxsVW5tb3VudFdpdGhUaW1lciIsInNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudCIsInVubW91bnRFcnJvciIsImNhcHR1cmVDb21taXRQaGFzZUVycm9yIiwic2FmZWx5RGV0YWNoUmVmIiwicmVmRXJyb3IiLCJzYWZlbHlDYWxsRGVzdHJveSIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsImNvbW1pdEhvb2tFZmZlY3RMaXN0Iiwic25hcHNob3QiLCJkaWRXYXJuU2V0IiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJ1bm1vdW50VGFnIiwibW91bnRUYWciLCJfZGVzdHJveSIsImNvbW1pdFBhc3NpdmVIb29rRWZmZWN0cyIsImNvbW1pdExpZmVDeWNsZXMiLCJmaW5pc2hlZFJvb3QiLCJjb21taXR0ZWRFeHBpcmF0aW9uVGltZSIsIl91cGRhdGVRdWV1ZSIsImhpZGVPclVuaGlkZUFsbENoaWxkcmVuIiwiX2luc3RhbmNlMyIsImNvbW1pdEF0dGFjaFJlZiIsImluc3RhbmNlVG9Vc2UiLCJjb21taXREZXRhY2hSZWYiLCJjdXJyZW50UmVmIiwiY29tbWl0VW5tb3VudCIsInVubW91bnRIb3N0Q29tcG9uZW50cyIsImVtcHR5UG9ydGFsQ29udGFpbmVyIiwiY29tbWl0TmVzdGVkVW5tb3VudHMiLCJkZXRhY2hGaWJlciIsImVtcHR5Q2hpbGRTZXQiLCJjb21taXRDb250YWluZXIiLCJfcGVuZGluZ0NoaWxkcmVuIiwiZ2V0SG9zdFBhcmVudEZpYmVyIiwiaXNIb3N0UGFyZW50IiwiZ2V0SG9zdFNpYmxpbmciLCJzaWJsaW5ncyIsImNvbW1pdFBsYWNlbWVudCIsInBhcmVudEZpYmVyIiwiaXNDb250YWluZXIiLCJiZWZvcmUiLCJjdXJyZW50UGFyZW50SXNWYWxpZCIsImN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciIsImZpbmRQYXJlbnQiLCJjb21taXREZWxldGlvbiIsImNvbW1pdFdvcmsiLCJuZXdEaWRUaW1lb3V0IiwidGhlbmFibGVzIiwicmV0cnlDYWNoZSIsInJldHJ5IiwicmV0cnlUaW1lZE91dEJvdW5kYXJ5IiwidW5zdGFibGVfd3JhcCIsImNvbW1pdFJlc2V0VGV4dENvbnRlbnQiLCJQb3NzaWJseVdlYWtTZXQiLCJQb3NzaWJseVdlYWtNYXAiLCJXZWFrTWFwIiwiY3JlYXRlUm9vdEVycm9yVXBkYXRlIiwib25VbmNhdWdodEVycm9yIiwiY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZSIsImNvbXBvbmVudERpZENhdGNoIiwibWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZCIsImF0dGFjaFBpbmdMaXN0ZW5lciIsInRocmVhZElEcyIsInBpbmciLCJwaW5nU3VzcGVuZGVkUm9vdCIsInRocm93RXhjZXB0aW9uIiwic291cmNlRmliZXIiLCJfd29ya0luUHJvZ3Jlc3MiLCJlYXJsaWVzdFRpbWVvdXRNcyIsInN0YXJ0VGltZU1zIiwidGltZW91dFByb3BNcyIsIm1heER1cmF0aW9uIiwiY3VycmVudFNvdXJjZUZpYmVyIiwiYWJzb2x1dGVUaW1lb3V0TXMiLCJlYXJsaWVzdEV4cGlyYXRpb25UaW1lTXMiLCJyZW5kZXJEaWRTdXNwZW5kIiwicmVuZGVyRGlkRXJyb3IiLCJfZXJyb3JJbmZvIiwiaXNBbHJlYWR5RmFpbGVkTGVnYWN5RXJyb3JCb3VuZGFyeSIsInVud2luZFdvcmsiLCJfZWZmZWN0VGFnIiwiX2VmZmVjdFRhZzIiLCJfZWZmZWN0VGFnMyIsInVud2luZEludGVycnVwdGVkV29yayIsImludGVycnVwdGVkV29yayIsIlJlYWN0Q3VycmVudE93bmVyJDIiLCJkaWRXYXJuQWJvdXRTdGF0ZVRyYW5zaXRpb24iLCJkaWRXYXJuU2V0U3RhdGVDaGlsZENvbnRleHQiLCJ3YXJuQWJvdXRVcGRhdGVPblVubW91bnRlZCIsIndhcm5BYm91dEludmFsaWRVcGRhdGVzIiwiX19pbnRlcmFjdGlvbnNSZWYiLCJkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnQiLCJpc0NsYXNzIiwibGFzdFVuaXF1ZUFzeW5jRXhwaXJhdGlvbiIsImlzV29ya2luZyIsIm5leHRSb290IiwibmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zIiwibmV4dFJlbmRlckRpZEVycm9yIiwiaXNDb21taXR0aW5nJDEiLCJyb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyIsInBhc3NpdmVFZmZlY3RDYWxsYmFja0hhbmRsZSIsInBhc3NpdmVFZmZlY3RDYWxsYmFjayIsImxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkIiwic3Rhc2hlZFdvcmtJblByb2dyZXNzUHJvcGVydGllcyIsInJlcGxheVVuaXRPZldvcmsiLCJtYXlSZXBsYXlGYWlsZWRVbml0T2ZXb3JrIiwiaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrIiwib3JpZ2luYWxSZXBsYXlFcnJvciIsInJldGhyb3dPcmlnaW5hbEVycm9yIiwiZmFpbGVkVW5pdE9mV29yayIsInRocm93blZhbHVlIiwiaXNZaWVsZHkiLCJ3b3JrTG9vcCIsInJlcGxheUVycm9yIiwicmVzZXRTdGFjayIsImNvbW1pdEFsbEhvc3RFZmZlY3RzIiwicHJpbWFyeUVmZmVjdFRhZyIsIl9jdXJyZW50MiIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZWN5Y2xlcyIsImNvbW1pdEFsbExpZmVDeWNsZXMiLCJjb21taXRQYXNzaXZlRWZmZWN0cyIsInByZXZpb3VzSXNSZW5kZXJpbmciLCJpc1JlbmRlcmluZyIsInJvb3RFeHBpcmF0aW9uVGltZSIsInJlcXVlc3RXb3JrIiwiaXNCYXRjaGluZ1VwZGF0ZXMiLCJwZXJmb3JtU3luY1dvcmsiLCJjb21taXRSb290IiwidXBkYXRlRXhwaXJhdGlvblRpbWVCZWZvcmVDb21taXQiLCJjaGlsZEV4cGlyYXRpb25UaW1lQmVmb3JlQ29tbWl0IiwiZWFybGllc3RSZW1haW5pbmdUaW1lQmVmb3JlQ29tbWl0IiwicHJldkludGVyYWN0aW9ucyIsIl9kaWRFcnJvciIsIl9lcnJvciIsIl9kaWRFcnJvcjIiLCJfZXJyb3IyIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJvbkNvbW1pdFdvcmsiLCJ1cGRhdGVFeHBpcmF0aW9uVGltZUFmdGVyQ29tbWl0IiwiY2hpbGRFeHBpcmF0aW9uVGltZUFmdGVyQ29tbWl0IiwiZWFybGllc3RSZW1haW5pbmdUaW1lQWZ0ZXJDb21taXQiLCJvbkNvbW1pdCIsInN1YnNjcmliZXIiLCJfX3N1YnNjcmliZXJSZWYiLCJ0aHJlYWRJRCIsImNvbXB1dGVUaHJlYWRJRCIsIm9uV29ya1N0b3BwZWQiLCJoYXNVbmhhbmRsZWRFcnJvciIsInVuaGFuZGxlZEVycm9yIiwic2NoZWR1bGVkSW50ZXJhY3Rpb25zIiwic2NoZWR1bGVkRXhwaXJhdGlvblRpbWUiLCJpbnRlcmFjdGlvbiIsIl9fY291bnQiLCJvbkludGVyYWN0aW9uU2NoZWR1bGVkV29ya0NvbXBsZXRlZCIsInJlc2V0Q2hpbGRFeHBpcmF0aW9uVGltZSIsInJlbmRlclRpbWUiLCJuZXdDaGlsZEV4cGlyYXRpb25UaW1lIiwic2hvdWxkQnViYmxlQWN0dWFsRHVyYXRpb25zIiwiY2hpbGRVcGRhdGVFeHBpcmF0aW9uVGltZSIsImNoaWxkQ2hpbGRFeHBpcmF0aW9uVGltZSIsIl9jaGlsZFVwZGF0ZUV4cGlyYXRpb25UaW1lIiwiX2NoaWxkQ2hpbGRFeHBpcmF0aW9uVGltZSIsImNvbXBsZXRlVW5pdE9mV29yayIsInNpYmxpbmdGaWJlciIsIm9uQ29tcGxldGVXb3JrIiwicGVyZm9ybVVuaXRPZldvcmsiLCJvbkJlZ2luV29yayIsInNob3VsZFlpZWxkVG9SZW5kZXJlciIsInJlbmRlclJvb3QiLCJwcmV2aW91c0Rpc3BhdGNoZXIiLCJpbnRlcmFjdGlvbnMiLCJvbldvcmtTdGFydGVkIiwiZGlkRmF0YWwiLCJtYXlSZXBsYXkiLCJfZGlkQ29tcGxldGVSb290Iiwib25GYXRhbCIsIl9kaWRDb21wbGV0ZVJvb3QyIiwib25ZaWVsZCIsInJvb3RXb3JrSW5Qcm9ncmVzcyIsInN1c3BlbmRlZEV4cGlyYXRpb25UaW1lIiwib25TdXNwZW5kIiwiX3N1c3BlbmRlZEV4cGlyYXRpb25UaW1lIiwiX3Jvb3RFeHBpcmF0aW9uVGltZSIsIl9zdXNwZW5kZWRFeHBpcmF0aW9uVGltZTIiLCJjdXJyZW50VGltZU1zIiwibXNVbnRpbFRpbWVvdXQiLCJfcm9vdEV4cGlyYXRpb25UaW1lMiIsIm9uQ29tcGxldGUiLCJyb290RmliZXIiLCJfZXJyb3JJbmZvMiIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJsb3dlc3RQcmlvcml0eVBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lIiwicGluZ1RpbWUiLCJib3VuZGFyeUZpYmVyIiwicmV0cnlUaW1lIiwic2NoZWR1bGVXb3JrVG9Sb290IiwicGVuZGluZ0ludGVyYWN0aW9ucyIsIm9uV29ya1NjaGVkdWxlZCIsIm5lc3RlZFVwZGF0ZUNvdW50IiwiTkVTVEVEX1VQREFURV9MSU1JVCIsInN5bmNVcGRhdGVzIiwiZmlyc3RTY2hlZHVsZWRSb290IiwibGFzdFNjaGVkdWxlZFJvb3QiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tJRCIsIm5leHRGbHVzaGVkUm9vdCIsIm5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUiLCJpc1VuYmF0Y2hpbmdVcGRhdGVzIiwiY29tcGxldGVkQmF0Y2hlcyIsIm9yaWdpbmFsU3RhcnRUaW1lTXMiLCJjdXJyZW50UmVuZGVyZXJUaW1lIiwiY3VycmVudFNjaGVkdWxlclRpbWUiLCJsYXN0Q29tbWl0dGVkUm9vdER1cmluZ1RoaXNCYXRjaCIsInJlY29tcHV0ZUN1cnJlbnRSZW5kZXJlclRpbWUiLCJzY2hlZHVsZUNhbGxiYWNrV2l0aEV4cGlyYXRpb25UaW1lIiwiY3VycmVudE1zIiwiZXhwaXJhdGlvblRpbWVNcyIsInBlcmZvcm1Bc3luY1dvcmsiLCJvblRpbWVvdXQiLCJmbHVzaFJvb3QiLCJmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCIsImFkZFJvb3RUb1NjaGVkdWxlIiwicGVyZm9ybVdvcmtPblJvb3QiLCJoaWdoZXN0UHJpb3JpdHlXb3JrIiwiaGlnaGVzdFByaW9yaXR5Um9vdCIsInByZXZpb3VzU2NoZWR1bGVkUm9vdCIsImRpZFlpZWxkIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJwZXJmb3JtV29yayIsIm1pbkV4cGlyYXRpb25UaW1lIiwiZmluaXNoUmVuZGVyaW5nIiwiYmF0Y2hlcyIsImJhdGNoIiwiX29uQ29tcGxldGUiLCJjb21wbGV0ZVJvb3QiLCJfZmluaXNoZWRXb3JrIiwiX3RpbWVvdXRIYW5kbGUiLCJfZGVmZXIiLCJiYXRjaGVkVXBkYXRlcyQxIiwicHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcyIsInVuYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMkMSIsImZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzJDEiLCJmbHVzaENvbnRyb2xsZWQiLCJkaWRXYXJuQWJvdXROZXN0ZWRVcGRhdGVzIiwiZGlkV2FybkFib3V0RmluZE5vZGVJblN0cmljdE1vZGUiLCJnZXRDb250ZXh0Rm9yU3VidHJlZSIsInBhcmVudENvbXBvbmVudCIsInNjaGVkdWxlUm9vdFVwZGF0ZSIsInVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUiLCJvbk1vdW50Q29udGFpbmVyIiwib25Vbm1vdW50Q29udGFpbmVyIiwib25VcGRhdGVDb250YWluZXIiLCJmaW5kSG9zdEluc3RhbmNlIiwiaG9zdEZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhXYXJuaW5nIiwibWV0aG9kTmFtZSIsImNyZWF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lciIsImdldFB1YmxpY1Jvb3RJbnN0YW5jZSIsImNvbnRhaW5lckZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJvdmVycmlkZVByb3BzIiwiY29weVdpdGhTZXRJbXBsIiwiaWR4IiwidXBkYXRlZCIsImNvcHlXaXRoU2V0IiwiaW5qZWN0SW50b0RldlRvb2xzIiwiZGV2VG9vbHNDb25maWciLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJjcmVhdGVQb3J0YWwkMSIsIlJlYWN0VmVyc2lvbiIsInRvcExldmVsVXBkYXRlV2FybmluZ3MiLCJ3YXJuT25JbnZhbGlkQ2FsbGJhY2siLCJkaWRXYXJuQWJvdXRVbnN0YWJsZUNyZWF0ZVBvcnRhbCIsImhvc3RJbnN0YW5jZSIsIl9pbnRlcm5hbFJvb3QiLCJpc1Jvb3RSZW5kZXJlZEJ5U29tZVJlYWN0Iiwicm9vdEVsIiwiZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyIiwiaGFzTm9uUm9vdFJlYWN0Q2hpbGQiLCJSZWFjdEJhdGNoIiwiX3Jvb3QiLCJfbmV4dCIsIl9jYWxsYmFja3MiLCJfZGlkQ29tcGxldGUiLCJfaGFzQ2hpbGRyZW4iLCJfY2hpbGRyZW4iLCJpbnRlcm5hbFJvb3QiLCJ3b3JrIiwiUmVhY3RXb3JrIiwiX29uQ29tbWl0IiwiY2FsbGJhY2tzIiwiY29tbWl0IiwicHJldmlvdXMiLCJfZGlkQ29tbWl0IiwiUmVhY3RSb290IiwidW5tb3VudCIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNyZWF0ZUJhdGNoIiwiaW5zZXJ0QWZ0ZXIiLCJpc1ZhbGlkQ29udGFpbmVyIiwic2hvdWxkSHlkcmF0ZUR1ZVRvTGVnYWN5SGV1cmlzdGljIiwicm9vdEVsZW1lbnQiLCJ3YXJuZWRBYm91dEh5ZHJhdGVBUEkiLCJsZWdhY3lDcmVhdGVSb290RnJvbURPTUNvbnRhaW5lciIsImZvcmNlSHlkcmF0ZSIsInNob3VsZEh5ZHJhdGUiLCJ3YXJuZWQiLCJyb290U2libGluZyIsImxlZ2FjeVJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwib3JpZ2luYWxDYWxsYmFjayIsIl9vcmlnaW5hbENhbGxiYWNrIiwiY3JlYXRlUG9ydGFsJCQxIiwiUmVhY3RET00iLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImNvbXBvbmVudE9yRWxlbWVudCIsIndhcm5lZEFib3V0UmVmc0luUmVuZGVyIiwiX3JlYWN0SGFzQmVlblBhc3NlZFRvQ3JlYXRlUm9vdERFViIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY29udGFpbmVyTm9kZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJyZW5kZXJlZEJ5RGlmZmVyZW50UmVhY3QiLCJfcm9vdEVsIiwiaXNDb250YWluZXJSZWFjdFJvb3QiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJjcmVhdGVSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZm91bmREZXZUb29scyIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwic2VsZiIsIlJlYWN0RE9NJDIiLCJSZWFjdERPTSQzIiwicmVhY3REb20iLCJhYSIsImJhIiwiY2EiLCJtIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJsYSIsIm1hIiwibmEiLCJvYSIsInBhIiwicWEiLCJyYSIsInNhIiwidGEiLCJ2YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsIlVhIiwiVmEiLCJXYSIsIlhhIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsInBiIiwicWIiLCJyYiIsInNiIiwidGIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwib2MiLCJwYyIsInFjIiwiQyIsIkQiLCJyYyIsInNjIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJWYyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJkZCIsImVkIiwiZmQiLCJnZCIsImhkIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwicGQiLCJxZCIsInJkIiwic2QiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsInhkIiwieWQiLCJ6ZCIsIkFkIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJMZCIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiQSIsInAiLCJ0IiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwib25TZWxlY3QiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwibWUiLCJuZSIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJibHVyIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsIkYiLCJHIiwiSGUiLCJIIiwiSSIsIkllIiwiSmUiLCJKIiwiS2UiLCJMZSIsIk1lIiwiTmUiLCJPZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIksiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsIkwiLCJoZiIsImpmIiwia2YiLCJ0ZiIsImxmIiwibWYiLCJuZiIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInZmIiwiTSIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwicSIsInUiLCJCIiwidyIsIlIiLCJEZiIsIkVmIiwiRmYiLCJOIiwiR2YiLCJIZiIsIklmIiwiSmYiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiTyIsIlAiLCJZZiIsIlEiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJ6ZyIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiUyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJTZyIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIlQiLCJMaCIsIlUiLCJNaCIsIk5oIiwiViIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlciLCJYaCIsIlgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJZIiwibWkiLCJuaSIsIm9pIiwiWiIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJKaSIsIktpIiwiTGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJTaSIsIlRpIiwiVmkiLCJVaSIsIldpIiwiWGkiLCJSRUFDVF9BU1lOQ19NT0RFX1RZUEUiLCJ0eXBlT2YiLCIkJHR5cGVvZlR5cGUiLCJBc3luY01vZGUiLCJFbGVtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJTdXNwZW5zZSIsImhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIm1lbWJlciIsInN1YnMiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwiaXNFeGFjdCIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsIk1lbW9yeVJvdXRlciIsIkxpZmVjeWNsZSIsIm9uTW91bnQiLCJvblVubW91bnQiLCJQcm9tcHQiLCJfcmVmJHdoZW4iLCJ3aGVuIiwiY29udGV4dCQkMSIsIm1lc3NhZ2VUeXBlIiwiY2FjaGUiLCJjYWNoZUxpbWl0IiwiY2FjaGVDb3VudCIsImNvbXBpbGVQYXRoIiwiZ2VuZXJhdG9yIiwicGF0aFRvUmVnZXhwIiwiY29tcGlsZSIsImdlbmVyYXRlUGF0aCIsInByZXR0eSIsIlJlZGlyZWN0IiwiY29tcHV0ZWRNYXRjaCIsIl9yZWYkcHVzaCIsImNhY2hlJDEiLCJjYWNoZUxpbWl0JDEiLCJjYWNoZUNvdW50JDEiLCJjb21waWxlUGF0aCQxIiwic2Vuc2l0aXZlIiwicGF0aENhY2hlIiwicmVnZXhwIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInBhdGhzIiwicmVkdWNlIiwibWF0Y2hlZCIsIl9jb21waWxlUGF0aCIsImV4ZWMiLCJtZW1vIiwiaXNFbXB0eUNoaWxkcmVuIiwiUm91dGUiLCJhZGRCYXNlbmFtZSIsImNyZWF0ZVVSTCIsInN0YXRpY0hhbmRsZXIiLCJTdGF0aWNSb3V0ZXIiLCJoYW5kbGVQdXNoIiwibmF2aWdhdGVUbyIsImhhbmRsZVJlcGxhY2UiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIl90aGlzJHByb3BzJGJhc2VuYW1lIiwiX3RoaXMkcHJvcHMkY29udGV4dCIsIl90aGlzJHByb3BzMiIsIl90aGlzJHByb3BzMiRiYXNlbmFtZSIsIl90aGlzJHByb3BzMiRjb250ZXh0IiwiX3RoaXMkcHJvcHMyJGxvY2F0aW9uIiwiU3dpdGNoIiwiY2xvbmVFbGVtZW50Iiwid2l0aFJvdXRlciIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIldyYXBwZWRDb21wb25lbnQiLCJidWlsZE5hbWVzIiwiY2pzIiwiZXNtIiwidW1kIiwiaW5pdGlhbEJ1aWxkTmFtZSIsInNlY29uZGFyeUJ1aWxkTmFtZSIsImlzYXJyYXkiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJyZXMiLCJlc2NhcGVkIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsImVuY29kZUFzdGVyaXNrIiwibWF0Y2hlcyIsIm9wdHMiLCJzZWdtZW50IiwiaiIsImF0dGFjaEtleXMiLCJmbGFncyIsInJlZ2V4cFRvUmVnZXhwIiwiZ3JvdXBzIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsIndhcm5Ob29wIiwicHVibGljSW5zdGFuY2UiLCJfY29uc3RydWN0b3IiLCJSZWFjdE5vb3BVcGRhdGVRdWV1ZSIsImNvbXBsZXRlU3RhdGUiLCJlbXB0eU9iamVjdCIsImZvcmNlVXBkYXRlIiwiZGVwcmVjYXRlZEFQSXMiLCJkZWZpbmVEZXByZWNhdGlvbldhcm5pbmciLCJmbk5hbWUiLCJDb21wb25lbnREdW1teSIsIlB1cmVDb21wb25lbnQiLCJwdXJlQ29tcG9uZW50UHJvdG90eXBlIiwiY3JlYXRlUmVmIiwiY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQiLCJzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCIsIlJlYWN0Q29tcG9uZW50VHJlZUhvb2siLCJSRVNFUlZFRF9QUk9QUyIsIl9fc2VsZiIsIl9fc291cmNlIiwic3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24iLCJzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biIsImhhc1ZhbGlkUmVmIiwiZ2V0dGVyIiwiaXNSZWFjdFdhcm5pbmciLCJoYXNWYWxpZEtleSIsImRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyIiwid2FybkFib3V0QWNjZXNzaW5nS2V5IiwiZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIiLCJ3YXJuQWJvdXRBY2Nlc3NpbmdSZWYiLCJSZWFjdEVsZW1lbnQiLCJ3cml0YWJsZSIsImNoaWxkcmVuTGVuZ3RoIiwiY2hpbGRBcnJheSIsImNsb25lQW5kUmVwbGFjZUtleSIsIm9sZEVsZW1lbnQiLCJuZXdLZXkiLCJuZXdFbGVtZW50IiwiX3NlbGYiLCJTRVBBUkFUT1IiLCJTVUJTRVBBUkFUT1IiLCJlc2NhcGUiLCJlc2NhcGVSZWdleCIsImVzY2FwZXJMb29rdXAiLCJlc2NhcGVkU3RyaW5nIiwidXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgiLCJlc2NhcGVVc2VyUHJvdmlkZWRLZXkiLCJQT09MX1NJWkUiLCJ0cmF2ZXJzZUNvbnRleHRQb29sIiwiZ2V0UG9vbGVkVHJhdmVyc2VDb250ZXh0IiwibWFwUmVzdWx0Iiwia2V5UHJlZml4IiwibWFwRnVuY3Rpb24iLCJtYXBDb250ZXh0IiwidHJhdmVyc2VDb250ZXh0IiwicmVsZWFzZVRyYXZlcnNlQ29udGV4dCIsInRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsIiwibmFtZVNvRmFyIiwiaW52b2tlQ2FsbGJhY2siLCJnZXRDb21wb25lbnRLZXkiLCJuZXh0TmFtZSIsInN1YnRyZWVDb3VudCIsIm5leHROYW1lUHJlZml4IiwiY2hpbGRyZW5TdHJpbmciLCJ0cmF2ZXJzZUFsbENoaWxkcmVuIiwiZm9yRWFjaFNpbmdsZUNoaWxkIiwiZm9yRWFjaENoaWxkcmVuIiwiZm9yRWFjaEZ1bmMiLCJmb3JFYWNoQ29udGV4dCIsIm1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQiLCJjaGlsZEtleSIsIm1hcHBlZENoaWxkIiwibWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCIsImVzY2FwZWRQcmVmaXgiLCJtYXBDaGlsZHJlbiIsImNvdW50Q2hpbGRyZW4iLCJ0b0FycmF5IiwiX3RocmVhZENvdW50IiwiaGFzV2FybmVkQWJvdXRVc2luZ05lc3RlZENvbnRleHRDb25zdW1lcnMiLCJoYXNXYXJuZWRBYm91dFVzaW5nQ29uc3VtZXJQcm92aWRlciIsImRlZmluZVByb3BlcnRpZXMiLCJfUHJvdmlkZXIiLCJsYXp5IiwibGF6eVR5cGUiLCJuZXdEZWZhdWx0UHJvcHMiLCJuZXdQcm9wVHlwZXMiLCJmb3J3YXJkUmVmIiwicmVzb2x2ZURpc3BhdGNoZXIiLCJkaXNwYXRjaGVyIiwiQ29udGV4dCIsInJlYWxDb250ZXh0IiwiaW5wdXRzIiwicHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24iLCJnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bSIsImVsZW1lbnRQcm9wcyIsImdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8iLCJwYXJlbnROYW1lIiwidmFsaWRhdGVFeHBsaWNpdEtleSIsImNoaWxkT3duZXIiLCJ2YWxpZGF0ZUNoaWxkS2V5cyIsInZhbGlkYXRlUHJvcFR5cGVzIiwidmFsaWRhdGVGcmFnbWVudFByb3BzIiwiY3JlYXRlRWxlbWVudFdpdGhWYWxpZGF0aW9uIiwidmFsaWRUeXBlIiwidHlwZVN0cmluZyIsImNyZWF0ZUZhY3RvcnlXaXRoVmFsaWRhdGlvbiIsInZhbGlkYXRlZEZhY3RvcnkiLCJjbG9uZUVsZW1lbnRXaXRoVmFsaWRhdGlvbiIsIm9ubHkiLCJjcmVhdGVGYWN0b3J5IiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsIlJlYWN0JDIiLCJSZWFjdCQzIiwicmVhY3QiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwicmVzb2x2ZVBhdGhuYW1lIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsInVwIiwicGFydCIsIkRFRkFVTFRfVEhSRUFEX0lEIiwiaW50ZXJhY3Rpb25JRENvdW50ZXIiLCJ0aHJlYWRJRENvdW50ZXIiLCJ1bnN0YWJsZV9jbGVhciIsInVuc3RhYmxlX2dldEN1cnJlbnQiLCJ1bnN0YWJsZV90cmFjZSIsInRpbWVzdGFtcCIsIm9uSW50ZXJhY3Rpb25UcmFjZWQiLCJ3cmFwcGVkSW50ZXJhY3Rpb25zIiwiaGFzUnVuIiwid3JhcHBlZCIsIm9uV29ya0NhbmNlbGVkIiwic3Vic2NyaWJlcnMiLCJ1bnN0YWJsZV9zdWJzY3JpYmUiLCJ1bnN0YWJsZV91bnN1YnNjcmliZSIsImRpZENhdGNoRXJyb3IiLCJlbmFibGVTY2hlZHVsZXJEZWJ1Z2dpbmciLCJJbW1lZGlhdGVQcmlvcml0eSIsIlVzZXJCbG9ja2luZ1ByaW9yaXR5IiwiTm9ybWFsUHJpb3JpdHkiLCJMb3dQcmlvcml0eSIsIklkbGVQcmlvcml0eSIsIklNTUVESUFURV9QUklPUklUWV9USU1FT1VUIiwiVVNFUl9CTE9DS0lOR19QUklPUklUWSIsIk5PUk1BTF9QUklPUklUWV9USU1FT1VUIiwiTE9XX1BSSU9SSVRZX1RJTUVPVVQiLCJJRExFX1BSSU9SSVRZIiwiZmlyc3RDYWxsYmFja05vZGUiLCJjdXJyZW50RGlkVGltZW91dCIsImlzU2NoZWR1bGVyUGF1c2VkIiwiY3VycmVudFByaW9yaXR5TGV2ZWwiLCJjdXJyZW50RXZlbnRTdGFydFRpbWUiLCJjdXJyZW50RXhwaXJhdGlvblRpbWUiLCJpc0V4ZWN1dGluZ0NhbGxiYWNrIiwiaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQiLCJoYXNOYXRpdmVQZXJmb3JtYW5jZU5vdyIsImVuc3VyZUhvc3RDYWxsYmFja0lzU2NoZWR1bGVkIiwiY2FuY2VsSG9zdENhbGxiYWNrIiwicmVxdWVzdEhvc3RDYWxsYmFjayIsImZsdXNoV29yayIsImZsdXNoRmlyc3RDYWxsYmFjayIsImZsdXNoZWROb2RlIiwibGFzdENhbGxiYWNrTm9kZSIsInByZXZpb3VzUHJpb3JpdHlMZXZlbCIsInByZXZpb3VzRXhwaXJhdGlvblRpbWUiLCJjb250aW51YXRpb25DYWxsYmFjayIsImNvbnRpbnVhdGlvbk5vZGUiLCJuZXh0QWZ0ZXJDb250aW51YXRpb24iLCJmbHVzaEltbWVkaWF0ZVdvcmsiLCJwcmV2aW91c0RpZFRpbWVvdXQiLCJzaG91bGRZaWVsZFRvSG9zdCIsImV2ZW50SGFuZGxlciIsInByZXZpb3VzRXZlbnRTdGFydFRpbWUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwicGFyZW50UHJpb3JpdHlMZXZlbCIsImRlcHJlY2F0ZWRfb3B0aW9ucyIsInN0YXJ0VGltZSIsIm5ld05vZGUiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJjYWxsYmFja05vZGUiLCJsb2NhbERhdGUiLCJsb2NhbFNldFRpbWVvdXQiLCJsb2NhbENsZWFyVGltZW91dCIsImxvY2FsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibG9jYWxDYW5jZWxBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiQU5JTUFUSU9OX0ZSQU1FX1RJTUVPVVQiLCJyQUZJRCIsInJBRlRpbWVvdXRJRCIsInJlcXVlc3RBbmltYXRpb25GcmFtZVdpdGhUaW1lb3V0IiwiUGVyZm9ybWFuY2UiLCJnbG9iYWxWYWx1ZSIsIl9zY2hlZE1vY2siLCJnbG9iYWxJbXBsIiwiTWVzc2FnZUNoYW5uZWwiLCJfZmx1c2hDYWxsYmFjayIsInNjaGVkdWxlZEhvc3RDYWxsYmFjayIsImlzTWVzc2FnZUV2ZW50U2NoZWR1bGVkIiwidGltZW91dFRpbWUiLCJpc0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVkIiwiaXNGbHVzaGluZ0hvc3RDYWxsYmFjayIsImZyYW1lRGVhZGxpbmUiLCJwcmV2aW91c0ZyYW1lVGltZSIsImFjdGl2ZUZyYW1lVGltZSIsImNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicHJldlNjaGVkdWxlZENhbGxiYWNrIiwicHJldlRpbWVvdXRUaW1lIiwiYW5pbWF0aW9uVGljayIsInJhZlRpbWUiLCJuZXh0RnJhbWVUaW1lIiwicG9zdE1lc3NhZ2UiLCJhYnNvbHV0ZVRpbWVvdXQiLCJfdHlwZW9mIiwidmFsdWVFcXVhbCIsImFUeXBlIiwiYlR5cGUiLCJhVmFsdWUiLCJ2YWx1ZU9mIiwiYlZhbHVlIiwiYUtleXMiLCJiS2V5cyIsInRlYW0iLCJ0bm8iLCJlbWJsZW0iLCJ0ZWFtX25hbWUiLCJwbGF5ZXIiLCJwbm8iLCJwbGF5ZXJfcGljdHVyZSIsInBsYXllcl9udW1iZXIiLCJwbGF5ZXJfbmFtZSIsInBvc2l0aW9uIiwicHAiLCJuYXRpb24iLCJiaXJ0aCIsIndlaWdodCIsImFwcGVhcmFuY2VzIiwiZ29hbHMiLCJ3aW5zIiwibG9zc2VzIiwibG9nIiwic3RhZGl1bSIsImhvbWVQYWdlTGluayIsIm1hdGNoZXNfcGxheSIsImdvYWxzX2NvbmNlZGVkIiwiY2xlYW5fc2hlZXRzIiwiaG9tZV9raXQiLCJhd2F5X2tpdCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDSSwyRUFBSyxLQUFLLEtBQUsxZ0ksS0FBTCxDQUFXdTlDLElBQVgsQ0FBZ0JvakYsUUFBMUIsRUFBb0MsT0FBTSxLQUExQyxFQUFnRCxRQUFPLEtBQXZELEdBREo7QUFFSTtBQUFBO0FBQUE7QUFBRztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUg7QUFGSjtBQURKO0FBOUJKO0FBbENKO0FBREo7QUFESixhQURKO0FBOEVIOzs7O0VBM0dvQnJ2SSxnQjs7a0JBNkdWOFYsVTs7Ozs7Ozs7O0FDakhmOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBQ0E7O0FBRUFzZ0csbUJBQVN6MkcsTUFBVCxDQUFnQiw4QkFBQyxhQUFELE9BQWhCLEVBQXlCbkQsU0FBUzh5SSxjQUFULENBQXdCLE1BQXhCLENBQXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNzIpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDk3NDMyMDViM2ZiMjcxZDFhNDJkIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcHJvY2Vzcy9icm93c2VyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBlcXVhbCB0byBtZXJnZSB3aXRoIHRoZSBkaWZmZXJlbmNlIGJlaW5nIHRoYXQgbm8gcmVmZXJlbmNlXG4gKiB0byBvcmlnaW5hbCBvYmplY3RzIGlzIGtlcHQuXG4gKlxuICogQHNlZSBtZXJnZVxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZGVlcE1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGRlZXBNZXJnZTogZGVlcE1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL3V0aWxzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0L2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvaW5kZXguanMiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWlzL2luZGV4LmpzIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0ICogZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhhc2hIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSGFzaFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaW5rLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCwgaGlzdG9yeSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB0aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhyb3cgZXg7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAhdGhpcy5wcm9wcy50YXJnZXQgfHwgdGhpcy5wcm9wcy50YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5wcm9wcy5yZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QodGhpcy5wcm9wcy50byk7XG4gICAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wcy5pbm5lclJlZixcbiAgICAgICAgcmVwbGFjZSA9IF90aGlzJHByb3BzLnJlcGxhY2UsXG4gICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG8sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaW5uZXJSZWZcIiwgXCJyZXBsYWNlXCIsIFwidG9cIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjb250ZXh0LmxvY2F0aW9uKSA6IHRvO1xuICAgICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGNvbnRleHQuaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVDbGljayhldmVudCwgY29udGV4dC5oaXN0b3J5KTtcbiAgICAgICAgfSxcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgcmVmOiBpbm5lclJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSk7XG4gIHZhciBpbm5lclJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiBpbm5lclJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG5mdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiXSk7XG5cbiAgdmFyIHBhdGggPSB0eXBlb2YgdG8gPT09IFwib2JqZWN0XCIgPyB0by5wYXRobmFtZSA6IHRvOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHBhdGhUb01hdGNoID0gbG9jYXRpb25Qcm9wID8gbG9jYXRpb25Qcm9wLnBhdGhuYW1lIDogY29udGV4dC5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChwYXRoVG9NYXRjaCwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdFxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3AgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGNvbnRleHQubG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwgYWN0aXZlU3R5bGUpIDogc3R5bGVQcm9wO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b1xuICAgIH0sIHJlc3QpKTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFpc1Byb2R1Y3Rpb24pIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHQgPSBcIldhcm5pbmc6IFwiICsgbWVzc2FnZTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2Fybih0ZXh0KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IodGV4dCk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3YXJuaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi90aW55LXdhcm5pbmcvZGlzdC90aW55LXdhcm5pbmcuZXNtLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCB0aGUgdmFsdWVzIG1hdGNoIHdpdGggdGhlIHR5cGUgc3BlY3MuXG4gKiBFcnJvciBtZXNzYWdlcyBhcmUgbWVtb3JpemVkIGFuZCB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdHlwZVNwZWNzIE1hcCBvZiBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyBSdW50aW1lIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgdHlwZS1jaGVja2VkXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHs/RnVuY3Rpb259IGdldFN0YWNrIFJldHVybnMgdGhlIGNvbXBvbmVudCBzdGFjay5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgY29tcG9uZW50TmFtZSwgZ2V0U3RhY2spIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgICBpZiAoaGFzKHR5cGVTcGVjcywgdHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoXG4gICAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogJyArIGxvY2F0aW9uICsgJyB0eXBlIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgJyArXG4gICAgICAgICAgICAgICdpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgJyArIHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSArICdgLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJyArXG4gICAgICAgICAgICBsb2NhdGlvbiArICcgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgK1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcgKyB0eXBlb2YgZXJyb3IgKyAnLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgK1xuICAgICAgICAgICAgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ZhaWxlZCAnICsgbG9jYXRpb24gKyAnIHR5cGU6ICcgKyBlcnJvci5tZXNzYWdlICsgKHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXNldHMgd2FybmluZyBjYWNoZSB3aGVuIHRlc3RpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2hlY2tQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUHJvcFR5cGVzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2luZGV4LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdXRpbHMuZm9yRWFjaChbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXSwgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXSwgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdtYXhDb250ZW50TGVuZ3RoJyxcbiAgICAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJyxcbiAgICAnc29ja2V0UGF0aCdcbiAgXSwgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIC8vIE9ubHkgTm9kZS5KUyBoYXMgYSBwcm9jZXNzIHZhcmlhYmxlIHRoYXQgaXMgb2YgW1tDbGFzc11dIHByb2Nlc3NcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgd2FybkFib3V0RGVwcmVjYXRlZEVTTUltcG9ydCBmcm9tIFwiLi93YXJuQWJvdXREZXByZWNhdGVkRVNNSW1wb3J0LmpzXCI7XG53YXJuQWJvdXREZXByZWNhdGVkRVNNSW1wb3J0KFwiTmF2TGlua1wiKTtcblxuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gXCIuLi9lc20vcmVhY3Qtcm91dGVyLWRvbS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgTmF2TGluaztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc2NoZWR1bGVyL2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vaW5kZXguanMiLCJpbXBvcnQgUmVhY3Qse0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7QnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsUm91dGUsU3dpdGNofSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IEhvbWUgZnJvbSBcIi4vY29tcG9uZW50L0hvbWVcIjtcbmltcG9ydCBUZWFtRGV0YWlsIGZyb20gXCIuL2NvbXBvbmVudC9UZWFtRGV0YWlsXCI7XG5pbXBvcnQgUGxheWVyIGZyb20gXCIuL2NvbXBvbmVudC9QbGF5ZXJcIlxuaW1wb3J0IFBsYXllckRldGFpbCBmcm9tICcuL2NvbXBvbmVudC9QbGF5ZXJEZXRhaWwnO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnR7XG4gIHJlbmRlcigpXG4gIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8Um91dGVyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD17XCIvXCJ9IGNvbXBvbmVudD17SG9tZX0gLz5cbiAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD17XCIvZGV0YWlsLzp0bm9cIn0gY29tcG9uZW50PXtUZWFtRGV0YWlsfS8+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9e1wiL3BsYXllci86dG5vXCJ9IGNvbXBvbmVudD17UGxheWVyfS8+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9e1wiL3BsYXllcl9kZXRhaWwvOnRuby86cG5vXCJ9IGNvbXBvbmVudD17UGxheWVyRGV0YWlsfS8+XG4gICAgICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvUm91dGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0FwcC5qcyIsImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2F4aW9zLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kID8gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpIDogJ2dldCc7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIi8vIEBmbG93XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsW2tleV0gPSAoZ2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZ3VkL2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgICBpZiAoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICAgIH1cbiAgICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pcy1idWZmZXIvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGd1ZCBmcm9tICdndWQnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGd1ZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbnZhciBjaGVja1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vY2hlY2tQcm9wVHlwZXMnKTtcblxudmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gICAqXG4gICAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICAgKlxuICAgKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICAgKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICAgKiAgICAgICAuLi5cbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAgICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAgICpcbiAgICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICAgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICAgKlxuICAgKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gICAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAgICpcbiAgICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gICAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAgICogICAgIH0sXG4gICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gICAqXG4gICAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuICAgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAgICpcbiAgICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuICAgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gICAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAgICogICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAqICAgICAgICAgICk7XG4gICAqICAgICAgICB9XG4gICAqICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAgICogIH0pO1xuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgdmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICAgIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICAgIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICAgIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICAgIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICAgIHN5bWJvbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N5bWJvbCcpLFxuXG4gICAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgICBlbGVtZW50VHlwZTogY3JlYXRlRWxlbWVudFR5cGVUeXBlQ2hlY2tlcigpLFxuICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gICAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICAgIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcixcbiAgICBleGFjdDogY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcixcbiAgfTtcblxuICAvKipcbiAgICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICovXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9cbiAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSovXG5cbiAgLyoqXG4gICAqIFdlIHVzZSBhbiBFcnJvci1saWtlIG9iamVjdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhcyBwZW9wbGUgbWF5IGNhbGxcbiAgICogUHJvcFR5cGVzIGRpcmVjdGx5IGFuZCBpbnNwZWN0IHRoZWlyIG91dHB1dC4gSG93ZXZlciwgd2UgZG9uJ3QgdXNlIHJlYWxcbiAgICogRXJyb3JzIGFueW1vcmUuIFdlIGRvbid0IGluc3BlY3QgdGhlaXIgc3RhY2sgYW55d2F5LCBhbmQgY3JlYXRpbmcgdGhlbVxuICAgKiBpcyBwcm9oaWJpdGl2ZWx5IGV4cGVuc2l2ZSBpZiB0aGV5IGFyZSBjcmVhdGVkIHRvbyBvZnRlbiwgc3VjaCBhcyB3aGF0XG4gICAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5zdGFjayA9ICcnO1xuICB9XG4gIC8vIE1ha2UgYGluc3RhbmNlb2YgRXJyb3JgIHN0aWxsIHdvcmsgZm9yIHJldHVybmVkIGVycm9ycy5cbiAgUHJvcFR5cGVFcnJvci5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlID0ge307XG4gICAgICB2YXIgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPSAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgICAgaWYgKHNlY3JldCAhPT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgICAgaWYgKHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgICAgICAgICAvLyBOZXcgYmVoYXZpb3Igb25seSBmb3IgdXNlcnMgb2YgYHByb3AtdHlwZXNgIHBhY2thZ2VcbiAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgICAgICAgJ1VzZSBgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKClgIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAgICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICAgICAgICApO1xuICAgICAgICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIE9sZCBiZWhhdmlvciBmb3IgcGVvcGxlIHVzaW5nIFJlYWN0LlByb3BUeXBlc1xuICAgICAgICAgIHZhciBjYWNoZUtleSA9IGNvbXBvbmVudE5hbWUgKyAnOicgKyBwcm9wTmFtZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldICYmXG4gICAgICAgICAgICAvLyBBdm9pZCBzcGFtbWluZyB0aGUgY29uc29sZSBiZWNhdXNlIHRoZXkgYXJlIG9mdGVuIG5vdCBhY3Rpb25hYmxlIGV4Y2VwdCBmb3IgbGliIGF1dGhvcnNcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50IDwgM1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgICAnWW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGEgUmVhY3QuUHJvcFR5cGVzIHZhbGlkYXRpb24gJyArXG4gICAgICAgICAgICAgICdmdW5jdGlvbiBmb3IgdGhlIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgcHJvcCBvbiBgJyArIGNvbXBvbmVudE5hbWUgICsgJ2AuIFRoaXMgaXMgZGVwcmVjYXRlZCAnICtcbiAgICAgICAgICAgICAgJ2FuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICAgICAgICAgJ1lvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8gYSB0aGlyZC1wYXJ0eSBQcm9wVHlwZXMgJyArXG4gICAgICAgICAgICAgICdsaWJyYXJ5LiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWRvbnQtY2FsbC1wcm9wdHlwZXMgJyArICdmb3IgZGV0YWlscy4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGBudWxsYC4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gICAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgIC8vIGBwcm9wVmFsdWVgIGJlaW5nIGluc3RhbmNlIG9mLCBzYXksIGRhdGUvcmVnZXhwLCBwYXNzIHRoZSAnb2JqZWN0J1xuICAgICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByZWNpc2VUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdgJyArIGV4cGVjdGVkVHlwZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignUHJvcGVydHkgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiBjb21wb25lbnQgYCcgKyBjb21wb25lbnROYW1lICsgJ2AgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIGFycmF5T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gYXJyYXkuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJ1snICsgaSArICddJywgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudCB0eXBlLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcihleHBlY3RlZENsYXNzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkge1xuICAgICAgICB2YXIgZXhwZWN0ZWRDbGFzc05hbWUgPSBleHBlY3RlZENsYXNzLm5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgICB2YXIgYWN0dWFsQ2xhc3NOYW1lID0gZ2V0Q2xhc3NOYW1lKHByb3BzW3Byb3BOYW1lXSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIGFjdHVhbENsYXNzTmFtZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnaW5zdGFuY2Ugb2YgYCcgKyBleHBlY3RlZENsYXNzTmFtZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVmFsdWVzKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnRzIHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBhcnJheSwgZ290ICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBhcmd1bWVudHMuICcgK1xuICAgICAgICAgICAgJ0EgY29tbW9uIG1pc3Rha2UgaXMgdG8gd3JpdGUgb25lT2YoeCwgeSwgeikgaW5zdGVhZCBvZiBvbmVPZihbeCwgeSwgel0pLidcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzKHByb3BWYWx1ZSwgZXhwZWN0ZWRWYWx1ZXNbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzLCBmdW5jdGlvbiByZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBTdHJpbmcocHJvcFZhbHVlKSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBvbmUgb2YgJyArIHZhbHVlc1N0cmluZyArICcuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBvYmplY3QuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAoaGFzKHByb3BWYWx1ZSwga2V5KSkge1xuICAgICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5LCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlQ2hlY2tlcihhcnJheU9mVHlwZUNoZWNrZXJzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5T2ZUeXBlQ2hlY2tlcnMpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcHJpbnRXYXJuaW5nKCdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJykgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgY2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcmludFdhcm5pbmcoXG4gICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLiBFeHBlY3RlZCBhbiBhcnJheSBvZiBjaGVjayBmdW5jdGlvbnMsIGJ1dCAnICtcbiAgICAgICAgICAncmVjZWl2ZWQgJyArIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyhjaGVja2VyKSArICcgYXQgaW5kZXggJyArIGkgKyAnLidcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgb2JqZWN0YC4nKSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb21cbiAgICAgIC8vIHByb3BzLlxuICAgICAgdmFyIGFsbEtleXMgPSBhc3NpZ24oe30sIHByb3BzW3Byb3BOYW1lXSwgc2hhcGVUeXBlcyk7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFxuICAgICAgICAgICAgJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGtleSBgJyArIGtleSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLicgK1xuICAgICAgICAgICAgJ1xcbkJhZCBvYmplY3Q6ICcgKyBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpICtcbiAgICAgICAgICAgICdcXG5WYWxpZCBrZXlzOiAnICsgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IGlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcbiAgICAvLyBOYXRpdmUgU3ltYm9sLlxuICAgIGlmIChwcm9wVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIGZhbHN5IHZhbHVlIGNhbid0IGJlIGEgU3ltYm9sXG4gICAgaWYgKCFwcm9wVmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuICAgIGlmIChwcm9wVmFsdWVbJ0BAdG9TdHJpbmdUYWcnXSA9PT0gJ1N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wVmFsdWUgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbiAgZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhblxuICAgICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICAgIHJldHVybiAnb2JqZWN0JztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ3N5bWJvbCc7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbiAgfVxuXG4gIC8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAgLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG4gIGZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJyArIHByb3BWYWx1ZTtcbiAgICB9XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gJ2RhdGUnO1xuICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgcG9zdGZpeGVkIHRvIGEgd2FybmluZyBhYm91dCBhbiBpbnZhbGlkIHR5cGUuXG4gIC8vIEZvciBleGFtcGxlLCBcInVuZGVmaW5lZFwiIG9yIFwib2YgdHlwZSBhcnJheVwiXG4gIGZ1bmN0aW9uIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuICdhbiAnICsgdHlwZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICBjYXNlICdyZWdleHAnOlxuICAgICAgICByZXR1cm4gJ2EgJyArIHR5cGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm5zIGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgYW55LlxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG4gICAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICByZXR1cm4gQU5PTllNT1VTO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGNoZWNrUHJvcFR5cGVzO1xuICBSZWFjdFByb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZSA9IGNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWRvbS5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG52YXIgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzJyk7XG52YXIgc2NoZWR1bGVyID0gcmVxdWlyZSgnc2NoZWR1bGVyJyk7XG52YXIgdHJhY2luZyA9IHJlcXVpcmUoJ3NjaGVkdWxlci90cmFjaW5nJyk7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3IgPSB2b2lkIDA7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIFJlbHlpbmcgb24gdGhlIGBpbnZhcmlhbnQoKWAgaW1wbGVtZW50YXRpb24gbGV0cyB1c1xuLy8gcHJlc2VydmUgdGhlIGZvcm1hdCBhbmQgcGFyYW1zIGluIHRoZSB3d3cgYnVpbGRzLlxuXG4hUmVhY3QgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdERPTSB3YXMgbG9hZGVkIGJlZm9yZSBSZWFjdC4gTWFrZSBzdXJlIHlvdSBsb2FkIHRoZSBSZWFjdCBwYWNrYWdlIGJlZm9yZSBsb2FkaW5nIFJlYWN0RE9NLicpIDogdm9pZCAwO1xuXG52YXIgaW52b2tlR3VhcmRlZENhbGxiYWNrSW1wbCA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jLCBjb250ZXh0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBmdW5jQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMyk7XG4gIHRyeSB7XG4gICAgZnVuYy5hcHBseShjb250ZXh0LCBmdW5jQXJncyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhpcy5vbkVycm9yKGVycm9yKTtcbiAgfVxufTtcblxue1xuICAvLyBJbiBERVYgbW9kZSwgd2Ugc3dhcCBvdXQgaW52b2tlR3VhcmRlZENhbGxiYWNrIGZvciBhIHNwZWNpYWwgdmVyc2lvblxuICAvLyB0aGF0IHBsYXlzIG1vcmUgbmljZWx5IHdpdGggdGhlIGJyb3dzZXIncyBEZXZUb29scy4gVGhlIGlkZWEgaXMgdG8gcHJlc2VydmVcbiAgLy8gXCJQYXVzZSBvbiBleGNlcHRpb25zXCIgYmVoYXZpb3IuIEJlY2F1c2UgUmVhY3Qgd3JhcHMgYWxsIHVzZXItcHJvdmlkZWRcbiAgLy8gZnVuY3Rpb25zIGluIGludm9rZUd1YXJkZWRDYWxsYmFjaywgYW5kIHRoZSBwcm9kdWN0aW9uIHZlcnNpb24gb2ZcbiAgLy8gaW52b2tlR3VhcmRlZENhbGxiYWNrIHVzZXMgYSB0cnktY2F0Y2gsIGFsbCB1c2VyIGV4Y2VwdGlvbnMgYXJlIHRyZWF0ZWRcbiAgLy8gbGlrZSBjYXVnaHQgZXhjZXB0aW9ucywgYW5kIHRoZSBEZXZUb29scyB3b24ndCBwYXVzZSB1bmxlc3MgdGhlIGRldmVsb3BlclxuICAvLyB0YWtlcyB0aGUgZXh0cmEgc3RlcCBvZiBlbmFibGluZyBwYXVzZSBvbiBjYXVnaHQgZXhjZXB0aW9ucy4gVGhpcyBpc1xuICAvLyB1bmludHVpdGl2ZSwgdGhvdWdoLCBiZWNhdXNlIGV2ZW4gdGhvdWdoIFJlYWN0IGhhcyBjYXVnaHQgdGhlIGVycm9yLCBmcm9tXG4gIC8vIHRoZSBkZXZlbG9wZXIncyBwZXJzcGVjdGl2ZSwgdGhlIGVycm9yIGlzIHVuY2F1Z2h0LlxuICAvL1xuICAvLyBUbyBwcmVzZXJ2ZSB0aGUgZXhwZWN0ZWQgXCJQYXVzZSBvbiBleGNlcHRpb25zXCIgYmVoYXZpb3IsIHdlIGRvbid0IHVzZSBhXG4gIC8vIHRyeS1jYXRjaCBpbiBERVYuIEluc3RlYWQsIHdlIHN5bmNocm9ub3VzbHkgZGlzcGF0Y2ggYSBmYWtlIGV2ZW50IHRvIGEgZmFrZVxuICAvLyBET00gbm9kZSwgYW5kIGNhbGwgdGhlIHVzZXItcHJvdmlkZWQgY2FsbGJhY2sgZnJvbSBpbnNpZGUgYW4gZXZlbnQgaGFuZGxlclxuICAvLyBmb3IgdGhhdCBmYWtlIGV2ZW50LiBJZiB0aGUgY2FsbGJhY2sgdGhyb3dzLCB0aGUgZXJyb3IgaXMgXCJjYXB0dXJlZFwiIHVzaW5nXG4gIC8vIGEgZ2xvYmFsIGV2ZW50IGhhbmRsZXIuIEJ1dCBiZWNhdXNlIHRoZSBlcnJvciBoYXBwZW5zIGluIGEgZGlmZmVyZW50XG4gIC8vIGV2ZW50IGxvb3AgY29udGV4dCwgaXQgZG9lcyBub3QgaW50ZXJydXB0IHRoZSBub3JtYWwgcHJvZ3JhbSBmbG93LlxuICAvLyBFZmZlY3RpdmVseSwgdGhpcyBnaXZlcyB1cyB0cnktY2F0Y2ggYmVoYXZpb3Igd2l0aG91dCBhY3R1YWxseSB1c2luZ1xuICAvLyB0cnktY2F0Y2guIE5lYXQhXG5cbiAgLy8gQ2hlY2sgdGhhdCB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgQVBJcyB3ZSBuZWVkIHRvIGltcGxlbWVudCBvdXIgc3BlY2lhbFxuICAvLyBERVYgdmVyc2lvbiBvZiBpbnZva2VHdWFyZGVkQ2FsbGJhY2tcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZGlzcGF0Y2hFdmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBmYWtlTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3JlYWN0Jyk7XG5cbiAgICB2YXIgaW52b2tlR3VhcmRlZENhbGxiYWNrRGV2ID0gZnVuY3Rpb24gKG5hbWUsIGZ1bmMsIGNvbnRleHQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgIC8vIElmIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3Qgd2Uga25vdyBmb3Igc3VyZSB3ZSB3aWxsIGNyYXNoIGluIHRoaXMgbWV0aG9kXG4gICAgICAvLyB3aGVuIHdlIGNhbGwgZG9jdW1lbnQuY3JlYXRlRXZlbnQoKS4gSG93ZXZlciB0aGlzIGNhbiBjYXVzZSBjb25mdXNpbmdcbiAgICAgIC8vIGVycm9yczogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29raW5jdWJhdG9yL2NyZWF0ZS1yZWFjdC1hcHAvaXNzdWVzLzM0ODJcbiAgICAgIC8vIFNvIHdlIHByZWVtcHRpdmVseSB0aHJvdyB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UgaW5zdGVhZC5cbiAgICAgICEodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGUgYGRvY3VtZW50YCBnbG9iYWwgd2FzIGRlZmluZWQgd2hlbiBSZWFjdCB3YXMgaW5pdGlhbGl6ZWQsIGJ1dCBpcyBub3QgZGVmaW5lZCBhbnltb3JlLiBUaGlzIGNhbiBoYXBwZW4gaW4gYSB0ZXN0IGVudmlyb25tZW50IGlmIGEgY29tcG9uZW50IHNjaGVkdWxlcyBhbiB1cGRhdGUgZnJvbSBhbiBhc3luY2hyb25vdXMgY2FsbGJhY2ssIGJ1dCB0aGUgdGVzdCBoYXMgYWxyZWFkeSBmaW5pc2hlZCBydW5uaW5nLiBUbyBzb2x2ZSB0aGlzLCB5b3UgY2FuIGVpdGhlciB1bm1vdW50IHRoZSBjb21wb25lbnQgYXQgdGhlIGVuZCBvZiB5b3VyIHRlc3QgKGFuZCBlbnN1cmUgdGhhdCBhbnkgYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMgZ2V0IGNhbmNlbGVkIGluIGBjb21wb25lbnRXaWxsVW5tb3VudGApLCBvciB5b3UgY2FuIGNoYW5nZSB0aGUgdGVzdCBpdHNlbGYgdG8gYmUgYXN5bmNocm9ub3VzLicpIDogdm9pZCAwO1xuICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuXG4gICAgICAvLyBLZWVwcyB0cmFjayBvZiB3aGV0aGVyIHRoZSB1c2VyLXByb3ZpZGVkIGNhbGxiYWNrIHRocmV3IGFuIGVycm9yLiBXZVxuICAgICAgLy8gc2V0IHRoaXMgdG8gdHJ1ZSBhdCB0aGUgYmVnaW5uaW5nLCB0aGVuIHNldCBpdCB0byBmYWxzZSByaWdodCBhZnRlclxuICAgICAgLy8gY2FsbGluZyB0aGUgZnVuY3Rpb24uIElmIHRoZSBmdW5jdGlvbiBlcnJvcnMsIGBkaWRFcnJvcmAgd2lsbCBuZXZlciBiZVxuICAgICAgLy8gc2V0IHRvIGZhbHNlLiBUaGlzIHN0cmF0ZWd5IHdvcmtzIGV2ZW4gaWYgdGhlIGJyb3dzZXIgaXMgZmxha3kgYW5kXG4gICAgICAvLyBmYWlscyB0byBjYWxsIG91ciBnbG9iYWwgZXJyb3IgaGFuZGxlciwgYmVjYXVzZSBpdCBkb2Vzbid0IHJlbHkgb25cbiAgICAgIC8vIHRoZSBlcnJvciBldmVudCBhdCBhbGwuXG4gICAgICB2YXIgZGlkRXJyb3IgPSB0cnVlO1xuXG4gICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgdmFsdWUgb2Ygd2luZG93LmV2ZW50IHNvIHRoYXQgd2UgY2FuIHJlc2V0IGl0XG4gICAgICAvLyBkdXJpbmcgdGhlIGNhbGxiYWNrIHRvIGxldCB1c2VyIGNvZGUgYWNjZXNzIHdpbmRvdy5ldmVudCBpbiB0aGVcbiAgICAgIC8vIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBpdC5cbiAgICAgIHZhciB3aW5kb3dFdmVudCA9IHdpbmRvdy5ldmVudDtcblxuICAgICAgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIGRlc2NyaXB0b3Igb2Ygd2luZG93LmV2ZW50IHRvIHJlc3RvcmUgaXQgYWZ0ZXIgZXZlbnRcbiAgICAgIC8vIGRpc3BhdGNoaW5nOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzNjg4XG4gICAgICB2YXIgd2luZG93RXZlbnREZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3csICdldmVudCcpO1xuXG4gICAgICAvLyBDcmVhdGUgYW4gZXZlbnQgaGFuZGxlciBmb3Igb3VyIGZha2UgZXZlbnQuIFdlIHdpbGwgc3luY2hyb25vdXNseVxuICAgICAgLy8gZGlzcGF0Y2ggb3VyIGZha2UgZXZlbnQgdXNpbmcgYGRpc3BhdGNoRXZlbnRgLiBJbnNpZGUgdGhlIGhhbmRsZXIsIHdlXG4gICAgICAvLyBjYWxsIHRoZSB1c2VyLXByb3ZpZGVkIGNhbGxiYWNrLlxuICAgICAgdmFyIGZ1bmNBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcbiAgICAgIGZ1bmN0aW9uIGNhbGxDYWxsYmFjaygpIHtcbiAgICAgICAgLy8gV2UgaW1tZWRpYXRlbHkgcmVtb3ZlIHRoZSBjYWxsYmFjayBmcm9tIGV2ZW50IGxpc3RlbmVycyBzbyB0aGF0XG4gICAgICAgIC8vIG5lc3RlZCBgaW52b2tlR3VhcmRlZENhbGxiYWNrYCBjYWxscyBkbyBub3QgY2xhc2guIE90aGVyd2lzZSwgYVxuICAgICAgICAvLyBuZXN0ZWQgY2FsbCB3b3VsZCB0cmlnZ2VyIHRoZSBmYWtlIGV2ZW50IGhhbmRsZXJzIG9mIGFueSBjYWxsIGhpZ2hlclxuICAgICAgICAvLyBpbiB0aGUgc3RhY2suXG4gICAgICAgIGZha2VOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgY2FsbENhbGxiYWNrLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gV2UgY2hlY2sgZm9yIHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnZXZlbnQnKSB0byBwcmV2ZW50IHRoZVxuICAgICAgICAvLyB3aW5kb3cuZXZlbnQgYXNzaWdubWVudCBpbiBib3RoIElFIDw9IDEwIGFzIHRoZXkgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgLy8gXCJNZW1iZXIgbm90IGZvdW5kXCIgaW4gc3RyaWN0IG1vZGUsIGFuZCBpbiBGaXJlZm94IHdoaWNoIGRvZXMgbm90XG4gICAgICAgIC8vIHN1cHBvcnQgd2luZG93LmV2ZW50LlxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5ldmVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lmhhc093blByb3BlcnR5KCdldmVudCcpKSB7XG4gICAgICAgICAgd2luZG93LmV2ZW50ID0gd2luZG93RXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGZ1bmNBcmdzKTtcbiAgICAgICAgZGlkRXJyb3IgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGEgZ2xvYmFsIGVycm9yIGV2ZW50IGhhbmRsZXIuIFdlIHVzZSB0aGlzIHRvIGNhcHR1cmUgdGhlIHZhbHVlXG4gICAgICAvLyB0aGF0IHdhcyB0aHJvd24uIEl0J3MgcG9zc2libGUgdGhhdCB0aGlzIGVycm9yIGhhbmRsZXIgd2lsbCBmaXJlIG1vcmVcbiAgICAgIC8vIHRoYW4gb25jZTsgZm9yIGV4YW1wbGUsIGlmIG5vbi1SZWFjdCBjb2RlIGFsc28gY2FsbHMgYGRpc3BhdGNoRXZlbnRgXG4gICAgICAvLyBhbmQgYSBoYW5kbGVyIGZvciB0aGF0IGV2ZW50IHRocm93cy4gV2Ugc2hvdWxkIGJlIHJlc2lsaWVudCB0byBtb3N0IG9mXG4gICAgICAvLyB0aG9zZSBjYXNlcy4gRXZlbiBpZiBvdXIgZXJyb3IgZXZlbnQgaGFuZGxlciBmaXJlcyBtb3JlIHRoYW4gb25jZSwgdGhlXG4gICAgICAvLyBsYXN0IGVycm9yIGV2ZW50IGlzIGFsd2F5cyB1c2VkLiBJZiB0aGUgY2FsbGJhY2sgYWN0dWFsbHkgZG9lcyBlcnJvcixcbiAgICAgIC8vIHdlIGtub3cgdGhhdCB0aGUgbGFzdCBlcnJvciBldmVudCBpcyB0aGUgY29ycmVjdCBvbmUsIGJlY2F1c2UgaXQncyBub3RcbiAgICAgIC8vIHBvc3NpYmxlIGZvciBhbnl0aGluZyBlbHNlIHRvIGhhdmUgaGFwcGVuZWQgaW4gYmV0d2VlbiBvdXIgY2FsbGJhY2tcbiAgICAgIC8vIGVycm9yaW5nIGFuZCB0aGUgY29kZSB0aGF0IGZvbGxvd3MgdGhlIGBkaXNwYXRjaEV2ZW50YCBjYWxsIGJlbG93LiBJZlxuICAgICAgLy8gdGhlIGNhbGxiYWNrIGRvZXNuJ3QgZXJyb3IsIGJ1dCB0aGUgZXJyb3IgZXZlbnQgd2FzIGZpcmVkLCB3ZSBrbm93IHRvXG4gICAgICAvLyBpZ25vcmUgaXQgYmVjYXVzZSBgZGlkRXJyb3JgIHdpbGwgYmUgZmFsc2UsIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICAgIHZhciBlcnJvciA9IHZvaWQgMDtcbiAgICAgIC8vIFVzZSB0aGlzIHRvIHRyYWNrIHdoZXRoZXIgdGhlIGVycm9yIGV2ZW50IGlzIGV2ZXIgY2FsbGVkLlxuICAgICAgdmFyIGRpZFNldEVycm9yID0gZmFsc2U7XG4gICAgICB2YXIgaXNDcm9zc09yaWdpbkVycm9yID0gZmFsc2U7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZVdpbmRvd0Vycm9yKGV2ZW50KSB7XG4gICAgICAgIGVycm9yID0gZXZlbnQuZXJyb3I7XG4gICAgICAgIGRpZFNldEVycm9yID0gdHJ1ZTtcbiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGV2ZW50LmNvbG5vID09PSAwICYmIGV2ZW50LmxpbmVubyA9PT0gMCkge1xuICAgICAgICAgIGlzQ3Jvc3NPcmlnaW5FcnJvciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAvLyBTb21lIG90aGVyIGVycm9yIGhhbmRsZXIgaGFzIHByZXZlbnRlZCBkZWZhdWx0LlxuICAgICAgICAgIC8vIEJyb3dzZXJzIHNpbGVuY2UgdGhlIGVycm9yIHJlcG9ydCBpZiB0aGlzIGhhcHBlbnMuXG4gICAgICAgICAgLy8gV2UnbGwgcmVtZW1iZXIgdGhpcyB0byBsYXRlciBkZWNpZGUgd2hldGhlciB0byBsb2cgaXQgb3Igbm90LlxuICAgICAgICAgIGlmIChlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGVycm9yLl9zdXBwcmVzc0xvZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfSBjYXRjaCAoaW5uZXIpIHtcbiAgICAgICAgICAgICAgLy8gSWdub3JlLlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgYSBmYWtlIGV2ZW50IHR5cGUuXG4gICAgICB2YXIgZXZ0VHlwZSA9ICdyZWFjdC0nICsgKG5hbWUgPyBuYW1lIDogJ2ludm9rZWd1YXJkZWRjYWxsYmFjaycpO1xuXG4gICAgICAvLyBBdHRhY2ggb3VyIGV2ZW50IGhhbmRsZXJzXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBoYW5kbGVXaW5kb3dFcnJvcik7XG4gICAgICBmYWtlTm9kZS5hZGRFdmVudExpc3RlbmVyKGV2dFR5cGUsIGNhbGxDYWxsYmFjaywgZmFsc2UpO1xuXG4gICAgICAvLyBTeW5jaHJvbm91c2x5IGRpc3BhdGNoIG91ciBmYWtlIGV2ZW50LiBJZiB0aGUgdXNlci1wcm92aWRlZCBmdW5jdGlvblxuICAgICAgLy8gZXJyb3JzLCBpdCB3aWxsIHRyaWdnZXIgb3VyIGdsb2JhbCBlcnJvciBoYW5kbGVyLlxuICAgICAgZXZ0LmluaXRFdmVudChldnRUeXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgZmFrZU5vZGUuZGlzcGF0Y2hFdmVudChldnQpO1xuXG4gICAgICBpZiAod2luZG93RXZlbnREZXNjcmlwdG9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdldmVudCcsIHdpbmRvd0V2ZW50RGVzY3JpcHRvcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaWRFcnJvcikge1xuICAgICAgICBpZiAoIWRpZFNldEVycm9yKSB7XG4gICAgICAgICAgLy8gVGhlIGNhbGxiYWNrIGVycm9yZWQsIGJ1dCB0aGUgZXJyb3IgZXZlbnQgbmV2ZXIgZmlyZWQuXG4gICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ0FuIGVycm9yIHdhcyB0aHJvd24gaW5zaWRlIG9uZSBvZiB5b3VyIGNvbXBvbmVudHMsIGJ1dCBSZWFjdCAnICsgXCJkb2Vzbid0IGtub3cgd2hhdCBpdCB3YXMuIFRoaXMgaXMgbGlrZWx5IGR1ZSB0byBicm93c2VyIFwiICsgJ2ZsYWtpbmVzcy4gUmVhY3QgZG9lcyBpdHMgYmVzdCB0byBwcmVzZXJ2ZSB0aGUgXCJQYXVzZSBvbiAnICsgJ2V4Y2VwdGlvbnNcIiBiZWhhdmlvciBvZiB0aGUgRGV2VG9vbHMsIHdoaWNoIHJlcXVpcmVzIHNvbWUgJyArIFwiREVWLW1vZGUgb25seSB0cmlja3MuIEl0J3MgcG9zc2libGUgdGhhdCB0aGVzZSBkb24ndCB3b3JrIGluIFwiICsgJ3lvdXIgYnJvd3Nlci4gVHJ5IHRyaWdnZXJpbmcgdGhlIGVycm9yIGluIHByb2R1Y3Rpb24gbW9kZSwgJyArICdvciBzd2l0Y2hpbmcgdG8gYSBtb2Rlcm4gYnJvd3Nlci4gSWYgeW91IHN1c3BlY3QgdGhhdCB0aGlzIGlzICcgKyAnYWN0dWFsbHkgYW4gaXNzdWUgd2l0aCBSZWFjdCwgcGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNDcm9zc09yaWdpbkVycm9yKSB7XG4gICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXCJBIGNyb3NzLW9yaWdpbiBlcnJvciB3YXMgdGhyb3duLiBSZWFjdCBkb2Vzbid0IGhhdmUgYWNjZXNzIHRvIFwiICsgJ3RoZSBhY3R1YWwgZXJyb3Igb2JqZWN0IGluIGRldmVsb3BtZW50LiAnICsgJ1NlZSBodHRwczovL2ZiLm1lL3JlYWN0LWNyb3Nzb3JpZ2luLWVycm9yIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25FcnJvcihlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBvdXIgZXZlbnQgbGlzdGVuZXJzXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBoYW5kbGVXaW5kb3dFcnJvcik7XG4gICAgfTtcblxuICAgIGludm9rZUd1YXJkZWRDYWxsYmFja0ltcGwgPSBpbnZva2VHdWFyZGVkQ2FsbGJhY2tEZXY7XG4gIH1cbn1cblxudmFyIGludm9rZUd1YXJkZWRDYWxsYmFja0ltcGwkMSA9IGludm9rZUd1YXJkZWRDYWxsYmFja0ltcGw7XG5cbi8vIFVzZWQgYnkgRmliZXIgdG8gc2ltdWxhdGUgYSB0cnktY2F0Y2guXG52YXIgaGFzRXJyb3IgPSBmYWxzZTtcbnZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbi8vIFVzZWQgYnkgZXZlbnQgc3lzdGVtIHRvIGNhcHR1cmUvcmV0aHJvdyB0aGUgZmlyc3QgZXJyb3IuXG52YXIgaGFzUmV0aHJvd0Vycm9yID0gZmFsc2U7XG52YXIgcmV0aHJvd0Vycm9yID0gbnVsbDtcblxudmFyIHJlcG9ydGVyID0ge1xuICBvbkVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsIGEgZnVuY3Rpb24gd2hpbGUgZ3VhcmRpbmcgYWdhaW5zdCBlcnJvcnMgdGhhdCBoYXBwZW5zIHdpdGhpbiBpdC5cbiAqIFJldHVybnMgYW4gZXJyb3IgaWYgaXQgdGhyb3dzLCBvdGhlcndpc2UgbnVsbC5cbiAqXG4gKiBJbiBwcm9kdWN0aW9uLCB0aGlzIGlzIGltcGxlbWVudGVkIHVzaW5nIGEgdHJ5LWNhdGNoLiBUaGUgcmVhc29uIHdlIGRvbid0XG4gKiB1c2UgYSB0cnktY2F0Y2ggZGlyZWN0bHkgaXMgc28gdGhhdCB3ZSBjYW4gc3dhcCBvdXQgYSBkaWZmZXJlbnRcbiAqIGltcGxlbWVudGF0aW9uIGluIERFViBtb2RlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIHRoZSBndWFyZCB0byB1c2UgZm9yIGxvZ2dpbmcgb3IgZGVidWdnaW5nXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2VcbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byB1c2Ugd2hlbiBjYWxsaW5nIHRoZSBmdW5jdGlvblxuICogQHBhcmFtIHsuLi4qfSBhcmdzIEFyZ3VtZW50cyBmb3IgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gaW52b2tlR3VhcmRlZENhbGxiYWNrKG5hbWUsIGZ1bmMsIGNvbnRleHQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgY2F1Z2h0RXJyb3IgPSBudWxsO1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2tJbXBsJDEuYXBwbHkocmVwb3J0ZXIsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2FtZSBhcyBpbnZva2VHdWFyZGVkQ2FsbGJhY2ssIGJ1dCBpbnN0ZWFkIG9mIHJldHVybmluZyBhbiBlcnJvciwgaXQgc3RvcmVzXG4gKiBpdCBpbiBhIGdsb2JhbCBzbyBpdCBjYW4gYmUgcmV0aHJvd24gYnkgYHJldGhyb3dDYXVnaHRFcnJvcmAgbGF0ZXIuXG4gKiBUT0RPOiBTZWUgaWYgY2F1Z2h0RXJyb3IgYW5kIHJldGhyb3dFcnJvciBjYW4gYmUgdW5pZmllZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvZiB0aGUgZ3VhcmQgdG8gdXNlIGZvciBsb2dnaW5nIG9yIGRlYnVnZ2luZ1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gdXNlIHdoZW4gY2FsbGluZyB0aGUgZnVuY3Rpb25cbiAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcmd1bWVudHMgZm9yIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihuYW1lLCBmdW5jLCBjb250ZXh0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBpZiAoaGFzRXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSBjbGVhckNhdWdodEVycm9yKCk7XG4gICAgaWYgKCFoYXNSZXRocm93RXJyb3IpIHtcbiAgICAgIGhhc1JldGhyb3dFcnJvciA9IHRydWU7XG4gICAgICByZXRocm93RXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEdXJpbmcgZXhlY3V0aW9uIG9mIGd1YXJkZWQgZnVuY3Rpb25zIHdlIHdpbGwgY2FwdHVyZSB0aGUgZmlyc3QgZXJyb3Igd2hpY2hcbiAqIHdlIHdpbGwgcmV0aHJvdyB0byBiZSBoYW5kbGVkIGJ5IHRoZSB0b3AgbGV2ZWwgZXJyb3IgaGFuZGxlci5cbiAqL1xuZnVuY3Rpb24gcmV0aHJvd0NhdWdodEVycm9yKCkge1xuICBpZiAoaGFzUmV0aHJvd0Vycm9yKSB7XG4gICAgdmFyIGVycm9yID0gcmV0aHJvd0Vycm9yO1xuICAgIGhhc1JldGhyb3dFcnJvciA9IGZhbHNlO1xuICAgIHJldGhyb3dFcnJvciA9IG51bGw7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzQ2F1Z2h0RXJyb3IoKSB7XG4gIHJldHVybiBoYXNFcnJvcjtcbn1cblxuZnVuY3Rpb24gY2xlYXJDYXVnaHRFcnJvcigpIHtcbiAgaWYgKGhhc0Vycm9yKSB7XG4gICAgdmFyIGVycm9yID0gY2F1Z2h0RXJyb3I7XG4gICAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgICBjYXVnaHRFcnJvciA9IG51bGw7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9IGVsc2Uge1xuICAgIGludmFyaWFudChmYWxzZSwgJ2NsZWFyQ2F1Z2h0RXJyb3Igd2FzIGNhbGxlZCBidXQgbm8gZXJyb3Igd2FzIGNhcHR1cmVkLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICB9XG59XG5cbi8qKlxuICogSW5qZWN0YWJsZSBvcmRlcmluZyBvZiBldmVudCBwbHVnaW5zLlxuICovXG52YXIgZXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBtYXBwaW5nIGZyb20gbmFtZXMgdG8gZXZlbnQgcGx1Z2luIG1vZHVsZXMuXG4gKi9cbnZhciBuYW1lc1RvUGx1Z2lucyA9IHt9O1xuXG4vKipcbiAqIFJlY29tcHV0ZXMgdGhlIHBsdWdpbiBsaXN0IHVzaW5nIHRoZSBpbmplY3RlZCBwbHVnaW5zIGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKSB7XG4gIGlmICghZXZlbnRQbHVnaW5PcmRlcikge1xuICAgIC8vIFdhaXQgdW50aWwgYW4gYGV2ZW50UGx1Z2luT3JkZXJgIGlzIGluamVjdGVkLlxuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIHBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgIHZhciBwbHVnaW5JbmRleCA9IGV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcbiAgICAhKHBsdWdpbkluZGV4ID4gLTEpID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW5zIHRoYXQgZG8gbm90IGV4aXN0IGluIHRoZSBwbHVnaW4gb3JkZXJpbmcsIGAlc2AuJywgcGx1Z2luTmFtZSkgOiB2b2lkIDA7XG4gICAgaWYgKHBsdWdpbnNbcGx1Z2luSW5kZXhdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgIXBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLCBwbHVnaW5OYW1lKSA6IHZvaWQgMDtcbiAgICBwbHVnaW5zW3BsdWdpbkluZGV4XSA9IHBsdWdpbk1vZHVsZTtcbiAgICB2YXIgcHVibGlzaGVkRXZlbnRzID0gcGx1Z2luTW9kdWxlLmV2ZW50VHlwZXM7XG4gICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHB1Ymxpc2hlZEV2ZW50cykge1xuICAgICAgIXB1Ymxpc2hFdmVudEZvclBsdWdpbihwdWJsaXNoZWRFdmVudHNbZXZlbnROYW1lXSwgcGx1Z2luTW9kdWxlLCBldmVudE5hbWUpID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRmFpbGVkIHRvIHB1Ymxpc2ggZXZlbnQgYCVzYCBmb3IgcGx1Z2luIGAlc2AuJywgZXZlbnROYW1lLCBwbHVnaW5OYW1lKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQdWJsaXNoZXMgYW4gZXZlbnQgc28gdGhhdCBpdCBjYW4gYmUgZGlzcGF0Y2hlZCBieSB0aGUgc3VwcGxpZWQgcGx1Z2luLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBEaXNwYXRjaCBjb25maWd1cmF0aW9uIGZvciB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IHdhcyBzdWNjZXNzZnVsbHkgcHVibGlzaGVkLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVibGlzaEV2ZW50Rm9yUGx1Z2luKGRpc3BhdGNoQ29uZmlnLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuICAhIWV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lIGV2ZW50IG5hbWUsIGAlc2AuJywgZXZlbnROYW1lKSA6IHZvaWQgMDtcbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV0gPSBkaXNwYXRjaENvbmZpZztcblxuICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgPSBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztcbiAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSA9IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07XG4gICAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGEgcmVnaXN0cmF0aW9uIG5hbWUgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IGRpc3BhdGNoZWQgZXZlbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIFJlZ2lzdHJhdGlvbiBuYW1lIHRvIGFkZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBQbHVnaW5Nb2R1bGUgUGx1Z2luIHB1Ymxpc2hpbmcgdGhlIGV2ZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUocmVnaXN0cmF0aW9uTmFtZSwgcGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgISFyZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSByZWdpc3RyYXRpb24gbmFtZSwgYCVzYC4nLCByZWdpc3RyYXRpb25OYW1lKSA6IHZvaWQgMDtcbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBwbHVnaW5Nb2R1bGU7XG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBwbHVnaW5Nb2R1bGUuZXZlbnRUeXBlc1tldmVudE5hbWVdLmRlcGVuZGVuY2llcztcblxuICB7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gcmVnaXN0cmF0aW9uTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXNbbG93ZXJDYXNlZE5hbWVdID0gcmVnaXN0cmF0aW9uTmFtZTtcblxuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSAnb25Eb3VibGVDbGljaycpIHtcbiAgICAgIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMub25kYmxjbGljayA9IHJlZ2lzdHJhdGlvbk5hbWU7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIHBsdWdpbnMgc28gdGhhdCB0aGV5IGNhbiBleHRyYWN0IGFuZCBkaXNwYXRjaCBldmVudHMuXG4gKlxuICogQHNlZSB7RXZlbnRQbHVnaW5IdWJ9XG4gKi9cblxuLyoqXG4gKiBPcmRlcmVkIGxpc3Qgb2YgaW5qZWN0ZWQgcGx1Z2lucy5cbiAqL1xudmFyIHBsdWdpbnMgPSBbXTtcblxuLyoqXG4gKiBNYXBwaW5nIGZyb20gZXZlbnQgbmFtZSB0byBkaXNwYXRjaCBjb25maWdcbiAqL1xudmFyIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyA9IHt9O1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSByZWdpc3RyYXRpb24gbmFtZSB0byBwbHVnaW4gbW9kdWxlXG4gKi9cbnZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IHt9O1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSByZWdpc3RyYXRpb24gbmFtZSB0byBldmVudCBuYW1lXG4gKi9cbnZhciByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzID0ge307XG5cbi8qKlxuICogTWFwcGluZyBmcm9tIGxvd2VyY2FzZSByZWdpc3RyYXRpb24gbmFtZXMgdG8gdGhlIHByb3Blcmx5IGNhc2VkIHZlcnNpb24sXG4gKiB1c2VkIHRvIHdhcm4gaW4gdGhlIGNhc2Ugb2YgbWlzc2luZyBldmVudCBoYW5kbGVycy4gQXZhaWxhYmxlXG4gKiBvbmx5IGluIHRydWUuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyA9IHt9O1xuLy8gVHJ1c3QgdGhlIGRldmVsb3BlciB0byBvbmx5IHVzZSBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIGluIHRydWVcblxuLyoqXG4gKiBJbmplY3RzIGFuIG9yZGVyaW5nIG9mIHBsdWdpbnMgKGJ5IHBsdWdpbiBuYW1lKS4gVGhpcyBhbGxvd3MgdGhlIG9yZGVyaW5nXG4gKiB0byBiZSBkZWNvdXBsZWQgZnJvbSBpbmplY3Rpb24gb2YgdGhlIGFjdHVhbCBwbHVnaW5zIHNvIHRoYXQgb3JkZXJpbmcgaXNcbiAqIGFsd2F5cyBkZXRlcm1pbmlzdGljIHJlZ2FyZGxlc3Mgb2YgcGFja2FnaW5nLCBvbi10aGUtZmx5IGluamVjdGlvbiwgZXRjLlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IEluamVjdGVkRXZlbnRQbHVnaW5PcmRlclxuICogQGludGVybmFsXG4gKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcn1cbiAqL1xuZnVuY3Rpb24gaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgISFldmVudFBsdWdpbk9yZGVyID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW4gb3JkZXJpbmcgbW9yZSB0aGFuIG9uY2UuIFlvdSBhcmUgbGlrZWx5IHRyeWluZyB0byBsb2FkIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdC4nKSA6IHZvaWQgMDtcbiAgLy8gQ2xvbmUgdGhlIG9yZGVyaW5nIHNvIGl0IGNhbm5vdCBiZSBkeW5hbWljYWxseSBtdXRhdGVkLlxuICBldmVudFBsdWdpbk9yZGVyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKTtcbiAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbn1cblxuLyoqXG4gKiBJbmplY3RzIHBsdWdpbnMgdG8gYmUgdXNlZCBieSBgRXZlbnRQbHVnaW5IdWJgLiBUaGUgcGx1Z2luIG5hbWVzIG11c3QgYmVcbiAqIGluIHRoZSBvcmRlcmluZyBpbmplY3RlZCBieSBgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcmAuXG4gKlxuICogUGx1Z2lucyBjYW4gYmUgaW5qZWN0ZWQgYXMgcGFydCBvZiBwYWdlIGluaXRpYWxpemF0aW9uIG9yIG9uLXRoZS1mbHkuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGluamVjdGVkTmFtZXNUb1BsdWdpbnMgTWFwIGZyb20gbmFtZXMgdG8gcGx1Z2luIG1vZHVsZXMuXG4gKiBAaW50ZXJuYWxcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWV9XG4gKi9cbmZ1bmN0aW9uIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZShpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gIHZhciBpc09yZGVyaW5nRGlydHkgPSBmYWxzZTtcbiAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgaWYgKCFpbmplY3RlZE5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIHBsdWdpbk1vZHVsZSA9IGluamVjdGVkTmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgaWYgKCFuYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSB8fCBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSAhPT0gcGx1Z2luTW9kdWxlKSB7XG4gICAgICAhIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCB0d28gZGlmZmVyZW50IGV2ZW50IHBsdWdpbnMgdXNpbmcgdGhlIHNhbWUgbmFtZSwgYCVzYC4nLCBwbHVnaW5OYW1lKSA6IHZvaWQgMDtcbiAgICAgIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID0gcGx1Z2luTW9kdWxlO1xuICAgICAgaXNPcmRlcmluZ0RpcnR5ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzT3JkZXJpbmdEaXJ0eSkge1xuICAgIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmdXaXRob3V0U3RhY2sgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICB3YXJuaW5nV2l0aG91dFN0YWNrID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmdXaXRob3V0U3RhY2soY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmIChhcmdzLmxlbmd0aCA+IDgpIHtcbiAgICAgIC8vIENoZWNrIGJlZm9yZSB0aGUgY29uZGl0aW9uIHRvIGNhdGNoIHZpb2xhdGlvbnMgZWFybHkuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dhcm5pbmdXaXRob3V0U3RhY2soKSBjdXJyZW50bHkgc3VwcG9ydHMgYXQgbW9zdCA4IGFyZ3VtZW50cy4nKTtcbiAgICB9XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgYXJnc1dpdGhGb3JtYXQgPSBhcmdzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gJycgKyBpdGVtO1xuICAgICAgfSk7XG4gICAgICBhcmdzV2l0aEZvcm1hdC51bnNoaWZ0KCdXYXJuaW5nOiAnICsgZm9ybWF0KTtcblxuICAgICAgLy8gV2UgaW50ZW50aW9uYWxseSBkb24ndCB1c2Ugc3ByZWFkIChvciAuYXBwbHkpIGRpcmVjdGx5IGJlY2F1c2UgaXRcbiAgICAgIC8vIGJyZWFrcyBJRTk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTM2MTBcbiAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUuZXJyb3IsIGNvbnNvbGUsIGFyZ3NXaXRoRm9ybWF0KTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxudmFyIHdhcm5pbmdXaXRob3V0U3RhY2skMSA9IHdhcm5pbmdXaXRob3V0U3RhY2s7XG5cbnZhciBnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlID0gbnVsbDtcbnZhciBnZXRJbnN0YW5jZUZyb21Ob2RlID0gbnVsbDtcbnZhciBnZXROb2RlRnJvbUluc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gc2V0Q29tcG9uZW50VHJlZShnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlSW1wbCwgZ2V0SW5zdGFuY2VGcm9tTm9kZUltcGwsIGdldE5vZGVGcm9tSW5zdGFuY2VJbXBsKSB7XG4gIGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUgPSBnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlSW1wbDtcbiAgZ2V0SW5zdGFuY2VGcm9tTm9kZSA9IGdldEluc3RhbmNlRnJvbU5vZGVJbXBsO1xuICBnZXROb2RlRnJvbUluc3RhbmNlID0gZ2V0Tm9kZUZyb21JbnN0YW5jZUltcGw7XG4gIHtcbiAgICAhKGdldE5vZGVGcm9tSW5zdGFuY2UgJiYgZ2V0SW5zdGFuY2VGcm9tTm9kZSkgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdFdmVudFBsdWdpblV0aWxzLnNldENvbXBvbmVudFRyZWUoLi4uKTogSW5qZWN0ZWQgJyArICdtb2R1bGUgaXMgbWlzc2luZyBnZXROb2RlRnJvbUluc3RhbmNlIG9yIGdldEluc3RhbmNlRnJvbU5vZGUuJykgOiB2b2lkIDA7XG4gIH1cbn1cblxudmFyIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzID0gdm9pZCAwO1xue1xuICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgICB2YXIgZGlzcGF0Y2hJbnN0YW5jZXMgPSBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXM7XG5cbiAgICB2YXIgbGlzdGVuZXJzSXNBcnIgPSBBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKTtcbiAgICB2YXIgbGlzdGVuZXJzTGVuID0gbGlzdGVuZXJzSXNBcnIgPyBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGggOiBkaXNwYXRjaExpc3RlbmVycyA/IDEgOiAwO1xuXG4gICAgdmFyIGluc3RhbmNlc0lzQXJyID0gQXJyYXkuaXNBcnJheShkaXNwYXRjaEluc3RhbmNlcyk7XG4gICAgdmFyIGluc3RhbmNlc0xlbiA9IGluc3RhbmNlc0lzQXJyID8gZGlzcGF0Y2hJbnN0YW5jZXMubGVuZ3RoIDogZGlzcGF0Y2hJbnN0YW5jZXMgPyAxIDogMDtcblxuICAgICEoaW5zdGFuY2VzSXNBcnIgPT09IGxpc3RlbmVyc0lzQXJyICYmIGluc3RhbmNlc0xlbiA9PT0gbGlzdGVuZXJzTGVuKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0V2ZW50UGx1Z2luVXRpbHM6IEludmFsaWQgYGV2ZW50YC4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCB0aGUgZXZlbnQgdG8gdGhlIGxpc3RlbmVyLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgU3ludGhldGljRXZlbnQgdG8gaGFuZGxlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBBcHBsaWNhdGlvbi1sZXZlbCBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBpbnN0IEludGVybmFsIGNvbXBvbmVudCBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIGxpc3RlbmVyLCBpbnN0KSB7XG4gIHZhciB0eXBlID0gZXZlbnQudHlwZSB8fCAndW5rbm93bi1ldmVudCc7XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBnZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IodHlwZSwgbGlzdGVuZXIsIHVuZGVmaW5lZCwgZXZlbnQpO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbn1cblxuLyoqXG4gKiBTdGFuZGFyZC9zaW1wbGUgaXRlcmF0aW9uIHRocm91Z2ggYW4gZXZlbnQncyBjb2xsZWN0ZWQgZGlzcGF0Y2hlcy5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50KSB7XG4gIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSW5zdGFuY2VzID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuICB7XG4gICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTGlzdGVuZXJzIGFuZCBJbnN0YW5jZXMgYXJlIHR3byBwYXJhbGxlbCBhcnJheXMgdGhhdCBhcmUgYWx3YXlzIGluIHN5bmMuXG4gICAgICBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIGRpc3BhdGNoTGlzdGVuZXJzW2ldLCBkaXNwYXRjaEluc3RhbmNlc1tpXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG4gICAgZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBkaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJbnN0YW5jZXMpO1xuICB9XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IG51bGw7XG59XG5cbi8qKlxuICogQHNlZSBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbFxuICovXG5cblxuLyoqXG4gKiBFeGVjdXRpb24gb2YgYSBcImRpcmVjdFwiIGRpc3BhdGNoIC0gdGhlcmUgbXVzdCBiZSBhdCBtb3N0IG9uZSBkaXNwYXRjaFxuICogYWNjdW11bGF0ZWQgb24gdGhlIGV2ZW50IG9yIGl0IGlzIGNvbnNpZGVyZWQgYW4gZXJyb3IuIEl0IGRvZXNuJ3QgcmVhbGx5IG1ha2VcbiAqIHNlbnNlIGZvciBhbiBldmVudCB3aXRoIG11bHRpcGxlIGRpc3BhdGNoZXMgKGJ1YmJsZWQpIHRvIGtlZXAgdHJhY2sgb2YgdGhlXG4gKiByZXR1cm4gdmFsdWVzIGF0IGVhY2ggZGlzcGF0Y2ggZXhlY3V0aW9uLCBidXQgaXQgZG9lcyB0ZW5kIHRvIG1ha2Ugc2Vuc2Ugd2hlblxuICogZGVhbGluZyB3aXRoIFwiZGlyZWN0XCIgZGlzcGF0Y2hlcy5cbiAqXG4gKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGV4ZWN1dGluZyB0aGUgc2luZ2xlIGRpc3BhdGNoLlxuICovXG5cblxuLyoqXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZmYgbnVtYmVyIG9mIGRpc3BhdGNoZXMgYWNjdW11bGF0ZWQgaXMgZ3JlYXRlciB0aGFuIDAuXG4gKi9cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50byhjdXJyZW50LCBuZXh0KSB7XG4gICEobmV4dCAhPSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ2FjY3VtdWxhdGVJbnRvKC4uLik6IEFjY3VtdWxhdGVkIGl0ZW1zIG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLicpIDogdm9pZCAwO1xuXG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dCkpIHtcbiAgICAgIGN1cnJlbnQucHVzaC5hcHBseShjdXJyZW50LCBuZXh0KTtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgICBjdXJyZW50LnB1c2gobmV4dCk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgIC8vIEEgYml0IHRvbyBkYW5nZXJvdXMgdG8gbXV0YXRlIGBuZXh0YC5cbiAgICByZXR1cm4gW2N1cnJlbnRdLmNvbmNhdChuZXh0KTtcbiAgfVxuXG4gIHJldHVybiBbY3VycmVudCwgbmV4dF07XG59XG5cbi8qKlxuICogQHBhcmFtIHthcnJheX0gYXJyIGFuIFwiYWNjdW11bGF0aW9uXCIgb2YgaXRlbXMgd2hpY2ggaXMgZWl0aGVyIGFuIEFycmF5IG9yXG4gKiBhIHNpbmdsZSBpdGVtLiBVc2VmdWwgd2hlbiBwYWlyZWQgd2l0aCB0aGUgYGFjY3VtdWxhdGVgIG1vZHVsZS4gVGhpcyBpcyBhXG4gKiBzaW1wbGUgdXRpbGl0eSB0aGF0IGFsbG93cyB1cyB0byByZWFzb24gYWJvdXQgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zLCBidXRcbiAqIGhhbmRsaW5nIHRoZSBjYXNlIHdoZW4gdGhlcmUgaXMgZXhhY3RseSBvbmUgaXRlbSAoYW5kIHdlIGRvIG5vdCBuZWVkIHRvXG4gKiBhbGxvY2F0ZSBhbiBhcnJheSkuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayBpbnZva2VkIHdpdGggZWFjaCBlbGVtZW50IG9yIGEgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7P30gW3Njb3BlXSBTY29wZSB1c2VkIGFzIGB0aGlzYCBpbiBhIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBmb3JFYWNoQWNjdW11bGF0ZWQoYXJyLCBjYiwgc2NvcGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGFyci5mb3JFYWNoKGNiLCBzY29wZSk7XG4gIH0gZWxzZSBpZiAoYXJyKSB7XG4gICAgY2IuY2FsbChzY29wZSwgYXJyKTtcbiAgfVxufVxuXG4vKipcbiAqIEludGVybmFsIHF1ZXVlIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWNjdW11bGF0ZWQgdGhlaXIgZGlzcGF0Y2hlcyBhbmQgYXJlXG4gKiB3YWl0aW5nIHRvIGhhdmUgdGhlaXIgZGlzcGF0Y2hlcyBleGVjdXRlZC5cbiAqL1xudmFyIGV2ZW50UXVldWUgPSBudWxsO1xuXG4vKipcbiAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYW5kIHJlbGVhc2VzIGl0IGJhY2sgaW50byB0aGUgcG9vbCwgdW5sZXNzIHBlcnNpc3RlbnQuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBldmVudCBTeW50aGV0aWMgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKGV2ZW50KSB7XG4gICAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50KTtcblxuICAgIGlmICghZXZlbnQuaXNQZXJzaXN0ZW50KCkpIHtcbiAgICAgIGV2ZW50LmNvbnN0cnVjdG9yLnJlbGVhc2UoZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCA9IGZ1bmN0aW9uIChlKSB7XG4gIHJldHVybiBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UoZSk7XG59O1xuXG5mdW5jdGlvbiBpc0ludGVyYWN0aXZlKHRhZykge1xuICByZXR1cm4gdGFnID09PSAnYnV0dG9uJyB8fCB0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAnc2VsZWN0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYSc7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KG5hbWUsIHR5cGUsIHByb3BzKSB7XG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgJ29uQ2xpY2snOlxuICAgIGNhc2UgJ29uQ2xpY2tDYXB0dXJlJzpcbiAgICBjYXNlICdvbkRvdWJsZUNsaWNrJzpcbiAgICBjYXNlICdvbkRvdWJsZUNsaWNrQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZURvd24nOlxuICAgIGNhc2UgJ29uTW91c2VEb3duQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZU1vdmUnOlxuICAgIGNhc2UgJ29uTW91c2VNb3ZlQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZVVwJzpcbiAgICBjYXNlICdvbk1vdXNlVXBDYXB0dXJlJzpcbiAgICAgIHJldHVybiAhIShwcm9wcy5kaXNhYmxlZCAmJiBpc0ludGVyYWN0aXZlKHR5cGUpKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhIHVuaWZpZWQgaW50ZXJmYWNlIGZvciBldmVudCBwbHVnaW5zIHRvIGJlIGluc3RhbGxlZCBhbmQgY29uZmlndXJlZC5cbiAqXG4gKiBFdmVudCBwbHVnaW5zIGNhbiBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgYGV4dHJhY3RFdmVudHNgIHtmdW5jdGlvbihzdHJpbmcsIERPTUV2ZW50VGFyZ2V0LCBzdHJpbmcsIG9iamVjdCk6ICp9XG4gKiAgICAgUmVxdWlyZWQuIFdoZW4gYSB0b3AtbGV2ZWwgZXZlbnQgaXMgZmlyZWQsIHRoaXMgbWV0aG9kIGlzIGV4cGVjdGVkIHRvXG4gKiAgICAgZXh0cmFjdCBzeW50aGV0aWMgZXZlbnRzIHRoYXQgd2lsbCBpbiB0dXJuIGJlIHF1ZXVlZCBhbmQgZGlzcGF0Y2hlZC5cbiAqXG4gKiAgIGBldmVudFR5cGVzYCB7b2JqZWN0fVxuICogICAgIE9wdGlvbmFsLCBwbHVnaW5zIHRoYXQgZmlyZSBldmVudHMgbXVzdCBwdWJsaXNoIGEgbWFwcGluZyBvZiByZWdpc3RyYXRpb25cbiAqICAgICBuYW1lcyB0aGF0IGFyZSB1c2VkIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy4gVmFsdWVzIG9mIHRoaXMgbWFwcGluZyBtdXN0XG4gKiAgICAgYmUgb2JqZWN0cyB0aGF0IGNvbnRhaW4gYHJlZ2lzdHJhdGlvbk5hbWVgIG9yIGBwaGFzZWRSZWdpc3RyYXRpb25OYW1lc2AuXG4gKlxuICogICBgZXhlY3V0ZURpc3BhdGNoYCB7ZnVuY3Rpb24ob2JqZWN0LCBmdW5jdGlvbiwgc3RyaW5nKX1cbiAqICAgICBPcHRpb25hbCwgYWxsb3dzIHBsdWdpbnMgdG8gb3ZlcnJpZGUgaG93IGFuIGV2ZW50IGdldHMgZGlzcGF0Y2hlZC4gQnlcbiAqICAgICBkZWZhdWx0LCB0aGUgbGlzdGVuZXIgaXMgc2ltcGx5IGludm9rZWQuXG4gKlxuICogRWFjaCBwbHVnaW4gdGhhdCBpcyBpbmplY3RlZCBpbnRvIGBFdmVudHNQbHVnaW5IdWJgIGlzIGltbWVkaWF0ZWx5IG9wZXJhYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG4vKipcbiAqIE1ldGhvZHMgZm9yIGluamVjdGluZyBkZXBlbmRlbmNpZXMuXG4gKi9cbnZhciBpbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogaW5qZWN0RXZlbnRQbHVnaW5PcmRlcixcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGluamVjdGVkTmFtZXNUb1BsdWdpbnMgTWFwIGZyb20gbmFtZXMgdG8gcGx1Z2luIG1vZHVsZXMuXG4gICAqL1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5zdCBUaGUgaW5zdGFuY2UsIHdoaWNoIGlzIHRoZSBzb3VyY2Ugb2YgZXZlbnRzLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICogQHJldHVybiB7P2Z1bmN0aW9ufSBUaGUgc3RvcmVkIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gIHZhciBsaXN0ZW5lciA9IHZvaWQgMDtcblxuICAvLyBUT0RPOiBzaG91bGRQcmV2ZW50TW91c2VFdmVudCBpcyBET00tc3BlY2lmaWMgYW5kIGRlZmluaXRlbHkgc2hvdWxkIG5vdFxuICAvLyBsaXZlIGhlcmU7IG5lZWRzIHRvIGJlIG1vdmVkIHRvIGEgYmV0dGVyIHBsYWNlIHNvb25cbiAgdmFyIHN0YXRlTm9kZSA9IGluc3Quc3RhdGVOb2RlO1xuICBpZiAoIXN0YXRlTm9kZSkge1xuICAgIC8vIFdvcmsgaW4gcHJvZ3Jlc3MgKGV4OiBvbmxvYWQgZXZlbnRzIGluIGluY3JlbWVudGFsIG1vZGUpLlxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBwcm9wcyA9IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoc3RhdGVOb2RlKTtcbiAgaWYgKCFwcm9wcykge1xuICAgIC8vIFdvcmsgaW4gcHJvZ3Jlc3MuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGlzdGVuZXIgPSBwcm9wc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgaWYgKHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUsIGluc3QudHlwZSwgcHJvcHMpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgISghbGlzdGVuZXIgfHwgdHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGAlc2AgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbiwgaW5zdGVhZCBnb3QgYSB2YWx1ZSBvZiBgJXNgIHR5cGUuJywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGxpc3RlbmVyO1xufVxuXG4vKipcbiAqIEFsbG93cyByZWdpc3RlcmVkIHBsdWdpbnMgYW4gb3Bwb3J0dW5pdHkgdG8gZXh0cmFjdCBldmVudHMgZnJvbSB0b3AtbGV2ZWxcbiAqIG5hdGl2ZSBicm93c2VyIGV2ZW50cy5cbiAqXG4gKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBleHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBldmVudHMgPSBudWxsO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBOb3QgZXZlcnkgcGx1Z2luIGluIHRoZSBvcmRlcmluZyBtYXkgYmUgbG9hZGVkIGF0IHJ1bnRpbWUuXG4gICAgdmFyIHBvc3NpYmxlUGx1Z2luID0gcGx1Z2luc1tpXTtcbiAgICBpZiAocG9zc2libGVQbHVnaW4pIHtcbiAgICAgIHZhciBleHRyYWN0ZWRFdmVudHMgPSBwb3NzaWJsZVBsdWdpbi5leHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgIGlmIChleHRyYWN0ZWRFdmVudHMpIHtcbiAgICAgICAgZXZlbnRzID0gYWNjdW11bGF0ZUludG8oZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZXZlbnRzO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudHNJbkJhdGNoKGV2ZW50cykge1xuICBpZiAoZXZlbnRzICE9PSBudWxsKSB7XG4gICAgZXZlbnRRdWV1ZSA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50UXVldWUsIGV2ZW50cyk7XG4gIH1cblxuICAvLyBTZXQgYGV2ZW50UXVldWVgIHRvIG51bGwgYmVmb3JlIHByb2Nlc3NpbmcgaXQgc28gdGhhdCB3ZSBjYW4gdGVsbCBpZiBtb3JlXG4gIC8vIGV2ZW50cyBnZXQgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZy5cbiAgdmFyIHByb2Nlc3NpbmdFdmVudFF1ZXVlID0gZXZlbnRRdWV1ZTtcbiAgZXZlbnRRdWV1ZSA9IG51bGw7XG5cbiAgaWYgKCFwcm9jZXNzaW5nRXZlbnRRdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwpO1xuICAhIWV2ZW50UXVldWUgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgYW4gZXZlbnQgcXVldWUuIFN1cHBvcnQgZm9yIHRoaXMgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZC4nKSA6IHZvaWQgMDtcbiAgLy8gVGhpcyB3b3VsZCBiZSBhIGdvb2QgdGltZSB0byByZXRocm93IGlmIGFueSBvZiB0aGUgZXZlbnQgaGFuZGxlcnMgdGhyZXcuXG4gIHJldGhyb3dDYXVnaHRFcnJvcigpO1xufVxuXG5mdW5jdGlvbiBydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBldmVudHMgPSBleHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgcnVuRXZlbnRzSW5CYXRjaChldmVudHMpO1xufVxuXG52YXIgRnVuY3Rpb25Db21wb25lbnQgPSAwO1xudmFyIENsYXNzQ29tcG9uZW50ID0gMTtcbnZhciBJbmRldGVybWluYXRlQ29tcG9uZW50ID0gMjsgLy8gQmVmb3JlIHdlIGtub3cgd2hldGhlciBpdCBpcyBmdW5jdGlvbiBvciBjbGFzc1xudmFyIEhvc3RSb290ID0gMzsgLy8gUm9vdCBvZiBhIGhvc3QgdHJlZS4gQ291bGQgYmUgbmVzdGVkIGluc2lkZSBhbm90aGVyIG5vZGUuXG52YXIgSG9zdFBvcnRhbCA9IDQ7IC8vIEEgc3VidHJlZS4gQ291bGQgYmUgYW4gZW50cnkgcG9pbnQgdG8gYSBkaWZmZXJlbnQgcmVuZGVyZXIuXG52YXIgSG9zdENvbXBvbmVudCA9IDU7XG52YXIgSG9zdFRleHQgPSA2O1xudmFyIEZyYWdtZW50ID0gNztcbnZhciBNb2RlID0gODtcbnZhciBDb250ZXh0Q29uc3VtZXIgPSA5O1xudmFyIENvbnRleHRQcm92aWRlciA9IDEwO1xudmFyIEZvcndhcmRSZWYgPSAxMTtcbnZhciBQcm9maWxlciA9IDEyO1xudmFyIFN1c3BlbnNlQ29tcG9uZW50ID0gMTM7XG52YXIgTWVtb0NvbXBvbmVudCA9IDE0O1xudmFyIFNpbXBsZU1lbW9Db21wb25lbnQgPSAxNTtcbnZhciBMYXp5Q29tcG9uZW50ID0gMTY7XG52YXIgSW5jb21wbGV0ZUNsYXNzQ29tcG9uZW50ID0gMTc7XG52YXIgRGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50ID0gMTg7XG5cbnZhciByYW5kb21LZXkgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcbnZhciBpbnRlcm5hbEluc3RhbmNlS2V5ID0gJ19fcmVhY3RJbnRlcm5hbEluc3RhbmNlJCcgKyByYW5kb21LZXk7XG52YXIgaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5ID0gJ19fcmVhY3RFdmVudEhhbmRsZXJzJCcgKyByYW5kb21LZXk7XG5cbmZ1bmN0aW9uIHByZWNhY2hlRmliZXJOb2RlKGhvc3RJbnN0LCBub2RlKSB7XG4gIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBob3N0SW5zdDtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIERPTSBub2RlLCByZXR1cm4gdGhlIGNsb3Nlc3QgUmVhY3RET01Db21wb25lbnQgb3JcbiAqIFJlYWN0RE9NVGV4dENvbXBvbmVudCBpbnN0YW5jZSBhbmNlc3Rvci5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICBpZiAobm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkge1xuICAgIHJldHVybiBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICB9XG5cbiAgd2hpbGUgKCFub2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSB7XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVG9wIG9mIHRoZSB0cmVlLiBUaGlzIG5vZGUgbXVzdCBub3QgYmUgcGFydCBvZiBhIFJlYWN0IHRyZWUgKG9yIGlzXG4gICAgICAvLyB1bm1vdW50ZWQsIHBvdGVudGlhbGx5KS5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbnN0ID0gbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgaWYgKGluc3QudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IGluc3QudGFnID09PSBIb3N0VGV4dCkge1xuICAgIC8vIEluIEZpYmVyLCB0aGlzIHdpbGwgYWx3YXlzIGJlIHRoZSBkZWVwZXN0IHJvb3QuXG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIERPTSBub2RlLCByZXR1cm4gdGhlIFJlYWN0RE9NQ29tcG9uZW50IG9yIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogaW5zdGFuY2UsIG9yIG51bGwgaWYgdGhlIG5vZGUgd2FzIG5vdCByZW5kZXJlZCBieSB0aGlzIFJlYWN0LlxuICovXG5mdW5jdGlvbiBnZXRJbnN0YW5jZUZyb21Ob2RlJDEobm9kZSkge1xuICB2YXIgaW5zdCA9IG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gIGlmIChpbnN0KSB7XG4gICAgaWYgKGluc3QudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IGluc3QudGFnID09PSBIb3N0VGV4dCkge1xuICAgICAgcmV0dXJuIGluc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlYWN0RE9NQ29tcG9uZW50IG9yIFJlYWN0RE9NVGV4dENvbXBvbmVudCwgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZUZyb21JbnN0YW5jZSQxKGluc3QpIHtcbiAgaWYgKGluc3QudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IGluc3QudGFnID09PSBIb3N0VGV4dCkge1xuICAgIC8vIEluIEZpYmVyIHRoaXMsIGlzIGp1c3QgdGhlIHN0YXRlIG5vZGUgcmlnaHQgbm93LiBXZSBhc3N1bWUgaXQgd2lsbCBiZVxuICAgIC8vIGEgaG9zdCBjb21wb25lbnQgb3IgaG9zdCB0ZXh0LlxuICAgIHJldHVybiBpbnN0LnN0YXRlTm9kZTtcbiAgfVxuXG4gIC8vIFdpdGhvdXQgdGhpcyBmaXJzdCBpbnZhcmlhbnQsIHBhc3NpbmcgYSBub24tRE9NLWNvbXBvbmVudCB0cmlnZ2VycyB0aGUgbmV4dFxuICAvLyBpbnZhcmlhbnQgZm9yIGEgbWlzc2luZyBwYXJlbnQsIHdoaWNoIGlzIHN1cGVyIGNvbmZ1c2luZy5cbiAgaW52YXJpYW50KGZhbHNlLCAnZ2V0Tm9kZUZyb21JbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC4nKTtcbn1cblxuZnVuY3Rpb24gZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSQxKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XSB8fCBudWxsO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVGaWJlclByb3BzKG5vZGUsIHByb3BzKSB7XG4gIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XSA9IHByb3BzO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnQoaW5zdCkge1xuICBkbyB7XG4gICAgaW5zdCA9IGluc3QucmV0dXJuO1xuICAgIC8vIFRPRE86IElmIHRoaXMgaXMgYSBIb3N0Um9vdCB3ZSBtaWdodCB3YW50IHRvIGJhaWwgb3V0LlxuICAgIC8vIFRoYXQgaXMgZGVwZW5kaW5nIG9uIGlmIHdlIHdhbnQgbmVzdGVkIHN1YnRyZWVzIChsYXllcnMpIHRvIGJ1YmJsZVxuICAgIC8vIGV2ZW50cyB0byB0aGVpciBwYXJlbnQuIFdlIGNvdWxkIGFsc28gZ28gdGhyb3VnaCBwYXJlbnROb2RlIG9uIHRoZVxuICAgIC8vIGhvc3Qgbm9kZSBidXQgdGhhdCB3b3VsZG4ndCB3b3JrIGZvciBSZWFjdCBOYXRpdmUgYW5kIGRvZXNuJ3QgbGV0IHVzXG4gICAgLy8gZG8gdGhlIHBvcnRhbCBmZWF0dXJlLlxuICB9IHdoaWxlIChpbnN0ICYmIGluc3QudGFnICE9PSBIb3N0Q29tcG9uZW50KTtcbiAgaWYgKGluc3QpIHtcbiAgICByZXR1cm4gaW5zdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxvd2VzdCBjb21tb24gYW5jZXN0b3Igb2YgQSBhbmQgQiwgb3IgbnVsbCBpZiB0aGV5IGFyZSBpblxuICogZGlmZmVyZW50IHRyZWVzLlxuICovXG5mdW5jdGlvbiBnZXRMb3dlc3RDb21tb25BbmNlc3RvcihpbnN0QSwgaW5zdEIpIHtcbiAgdmFyIGRlcHRoQSA9IDA7XG4gIGZvciAodmFyIHRlbXBBID0gaW5zdEE7IHRlbXBBOyB0ZW1wQSA9IGdldFBhcmVudCh0ZW1wQSkpIHtcbiAgICBkZXB0aEErKztcbiAgfVxuICB2YXIgZGVwdGhCID0gMDtcbiAgZm9yICh2YXIgdGVtcEIgPSBpbnN0QjsgdGVtcEI7IHRlbXBCID0gZ2V0UGFyZW50KHRlbXBCKSkge1xuICAgIGRlcHRoQisrO1xuICB9XG5cbiAgLy8gSWYgQSBpcyBkZWVwZXIsIGNyYXdsIHVwLlxuICB3aGlsZSAoZGVwdGhBIC0gZGVwdGhCID4gMCkge1xuICAgIGluc3RBID0gZ2V0UGFyZW50KGluc3RBKTtcbiAgICBkZXB0aEEtLTtcbiAgfVxuXG4gIC8vIElmIEIgaXMgZGVlcGVyLCBjcmF3bCB1cC5cbiAgd2hpbGUgKGRlcHRoQiAtIGRlcHRoQSA+IDApIHtcbiAgICBpbnN0QiA9IGdldFBhcmVudChpbnN0Qik7XG4gICAgZGVwdGhCLS07XG4gIH1cblxuICAvLyBXYWxrIGluIGxvY2tzdGVwIHVudGlsIHdlIGZpbmQgYSBtYXRjaC5cbiAgdmFyIGRlcHRoID0gZGVwdGhBO1xuICB3aGlsZSAoZGVwdGgtLSkge1xuICAgIGlmIChpbnN0QSA9PT0gaW5zdEIgfHwgaW5zdEEgPT09IGluc3RCLmFsdGVybmF0ZSkge1xuICAgICAgcmV0dXJuIGluc3RBO1xuICAgIH1cbiAgICBpbnN0QSA9IGdldFBhcmVudChpbnN0QSk7XG4gICAgaW5zdEIgPSBnZXRQYXJlbnQoaW5zdEIpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybiBpZiBBIGlzIGFuIGFuY2VzdG9yIG9mIEIuXG4gKi9cblxuXG4vKipcbiAqIFJldHVybiB0aGUgcGFyZW50IGluc3RhbmNlIG9mIHRoZSBwYXNzZWQtaW4gaW5zdGFuY2UuXG4gKi9cblxuXG4vKipcbiAqIFNpbXVsYXRlcyB0aGUgdHJhdmVyc2FsIG9mIGEgdHdvLXBoYXNlLCBjYXB0dXJlL2J1YmJsZSBldmVudCBkaXNwYXRjaC5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VUd29QaGFzZShpbnN0LCBmbiwgYXJnKSB7XG4gIHZhciBwYXRoID0gW107XG4gIHdoaWxlIChpbnN0KSB7XG4gICAgcGF0aC5wdXNoKGluc3QpO1xuICAgIGluc3QgPSBnZXRQYXJlbnQoaW5zdCk7XG4gIH1cbiAgdmFyIGkgPSB2b2lkIDA7XG4gIGZvciAoaSA9IHBhdGgubGVuZ3RoOyBpLS0gPiAwOykge1xuICAgIGZuKHBhdGhbaV0sICdjYXB0dXJlZCcsIGFyZyk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBmbihwYXRoW2ldLCAnYnViYmxlZCcsIGFyZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgdGhlIElEIGhpZXJhcmNoeSBhbmQgaW52b2tlcyB0aGUgc3VwcGxpZWQgYGNiYCBvbiBhbnkgSURzIHRoYXRcbiAqIHNob3VsZCB3b3VsZCByZWNlaXZlIGEgYG1vdXNlRW50ZXJgIG9yIGBtb3VzZUxlYXZlYCBldmVudC5cbiAqXG4gKiBEb2VzIG5vdCBpbnZva2UgdGhlIGNhbGxiYWNrIG9uIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBiZWNhdXNlIG5vdGhpbmdcbiAqIFwiZW50ZXJlZFwiIG9yIFwibGVmdFwiIHRoYXQgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VFbnRlckxlYXZlKGZyb20sIHRvLCBmbiwgYXJnRnJvbSwgYXJnVG8pIHtcbiAgdmFyIGNvbW1vbiA9IGZyb20gJiYgdG8gPyBnZXRMb3dlc3RDb21tb25BbmNlc3Rvcihmcm9tLCB0bykgOiBudWxsO1xuICB2YXIgcGF0aEZyb20gPSBbXTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoIWZyb20pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoZnJvbSA9PT0gY29tbW9uKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGFsdGVybmF0ZSA9IGZyb20uYWx0ZXJuYXRlO1xuICAgIGlmIChhbHRlcm5hdGUgIT09IG51bGwgJiYgYWx0ZXJuYXRlID09PSBjb21tb24pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwYXRoRnJvbS5wdXNoKGZyb20pO1xuICAgIGZyb20gPSBnZXRQYXJlbnQoZnJvbSk7XG4gIH1cbiAgdmFyIHBhdGhUbyA9IFtdO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmICghdG8pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAodG8gPT09IGNvbW1vbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBfYWx0ZXJuYXRlID0gdG8uYWx0ZXJuYXRlO1xuICAgIGlmIChfYWx0ZXJuYXRlICE9PSBudWxsICYmIF9hbHRlcm5hdGUgPT09IGNvbW1vbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHBhdGhUby5wdXNoKHRvKTtcbiAgICB0byA9IGdldFBhcmVudCh0byk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoRnJvbS5sZW5ndGg7IGkrKykge1xuICAgIGZuKHBhdGhGcm9tW2ldLCAnYnViYmxlZCcsIGFyZ0Zyb20pO1xuICB9XG4gIGZvciAodmFyIF9pID0gcGF0aFRvLmxlbmd0aDsgX2ktLSA+IDA7KSB7XG4gICAgZm4ocGF0aFRvW19pXSwgJ2NhcHR1cmVkJywgYXJnVG8pO1xuICB9XG59XG5cbi8qKlxuICogU29tZSBldmVudCB0eXBlcyBoYXZlIGEgbm90aW9uIG9mIGRpZmZlcmVudCByZWdpc3RyYXRpb24gbmFtZXMgZm9yIGRpZmZlcmVudFxuICogXCJwaGFzZXNcIiBvZiBwcm9wYWdhdGlvbi4gVGhpcyBmaW5kcyBsaXN0ZW5lcnMgYnkgYSBnaXZlbiBwaGFzZS5cbiAqL1xuZnVuY3Rpb24gbGlzdGVuZXJBdFBoYXNlKGluc3QsIGV2ZW50LCBwcm9wYWdhdGlvblBoYXNlKSB7XG4gIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcHJvcGFnYXRpb25QaGFzZV07XG4gIHJldHVybiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbn1cblxuLyoqXG4gKiBBIHNtYWxsIHNldCBvZiBwcm9wYWdhdGlvbiBwYXR0ZXJucywgZWFjaCBvZiB3aGljaCB3aWxsIGFjY2VwdCBhIHNtYWxsIGFtb3VudFxuICogb2YgaW5mb3JtYXRpb24sIGFuZCBnZW5lcmF0ZSBhIHNldCBvZiBcImRpc3BhdGNoIHJlYWR5IGV2ZW50IG9iamVjdHNcIiAtIHdoaWNoXG4gKiBhcmUgc2V0cyBvZiBldmVudHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBhbm5vdGF0ZWQgd2l0aCBhIHNldCBvZiBkaXNwYXRjaGVkXG4gKiBsaXN0ZW5lciBmdW5jdGlvbnMvaWRzLiBUaGUgQVBJIGlzIGRlc2lnbmVkIHRoaXMgd2F5IHRvIGRpc2NvdXJhZ2UgdGhlc2VcbiAqIHByb3BhZ2F0aW9uIHN0cmF0ZWdpZXMgZnJvbSBhY3R1YWxseSBleGVjdXRpbmcgdGhlIGRpc3BhdGNoZXMsIHNpbmNlIHdlXG4gKiBhbHdheXMgd2FudCB0byBjb2xsZWN0IHRoZSBlbnRpcmUgc2V0IG9mIGRpc3BhdGNoZXMgYmVmb3JlIGV4ZWN1dGluZyBldmVuIGFcbiAqIHNpbmdsZSBvbmUuXG4gKi9cblxuLyoqXG4gKiBUYWdzIGEgYFN5bnRoZXRpY0V2ZW50YCB3aXRoIGRpc3BhdGNoZWQgbGlzdGVuZXJzLiBDcmVhdGluZyB0aGlzIGZ1bmN0aW9uXG4gKiBoZXJlLCBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gYmluZCBvciBjcmVhdGUgZnVuY3Rpb25zIGZvciBlYWNoIGV2ZW50LlxuICogTXV0YXRpbmcgdGhlIGV2ZW50J3MgbWVtYmVycyBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gY3JlYXRlIGEgd3JhcHBpbmdcbiAqIFwiZGlzcGF0Y2hcIiBvYmplY3QgdGhhdCBwYWlycyB0aGUgZXZlbnQgd2l0aCB0aGUgbGlzdGVuZXIuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMoaW5zdCwgcGhhc2UsIGV2ZW50KSB7XG4gIHtcbiAgICAhaW5zdCA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0Rpc3BhdGNoaW5nIGluc3QgbXVzdCBub3QgYmUgbnVsbCcpIDogdm9pZCAwO1xuICB9XG4gIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyQXRQaGFzZShpbnN0LCBldmVudCwgcGhhc2UpO1xuICBpZiAobGlzdGVuZXIpIHtcbiAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMsIGluc3QpO1xuICB9XG59XG5cbi8qKlxuICogQ29sbGVjdCBkaXNwYXRjaGVzIChtdXN0IGJlIGVudGlyZWx5IGNvbGxlY3RlZCBiZWZvcmUgZGlzcGF0Y2hpbmcgLSBzZWUgdW5pdFxuICogdGVzdHMpLiBMYXppbHkgYWxsb2NhdGUgdGhlIGFycmF5IHRvIGNvbnNlcnZlIG1lbW9yeS4gIFdlIG11c3QgbG9vcCB0aHJvdWdoXG4gKiBlYWNoIGV2ZW50IGFuZCBwZXJmb3JtIHRoZSB0cmF2ZXJzYWwgZm9yIGVhY2ggb25lLiBXZSBjYW5ub3QgcGVyZm9ybSBhXG4gKiBzaW5nbGUgdHJhdmVyc2FsIGZvciB0aGUgZW50aXJlIGNvbGxlY3Rpb24gb2YgZXZlbnRzIGJlY2F1c2UgZWFjaCBldmVudCBtYXlcbiAqIGhhdmUgYSBkaWZmZXJlbnQgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIHRyYXZlcnNlVHdvUGhhc2UoZXZlbnQuX3RhcmdldEluc3QsIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsIGV2ZW50KTtcbiAgfVxufVxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIHdpdGhvdXQgcmVnYXJkIHRvIGRpcmVjdGlvbiwgZG9lcyBub3QgbG9vayBmb3IgcGhhc2VkXG4gKiByZWdpc3RyYXRpb24gbmFtZXMuIFNhbWUgYXMgYGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlYCBidXQgd2l0aG91dFxuICogcmVxdWlyaW5nIHRoYXQgdGhlIGBkaXNwYXRjaE1hcmtlcmAgYmUgdGhlIHNhbWUgYXMgdGhlIGRpc3BhdGNoZWQgSUQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGluc3QsIGlnbm9yZWREaXJlY3Rpb24sIGV2ZW50KSB7XG4gIGlmIChpbnN0ICYmIGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWU7XG4gICAgdmFyIGxpc3RlbmVyID0gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcywgaW5zdCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgZGlzcGF0Y2hlcyBvbiBhbiBgU3ludGhldGljRXZlbnRgLCBidXQgb25seSBmb3IgdGhlXG4gKiBgZGlzcGF0Y2hNYXJrZXJgLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhldmVudC5fdGFyZ2V0SW5zdCwgbnVsbCwgZXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUpO1xufVxuXG5cblxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbSwgdG8pIHtcbiAgdHJhdmVyc2VFbnRlckxlYXZlKGZyb20sIHRvLCBhY2N1bXVsYXRlRGlzcGF0Y2hlcywgbGVhdmUsIGVudGVyKTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8vIERvIG5vdCB1c2VzIHRoZSBiZWxvdyB0d28gbWV0aG9kcyBkaXJlY3RseSFcbi8vIEluc3RlYWQgdXNlIGNvbnN0YW50cyBleHBvcnRlZCBmcm9tIERPTVRvcExldmVsRXZlbnRUeXBlcyBpbiBSZWFjdERPTS5cbi8vIChJdCBpcyB0aGUgb25seSBtb2R1bGUgdGhhdCBpcyBhbGxvd2VkIHRvIGFjY2VzcyB0aGVzZSBtZXRob2RzLilcblxuZnVuY3Rpb24gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlO1xufVxuXG5mdW5jdGlvbiB1bnNhZmVDYXN0RE9NVG9wTGV2ZWxUeXBlVG9TdHJpbmcodG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGU7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBtYXBwaW5nIG9mIHN0YW5kYXJkIHZlbmRvciBwcmVmaXhlcyB1c2luZyB0aGUgZGVmaW5lZCBzdHlsZSBwcm9wZXJ0eSBhbmQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVQcm9wXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuXG4gIHByZWZpeGVzW3N0eWxlUHJvcC50b0xvd2VyQ2FzZSgpXSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBwcmVmaXhlc1snV2Via2l0JyArIHN0eWxlUHJvcF0gPSAnd2Via2l0JyArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbJ01veicgKyBzdHlsZVByb3BdID0gJ21veicgKyBldmVudE5hbWU7XG5cbiAgcmV0dXJuIHByZWZpeGVzO1xufVxuXG4vKipcbiAqIEEgbGlzdCBvZiBldmVudCBuYW1lcyB0byBhIGNvbmZpZ3VyYWJsZSBsaXN0IG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xudmFyIHZlbmRvclByZWZpeGVzID0ge1xuICBhbmltYXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ0FuaW1hdGlvbicsICdBbmltYXRpb25FbmQnKSxcbiAgYW5pbWF0aW9uaXRlcmF0aW9uOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uSXRlcmF0aW9uJyksXG4gIGFuaW1hdGlvbnN0YXJ0OiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uU3RhcnQnKSxcbiAgdHJhbnNpdGlvbmVuZDogbWFrZVByZWZpeE1hcCgnVHJhbnNpdGlvbicsICdUcmFuc2l0aW9uRW5kJylcbn07XG5cbi8qKlxuICogRXZlbnQgbmFtZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBkZXRlY3RlZCBhbmQgcHJlZml4ZWQgKGlmIGFwcGxpY2FibGUpLlxuICovXG52YXIgcHJlZml4ZWRFdmVudE5hbWVzID0ge307XG5cbi8qKlxuICogRWxlbWVudCB0byBjaGVjayBmb3IgcHJlZml4ZXMgb24uXG4gKi9cbnZhciBzdHlsZSA9IHt9O1xuXG4vKipcbiAqIEJvb3RzdHJhcCBpZiBhIERPTSBleGlzdHMuXG4gKi9cbmlmIChjYW5Vc2VET00pIHtcbiAgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcblxuICAvLyBPbiBzb21lIHBsYXRmb3JtcywgaW4gcGFydGljdWxhciBzb21lIHJlbGVhc2VzIG9mIEFuZHJvaWQgNC54LFxuICAvLyB0aGUgdW4tcHJlZml4ZWQgXCJhbmltYXRpb25cIiBhbmQgXCJ0cmFuc2l0aW9uXCIgcHJvcGVydGllcyBhcmUgZGVmaW5lZCBvbiB0aGVcbiAgLy8gc3R5bGUgb2JqZWN0IGJ1dCB0aGUgZXZlbnRzIHRoYXQgZmlyZSB3aWxsIHN0aWxsIGJlIHByZWZpeGVkLCBzbyB3ZSBuZWVkXG4gIC8vIHRvIGNoZWNrIGlmIHRoZSB1bi1wcmVmaXhlZCBldmVudHMgYXJlIHVzYWJsZSwgYW5kIGlmIG5vdCByZW1vdmUgdGhlbSBmcm9tIHRoZSBtYXAuXG4gIGlmICghKCdBbmltYXRpb25FdmVudCcgaW4gd2luZG93KSkge1xuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25lbmQuYW5pbWF0aW9uO1xuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uO1xuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25zdGFydC5hbmltYXRpb247XG4gIH1cblxuICAvLyBTYW1lIGFzIGFib3ZlXG4gIGlmICghKCdUcmFuc2l0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZGV0ZXJtaW5lIHRoZSBjb3JyZWN0IHZlbmRvciBwcmVmaXhlZCBldmVudCBuYW1lLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKGV2ZW50TmFtZSkge1xuICBpZiAocHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0pIHtcbiAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV07XG4gIH0gZWxzZSBpZiAoIXZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV0pIHtcbiAgICByZXR1cm4gZXZlbnROYW1lO1xuICB9XG5cbiAgdmFyIHByZWZpeE1hcCA9IHZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV07XG5cbiAgZm9yICh2YXIgc3R5bGVQcm9wIGluIHByZWZpeE1hcCkge1xuICAgIGlmIChwcmVmaXhNYXAuaGFzT3duUHJvcGVydHkoc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHJldHVybiBwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSA9IHByZWZpeE1hcFtzdHlsZVByb3BdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudE5hbWU7XG59XG5cbi8qKlxuICogVG8gaWRlbnRpZnkgdG9wIGxldmVsIGV2ZW50cyBpbiBSZWFjdERPTSwgd2UgdXNlIGNvbnN0YW50cyBkZWZpbmVkIGJ5IHRoaXNcbiAqIG1vZHVsZS4gVGhpcyBpcyB0aGUgb25seSBtb2R1bGUgdGhhdCB1c2VzIHRoZSB1bnNhZmUqIG1ldGhvZHMgdG8gZXhwcmVzc1xuICogdGhhdCB0aGUgY29uc3RhbnRzIGFjdHVhbGx5IGNvcnJlc3BvbmQgdG8gdGhlIGJyb3dzZXIgZXZlbnQgbmFtZXMuIFRoaXMgbGV0c1xuICogdXMgc2F2ZSBzb21lIGJ1bmRsZSBzaXplIGJ5IGF2b2lkaW5nIGEgdG9wIGxldmVsIHR5cGUgLT4gZXZlbnQgbmFtZSBtYXAuXG4gKiBUaGUgcmVzdCBvZiBSZWFjdERPTSBjb2RlIHNob3VsZCBpbXBvcnQgdG9wIGxldmVsIHR5cGVzIGZyb20gdGhpcyBmaWxlLlxuICovXG52YXIgVE9QX0FCT1JUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdhYm9ydCcpO1xudmFyIFRPUF9BTklNQVRJT05fRU5EID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25lbmQnKSk7XG52YXIgVE9QX0FOSU1BVElPTl9JVEVSQVRJT04gPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbml0ZXJhdGlvbicpKTtcbnZhciBUT1BfQU5JTUFUSU9OX1NUQVJUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25zdGFydCcpKTtcbnZhciBUT1BfQkxVUiA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnYmx1cicpO1xudmFyIFRPUF9DQU5fUExBWSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnY2FucGxheScpO1xudmFyIFRPUF9DQU5fUExBWV9USFJPVUdIID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdjYW5wbGF5dGhyb3VnaCcpO1xudmFyIFRPUF9DQU5DRUwgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2NhbmNlbCcpO1xudmFyIFRPUF9DSEFOR0UgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2NoYW5nZScpO1xudmFyIFRPUF9DTElDSyA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnY2xpY2snKTtcbnZhciBUT1BfQ0xPU0UgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2Nsb3NlJyk7XG52YXIgVE9QX0NPTVBPU0lUSU9OX0VORCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnY29tcG9zaXRpb25lbmQnKTtcbnZhciBUT1BfQ09NUE9TSVRJT05fU1RBUlQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2NvbXBvc2l0aW9uc3RhcnQnKTtcbnZhciBUT1BfQ09NUE9TSVRJT05fVVBEQVRFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdjb21wb3NpdGlvbnVwZGF0ZScpO1xudmFyIFRPUF9DT05URVhUX01FTlUgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2NvbnRleHRtZW51Jyk7XG52YXIgVE9QX0NPUFkgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2NvcHknKTtcbnZhciBUT1BfQ1VUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdjdXQnKTtcbnZhciBUT1BfRE9VQkxFX0NMSUNLID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdkYmxjbGljaycpO1xudmFyIFRPUF9BVVhfQ0xJQ0sgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2F1eGNsaWNrJyk7XG52YXIgVE9QX0RSQUcgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2RyYWcnKTtcbnZhciBUT1BfRFJBR19FTkQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2RyYWdlbmQnKTtcbnZhciBUT1BfRFJBR19FTlRFUiA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZHJhZ2VudGVyJyk7XG52YXIgVE9QX0RSQUdfRVhJVCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZHJhZ2V4aXQnKTtcbnZhciBUT1BfRFJBR19MRUFWRSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZHJhZ2xlYXZlJyk7XG52YXIgVE9QX0RSQUdfT1ZFUiA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZHJhZ292ZXInKTtcbnZhciBUT1BfRFJBR19TVEFSVCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZHJhZ3N0YXJ0Jyk7XG52YXIgVE9QX0RST1AgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2Ryb3AnKTtcbnZhciBUT1BfRFVSQVRJT05fQ0hBTkdFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdkdXJhdGlvbmNoYW5nZScpO1xudmFyIFRPUF9FTVBUSUVEID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdlbXB0aWVkJyk7XG52YXIgVE9QX0VOQ1JZUFRFRCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZW5jcnlwdGVkJyk7XG52YXIgVE9QX0VOREVEID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdlbmRlZCcpO1xudmFyIFRPUF9FUlJPUiA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZXJyb3InKTtcbnZhciBUT1BfRk9DVVMgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2ZvY3VzJyk7XG52YXIgVE9QX0dPVF9QT0lOVEVSX0NBUFRVUkUgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2dvdHBvaW50ZXJjYXB0dXJlJyk7XG52YXIgVE9QX0lOUFVUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdpbnB1dCcpO1xudmFyIFRPUF9JTlZBTElEID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdpbnZhbGlkJyk7XG52YXIgVE9QX0tFWV9ET1dOID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdrZXlkb3duJyk7XG52YXIgVE9QX0tFWV9QUkVTUyA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgna2V5cHJlc3MnKTtcbnZhciBUT1BfS0VZX1VQID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdrZXl1cCcpO1xudmFyIFRPUF9MT0FEID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdsb2FkJyk7XG52YXIgVE9QX0xPQURfU1RBUlQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2xvYWRzdGFydCcpO1xudmFyIFRPUF9MT0FERURfREFUQSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnbG9hZGVkZGF0YScpO1xudmFyIFRPUF9MT0FERURfTUVUQURBVEEgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2xvYWRlZG1ldGFkYXRhJyk7XG52YXIgVE9QX0xPU1RfUE9JTlRFUl9DQVBUVVJFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdsb3N0cG9pbnRlcmNhcHR1cmUnKTtcbnZhciBUT1BfTU9VU0VfRE9XTiA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnbW91c2Vkb3duJyk7XG52YXIgVE9QX01PVVNFX01PVkUgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ21vdXNlbW92ZScpO1xudmFyIFRPUF9NT1VTRV9PVVQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ21vdXNlb3V0Jyk7XG52YXIgVE9QX01PVVNFX09WRVIgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ21vdXNlb3ZlcicpO1xudmFyIFRPUF9NT1VTRV9VUCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnbW91c2V1cCcpO1xudmFyIFRPUF9QQVNURSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgncGFzdGUnKTtcbnZhciBUT1BfUEFVU0UgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3BhdXNlJyk7XG52YXIgVE9QX1BMQVkgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3BsYXknKTtcbnZhciBUT1BfUExBWUlORyA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgncGxheWluZycpO1xudmFyIFRPUF9QT0lOVEVSX0NBTkNFTCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgncG9pbnRlcmNhbmNlbCcpO1xudmFyIFRPUF9QT0lOVEVSX0RPV04gPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3BvaW50ZXJkb3duJyk7XG5cblxudmFyIFRPUF9QT0lOVEVSX01PVkUgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3BvaW50ZXJtb3ZlJyk7XG52YXIgVE9QX1BPSU5URVJfT1VUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdwb2ludGVyb3V0Jyk7XG52YXIgVE9QX1BPSU5URVJfT1ZFUiA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgncG9pbnRlcm92ZXInKTtcbnZhciBUT1BfUE9JTlRFUl9VUCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgncG9pbnRlcnVwJyk7XG52YXIgVE9QX1BST0dSRVNTID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdwcm9ncmVzcycpO1xudmFyIFRPUF9SQVRFX0NIQU5HRSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgncmF0ZWNoYW5nZScpO1xudmFyIFRPUF9SRVNFVCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgncmVzZXQnKTtcbnZhciBUT1BfU0NST0xMID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdzY3JvbGwnKTtcbnZhciBUT1BfU0VFS0VEID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdzZWVrZWQnKTtcbnZhciBUT1BfU0VFS0lORyA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnc2Vla2luZycpO1xudmFyIFRPUF9TRUxFQ1RJT05fQ0hBTkdFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdzZWxlY3Rpb25jaGFuZ2UnKTtcbnZhciBUT1BfU1RBTExFRCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnc3RhbGxlZCcpO1xudmFyIFRPUF9TVUJNSVQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3N1Ym1pdCcpO1xudmFyIFRPUF9TVVNQRU5EID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdzdXNwZW5kJyk7XG52YXIgVE9QX1RFWFRfSU5QVVQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3RleHRJbnB1dCcpO1xudmFyIFRPUF9USU1FX1VQREFURSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgndGltZXVwZGF0ZScpO1xudmFyIFRPUF9UT0dHTEUgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3RvZ2dsZScpO1xudmFyIFRPUF9UT1VDSF9DQU5DRUwgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3RvdWNoY2FuY2VsJyk7XG52YXIgVE9QX1RPVUNIX0VORCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgndG91Y2hlbmQnKTtcbnZhciBUT1BfVE9VQ0hfTU9WRSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgndG91Y2htb3ZlJyk7XG52YXIgVE9QX1RPVUNIX1NUQVJUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCd0b3VjaHN0YXJ0Jyk7XG52YXIgVE9QX1RSQU5TSVRJT05fRU5EID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCd0cmFuc2l0aW9uZW5kJykpO1xudmFyIFRPUF9WT0xVTUVfQ0hBTkdFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCd2b2x1bWVjaGFuZ2UnKTtcbnZhciBUT1BfV0FJVElORyA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnd2FpdGluZycpO1xudmFyIFRPUF9XSEVFTCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnd2hlZWwnKTtcblxuLy8gTGlzdCBvZiBldmVudHMgdGhhdCBuZWVkIHRvIGJlIGluZGl2aWR1YWxseSBhdHRhY2hlZCB0byBtZWRpYSBlbGVtZW50cy5cbi8vIE5vdGUgdGhhdCBldmVudHMgaW4gdGhpcyBsaXN0IHdpbGwgKm5vdCogYmUgbGlzdGVuZWQgdG8gYXQgdGhlIHRvcCBsZXZlbFxuLy8gdW5sZXNzIHRoZXkncmUgZXhwbGljaXRseSB3aGl0ZWxpc3RlZCBpbiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmxpc3RlblRvYC5cbnZhciBtZWRpYUV2ZW50VHlwZXMgPSBbVE9QX0FCT1JULCBUT1BfQ0FOX1BMQVksIFRPUF9DQU5fUExBWV9USFJPVUdILCBUT1BfRFVSQVRJT05fQ0hBTkdFLCBUT1BfRU1QVElFRCwgVE9QX0VOQ1JZUFRFRCwgVE9QX0VOREVELCBUT1BfRVJST1IsIFRPUF9MT0FERURfREFUQSwgVE9QX0xPQURFRF9NRVRBREFUQSwgVE9QX0xPQURfU1RBUlQsIFRPUF9QQVVTRSwgVE9QX1BMQVksIFRPUF9QTEFZSU5HLCBUT1BfUFJPR1JFU1MsIFRPUF9SQVRFX0NIQU5HRSwgVE9QX1NFRUtFRCwgVE9QX1NFRUtJTkcsIFRPUF9TVEFMTEVELCBUT1BfU1VTUEVORCwgVE9QX1RJTUVfVVBEQVRFLCBUT1BfVk9MVU1FX0NIQU5HRSwgVE9QX1dBSVRJTkddO1xuXG5mdW5jdGlvbiBnZXRSYXdFdmVudE5hbWUodG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB1bnNhZmVDYXN0RE9NVG9wTGV2ZWxUeXBlVG9TdHJpbmcodG9wTGV2ZWxUeXBlKTtcbn1cblxuLyoqXG4gKiBUaGVzZSB2YXJpYWJsZXMgc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGV4dCBjb250ZW50IG9mIGEgdGFyZ2V0IG5vZGUsXG4gKiBhbGxvd2luZyBjb21wYXJpc29uIG9mIGNvbnRlbnQgYmVmb3JlIGFuZCBhZnRlciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIElkZW50aWZ5IHRoZSBub2RlIHdoZXJlIHNlbGVjdGlvbiBjdXJyZW50bHkgYmVnaW5zLCB0aGVuIG9ic2VydmVcbiAqIGJvdGggaXRzIHRleHQgY29udGVudCBhbmQgaXRzIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIERPTS4gU2luY2UgdGhlXG4gKiBicm93c2VyIG1heSBuYXRpdmVseSByZXBsYWNlIHRoZSB0YXJnZXQgbm9kZSBkdXJpbmcgY29tcG9zaXRpb24sIHdlIGNhblxuICogdXNlIGl0cyBwb3NpdGlvbiB0byBmaW5kIGl0cyByZXBsYWNlbWVudC5cbiAqXG4gKlxuICovXG5cbnZhciByb290ID0gbnVsbDtcbnZhciBzdGFydFRleHQgPSBudWxsO1xudmFyIGZhbGxiYWNrVGV4dCA9IG51bGw7XG5cbmZ1bmN0aW9uIGluaXRpYWxpemUobmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcm9vdCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICBzdGFydFRleHQgPSBnZXRUZXh0KCk7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXNldCgpIHtcbiAgcm9vdCA9IG51bGw7XG4gIHN0YXJ0VGV4dCA9IG51bGw7XG4gIGZhbGxiYWNrVGV4dCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldERhdGEoKSB7XG4gIGlmIChmYWxsYmFja1RleHQpIHtcbiAgICByZXR1cm4gZmFsbGJhY2tUZXh0O1xuICB9XG5cbiAgdmFyIHN0YXJ0ID0gdm9pZCAwO1xuICB2YXIgc3RhcnRWYWx1ZSA9IHN0YXJ0VGV4dDtcbiAgdmFyIHN0YXJ0TGVuZ3RoID0gc3RhcnRWYWx1ZS5sZW5ndGg7XG4gIHZhciBlbmQgPSB2b2lkIDA7XG4gIHZhciBlbmRWYWx1ZSA9IGdldFRleHQoKTtcbiAgdmFyIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcblxuICBmb3IgKHN0YXJ0ID0gMDsgc3RhcnQgPCBzdGFydExlbmd0aDsgc3RhcnQrKykge1xuICAgIGlmIChzdGFydFZhbHVlW3N0YXJ0XSAhPT0gZW5kVmFsdWVbc3RhcnRdKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgZm9yIChlbmQgPSAxOyBlbmQgPD0gbWluRW5kOyBlbmQrKykge1xuICAgIGlmIChzdGFydFZhbHVlW3N0YXJ0TGVuZ3RoIC0gZW5kXSAhPT0gZW5kVmFsdWVbZW5kTGVuZ3RoIC0gZW5kXSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNsaWNlVGFpbCA9IGVuZCA+IDEgPyAxIC0gZW5kIDogdW5kZWZpbmVkO1xuICBmYWxsYmFja1RleHQgPSBlbmRWYWx1ZS5zbGljZShzdGFydCwgc2xpY2VUYWlsKTtcbiAgcmV0dXJuIGZhbGxiYWNrVGV4dDtcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dCgpIHtcbiAgaWYgKCd2YWx1ZScgaW4gcm9vdCkge1xuICAgIHJldHVybiByb290LnZhbHVlO1xuICB9XG4gIHJldHVybiByb290LnRleHRDb250ZW50O1xufVxuXG4vKiBlc2xpbnQgdmFsaWQtdHlwZW9mOiAwICovXG5cbnZhciBFVkVOVF9QT09MX1NJWkUgPSAxMDtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuICB0eXBlOiBudWxsLFxuICB0YXJnZXQ6IG51bGwsXG4gIC8vIGN1cnJlbnRUYXJnZXQgaXMgc2V0IHdoZW4gZGlzcGF0Y2hpbmc7IG5vIHVzZSBpbiBjb3B5aW5nIGl0IGhlcmVcbiAgY3VycmVudFRhcmdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBldmVudFBoYXNlOiBudWxsLFxuICBidWJibGVzOiBudWxsLFxuICBjYW5jZWxhYmxlOiBudWxsLFxuICB0aW1lU3RhbXA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBldmVudC50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcbiAgfSxcbiAgZGVmYXVsdFByZXZlbnRlZDogbnVsbCxcbiAgaXNUcnVzdGVkOiBudWxsXG59O1xuXG5mdW5jdGlvbiBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFN5bnRoZXRpYyBldmVudHMgYXJlIGRpc3BhdGNoZWQgYnkgZXZlbnQgcGx1Z2lucywgdHlwaWNhbGx5IGluIHJlc3BvbnNlIHRvIGFcbiAqIHRvcC1sZXZlbCBldmVudCBkZWxlZ2F0aW9uIGhhbmRsZXIuXG4gKlxuICogVGhlc2Ugc3lzdGVtcyBzaG91bGQgZ2VuZXJhbGx5IHVzZSBwb29saW5nIHRvIHJlZHVjZSB0aGUgZnJlcXVlbmN5IG9mIGdhcmJhZ2VcbiAqIGNvbGxlY3Rpb24uIFRoZSBzeXN0ZW0gc2hvdWxkIGNoZWNrIGBpc1BlcnNpc3RlbnRgIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZVxuICogZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGludG8gdGhlIHBvb2wgYWZ0ZXIgYmVpbmcgZGlzcGF0Y2hlZC4gVXNlcnMgdGhhdFxuICogbmVlZCBhIHBlcnNpc3RlZCBldmVudCBzaG91bGQgaW52b2tlIGBwZXJzaXN0YC5cbiAqXG4gKiBTeW50aGV0aWMgZXZlbnRzIChhbmQgc3ViY2xhc3NlcykgaW1wbGVtZW50IHRoZSBET00gTGV2ZWwgMyBFdmVudHMgQVBJIGJ5XG4gKiBub3JtYWxpemluZyBicm93c2VyIHF1aXJrcy4gU3ViY2xhc3NlcyBkbyBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0byBpbXBsZW1lbnQgYVxuICogRE9NIGludGVyZmFjZTsgY3VzdG9tIGFwcGxpY2F0aW9uLXNwZWNpZmljIGV2ZW50cyBjYW4gYWxzbyBzdWJjbGFzcyB0aGlzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0SW5zdCBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IG5hdGl2ZUV2ZW50VGFyZ2V0IFRhcmdldCBub2RlLlxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNFdmVudChkaXNwYXRjaENvbmZpZywgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHtcbiAgICAvLyB0aGVzZSBoYXZlIGEgZ2V0dGVyL3NldHRlciBmb3Igd2FybmluZ3NcbiAgICBkZWxldGUgdGhpcy5uYXRpdmVFdmVudDtcbiAgICBkZWxldGUgdGhpcy5wcmV2ZW50RGVmYXVsdDtcbiAgICBkZWxldGUgdGhpcy5zdG9wUHJvcGFnYXRpb247XG4gICAgZGVsZXRlIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkO1xuICAgIGRlbGV0ZSB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkO1xuICB9XG5cbiAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IGRpc3BhdGNoQ29uZmlnO1xuICB0aGlzLl90YXJnZXRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuXG4gIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgaWYgKCFJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAge1xuICAgICAgZGVsZXRlIHRoaXNbcHJvcE5hbWVdOyAvLyB0aGlzIGhhcyBhIGdldHRlci9zZXR0ZXIgZm9yIHdhcm5pbmdzXG4gICAgfVxuICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BOYW1lID09PSAndGFyZ2V0Jykge1xuICAgICAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkIDogbmF0aXZlRXZlbnQucmV0dXJuVmFsdWUgPT09IGZhbHNlO1xuICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gIH1cbiAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbl9hc3NpZ24oU3ludGhldGljRXZlbnQucHJvdG90eXBlLCB7XG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXZlbnQucmV0dXJuVmFsdWUgIT09ICd1bmtub3duJykge1xuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBldmVudC5jYW5jZWxCdWJibGUgIT09ICd1bmtub3duJykge1xuICAgICAgLy8gVGhlIENoYW5nZUV2ZW50UGx1Z2luIHJlZ2lzdGVycyBhIFwicHJvcGVydHljaGFuZ2VcIiBldmVudCBmb3JcbiAgICAgIC8vIElFLiBUaGlzIGV2ZW50IGRvZXMgbm90IHN1cHBvcnQgYnViYmxpbmcgb3IgY2FuY2VsbGluZywgYW5kXG4gICAgICAvLyBhbnkgcmVmZXJlbmNlcyB0byBjYW5jZWxCdWJibGUgdGhyb3cgXCJNZW1iZXIgbm90IGZvdW5kXCIuICBBXG4gICAgICAvLyB0eXBlb2YgY2hlY2sgb2YgXCJ1bmtub3duXCIgY2lyY3VtdmVudHMgdGhpcyBpc3N1ZSAoYW5kIGlzIGFsc29cbiAgICAgIC8vIElFIHNwZWNpZmljKS5cbiAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXZSByZWxlYXNlIGFsbCBkaXNwYXRjaGVkIGBTeW50aGV0aWNFdmVudGBzIGFmdGVyIGVhY2ggZXZlbnQgbG9vcCwgYWRkaW5nXG4gICAqIHRoZW0gYmFjayBpbnRvIHRoZSBwb29sLiBUaGlzIGFsbG93cyBhIHdheSB0byBob2xkIG9udG8gYSByZWZlcmVuY2UgdGhhdFxuICAgKiB3b24ndCBiZSBhZGRlZCBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqL1xuICBwZXJzaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzUGVyc2lzdGVudDogZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlLFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciBgZGVzdHJ1Y3RvcmAgb24gZWFjaCBpbnN0YW5jZSBpdCByZWxlYXNlcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgICB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wTmFtZSwgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihwcm9wTmFtZSwgSW50ZXJmYWNlW3Byb3BOYW1lXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRpc3BhdGNoQ29uZmlnID0gbnVsbDtcbiAgICB0aGlzLl90YXJnZXRJbnN0ID0gbnVsbDtcbiAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbnVsbDtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZTtcbiAgICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlO1xuICAgIHRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgICB0aGlzLl9kaXNwYXRjaEluc3RhbmNlcyA9IG51bGw7XG4gICAge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICduYXRpdmVFdmVudCcsIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24oJ25hdGl2ZUV2ZW50JywgbnVsbCkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdpc0RlZmF1bHRQcmV2ZW50ZWQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCdpc0RlZmF1bHRQcmV2ZW50ZWQnLCBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UpKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaXNQcm9wYWdhdGlvblN0b3BwZWQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCdpc1Byb3BhZ2F0aW9uU3RvcHBlZCcsIGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdwcmV2ZW50RGVmYXVsdCcsIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24oJ3ByZXZlbnREZWZhdWx0JywgZnVuY3Rpb24gKCkge30pKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RvcFByb3BhZ2F0aW9uJywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbignc3RvcFByb3BhZ2F0aW9uJywgZnVuY3Rpb24gKCkge30pKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5TeW50aGV0aWNFdmVudC5JbnRlcmZhY2UgPSBFdmVudEludGVyZmFjZTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gcmVkdWNlIGJvaWxlcnBsYXRlIHdoZW4gY3JlYXRpbmcgc3ViY2xhc3Nlcy5cbiAqL1xuU3ludGhldGljRXZlbnQuZXh0ZW5kID0gZnVuY3Rpb24gKEludGVyZmFjZSkge1xuICB2YXIgU3VwZXIgPSB0aGlzO1xuXG4gIHZhciBFID0gZnVuY3Rpb24gKCkge307XG4gIEUucHJvdG90eXBlID0gU3VwZXIucHJvdG90eXBlO1xuICB2YXIgcHJvdG90eXBlID0gbmV3IEUoKTtcblxuICBmdW5jdGlvbiBDbGFzcygpIHtcbiAgICByZXR1cm4gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuICBfYXNzaWduKHByb3RvdHlwZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgQ2xhc3MucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDbGFzcztcblxuICBDbGFzcy5JbnRlcmZhY2UgPSBfYXNzaWduKHt9LCBTdXBlci5JbnRlcmZhY2UsIEludGVyZmFjZSk7XG4gIENsYXNzLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgYWRkRXZlbnRQb29saW5nVG8oQ2xhc3MpO1xuXG4gIHJldHVybiBDbGFzcztcbn07XG5cbmFkZEV2ZW50UG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50KTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gbnVsbGlmeSBzeW50aGV0aWNFdmVudCBpbnN0YW5jZSBwcm9wZXJ0aWVzIHdoZW4gZGVzdHJ1Y3RpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcE5hbWVcbiAqIEBwYXJhbSB7P29iamVjdH0gZ2V0VmFsXG4gKiBAcmV0dXJuIHtvYmplY3R9IGRlZmluZVByb3BlcnR5IG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKHByb3BOYW1lLCBnZXRWYWwpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgZ2V0VmFsID09PSAnZnVuY3Rpb24nO1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBzZXQ6IHNldCxcbiAgICBnZXQ6IGdldFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICB2YXIgYWN0aW9uID0gaXNGdW5jdGlvbiA/ICdzZXR0aW5nIHRoZSBtZXRob2QnIDogJ3NldHRpbmcgdGhlIHByb3BlcnR5JztcbiAgICB3YXJuKGFjdGlvbiwgJ1RoaXMgaXMgZWZmZWN0aXZlbHkgYSBuby1vcCcpO1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgdmFyIGFjdGlvbiA9IGlzRnVuY3Rpb24gPyAnYWNjZXNzaW5nIHRoZSBtZXRob2QnIDogJ2FjY2Vzc2luZyB0aGUgcHJvcGVydHknO1xuICAgIHZhciByZXN1bHQgPSBpc0Z1bmN0aW9uID8gJ1RoaXMgaXMgYSBuby1vcCBmdW5jdGlvbicgOiAnVGhpcyBpcyBzZXQgdG8gbnVsbCc7XG4gICAgd2FybihhY3Rpb24sIHJlc3VsdCk7XG4gICAgcmV0dXJuIGdldFZhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhcm4oYWN0aW9uLCByZXN1bHQpIHtcbiAgICB2YXIgd2FybmluZ0NvbmRpdGlvbiA9IGZhbHNlO1xuICAgICF3YXJuaW5nQ29uZGl0aW9uID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCBcIlRoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91J3JlIHNlZWluZyB0aGlzLCBcIiArIFwieW91J3JlICVzIGAlc2Agb24gYSByZWxlYXNlZC9udWxsaWZpZWQgc3ludGhldGljIGV2ZW50LiAlcy4gXCIgKyAnSWYgeW91IG11c3Qga2VlcCB0aGUgb3JpZ2luYWwgc3ludGhldGljIGV2ZW50IGFyb3VuZCwgdXNlIGV2ZW50LnBlcnNpc3QoKS4gJyArICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLicsIGFjdGlvbiwgcHJvcE5hbWUsIHJlc3VsdCkgOiB2b2lkIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UG9vbGVkRXZlbnQoZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVJbnN0KSB7XG4gIHZhciBFdmVudENvbnN0cnVjdG9yID0gdGhpcztcbiAgaWYgKEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sLnBvcCgpO1xuICAgIEV2ZW50Q29uc3RydWN0b3IuY2FsbChpbnN0YW5jZSwgZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVJbnN0KTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cbiAgcmV0dXJuIG5ldyBFdmVudENvbnN0cnVjdG9yKGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlSW5zdCk7XG59XG5cbmZ1bmN0aW9uIHJlbGVhc2VQb29sZWRFdmVudChldmVudCkge1xuICB2YXIgRXZlbnRDb25zdHJ1Y3RvciA9IHRoaXM7XG4gICEoZXZlbnQgaW5zdGFuY2VvZiBFdmVudENvbnN0cnVjdG9yKSA/IGludmFyaWFudChmYWxzZSwgJ1RyeWluZyB0byByZWxlYXNlIGFuIGV2ZW50IGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuJykgOiB2b2lkIDA7XG4gIGV2ZW50LmRlc3RydWN0b3IoKTtcbiAgaWYgKEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sLmxlbmd0aCA8IEVWRU5UX1BPT0xfU0laRSkge1xuICAgIEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sLnB1c2goZXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50UG9vbGluZ1RvKEV2ZW50Q29uc3RydWN0b3IpIHtcbiAgRXZlbnRDb25zdHJ1Y3Rvci5ldmVudFBvb2wgPSBbXTtcbiAgRXZlbnRDb25zdHJ1Y3Rvci5nZXRQb29sZWQgPSBnZXRQb29sZWRFdmVudDtcbiAgRXZlbnRDb25zdHJ1Y3Rvci5yZWxlYXNlID0gcmVsZWFzZVBvb2xlZEV2ZW50O1xufVxuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtY29tcG9zaXRpb25ldmVudHNcbiAqL1xudmFyIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQgPSBTeW50aGV0aWNFdmVudC5leHRlbmQoe1xuICBkYXRhOiBudWxsXG59KTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1XG4gKiAgICAgIC8jZXZlbnRzLWlucHV0ZXZlbnRzXG4gKi9cbnZhciBTeW50aGV0aWNJbnB1dEV2ZW50ID0gU3ludGhldGljRXZlbnQuZXh0ZW5kKHtcbiAgZGF0YTogbnVsbFxufSk7XG5cbnZhciBFTkRfS0VZQ09ERVMgPSBbOSwgMTMsIDI3LCAzMl07IC8vIFRhYiwgUmV0dXJuLCBFc2MsIFNwYWNlXG52YXIgU1RBUlRfS0VZQ09ERSA9IDIyOTtcblxudmFyIGNhblVzZUNvbXBvc2l0aW9uRXZlbnQgPSBjYW5Vc2VET00gJiYgJ0NvbXBvc2l0aW9uRXZlbnQnIGluIHdpbmRvdztcblxudmFyIGRvY3VtZW50TW9kZSA9IG51bGw7XG5pZiAoY2FuVXNlRE9NICYmICdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB7XG4gIGRvY3VtZW50TW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcbn1cblxuLy8gV2Via2l0IG9mZmVycyBhIHZlcnkgdXNlZnVsIGB0ZXh0SW5wdXRgIGV2ZW50IHRoYXQgY2FuIGJlIHVzZWQgdG9cbi8vIGRpcmVjdGx5IHJlcHJlc2VudCBgYmVmb3JlSW5wdXRgLiBUaGUgSUUgYHRleHRpbnB1dGAgZXZlbnQgaXMgbm90IGFzXG4vLyB1c2VmdWwsIHNvIHdlIGRvbid0IHVzZSBpdC5cbnZhciBjYW5Vc2VUZXh0SW5wdXRFdmVudCA9IGNhblVzZURPTSAmJiAnVGV4dEV2ZW50JyBpbiB3aW5kb3cgJiYgIWRvY3VtZW50TW9kZTtcblxuLy8gSW4gSUU5Kywgd2UgaGF2ZSBhY2Nlc3MgdG8gY29tcG9zaXRpb24gZXZlbnRzLCBidXQgdGhlIGRhdGEgc3VwcGxpZWRcbi8vIGJ5IHRoZSBuYXRpdmUgY29tcG9zaXRpb25lbmQgZXZlbnQgbWF5IGJlIGluY29ycmVjdC4gSmFwYW5lc2UgaWRlb2dyYXBoaWNcbi8vIHNwYWNlcywgZm9yIGluc3RhbmNlIChcXHUzMDAwKSBhcmUgbm90IHJlY29yZGVkIGNvcnJlY3RseS5cbnZhciB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA9IGNhblVzZURPTSAmJiAoIWNhblVzZUNvbXBvc2l0aW9uRXZlbnQgfHwgZG9jdW1lbnRNb2RlICYmIGRvY3VtZW50TW9kZSA+IDggJiYgZG9jdW1lbnRNb2RlIDw9IDExKTtcblxudmFyIFNQQUNFQkFSX0NPREUgPSAzMjtcbnZhciBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZShTUEFDRUJBUl9DT0RFKTtcblxuLy8gRXZlbnRzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIHByb3BlcnR5IG5hbWVzLlxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGJlZm9yZUlucHV0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkJlZm9yZUlucHV0JyxcbiAgICAgIGNhcHR1cmVkOiAnb25CZWZvcmVJbnB1dENhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtUT1BfQ09NUE9TSVRJT05fRU5ELCBUT1BfS0VZX1BSRVNTLCBUT1BfVEVYVF9JTlBVVCwgVE9QX1BBU1RFXVxuICB9LFxuICBjb21wb3NpdGlvbkVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25Db21wb3NpdGlvbkVuZCcsXG4gICAgICBjYXB0dXJlZDogJ29uQ29tcG9zaXRpb25FbmRDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbVE9QX0JMVVIsIFRPUF9DT01QT1NJVElPTl9FTkQsIFRPUF9LRVlfRE9XTiwgVE9QX0tFWV9QUkVTUywgVE9QX0tFWV9VUCwgVE9QX01PVVNFX0RPV05dXG4gIH0sXG4gIGNvbXBvc2l0aW9uU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uQ29tcG9zaXRpb25TdGFydCcsXG4gICAgICBjYXB0dXJlZDogJ29uQ29tcG9zaXRpb25TdGFydENhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtUT1BfQkxVUiwgVE9QX0NPTVBPU0lUSU9OX1NUQVJULCBUT1BfS0VZX0RPV04sIFRPUF9LRVlfUFJFU1MsIFRPUF9LRVlfVVAsIFRPUF9NT1VTRV9ET1dOXVxuICB9LFxuICBjb21wb3NpdGlvblVwZGF0ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25Db21wb3NpdGlvblVwZGF0ZScsXG4gICAgICBjYXB0dXJlZDogJ29uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbVE9QX0JMVVIsIFRPUF9DT01QT1NJVElPTl9VUERBVEUsIFRPUF9LRVlfRE9XTiwgVE9QX0tFWV9QUkVTUywgVE9QX0tFWV9VUCwgVE9QX01PVVNFX0RPV05dXG4gIH1cbn07XG5cbi8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgJiZcbiAgLy8gY3RybEtleSAmJiBhbHRLZXkgaXMgZXF1aXZhbGVudCB0byBBbHRHciwgYW5kIGlzIG5vdCBhIGNvbW1hbmQuXG4gICEobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpO1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSBUT1BfQ09NUE9TSVRJT05fU1RBUlQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIGNhc2UgVE9QX0NPTVBPU0lUSU9OX0VORDpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICAgIGNhc2UgVE9QX0NPTVBPU0lUSU9OX1VQREFURTpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICB9XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgYmVzdC1ndWVzcyBtb2RlbCB0aGluayB0aGlzIGV2ZW50IHNpZ25pZmllcyB0aGF0XG4gKiBjb21wb3NpdGlvbiBoYXMgYmVndW4/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IFRPUF9LRVlfRE9XTiAmJiBuYXRpdmVFdmVudC5rZXlDb2RlID09PSBTVEFSVF9LRVlDT0RFO1xufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIG1vZGUgdGhpbmsgdGhhdCB0aGlzIGV2ZW50IGlzIHRoZSBlbmQgb2YgY29tcG9zaXRpb24/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgVE9QX0tFWV9VUDpcbiAgICAgIC8vIENvbW1hbmQga2V5cyBpbnNlcnQgb3IgY2xlYXIgSU1FIGlucHV0LlxuICAgICAgcmV0dXJuIEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMTtcbiAgICBjYXNlIFRPUF9LRVlfRE9XTjpcbiAgICAgIC8vIEV4cGVjdCBJTUUga2V5Q29kZSBvbiBlYWNoIGtleWRvd24uIElmIHdlIGdldCBhbnkgb3RoZXJcbiAgICAgIC8vIGNvZGUgd2UgbXVzdCBoYXZlIGV4aXRlZCBlYXJsaWVyLlxuICAgICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmtleUNvZGUgIT09IFNUQVJUX0tFWUNPREU7XG4gICAgY2FzZSBUT1BfS0VZX1BSRVNTOlxuICAgIGNhc2UgVE9QX01PVVNFX0RPV046XG4gICAgY2FzZSBUT1BfQkxVUjpcbiAgICAgIC8vIEV2ZW50cyBhcmUgbm90IHBvc3NpYmxlIHdpdGhvdXQgY2FuY2VsbGluZyBJTUUuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogR29vZ2xlIElucHV0IFRvb2xzIHByb3ZpZGVzIGNvbXBvc2l0aW9uIGRhdGEgdmlhIGEgQ3VzdG9tRXZlbnQsXG4gKiB3aXRoIHRoZSBgZGF0YWAgcHJvcGVydHkgcG9wdWxhdGVkIGluIHRoZSBgZGV0YWlsYCBvYmplY3QuIElmIHRoaXNcbiAqIGlzIGF2YWlsYWJsZSBvbiB0aGUgZXZlbnQgb2JqZWN0LCB1c2UgaXQuIElmIG5vdCwgdGhpcyBpcyBhIHBsYWluXG4gKiBjb21wb3NpdGlvbiBldmVudCBhbmQgd2UgaGF2ZSBub3RoaW5nIHNwZWNpYWwgdG8gZXh0cmFjdC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGRldGFpbCA9IG5hdGl2ZUV2ZW50LmRldGFpbDtcbiAgaWYgKHR5cGVvZiBkZXRhaWwgPT09ICdvYmplY3QnICYmICdkYXRhJyBpbiBkZXRhaWwpIHtcbiAgICByZXR1cm4gZGV0YWlsLmRhdGE7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBjb21wb3NpdGlvbiBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IEtvcmVhbiBJTUUuXG4gKiBPdXIgZmFsbGJhY2sgbW9kZSBkb2VzIG5vdCB3b3JrIHdlbGwgd2l0aCBJRSdzIEtvcmVhbiBJTUUsXG4gKiBzbyBqdXN0IHVzZSBuYXRpdmUgY29tcG9zaXRpb24gZXZlbnRzIHdoZW4gS29yZWFuIElNRSBpcyB1c2VkLlxuICogQWx0aG91Z2ggQ29tcG9zaXRpb25FdmVudC5sb2NhbGUgcHJvcGVydHkgaXMgZGVwcmVjYXRlZCxcbiAqIGl0IGlzIGF2YWlsYWJsZSBpbiBJRSwgd2hlcmUgb3VyIGZhbGxiYWNrIG1vZGUgaXMgZW5hYmxlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVXNpbmdLb3JlYW5JTUUobmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIG5hdGl2ZUV2ZW50LmxvY2FsZSA9PT0gJ2tvJztcbn1cblxuLy8gVHJhY2sgdGhlIGN1cnJlbnQgSU1FIGNvbXBvc2l0aW9uIHN0YXR1cywgaWYgYW55LlxudmFyIGlzQ29tcG9zaW5nID0gZmFsc2U7XG5cbi8qKlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgZXZlbnRUeXBlID0gdm9pZCAwO1xuICB2YXIgZmFsbGJhY2tEYXRhID0gdm9pZCAwO1xuXG4gIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KSB7XG4gICAgZXZlbnRUeXBlID0gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKTtcbiAgfSBlbHNlIGlmICghaXNDb21wb3NpbmcpIHtcbiAgICBpZiAoaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgfVxuXG4gIGlmICghZXZlbnRUeXBlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgJiYgIWlzVXNpbmdLb3JlYW5JTUUobmF0aXZlRXZlbnQpKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgY29tcG9zaXRpb24gaXMgc3RvcmVkIHN0YXRpY2FsbHkgYW5kIG11c3Qgbm90IGJlXG4gICAgLy8gb3ZlcndyaXR0ZW4gd2hpbGUgY29tcG9zaXRpb24gY29udGludWVzLlxuICAgIGlmICghaXNDb21wb3NpbmcgJiYgZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQpIHtcbiAgICAgIGlzQ29tcG9zaW5nID0gaW5pdGlhbGl6ZShuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgfSBlbHNlIGlmIChldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQpIHtcbiAgICAgIGlmIChpc0NvbXBvc2luZykge1xuICAgICAgICBmYWxsYmFja0RhdGEgPSBnZXREYXRhKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGV2ZW50ID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIGlmIChmYWxsYmFja0RhdGEpIHtcbiAgICAvLyBJbmplY3QgZGF0YSBnZW5lcmF0ZWQgZnJvbSBmYWxsYmFjayBwYXRoIGludG8gdGhlIHN5bnRoZXRpYyBldmVudC5cbiAgICAvLyBUaGlzIG1hdGNoZXMgdGhlIHByb3BlcnR5IG9mIG5hdGl2ZSBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlLlxuICAgIGV2ZW50LmRhdGEgPSBmYWxsYmFja0RhdGE7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1c3RvbURhdGEgPSBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAoY3VzdG9tRGF0YSAhPT0gbnVsbCkge1xuICAgICAgZXZlbnQuZGF0YSA9IGN1c3RvbURhdGE7XG4gICAgfVxuICB9XG5cbiAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RvcExldmVsVHlwZX0gdG9wTGV2ZWxUeXBlIE51bWJlciBmcm9tIGBUb3BMZXZlbFR5cGVgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIHN0cmluZyBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYGJlZm9yZUlucHV0YCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSBUT1BfQ09NUE9TSVRJT05fRU5EOlxuICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGNhc2UgVE9QX0tFWV9QUkVTUzpcbiAgICAgIC8qKlxuICAgICAgICogSWYgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50cyBhcmUgYXZhaWxhYmxlLCBvdXIgZ29hbCBpcyB0byBtYWtlXG4gICAgICAgKiB1c2Ugb2YgdGhlbS4gSG93ZXZlciwgdGhlcmUgaXMgYSBzcGVjaWFsIGNhc2U6IHRoZSBzcGFjZWJhciBrZXkuXG4gICAgICAgKiBJbiBXZWJraXQsIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBhIHNwYWNlYmFyIGB0ZXh0SW5wdXRgIGV2ZW50XG4gICAgICAgKiBjYW5jZWxzIGNoYXJhY3RlciBpbnNlcnRpb24sIGJ1dCBpdCAqYWxzbyogY2F1c2VzIHRoZSBicm93c2VyXG4gICAgICAgKiB0byBmYWxsIGJhY2sgdG8gaXRzIGRlZmF1bHQgc3BhY2ViYXIgYmVoYXZpb3Igb2Ygc2Nyb2xsaW5nIHRoZVxuICAgICAgICogcGFnZS5cbiAgICAgICAqXG4gICAgICAgKiBUcmFja2luZyBhdDpcbiAgICAgICAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNTUxMDNcbiAgICAgICAqXG4gICAgICAgKiBUbyBhdm9pZCB0aGlzIGlzc3VlLCB1c2UgdGhlIGtleXByZXNzIGV2ZW50IGFzIGlmIG5vIGB0ZXh0SW5wdXRgXG4gICAgICAgKiBldmVudCBpcyBhdmFpbGFibGUuXG4gICAgICAgKi9cbiAgICAgIHZhciB3aGljaCA9IG5hdGl2ZUV2ZW50LndoaWNoO1xuICAgICAgaWYgKHdoaWNoICE9PSBTUEFDRUJBUl9DT0RFKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gdHJ1ZTtcbiAgICAgIHJldHVybiBTUEFDRUJBUl9DSEFSO1xuXG4gICAgY2FzZSBUT1BfVEVYVF9JTlBVVDpcbiAgICAgIC8vIFJlY29yZCB0aGUgY2hhcmFjdGVycyB0byBiZSBhZGRlZCB0byB0aGUgRE9NLlxuICAgICAgdmFyIGNoYXJzID0gbmF0aXZlRXZlbnQuZGF0YTtcblxuICAgICAgLy8gSWYgaXQncyBhIHNwYWNlYmFyIGNoYXJhY3RlciwgYXNzdW1lIHRoYXQgd2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWRcbiAgICAgIC8vIGl0IGF0IHRoZSBrZXlwcmVzcyBsZXZlbCBhbmQgYmFpbCBpbW1lZGlhdGVseS4gQW5kcm9pZCBDaHJvbWVcbiAgICAgIC8vIGRvZXNuJ3QgZ2l2ZSB1cyBrZXljb2Rlcywgc28gd2UgbmVlZCB0byBpZ25vcmUgaXQuXG4gICAgICBpZiAoY2hhcnMgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoYXJzO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIEZvciBvdGhlciBuYXRpdmUgZXZlbnQgdHlwZXMsIGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEZvciBicm93c2VycyB0aGF0IGRvIG5vdCBwcm92aWRlIHRoZSBgdGV4dElucHV0YCBldmVudCwgZXh0cmFjdCB0aGVcbiAqIGFwcHJvcHJpYXRlIHN0cmluZyB0byB1c2UgZm9yIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRvcExldmVsVHlwZSBOdW1iZXIgZnJvbSBgVG9wTGV2ZWxFdmVudFR5cGVzYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBmYWxsYmFjayBzdHJpbmcgZm9yIHRoaXMgYGJlZm9yZUlucHV0YCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBjb21wb3NpbmcgKElNRSkgYW5kIHVzaW5nIGEgZmFsbGJhY2sgdG8gZG8gc28sXG4gIC8vIHRyeSB0byBleHRyYWN0IHRoZSBjb21wb3NlZCBjaGFyYWN0ZXJzIGZyb20gdGhlIGZhbGxiYWNrIG9iamVjdC5cbiAgLy8gSWYgY29tcG9zaXRpb24gZXZlbnQgaXMgYXZhaWxhYmxlLCB3ZSBleHRyYWN0IGEgc3RyaW5nIG9ubHkgYXRcbiAgLy8gY29tcG9zaXRpb25ldmVudCwgb3RoZXJ3aXNlIGV4dHJhY3QgaXQgYXQgZmFsbGJhY2sgZXZlbnRzLlxuICBpZiAoaXNDb21wb3NpbmcpIHtcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSBUT1BfQ09NUE9TSVRJT05fRU5EIHx8ICFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50ICYmIGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgdmFyIGNoYXJzID0gZ2V0RGF0YSgpO1xuICAgICAgcmVzZXQoKTtcbiAgICAgIGlzQ29tcG9zaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm4gY2hhcnM7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlIFRPUF9QQVNURTpcbiAgICAgIC8vIElmIGEgcGFzdGUgZXZlbnQgb2NjdXJzIGFmdGVyIGEga2V5cHJlc3MsIHRocm93IG91dCB0aGUgaW5wdXRcbiAgICAgIC8vIGNoYXJzLiBQYXN0ZSBldmVudHMgc2hvdWxkIG5vdCBsZWFkIHRvIEJlZm9yZUlucHV0IGV2ZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgVE9QX0tFWV9QUkVTUzpcbiAgICAgIC8qKlxuICAgICAgICogQXMgb2YgdjI3LCBGaXJlZm94IG1heSBmaXJlIGtleXByZXNzIGV2ZW50cyBldmVuIHdoZW4gbm8gY2hhcmFjdGVyXG4gICAgICAgKiB3aWxsIGJlIGluc2VydGVkLiBBIGZldyBwb3NzaWJpbGl0aWVzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyBgMGAuIEFycm93IGtleXMsIEVzYyBrZXksIGV0Yy5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBubyBjaGFyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAqICAgRXg6ICdBbHRHciArIGRgIGluIFBvbGlzaC4gVGhlcmUgaXMgbm8gbW9kaWZpZWQgY2hhcmFjdGVyIGZvclxuICAgICAgICogICB0aGlzIGtleSBjb21iaW5hdGlvbiBhbmQgbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkIGludG8gdGhlXG4gICAgICAgKiAgIGRvY3VtZW50LCBidXQgRkYgZmlyZXMgdGhlIGtleXByZXNzIGZvciBjaGFyIGNvZGUgYDEwMGAgYW55d2F5LlxuICAgICAgICogICBObyBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgYSBjb21tYW5kIGNvbWJpbmF0aW9uIGlzXG4gICAgICAgKiAgIGJlaW5nIHVzZWQuIEV4OiBgQ21kK0NgLiBObyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQsIGFuZCBub1xuICAgICAgICogICBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKi9cbiAgICAgIGlmICghaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIC8vIElFIGZpcmVzIHRoZSBga2V5cHJlc3NgIGV2ZW50IHdoZW4gYSB1c2VyIHR5cGVzIGFuIGVtb2ppIHZpYVxuICAgICAgICAvLyBUb3VjaCBrZXlib2FyZCBvZiBXaW5kb3dzLiAgSW4gc3VjaCBhIGNhc2UsIHRoZSBgY2hhcmAgcHJvcGVydHlcbiAgICAgICAgLy8gaG9sZHMgYW4gZW1vamkgY2hhcmFjdGVyIGxpa2UgYFxcdUQ4M0RcXHVERTBBYC4gIEJlY2F1c2UgaXRzIGxlbmd0aFxuICAgICAgICAvLyBpcyAyLCB0aGUgcHJvcGVydHkgYHdoaWNoYCBkb2VzIG5vdCByZXByZXNlbnQgYW4gZW1vamkgY29ycmVjdGx5LlxuICAgICAgICAvLyBJbiBzdWNoIGEgY2FzZSwgd2UgZGlyZWN0bHkgcmV0dXJuIHRoZSBgY2hhcmAgcHJvcGVydHkgaW5zdGVhZCBvZlxuICAgICAgICAvLyB1c2luZyBgd2hpY2hgLlxuICAgICAgICBpZiAobmF0aXZlRXZlbnQuY2hhciAmJiBuYXRpdmVFdmVudC5jaGFyLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gbmF0aXZlRXZlbnQuY2hhcjtcbiAgICAgICAgfSBlbHNlIGlmIChuYXRpdmVFdmVudC53aGljaCkge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBUT1BfQ09NUE9TSVRJT05fRU5EOlxuICAgICAgcmV0dXJuIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmICFpc1VzaW5nS29yZWFuSU1FKG5hdGl2ZUV2ZW50KSA/IG51bGwgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEV4dHJhY3QgYSBTeW50aGV0aWNJbnB1dEV2ZW50IGZvciBgYmVmb3JlSW5wdXRgLCBiYXNlZCBvbiBlaXRoZXIgbmF0aXZlXG4gKiBgdGV4dElucHV0YCBvciBmYWxsYmFjayBiZWhhdmlvci5cbiAqXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBjaGFycyA9IHZvaWQgMDtcblxuICBpZiAoY2FuVXNlVGV4dElucHV0RXZlbnQpIHtcbiAgICBjaGFycyA9IGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH0gZWxzZSB7XG4gICAgY2hhcnMgPSBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH1cblxuICAvLyBJZiBubyBjaGFyYWN0ZXJzIGFyZSBiZWluZyBpbnNlcnRlZCwgbm8gQmVmb3JlSW5wdXQgZXZlbnQgc2hvdWxkXG4gIC8vIGJlIGZpcmVkLlxuICBpZiAoIWNoYXJzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNJbnB1dEV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmJlZm9yZUlucHV0LCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIGV2ZW50LmRhdGEgPSBjaGFycztcbiAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYG9uQmVmb3JlSW5wdXRgIGV2ZW50IHRvIG1hdGNoXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDEzMTEwNS8jZXZlbnRzLWlucHV0ZXZlbnRzLlxuICpcbiAqIFRoaXMgZXZlbnQgcGx1Z2luIGlzIGJhc2VkIG9uIHRoZSBuYXRpdmUgYHRleHRJbnB1dGAgZXZlbnRcbiAqIGF2YWlsYWJsZSBpbiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEsIGFuZCBJRS4gVGhpcyBldmVudCBmaXJlcyBhZnRlclxuICogYG9uS2V5UHJlc3NgIGFuZCBgb25Db21wb3NpdGlvbkVuZGAsIGJ1dCBiZWZvcmUgYG9uSW5wdXRgLlxuICpcbiAqIGBiZWZvcmVJbnB1dGAgaXMgc3BlYydkIGJ1dCBub3QgaW1wbGVtZW50ZWQgaW4gYW55IGJyb3dzZXJzLCBhbmRcbiAqIHRoZSBgaW5wdXRgIGV2ZW50IGRvZXMgbm90IHByb3ZpZGUgYW55IHVzZWZ1bCBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGhhc1xuICogYWN0dWFsbHkgYmVlbiBhZGRlZCwgY29udHJhcnkgdG8gdGhlIHNwZWMuIFRodXMsIGB0ZXh0SW5wdXRgIGlzIHRoZSBiZXN0XG4gKiBhdmFpbGFibGUgZXZlbnQgdG8gaWRlbnRpZnkgdGhlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGFjdHVhbGx5IGJlZW4gaW5zZXJ0ZWRcbiAqIGludG8gdGhlIHRhcmdldCBub2RlLlxuICpcbiAqIFRoaXMgcGx1Z2luIGlzIGFsc28gcmVzcG9uc2libGUgZm9yIGVtaXR0aW5nIGBjb21wb3NpdGlvbmAgZXZlbnRzLCB0aHVzXG4gKiBhbGxvd2luZyB1cyB0byBzaGFyZSBjb21wb3NpdGlvbiBmYWxsYmFjayBjb2RlIGZvciBib3RoIGBiZWZvcmVJbnB1dGAgYW5kXG4gKiBgY29tcG9zaXRpb25gIGV2ZW50IHR5cGVzLlxuICovXG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgY29tcG9zaXRpb24gPSBleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgICB2YXIgYmVmb3JlSW5wdXQgPSBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgICBpZiAoY29tcG9zaXRpb24gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBiZWZvcmVJbnB1dDtcbiAgICB9XG5cbiAgICBpZiAoYmVmb3JlSW5wdXQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb21wb3NpdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gW2NvbXBvc2l0aW9uLCBiZWZvcmVJbnB1dF07XG4gIH1cbn07XG5cbi8vIFVzZSB0byByZXN0b3JlIGNvbnRyb2xsZWQgc3RhdGUgYWZ0ZXIgYSBjaGFuZ2UgZXZlbnQgaGFzIGZpcmVkLlxuXG52YXIgcmVzdG9yZUltcGwgPSBudWxsO1xudmFyIHJlc3RvcmVUYXJnZXQgPSBudWxsO1xudmFyIHJlc3RvcmVRdWV1ZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KHRhcmdldCkge1xuICAvLyBXZSBwZXJmb3JtIHRoaXMgdHJhbnNsYXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgZXZlbnQgbG9vcCBzbyB0aGF0IHdlXG4gIC8vIGFsd2F5cyByZWNlaXZlIHRoZSBjb3JyZWN0IGZpYmVyIGhlcmVcbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKHRhcmdldCk7XG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIC8vIFVubW91bnRlZFxuICAgIHJldHVybjtcbiAgfVxuICAhKHR5cGVvZiByZXN0b3JlSW1wbCA9PT0gJ2Z1bmN0aW9uJykgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRSZXN0b3JlSW1wbGVtZW50YXRpb24oKSBuZWVkcyB0byBiZSBjYWxsZWQgdG8gaGFuZGxlIGEgdGFyZ2V0IGZvciBjb250cm9sbGVkIGV2ZW50cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgdmFyIHByb3BzID0gZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZShpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSk7XG4gIHJlc3RvcmVJbXBsKGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlLCBpbnRlcm5hbEluc3RhbmNlLnR5cGUsIHByb3BzKTtcbn1cblxuZnVuY3Rpb24gc2V0UmVzdG9yZUltcGxlbWVudGF0aW9uKGltcGwpIHtcbiAgcmVzdG9yZUltcGwgPSBpbXBsO1xufVxuXG5mdW5jdGlvbiBlbnF1ZXVlU3RhdGVSZXN0b3JlKHRhcmdldCkge1xuICBpZiAocmVzdG9yZVRhcmdldCkge1xuICAgIGlmIChyZXN0b3JlUXVldWUpIHtcbiAgICAgIHJlc3RvcmVRdWV1ZS5wdXNoKHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3RvcmVRdWV1ZSA9IFt0YXJnZXRdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXN0b3JlVGFyZ2V0ID0gdGFyZ2V0O1xuICB9XG59XG5cbmZ1bmN0aW9uIG5lZWRzU3RhdGVSZXN0b3JlKCkge1xuICByZXR1cm4gcmVzdG9yZVRhcmdldCAhPT0gbnVsbCB8fCByZXN0b3JlUXVldWUgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlc3RvcmVTdGF0ZUlmTmVlZGVkKCkge1xuICBpZiAoIXJlc3RvcmVUYXJnZXQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHRhcmdldCA9IHJlc3RvcmVUYXJnZXQ7XG4gIHZhciBxdWV1ZWRUYXJnZXRzID0gcmVzdG9yZVF1ZXVlO1xuICByZXN0b3JlVGFyZ2V0ID0gbnVsbDtcbiAgcmVzdG9yZVF1ZXVlID0gbnVsbDtcblxuICByZXN0b3JlU3RhdGVPZlRhcmdldCh0YXJnZXQpO1xuICBpZiAocXVldWVkVGFyZ2V0cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWVkVGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdG9yZVN0YXRlT2ZUYXJnZXQocXVldWVkVGFyZ2V0c1tpXSk7XG4gICAgfVxuICB9XG59XG5cbi8vIFVzZWQgYXMgYSB3YXkgdG8gY2FsbCBiYXRjaGVkVXBkYXRlcyB3aGVuIHdlIGRvbid0IGhhdmUgYSByZWZlcmVuY2UgdG9cbi8vIHRoZSByZW5kZXJlci4gU3VjaCBhcyB3aGVuIHdlJ3JlIGRpc3BhdGNoaW5nIGV2ZW50cyBvciBpZiB0aGlyZCBwYXJ0eVxuLy8gbGlicmFyaWVzIG5lZWQgdG8gY2FsbCBiYXRjaGVkVXBkYXRlcy4gRXZlbnR1YWxseSwgdGhpcyBBUEkgd2lsbCBnbyBhd2F5IHdoZW5cbi8vIGV2ZXJ5dGhpbmcgaXMgYmF0Y2hlZCBieSBkZWZhdWx0LiBXZSdsbCB0aGVuIGhhdmUgYSBzaW1pbGFyIEFQSSB0byBvcHQtb3V0IG9mXG4vLyBzY2hlZHVsZWQgd29yayBhbmQgaW5zdGVhZCBkbyBzeW5jaHJvbm91cyB3b3JrLlxuXG4vLyBEZWZhdWx0c1xudmFyIF9iYXRjaGVkVXBkYXRlc0ltcGwgPSBmdW5jdGlvbiAoZm4sIGJvb2trZWVwaW5nKSB7XG4gIHJldHVybiBmbihib29ra2VlcGluZyk7XG59O1xudmFyIF9pbnRlcmFjdGl2ZVVwZGF0ZXNJbXBsID0gZnVuY3Rpb24gKGZuLCBhLCBiKSB7XG4gIHJldHVybiBmbihhLCBiKTtcbn07XG52YXIgX2ZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzSW1wbCA9IGZ1bmN0aW9uICgpIHt9O1xuXG52YXIgaXNCYXRjaGluZyA9IGZhbHNlO1xuZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoZm4sIGJvb2trZWVwaW5nKSB7XG4gIGlmIChpc0JhdGNoaW5nKSB7XG4gICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbnNpZGUgYW5vdGhlciBiYXRjaCwgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0XG4gICAgLy8gZnVsbHkgY29tcGxldGVzIGJlZm9yZSByZXN0b3Jpbmcgc3RhdGUuXG4gICAgcmV0dXJuIGZuKGJvb2trZWVwaW5nKTtcbiAgfVxuICBpc0JhdGNoaW5nID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gX2JhdGNoZWRVcGRhdGVzSW1wbChmbiwgYm9va2tlZXBpbmcpO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIEhlcmUgd2Ugd2FpdCB1bnRpbCBhbGwgdXBkYXRlcyBoYXZlIHByb3BhZ2F0ZWQsIHdoaWNoIGlzIGltcG9ydGFudFxuICAgIC8vIHdoZW4gdXNpbmcgY29udHJvbGxlZCBjb21wb25lbnRzIHdpdGhpbiBsYXllcnM6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNjk4XG4gICAgLy8gVGhlbiB3ZSByZXN0b3JlIHN0YXRlIG9mIGFueSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICBpc0JhdGNoaW5nID0gZmFsc2U7XG4gICAgdmFyIGNvbnRyb2xsZWRDb21wb25lbnRzSGF2ZVBlbmRpbmdVcGRhdGVzID0gbmVlZHNTdGF0ZVJlc3RvcmUoKTtcbiAgICBpZiAoY29udHJvbGxlZENvbXBvbmVudHNIYXZlUGVuZGluZ1VwZGF0ZXMpIHtcbiAgICAgIC8vIElmIGEgY29udHJvbGxlZCBldmVudCB3YXMgZmlyZWQsIHdlIG1heSBuZWVkIHRvIHJlc3RvcmUgdGhlIHN0YXRlIG9mXG4gICAgICAvLyB0aGUgRE9NIG5vZGUgYmFjayB0byB0aGUgY29udHJvbGxlZCB2YWx1ZS4gVGhpcyBpcyBuZWNlc3Nhcnkgd2hlbiBSZWFjdFxuICAgICAgLy8gYmFpbHMgb3V0IG9mIHRoZSB1cGRhdGUgd2l0aG91dCB0b3VjaGluZyB0aGUgRE9NLlxuICAgICAgX2ZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzSW1wbCgpO1xuICAgICAgcmVzdG9yZVN0YXRlSWZOZWVkZWQoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJhY3RpdmVVcGRhdGVzKGZuLCBhLCBiKSB7XG4gIHJldHVybiBfaW50ZXJhY3RpdmVVcGRhdGVzSW1wbChmbiwgYSwgYik7XG59XG5cblxuXG5mdW5jdGlvbiBzZXRCYXRjaGluZ0ltcGxlbWVudGF0aW9uKGJhdGNoZWRVcGRhdGVzSW1wbCwgaW50ZXJhY3RpdmVVcGRhdGVzSW1wbCwgZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXNJbXBsKSB7XG4gIF9iYXRjaGVkVXBkYXRlc0ltcGwgPSBiYXRjaGVkVXBkYXRlc0ltcGw7XG4gIF9pbnRlcmFjdGl2ZVVwZGF0ZXNJbXBsID0gaW50ZXJhY3RpdmVVcGRhdGVzSW1wbDtcbiAgX2ZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzSW1wbCA9IGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzSW1wbDtcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RoZS1pbnB1dC1lbGVtZW50Lmh0bWwjaW5wdXQtdHlwZS1hdHRyLXN1bW1hcnlcbiAqL1xudmFyIHN1cHBvcnRlZElucHV0VHlwZXMgPSB7XG4gIGNvbG9yOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBkYXRldGltZTogdHJ1ZSxcbiAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZSxcbiAgZW1haWw6IHRydWUsXG4gIG1vbnRoOiB0cnVlLFxuICBudW1iZXI6IHRydWUsXG4gIHBhc3N3b3JkOiB0cnVlLFxuICByYW5nZTogdHJ1ZSxcbiAgc2VhcmNoOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIHRleHQ6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgd2VlazogdHJ1ZVxufTtcblxuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdpbnB1dCcpIHtcbiAgICByZXR1cm4gISFzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV07XG4gIH1cblxuICBpZiAobm9kZU5hbWUgPT09ICd0ZXh0YXJlYScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBIVE1MIG5vZGVUeXBlIHZhbHVlcyB0aGF0IHJlcHJlc2VudCB0aGUgdHlwZSBvZiB0aGUgbm9kZVxuICovXG5cbnZhciBFTEVNRU5UX05PREUgPSAxO1xudmFyIFRFWFRfTk9ERSA9IDM7XG52YXIgQ09NTUVOVF9OT0RFID0gODtcbnZhciBET0NVTUVOVF9OT0RFID0gOTtcbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFID0gMTE7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIC8vIEZhbGxiYWNrIHRvIG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQgZm9yIElFOVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEyNTA2XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG5cbiAgLy8gTm9ybWFsaXplIFNWRyA8dXNlPiBlbGVtZW50IGV2ZW50cyAjNDk2M1xuICBpZiAodGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KSB7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50O1xuICB9XG5cbiAgLy8gU2FmYXJpIG1heSBmaXJlIGV2ZW50cyBvbiB0ZXh0IG5vZGVzIChOb2RlLlRFWFRfTk9ERSBpcyAzKS5cbiAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2V2ZW50c19wcm9wZXJ0aWVzLmh0bWxcbiAgcmV0dXJuIHRhcmdldC5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFID8gdGFyZ2V0LnBhcmVudE5vZGUgOiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZVN1ZmZpeCkge1xuICBpZiAoIWNhblVzZURPTSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIHJldHVybiBpc1N1cHBvcnRlZDtcbn1cblxuZnVuY3Rpb24gaXNDaGVja2FibGUoZWxlbSkge1xuICB2YXIgdHlwZSA9IGVsZW0udHlwZTtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZTtcbiAgcmV0dXJuIG5vZGVOYW1lICYmIG5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgKHR5cGUgPT09ICdjaGVja2JveCcgfHwgdHlwZSA9PT0gJ3JhZGlvJyk7XG59XG5cbmZ1bmN0aW9uIGdldFRyYWNrZXIobm9kZSkge1xuICByZXR1cm4gbm9kZS5fdmFsdWVUcmFja2VyO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hUcmFja2VyKG5vZGUpIHtcbiAgbm9kZS5fdmFsdWVUcmFja2VyID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVGcm9tTm9kZShub2RlKSB7XG4gIHZhciB2YWx1ZSA9ICcnO1xuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAoaXNDaGVja2FibGUobm9kZSkpIHtcbiAgICB2YWx1ZSA9IG5vZGUuY2hlY2tlZCA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBub2RlLnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiB0cmFja1ZhbHVlT25Ob2RlKG5vZGUpIHtcbiAgdmFyIHZhbHVlRmllbGQgPSBpc0NoZWNrYWJsZShub2RlKSA/ICdjaGVja2VkJyA6ICd2YWx1ZSc7XG4gIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihub2RlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgdmFsdWVGaWVsZCk7XG5cbiAgdmFyIGN1cnJlbnRWYWx1ZSA9ICcnICsgbm9kZVt2YWx1ZUZpZWxkXTtcblxuICAvLyBpZiBzb21lb25lIGhhcyBhbHJlYWR5IGRlZmluZWQgYSB2YWx1ZSBvciBTYWZhcmksIHRoZW4gYmFpbFxuICAvLyBhbmQgZG9uJ3QgdHJhY2sgdmFsdWUgd2lsbCBjYXVzZSBvdmVyIHJlcG9ydGluZyBvZiBjaGFuZ2VzLFxuICAvLyBidXQgaXQncyBiZXR0ZXIgdGhlbiBhIGhhcmQgZmFpbHVyZVxuICAvLyAobmVlZGVkIGZvciBjZXJ0YWluIHRlc3RzIHRoYXQgc3B5T24gaW5wdXQgdmFsdWVzIGFuZCBTYWZhcmkpXG4gIGlmIChub2RlLmhhc093blByb3BlcnR5KHZhbHVlRmllbGQpIHx8IHR5cGVvZiBkZXNjcmlwdG9yID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZGVzY3JpcHRvci5nZXQgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGRlc2NyaXB0b3Iuc2V0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBnZXQgPSBkZXNjcmlwdG9yLmdldCxcbiAgICAgIHNldCA9IGRlc2NyaXB0b3Iuc2V0O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCB2YWx1ZUZpZWxkLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldC5jYWxsKHRoaXMpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICBzZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgLy8gV2UgY291bGQndmUgcGFzc2VkIHRoaXMgdGhlIGZpcnN0IHRpbWVcbiAgLy8gYnV0IGl0IHRyaWdnZXJzIGEgYnVnIGluIElFMTEgYW5kIEVkZ2UgMTQvMTUuXG4gIC8vIENhbGxpbmcgZGVmaW5lUHJvcGVydHkoKSBhZ2FpbiBzaG91bGQgYmUgZXF1aXZhbGVudC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMTc2OFxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgIGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZVxuICB9KTtcblxuICB2YXIgdHJhY2tlciA9IHtcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgICB9LFxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgfSxcbiAgICBzdG9wVHJhY2tpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRldGFjaFRyYWNrZXIobm9kZSk7XG4gICAgICBkZWxldGUgbm9kZVt2YWx1ZUZpZWxkXTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB0cmFja2VyO1xufVxuXG5mdW5jdGlvbiB0cmFjayhub2RlKSB7XG4gIGlmIChnZXRUcmFja2VyKG5vZGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVE9ETzogT25jZSBpdCdzIGp1c3QgRmliZXIgd2UgY2FuIG1vdmUgdGhpcyB0byBub2RlLl93cmFwcGVyU3RhdGVcbiAgbm9kZS5fdmFsdWVUcmFja2VyID0gdHJhY2tWYWx1ZU9uTm9kZShub2RlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlVmFsdWVJZkNoYW5nZWQobm9kZSkge1xuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgdHJhY2tlciA9IGdldFRyYWNrZXIobm9kZSk7XG4gIC8vIGlmIHRoZXJlIGlzIG5vIHRyYWNrZXIgYXQgdGhpcyBwb2ludCBpdCdzIHVubGlrZWx5XG4gIC8vIHRoYXQgdHJ5aW5nIGFnYWluIHdpbGwgc3VjY2VlZFxuICBpZiAoIXRyYWNrZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBsYXN0VmFsdWUgPSB0cmFja2VyLmdldFZhbHVlKCk7XG4gIHZhciBuZXh0VmFsdWUgPSBnZXRWYWx1ZUZyb21Ob2RlKG5vZGUpO1xuICBpZiAobmV4dFZhbHVlICE9PSBsYXN0VmFsdWUpIHtcbiAgICB0cmFja2VyLnNldFZhbHVlKG5leHRWYWx1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcblxuLy8gUHJldmVudCBuZXdlciByZW5kZXJlcnMgZnJvbSBSVEUgd2hlbiB1c2VkIHdpdGggb2xkZXIgcmVhY3QgcGFja2FnZSB2ZXJzaW9ucy5cbi8vIEN1cnJlbnQgb3duZXIgYW5kIGRpc3BhdGNoZXIgdXNlZCB0byBzaGFyZSB0aGUgc2FtZSByZWYsXG4vLyBidXQgUFIgIzE0NTQ4IHNwbGl0IHRoZW0gb3V0IHRvIGJldHRlciBzdXBwb3J0IHRoZSByZWFjdC1kZWJ1Zy10b29scyBwYWNrYWdlLlxuaWYgKCFSZWFjdFNoYXJlZEludGVybmFscy5oYXNPd25Qcm9wZXJ0eSgnUmVhY3RDdXJyZW50RGlzcGF0Y2hlcicpKSB7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudERpc3BhdGNoZXIgPSB7XG4gICAgY3VycmVudDogbnVsbFxuICB9O1xufVxuXG52YXIgQkVGT1JFX1NMQVNIX1JFID0gL14oLiopW1xcXFxcXC9dLztcblxudmFyIGRlc2NyaWJlQ29tcG9uZW50RnJhbWUgPSBmdW5jdGlvbiAobmFtZSwgc291cmNlLCBvd25lck5hbWUpIHtcbiAgdmFyIHNvdXJjZUluZm8gPSAnJztcbiAgaWYgKHNvdXJjZSkge1xuICAgIHZhciBwYXRoID0gc291cmNlLmZpbGVOYW1lO1xuICAgIHZhciBmaWxlTmFtZSA9IHBhdGgucmVwbGFjZShCRUZPUkVfU0xBU0hfUkUsICcnKTtcbiAgICB7XG4gICAgICAvLyBJbiBERVYsIGluY2x1ZGUgY29kZSBmb3IgYSBjb21tb24gc3BlY2lhbCBjYXNlOlxuICAgICAgLy8gcHJlZmVyIFwiZm9sZGVyL2luZGV4LmpzXCIgaW5zdGVhZCBvZiBqdXN0IFwiaW5kZXguanNcIi5cbiAgICAgIGlmICgvXmluZGV4XFwuLy50ZXN0KGZpbGVOYW1lKSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBwYXRoLm1hdGNoKEJFRk9SRV9TTEFTSF9SRSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHZhciBwYXRoQmVmb3JlU2xhc2ggPSBtYXRjaFsxXTtcbiAgICAgICAgICBpZiAocGF0aEJlZm9yZVNsYXNoKSB7XG4gICAgICAgICAgICB2YXIgZm9sZGVyTmFtZSA9IHBhdGhCZWZvcmVTbGFzaC5yZXBsYWNlKEJFRk9SRV9TTEFTSF9SRSwgJycpO1xuICAgICAgICAgICAgZmlsZU5hbWUgPSBmb2xkZXJOYW1lICsgJy8nICsgZmlsZU5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZUluZm8gPSAnIChhdCAnICsgZmlsZU5hbWUgKyAnOicgKyBzb3VyY2UubGluZU51bWJlciArICcpJztcbiAgfSBlbHNlIGlmIChvd25lck5hbWUpIHtcbiAgICBzb3VyY2VJbmZvID0gJyAoY3JlYXRlZCBieSAnICsgb3duZXJOYW1lICsgJyknO1xuICB9XG4gIHJldHVybiAnXFxuICAgIGluICcgKyAobmFtZSB8fCAnVW5rbm93bicpICsgc291cmNlSW5mbztcbn07XG5cbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudC1saWtlIHR5cGVzLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG52YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xudmFyIFJFQUNUX1BPUlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucG9ydGFsJykgOiAweGVhY2E7XG52YXIgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZyYWdtZW50JykgOiAweGVhY2I7XG52YXIgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN0cmljdF9tb2RlJykgOiAweGVhY2M7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb2ZpbGVyJykgOiAweGVhZDI7XG52YXIgUkVBQ1RfUFJPVklERVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb3ZpZGVyJykgOiAweGVhY2Q7XG52YXIgUkVBQ1RfQ09OVEVYVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29udGV4dCcpIDogMHhlYWNlO1xuXG52YXIgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb25jdXJyZW50X21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKSA6IDB4ZWFkMDtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKSA6IDB4ZWFkMTtcbnZhciBSRUFDVF9NRU1PX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5tZW1vJykgOiAweGVhZDM7XG52YXIgUkVBQ1RfTEFaWV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubGF6eScpIDogMHhlYWQ0O1xuXG52YXIgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG52YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7XG5cbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgbWF5YmVJdGVyYXRvciA9IE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF07XG4gIGlmICh0eXBlb2YgbWF5YmVJdGVyYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBtYXliZUl0ZXJhdG9yO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUGVuZGluZyA9IDA7XG52YXIgUmVzb2x2ZWQgPSAxO1xudmFyIFJlamVjdGVkID0gMjtcblxuZnVuY3Rpb24gcmVmaW5lUmVzb2x2ZWRMYXp5Q29tcG9uZW50KGxhenlDb21wb25lbnQpIHtcbiAgcmV0dXJuIGxhenlDb21wb25lbnQuX3N0YXR1cyA9PT0gUmVzb2x2ZWQgPyBsYXp5Q29tcG9uZW50Ll9yZXN1bHQgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVkTmFtZShvdXRlclR5cGUsIGlubmVyVHlwZSwgd3JhcHBlck5hbWUpIHtcbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCAnJztcbiAgcmV0dXJuIG91dGVyVHlwZS5kaXNwbGF5TmFtZSB8fCAoZnVuY3Rpb25OYW1lICE9PSAnJyA/IHdyYXBwZXJOYW1lICsgJygnICsgZnVuY3Rpb25OYW1lICsgJyknIDogd3JhcHBlck5hbWUpO1xufVxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKHR5cGUpIHtcbiAgaWYgKHR5cGUgPT0gbnVsbCkge1xuICAgIC8vIEhvc3Qgcm9vdCwgdGV4dCBub2RlIG9yIGp1c3QgaW52YWxpZCB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHtcbiAgICBpZiAodHlwZW9mIHR5cGUudGFnID09PSAnbnVtYmVyJykge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnUmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBvYmplY3QgaW4gZ2V0Q29tcG9uZW50TmFtZSgpLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7XG4gIH1cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gJ0NvbmN1cnJlbnRNb2RlJztcbiAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICByZXR1cm4gJ0ZyYWdtZW50JztcbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuICdQb3J0YWwnO1xuICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgIHJldHVybiAnUHJvZmlsZXInO1xuICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgIHJldHVybiAnU3RyaWN0TW9kZSc7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZSc7XG4gIH1cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgIHJldHVybiAnQ29udGV4dC5Db25zdW1lcic7XG4gICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgIHJldHVybiAnQ29udGV4dC5Qcm92aWRlcic7XG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRXcmFwcGVkTmFtZSh0eXBlLCB0eXBlLnJlbmRlciwgJ0ZvcndhcmRSZWYnKTtcbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZSh0eXBlLnR5cGUpO1xuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgdGhlbmFibGUgPSB0eXBlO1xuICAgICAgICAgIHZhciByZXNvbHZlZFRoZW5hYmxlID0gcmVmaW5lUmVzb2x2ZWRMYXp5Q29tcG9uZW50KHRoZW5hYmxlKTtcbiAgICAgICAgICBpZiAocmVzb2x2ZWRUaGVuYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUocmVzb2x2ZWRUaGVuYWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG5cbmZ1bmN0aW9uIGRlc2NyaWJlRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIEhvc3RSb290OlxuICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICBjYXNlIEhvc3RUZXh0OlxuICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgY2FzZSBDb250ZXh0Q29uc3VtZXI6XG4gICAgICByZXR1cm4gJyc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHZhciBvd25lciA9IGZpYmVyLl9kZWJ1Z093bmVyO1xuICAgICAgdmFyIHNvdXJjZSA9IGZpYmVyLl9kZWJ1Z1NvdXJjZTtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShmaWJlci50eXBlKTtcbiAgICAgIHZhciBvd25lck5hbWUgPSBudWxsO1xuICAgICAgaWYgKG93bmVyKSB7XG4gICAgICAgIG93bmVyTmFtZSA9IGdldENvbXBvbmVudE5hbWUob3duZXIudHlwZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVzY3JpYmVDb21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyTmFtZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHdvcmtJblByb2dyZXNzKSB7XG4gIHZhciBpbmZvID0gJyc7XG4gIHZhciBub2RlID0gd29ya0luUHJvZ3Jlc3M7XG4gIGRvIHtcbiAgICBpbmZvICs9IGRlc2NyaWJlRmliZXIobm9kZSk7XG4gICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICB9IHdoaWxlIChub2RlKTtcbiAgcmV0dXJuIGluZm87XG59XG5cbnZhciBjdXJyZW50ID0gbnVsbDtcbnZhciBwaGFzZSA9IG51bGw7XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRGaWJlck93bmVyTmFtZUluRGV2T3JOdWxsKCkge1xuICB7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgb3duZXIgPSBjdXJyZW50Ll9kZWJ1Z093bmVyO1xuICAgIGlmIChvd25lciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3duZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZShvd25lci50eXBlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRGaWJlclN0YWNrSW5EZXYoKSB7XG4gIHtcbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICAvLyBTYWZlIGJlY2F1c2UgaWYgY3VycmVudCBmaWJlciBleGlzdHMsIHdlIGFyZSByZWNvbmNpbGluZyxcbiAgICAvLyBhbmQgaXQgaXMgZ3VhcmFudGVlZCB0byBiZSB0aGUgd29yay1pbi1wcm9ncmVzcyB2ZXJzaW9uLlxuICAgIHJldHVybiBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2QoY3VycmVudCk7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiByZXNldEN1cnJlbnRGaWJlcigpIHtcbiAge1xuICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0Q3VycmVudFN0YWNrID0gbnVsbDtcbiAgICBjdXJyZW50ID0gbnVsbDtcbiAgICBwaGFzZSA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0Q3VycmVudEZpYmVyKGZpYmVyKSB7XG4gIHtcbiAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldEN1cnJlbnRTdGFjayA9IGdldEN1cnJlbnRGaWJlclN0YWNrSW5EZXY7XG4gICAgY3VycmVudCA9IGZpYmVyO1xuICAgIHBoYXNlID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRDdXJyZW50UGhhc2UobGlmZUN5Y2xlUGhhc2UpIHtcbiAge1xuICAgIHBoYXNlID0gbGlmZUN5Y2xlUGhhc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSB3YXJuaW5nV2l0aG91dFN0YWNrJDE7XG5cbntcbiAgd2FybmluZyA9IGZ1bmN0aW9uIChjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuICAgIHZhciBzdGFjayA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC93YXJuaW5nLWFuZC1pbnZhcmlhbnQtYXJnc1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEuYXBwbHkodW5kZWZpbmVkLCBbZmFsc2UsIGZvcm1hdCArICclcyddLmNvbmNhdChhcmdzLCBbc3RhY2tdKSk7XG4gIH07XG59XG5cbnZhciB3YXJuaW5nJDEgPSB3YXJuaW5nO1xuXG4vLyBBIHJlc2VydmVkIGF0dHJpYnV0ZS5cbi8vIEl0IGlzIGhhbmRsZWQgYnkgUmVhY3Qgc2VwYXJhdGVseSBhbmQgc2hvdWxkbid0IGJlIHdyaXR0ZW4gdG8gdGhlIERPTS5cbnZhciBSRVNFUlZFRCA9IDA7XG5cbi8vIEEgc2ltcGxlIHN0cmluZyBhdHRyaWJ1dGUuXG4vLyBBdHRyaWJ1dGVzIHRoYXQgYXJlbid0IGluIHRoZSB3aGl0ZWxpc3QgYXJlIHByZXN1bWVkIHRvIGhhdmUgdGhpcyB0eXBlLlxudmFyIFNUUklORyA9IDE7XG5cbi8vIEEgc3RyaW5nIGF0dHJpYnV0ZSB0aGF0IGFjY2VwdHMgYm9vbGVhbnMgaW4gUmVhY3QuIEluIEhUTUwsIHRoZXNlIGFyZSBjYWxsZWRcbi8vIFwiZW51bWVyYXRlZFwiIGF0dHJpYnV0ZXMgd2l0aCBcInRydWVcIiBhbmQgXCJmYWxzZVwiIGFzIHBvc3NpYmxlIHZhbHVlcy5cbi8vIFdoZW4gdHJ1ZSwgaXQgc2hvdWxkIGJlIHNldCB0byBhIFwidHJ1ZVwiIHN0cmluZy5cbi8vIFdoZW4gZmFsc2UsIGl0IHNob3VsZCBiZSBzZXQgdG8gYSBcImZhbHNlXCIgc3RyaW5nLlxudmFyIEJPT0xFQU5JU0hfU1RSSU5HID0gMjtcblxuLy8gQSByZWFsIGJvb2xlYW4gYXR0cmlidXRlLlxuLy8gV2hlbiB0cnVlLCBpdCBzaG91bGQgYmUgcHJlc2VudCAoc2V0IGVpdGhlciB0byBhbiBlbXB0eSBzdHJpbmcgb3IgaXRzIG5hbWUpLlxuLy8gV2hlbiBmYWxzZSwgaXQgc2hvdWxkIGJlIG9taXR0ZWQuXG52YXIgQk9PTEVBTiA9IDM7XG5cbi8vIEFuIGF0dHJpYnV0ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgZmxhZyBhcyB3ZWxsIGFzIHdpdGggYSB2YWx1ZS5cbi8vIFdoZW4gdHJ1ZSwgaXQgc2hvdWxkIGJlIHByZXNlbnQgKHNldCBlaXRoZXIgdG8gYW4gZW1wdHkgc3RyaW5nIG9yIGl0cyBuYW1lKS5cbi8vIFdoZW4gZmFsc2UsIGl0IHNob3VsZCBiZSBvbWl0dGVkLlxuLy8gRm9yIGFueSBvdGhlciB2YWx1ZSwgc2hvdWxkIGJlIHByZXNlbnQgd2l0aCB0aGF0IHZhbHVlLlxudmFyIE9WRVJMT0FERURfQk9PTEVBTiA9IDQ7XG5cbi8vIEFuIGF0dHJpYnV0ZSB0aGF0IG11c3QgYmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhIG51bWVyaWMuXG4vLyBXaGVuIGZhbHN5LCBpdCBzaG91bGQgYmUgcmVtb3ZlZC5cbnZhciBOVU1FUklDID0gNTtcblxuLy8gQW4gYXR0cmlidXRlIHRoYXQgbXVzdCBiZSBwb3NpdGl2ZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgcG9zaXRpdmUgbnVtZXJpYy5cbi8vIFdoZW4gZmFsc3ksIGl0IHNob3VsZCBiZSByZW1vdmVkLlxudmFyIFBPU0lUSVZFX05VTUVSSUMgPSA2O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG52YXIgQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiA9ICc6QS1aX2EtelxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEJztcbi8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xudmFyIEFUVFJJQlVURV9OQU1FX0NIQVIgPSBBVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSICsgJ1xcXFwtLjAtOVxcXFx1MDBCN1xcXFx1MDMwMC1cXFxcdTAzNkZcXFxcdTIwM0YtXFxcXHUyMDQwJztcblxuXG52YXIgUk9PVF9BVFRSSUJVVEVfTkFNRSA9ICdkYXRhLXJlYWN0cm9vdCc7XG52YXIgVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVggPSBuZXcgUmVnRXhwKCdeWycgKyBBVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSICsgJ11bJyArIEFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xudmFyIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlLCBhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUsIGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWC50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAge1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWU6IGAlc2AnLCBhdHRyaWJ1dGVOYW1lKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNob3VsZElnbm9yZUF0dHJpYnV0ZShuYW1lLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIGlmIChwcm9wZXJ0eUluZm8gIT09IG51bGwpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJbmZvLnR5cGUgPT09IFJFU0VSVkVEO1xuICB9XG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAobmFtZS5sZW5ndGggPiAyICYmIChuYW1lWzBdID09PSAnbycgfHwgbmFtZVswXSA9PT0gJ08nKSAmJiAobmFtZVsxXSA9PT0gJ24nIHx8IG5hbWVbMV0gPT09ICdOJykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFJlbW92ZUF0dHJpYnV0ZVdpdGhXYXJuaW5nKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIGlmIChwcm9wZXJ0eUluZm8gIT09IG51bGwgJiYgcHJvcGVydHlJbmZvLnR5cGUgPT09IFJFU0VSVkVEKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgIC8vICRGbG93SXNzdWUgc3ltYm9sIGlzIHBlcmZlY3RseSB2YWxpZCBoZXJlXG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICBpZiAoaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5SW5mbyAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiAhcHJvcGVydHlJbmZvLmFjY2VwdHNCb29sZWFucztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJlZml4ID0gbmFtZS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsIDUpO1xuICAgICAgICAgIHJldHVybiBwcmVmaXggIT09ICdkYXRhLScgJiYgcHJlZml4ICE9PSAnYXJpYS0nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRSZW1vdmVBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoc2hvdWxkUmVtb3ZlQXR0cmlidXRlV2l0aFdhcm5pbmcobmFtZSwgdmFsdWUsIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChwcm9wZXJ0eUluZm8gIT09IG51bGwpIHtcbiAgICBzd2l0Y2ggKHByb3BlcnR5SW5mby50eXBlKSB7XG4gICAgICBjYXNlIEJPT0xFQU46XG4gICAgICAgIHJldHVybiAhdmFsdWU7XG4gICAgICBjYXNlIE9WRVJMT0FERURfQk9PTEVBTjpcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBmYWxzZTtcbiAgICAgIGNhc2UgTlVNRVJJQzpcbiAgICAgICAgcmV0dXJuIGlzTmFOKHZhbHVlKTtcbiAgICAgIGNhc2UgUE9TSVRJVkVfTlVNRVJJQzpcbiAgICAgICAgcmV0dXJuIGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA8IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlJbmZvKG5hbWUpIHtcbiAgcmV0dXJuIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBwcm9wZXJ0aWVzW25hbWVdIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIHR5cGUsIG11c3RVc2VQcm9wZXJ0eSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlTmFtZXNwYWNlKSB7XG4gIHRoaXMuYWNjZXB0c0Jvb2xlYW5zID0gdHlwZSA9PT0gQk9PTEVBTklTSF9TVFJJTkcgfHwgdHlwZSA9PT0gQk9PTEVBTiB8fCB0eXBlID09PSBPVkVSTE9BREVEX0JPT0xFQU47XG4gIHRoaXMuYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gIHRoaXMuYXR0cmlidXRlTmFtZXNwYWNlID0gYXR0cmlidXRlTmFtZXNwYWNlO1xuICB0aGlzLm11c3RVc2VQcm9wZXJ0eSA9IG11c3RVc2VQcm9wZXJ0eTtcbiAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBuYW1lO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xufVxuXG4vLyBXaGVuIGFkZGluZyBhdHRyaWJ1dGVzIHRvIHRoaXMgbGlzdCwgYmUgc3VyZSB0byBhbHNvIGFkZCB0aGVtIHRvXG4vLyB0aGUgYHBvc3NpYmxlU3RhbmRhcmROYW1lc2AgbW9kdWxlIHRvIGVuc3VyZSBjYXNpbmcgYW5kIGluY29ycmVjdFxuLy8gbmFtZSB3YXJuaW5ncy5cbnZhciBwcm9wZXJ0aWVzID0ge307XG5cbi8vIFRoZXNlIHByb3BzIGFyZSByZXNlcnZlZCBieSBSZWFjdC4gVGhleSBzaG91bGRuJ3QgYmUgd3JpdHRlbiB0byB0aGUgRE9NLlxuWydjaGlsZHJlbicsICdkYW5nZXJvdXNseVNldElubmVySFRNTCcsXG4vLyBUT0RPOiBUaGlzIHByZXZlbnRzIHRoZSBhc3NpZ25tZW50IG9mIGRlZmF1bHRWYWx1ZSB0byByZWd1bGFyXG4vLyBlbGVtZW50cyAobm90IGp1c3QgaW5wdXRzKS4gTm93IHRoYXQgUmVhY3RET01JbnB1dCBhc3NpZ25zIHRvIHRoZVxuLy8gZGVmYXVsdFZhbHVlIHByb3BlcnR5IC0tIGRvIHdlIG5lZWQgdGhpcz9cbidkZWZhdWx0VmFsdWUnLCAnZGVmYXVsdENoZWNrZWQnLCAnaW5uZXJIVE1MJywgJ3N1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZycsICdzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcnLCAnc3R5bGUnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFJFU0VSVkVELCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUsIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCk7XG59IC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuKTtcblxuLy8gQSBmZXcgUmVhY3Qgc3RyaW5nIGF0dHJpYnV0ZXMgaGF2ZSBhIGRpZmZlcmVudCBuYW1lLlxuLy8gVGhpcyBpcyBhIG1hcHBpbmcgZnJvbSBSZWFjdCBwcm9wIG5hbWVzIHRvIHRoZSBhdHRyaWJ1dGUgbmFtZXMuXG5bWydhY2NlcHRDaGFyc2V0JywgJ2FjY2VwdC1jaGFyc2V0J10sIFsnY2xhc3NOYW1lJywgJ2NsYXNzJ10sIFsnaHRtbEZvcicsICdmb3InXSwgWydodHRwRXF1aXYnLCAnaHR0cC1lcXVpdiddXS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBuYW1lID0gX3JlZlswXSxcbiAgICAgIGF0dHJpYnV0ZU5hbWUgPSBfcmVmWzFdO1xuXG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSAvLyBhdHRyaWJ1dGVOYW1lc3BhY2Vcbik7XG5cbi8vIFRoZXNlIGFyZSBcImVudW1lcmF0ZWRcIiBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBhY2NlcHQgXCJ0cnVlXCIgYW5kIFwiZmFsc2VcIi5cbi8vIEluIFJlYWN0LCB3ZSBsZXQgdXNlcnMgcGFzcyBgdHJ1ZWAgYW5kIGBmYWxzZWAgZXZlbiB0aG91Z2ggdGVjaG5pY2FsbHlcbi8vIHRoZXNlIGFyZW4ndCBib29sZWFuIGF0dHJpYnV0ZXMgKHRoZXkgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncykuXG5bJ2NvbnRlbnRFZGl0YWJsZScsICdkcmFnZ2FibGUnLCAnc3BlbGxDaGVjaycsICd2YWx1ZSddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgQk9PTEVBTklTSF9TVFJJTkcsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgbmFtZS50b0xvd2VyQ2FzZSgpLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSAvLyBhdHRyaWJ1dGVOYW1lc3BhY2Vcbik7XG5cbi8vIFRoZXNlIGFyZSBcImVudW1lcmF0ZWRcIiBTVkcgYXR0cmlidXRlcyB0aGF0IGFjY2VwdCBcInRydWVcIiBhbmQgXCJmYWxzZVwiLlxuLy8gSW4gUmVhY3QsIHdlIGxldCB1c2VycyBwYXNzIGB0cnVlYCBhbmQgYGZhbHNlYCBldmVuIHRob3VnaCB0ZWNobmljYWxseVxuLy8gdGhlc2UgYXJlbid0IGJvb2xlYW4gYXR0cmlidXRlcyAodGhleSBhcmUgY29lcmNlZCB0byBzdHJpbmdzKS5cbi8vIFNpbmNlIHRoZXNlIGFyZSBTVkcgYXR0cmlidXRlcywgdGhlaXIgYXR0cmlidXRlIG5hbWVzIGFyZSBjYXNlLXNlbnNpdGl2ZS5cblsnYXV0b1JldmVyc2UnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmb2N1c2FibGUnLCAncHJlc2VydmVBbHBoYSddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgQk9PTEVBTklTSF9TVFJJTkcsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgbmFtZSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0gLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4pO1xuXG4vLyBUaGVzZSBhcmUgSFRNTCBib29sZWFuIGF0dHJpYnV0ZXMuXG5bJ2FsbG93RnVsbFNjcmVlbicsICdhc3luYycsXG4vLyBOb3RlOiB0aGVyZSBpcyBhIHNwZWNpYWwgY2FzZSB0aGF0IHByZXZlbnRzIGl0IGZyb20gYmVpbmcgd3JpdHRlbiB0byB0aGUgRE9NXG4vLyBvbiB0aGUgY2xpZW50IHNpZGUgYmVjYXVzZSB0aGUgYnJvd3NlcnMgYXJlIGluY29uc2lzdGVudC4gSW5zdGVhZCB3ZSBjYWxsIGZvY3VzKCkuXG4nYXV0b0ZvY3VzJywgJ2F1dG9QbGF5JywgJ2NvbnRyb2xzJywgJ2RlZmF1bHQnLCAnZGVmZXInLCAnZGlzYWJsZWQnLCAnZm9ybU5vVmFsaWRhdGUnLCAnaGlkZGVuJywgJ2xvb3AnLCAnbm9Nb2R1bGUnLCAnbm9WYWxpZGF0ZScsICdvcGVuJywgJ3BsYXlzSW5saW5lJywgJ3JlYWRPbmx5JywgJ3JlcXVpcmVkJywgJ3JldmVyc2VkJywgJ3Njb3BlZCcsICdzZWFtbGVzcycsXG4vLyBNaWNyb2RhdGFcbidpdGVtU2NvcGUnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIEJPT0xFQU4sIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgbmFtZS50b0xvd2VyQ2FzZSgpLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSAvLyBhdHRyaWJ1dGVOYW1lc3BhY2Vcbik7XG5cbi8vIFRoZXNlIGFyZSB0aGUgZmV3IFJlYWN0IHByb3BzIHRoYXQgd2Ugc2V0IGFzIERPTSBwcm9wZXJ0aWVzXG4vLyByYXRoZXIgdGhhbiBhdHRyaWJ1dGVzLiBUaGVzZSBhcmUgYWxsIGJvb2xlYW5zLlxuWydjaGVja2VkJyxcbi8vIE5vdGU6IGBvcHRpb24uc2VsZWN0ZWRgIGlzIG5vdCB1cGRhdGVkIGlmIGBzZWxlY3QubXVsdGlwbGVgIGlzXG4vLyBkaXNhYmxlZCB3aXRoIGByZW1vdmVBdHRyaWJ1dGVgLiBXZSBoYXZlIHNwZWNpYWwgbG9naWMgZm9yIGhhbmRsaW5nIHRoaXMuXG4nbXVsdGlwbGUnLCAnbXV0ZWQnLCAnc2VsZWN0ZWQnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIEJPT0xFQU4sIHRydWUsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSAvLyBhdHRyaWJ1dGVOYW1lc3BhY2Vcbik7XG5cbi8vIFRoZXNlIGFyZSBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBhcmUgXCJvdmVybG9hZGVkIGJvb2xlYW5zXCI6IHRoZXkgYmVoYXZlIGxpa2Vcbi8vIGJvb2xlYW5zLCBidXQgY2FuIGFsc28gYWNjZXB0IGEgc3RyaW5nIHZhbHVlLlxuWydjYXB0dXJlJywgJ2Rvd25sb2FkJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBPVkVSTE9BREVEX0JPT0xFQU4sIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgbmFtZSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0gLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4pO1xuXG4vLyBUaGVzZSBhcmUgSFRNTCBhdHRyaWJ1dGVzIHRoYXQgbXVzdCBiZSBwb3NpdGl2ZSBudW1iZXJzLlxuWydjb2xzJywgJ3Jvd3MnLCAnc2l6ZScsICdzcGFuJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBQT1NJVElWRV9OVU1FUklDLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUsIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCk7XG59IC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuKTtcblxuLy8gVGhlc2UgYXJlIEhUTUwgYXR0cmlidXRlcyB0aGF0IG11c3QgYmUgbnVtYmVycy5cblsncm93U3BhbicsICdzdGFydCddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgTlVNRVJJQywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLnRvTG93ZXJDYXNlKCksIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCk7XG59IC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuKTtcblxudmFyIENBTUVMSVpFID0gL1tcXC1cXDpdKFthLXpdKS9nO1xudmFyIGNhcGl0YWxpemUgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgcmV0dXJuIHRva2VuWzFdLnRvVXBwZXJDYXNlKCk7XG59O1xuXG4vLyBUaGlzIGlzIGEgbGlzdCBvZiBhbGwgU1ZHIGF0dHJpYnV0ZXMgdGhhdCBuZWVkIHNwZWNpYWwgY2FzaW5nLCBuYW1lc3BhY2luZyxcbi8vIG9yIGJvb2xlYW4gdmFsdWUgYXNzaWdubWVudC4gUmVndWxhciBhdHRyaWJ1dGVzIHRoYXQganVzdCBhY2NlcHQgc3RyaW5nc1xuLy8gYW5kIGhhdmUgdGhlIHNhbWUgbmFtZXMgYXJlIG9taXR0ZWQsIGp1c3QgbGlrZSBpbiB0aGUgSFRNTCB3aGl0ZWxpc3QuXG4vLyBTb21lIG9mIHRoZXNlIGF0dHJpYnV0ZXMgY2FuIGJlIGhhcmQgdG8gZmluZC4gVGhpcyBsaXN0IHdhcyBjcmVhdGVkIGJ5XG4vLyBzY3JhcHBpbmcgdGhlIE1ETiBkb2N1bWVudGF0aW9uLlxuWydhY2NlbnQtaGVpZ2h0JywgJ2FsaWdubWVudC1iYXNlbGluZScsICdhcmFiaWMtZm9ybScsICdiYXNlbGluZS1zaGlmdCcsICdjYXAtaGVpZ2h0JywgJ2NsaXAtcGF0aCcsICdjbGlwLXJ1bGUnLCAnY29sb3ItaW50ZXJwb2xhdGlvbicsICdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnY29sb3ItcHJvZmlsZScsICdjb2xvci1yZW5kZXJpbmcnLCAnZG9taW5hbnQtYmFzZWxpbmUnLCAnZW5hYmxlLWJhY2tncm91bmQnLCAnZmlsbC1vcGFjaXR5JywgJ2ZpbGwtcnVsZScsICdmbG9vZC1jb2xvcicsICdmbG9vZC1vcGFjaXR5JywgJ2ZvbnQtZmFtaWx5JywgJ2ZvbnQtc2l6ZScsICdmb250LXNpemUtYWRqdXN0JywgJ2ZvbnQtc3RyZXRjaCcsICdmb250LXN0eWxlJywgJ2ZvbnQtdmFyaWFudCcsICdmb250LXdlaWdodCcsICdnbHlwaC1uYW1lJywgJ2dseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwnLCAnZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwnLCAnaG9yaXotYWR2LXgnLCAnaG9yaXotb3JpZ2luLXgnLCAnaW1hZ2UtcmVuZGVyaW5nJywgJ2xldHRlci1zcGFjaW5nJywgJ2xpZ2h0aW5nLWNvbG9yJywgJ21hcmtlci1lbmQnLCAnbWFya2VyLW1pZCcsICdtYXJrZXItc3RhcnQnLCAnb3ZlcmxpbmUtcG9zaXRpb24nLCAnb3ZlcmxpbmUtdGhpY2tuZXNzJywgJ3BhaW50LW9yZGVyJywgJ3Bhbm9zZS0xJywgJ3BvaW50ZXItZXZlbnRzJywgJ3JlbmRlcmluZy1pbnRlbnQnLCAnc2hhcGUtcmVuZGVyaW5nJywgJ3N0b3AtY29sb3InLCAnc3RvcC1vcGFjaXR5JywgJ3N0cmlrZXRocm91Z2gtcG9zaXRpb24nLCAnc3RyaWtldGhyb3VnaC10aGlja25lc3MnLCAnc3Ryb2tlLWRhc2hhcnJheScsICdzdHJva2UtZGFzaG9mZnNldCcsICdzdHJva2UtbGluZWNhcCcsICdzdHJva2UtbGluZWpvaW4nLCAnc3Ryb2tlLW1pdGVybGltaXQnLCAnc3Ryb2tlLW9wYWNpdHknLCAnc3Ryb2tlLXdpZHRoJywgJ3RleHQtYW5jaG9yJywgJ3RleHQtZGVjb3JhdGlvbicsICd0ZXh0LXJlbmRlcmluZycsICd1bmRlcmxpbmUtcG9zaXRpb24nLCAndW5kZXJsaW5lLXRoaWNrbmVzcycsICd1bmljb2RlLWJpZGknLCAndW5pY29kZS1yYW5nZScsICd1bml0cy1wZXItZW0nLCAndi1hbHBoYWJldGljJywgJ3YtaGFuZ2luZycsICd2LWlkZW9ncmFwaGljJywgJ3YtbWF0aGVtYXRpY2FsJywgJ3ZlY3Rvci1lZmZlY3QnLCAndmVydC1hZHYteScsICd2ZXJ0LW9yaWdpbi14JywgJ3ZlcnQtb3JpZ2luLXknLCAnd29yZC1zcGFjaW5nJywgJ3dyaXRpbmctbW9kZScsICd4bWxuczp4bGluaycsICd4LWhlaWdodCddLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgdmFyIG5hbWUgPSBhdHRyaWJ1dGVOYW1lLnJlcGxhY2UoQ0FNRUxJWkUsIGNhcGl0YWxpemUpO1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBTVFJJTkcsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgYXR0cmlidXRlTmFtZSwgbnVsbCk7XG59IC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuKTtcblxuLy8gU3RyaW5nIFNWRyBhdHRyaWJ1dGVzIHdpdGggdGhlIHhsaW5rIG5hbWVzcGFjZS5cblsneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZS5yZXBsYWNlKENBTUVMSVpFLCBjYXBpdGFsaXplKTtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIGF0dHJpYnV0ZU5hbWUsICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyk7XG59KTtcblxuLy8gU3RyaW5nIFNWRyBhdHRyaWJ1dGVzIHdpdGggdGhlIHhtbCBuYW1lc3BhY2UuXG5bJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgdmFyIG5hbWUgPSBhdHRyaWJ1dGVOYW1lLnJlcGxhY2UoQ0FNRUxJWkUsIGNhcGl0YWxpemUpO1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBTVFJJTkcsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgYXR0cmlidXRlTmFtZSwgJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZScpO1xufSk7XG5cbi8vIFRoZXNlIGF0dHJpYnV0ZSBleGlzdHMgYm90aCBpbiBIVE1MIGFuZCBTVkcuXG4vLyBUaGUgYXR0cmlidXRlIG5hbWUgaXMgY2FzZS1zZW5zaXRpdmUgaW4gU1ZHIHNvIHdlIGNhbid0IGp1c3QgdXNlXG4vLyB0aGUgUmVhY3QgbmFtZSBsaWtlIHdlIGRvIGZvciBhdHRyaWJ1dGVzIHRoYXQgZXhpc3Qgb25seSBpbiBIVE1MLlxuWyd0YWJJbmRleCcsICdjcm9zc09yaWdpbiddLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgcHJvcGVydGllc1thdHRyaWJ1dGVOYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQoYXR0cmlidXRlTmFtZSwgU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0gLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4pO1xuXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLiBPbmx5IHVzZWQgaW4gREVWIGZvciBTU1IgdmFsaWRhdGlvbi5cbiAqIFRoZSBcImV4cGVjdGVkXCIgYXJndW1lbnQgaXMgdXNlZCBhcyBhIGhpbnQgb2Ygd2hhdCB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMuXG4gKiBTb21lIHByb3BlcnRpZXMgaGF2ZSBtdWx0aXBsZSBlcXVpdmFsZW50IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lLCBleHBlY3RlZCwgcHJvcGVydHlJbmZvKSB7XG4gIHtcbiAgICBpZiAocHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eSkge1xuICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWU7XG5cbiAgICAgIHJldHVybiBub2RlW3Byb3BlcnR5TmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWU7XG5cbiAgICAgIHZhciBzdHJpbmdWYWx1ZSA9IG51bGw7XG5cbiAgICAgIGlmIChwcm9wZXJ0eUluZm8udHlwZSA9PT0gT1ZFUkxPQURFRF9CT09MRUFOKSB7XG4gICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlQXR0cmlidXRlKG5hbWUsIGV4cGVjdGVkLCBwcm9wZXJ0eUluZm8sIGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUgPT09ICcnICsgZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBleHBlY3RlZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIGlmIChzaG91bGRSZW1vdmVBdHRyaWJ1dGUobmFtZSwgZXhwZWN0ZWQsIHByb3BlcnR5SW5mbywgZmFsc2UpKSB7XG4gICAgICAgICAgLy8gV2UgaGFkIGFuIGF0dHJpYnV0ZSBidXQgc2hvdWxkbid0IGhhdmUgaGFkIG9uZSwgc28gcmVhZCBpdFxuICAgICAgICAgIC8vIGZvciB0aGUgZXJyb3IgbWVzc2FnZS5cbiAgICAgICAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5SW5mby50eXBlID09PSBCT09MRUFOKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyB3YXMgYSBib29sZWFuLCBpdCBkb2Vzbid0IG1hdHRlciB3aGF0IHRoZSB2YWx1ZSBpc1xuICAgICAgICAgIC8vIHRoZSBmYWN0IHRoYXQgd2UgaGF2ZSBpdCBpcyB0aGUgc2FtZSBhcyB0aGUgZXhwZWN0ZWQuXG4gICAgICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV2ZW4gaWYgdGhpcyBwcm9wZXJ0eSB1c2VzIGEgbmFtZXNwYWNlIHdlIHVzZSBnZXRBdHRyaWJ1dGVcbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBhc3N1bWUgaXRzIG5hbWVzcGFjZWQgbmFtZSBpcyB0aGUgc2FtZSBhcyBvdXIgY29uZmlnLlxuICAgICAgICAvLyBUbyB1c2UgZ2V0QXR0cmlidXRlTlMgd2UgbmVlZCB0aGUgbG9jYWwgbmFtZSB3aGljaCB3ZSBkb24ndCBoYXZlXG4gICAgICAgIC8vIGluIG91ciBjb25maWcgYXRtLlxuICAgICAgICBzdHJpbmdWYWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkUmVtb3ZlQXR0cmlidXRlKG5hbWUsIGV4cGVjdGVkLCBwcm9wZXJ0eUluZm8sIGZhbHNlKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nVmFsdWUgPT09IG51bGwgPyBleHBlY3RlZCA6IHN0cmluZ1ZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChzdHJpbmdWYWx1ZSA9PT0gJycgKyBleHBlY3RlZCkge1xuICAgICAgICByZXR1cm4gZXhwZWN0ZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RyaW5nVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBmb3IgYSBhdHRyaWJ1dGUgb24gYSBub2RlLiBPbmx5IHVzZWQgaW4gREVWIGZvciBTU1IgdmFsaWRhdGlvbi5cbiAqIFRoZSB0aGlyZCBhcmd1bWVudCBpcyB1c2VkIGFzIGEgaGludCBvZiB3aGF0IHRoZSBleHBlY3RlZCB2YWx1ZSBpcy4gU29tZVxuICogYXR0cmlidXRlcyBoYXZlIG11bHRpcGxlIGVxdWl2YWxlbnQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZUZvckF0dHJpYnV0ZShub2RlLCBuYW1lLCBleHBlY3RlZCkge1xuICB7XG4gICAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghbm9kZS5oYXNBdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIHJldHVybiBleHBlY3RlZCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbnVsbDtcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgaWYgKHZhbHVlID09PSAnJyArIGV4cGVjdGVkKSB7XG4gICAgICByZXR1cm4gZXhwZWN0ZWQ7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSwgdmFsdWUsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIHZhciBwcm9wZXJ0eUluZm8gPSBnZXRQcm9wZXJ0eUluZm8obmFtZSk7XG4gIGlmIChzaG91bGRJZ25vcmVBdHRyaWJ1dGUobmFtZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykpIHtcbiAgICB2YWx1ZSA9IG51bGw7XG4gIH1cbiAgLy8gSWYgdGhlIHByb3AgaXNuJ3QgaW4gdGhlIHNwZWNpYWwgbGlzdCwgdHJlYXQgaXQgYXMgYSBzaW1wbGUgYXR0cmlidXRlLlxuICBpZiAoaXNDdXN0b21Db21wb25lbnRUYWcgfHwgcHJvcGVydHlJbmZvID09PSBudWxsKSB7XG4gICAgaWYgKGlzQXR0cmlidXRlTmFtZVNhZmUobmFtZSkpIHtcbiAgICAgIHZhciBfYXR0cmlidXRlTmFtZSA9IG5hbWU7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoX2F0dHJpYnV0ZU5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoX2F0dHJpYnV0ZU5hbWUsICcnICsgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG11c3RVc2VQcm9wZXJ0eSA9IHByb3BlcnR5SW5mby5tdXN0VXNlUHJvcGVydHk7XG5cbiAgaWYgKG11c3RVc2VQcm9wZXJ0eSkge1xuICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lO1xuXG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICB2YXIgdHlwZSA9IHByb3BlcnR5SW5mby50eXBlO1xuXG4gICAgICBub2RlW3Byb3BlcnR5TmFtZV0gPSB0eXBlID09PSBCT09MRUFOID8gZmFsc2UgOiAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udHJhcnkgdG8gYHNldEF0dHJpYnV0ZWAsIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBwcm9wZXJseVxuICAgICAgLy8gYHRvU3RyaW5nYGVkIGJ5IElFOC85LlxuICAgICAgbm9kZVtwcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICAvLyBUaGUgcmVzdCBhcmUgdHJlYXRlZCBhcyBhdHRyaWJ1dGVzIHdpdGggc3BlY2lhbCBjYXNlcy5cbiAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZSxcbiAgICAgIGF0dHJpYnV0ZU5hbWVzcGFjZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lc3BhY2U7XG5cbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF90eXBlID0gcHJvcGVydHlJbmZvLnR5cGU7XG5cbiAgICB2YXIgYXR0cmlidXRlVmFsdWUgPSB2b2lkIDA7XG4gICAgaWYgKF90eXBlID09PSBCT09MRUFOIHx8IF90eXBlID09PSBPVkVSTE9BREVEX0JPT0xFQU4gJiYgdmFsdWUgPT09IHRydWUpIHtcbiAgICAgIGF0dHJpYnV0ZVZhbHVlID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGBzZXRBdHRyaWJ1dGVgIHdpdGggb2JqZWN0cyBiZWNvbWVzIG9ubHkgYFtvYmplY3RdYCBpbiBJRTgvOSxcbiAgICAgIC8vICgnJyArIHZhbHVlKSBtYWtlcyBpdCBvdXRwdXQgdGhlIGNvcnJlY3QgdG9TdHJpbmcoKS12YWx1ZS5cbiAgICAgIGF0dHJpYnV0ZVZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGF0dHJpYnV0ZU5hbWVzcGFjZSkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhhdHRyaWJ1dGVOYW1lc3BhY2UsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBGbG93IGRvZXMgbm90IGFsbG93IHN0cmluZyBjb25jYXRlbmF0aW9uIG9mIG1vc3Qgbm9uLXN0cmluZyB0eXBlcy4gVG8gd29ya1xuLy8gYXJvdW5kIHRoaXMgbGltaXRhdGlvbiwgd2UgdXNlIGFuIG9wYXF1ZSB0eXBlIHRoYXQgY2FuIG9ubHkgYmUgb2J0YWluZWQgYnlcbi8vIHBhc3NpbmcgdGhlIHZhbHVlIHRocm91Z2ggZ2V0VG9TdHJpbmdWYWx1ZSBmaXJzdC5cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiAnJyArIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdvYmplY3QnOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gZnVuY3Rpb24sIHN5bWJvbCBhcmUgYXNzaWduZWQgYXMgZW1wdHkgc3RyaW5nc1xuICAgICAgcmV0dXJuICcnO1xuICB9XG59XG5cbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEgPSBudWxsO1xuXG52YXIgUmVhY3RDb250cm9sbGVkVmFsdWVQcm9wVHlwZXMgPSB7XG4gIGNoZWNrUHJvcFR5cGVzOiBudWxsXG59O1xuXG57XG4gIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG5cbiAgdmFyIGhhc1JlYWRPbmx5VmFsdWUgPSB7XG4gICAgYnV0dG9uOiB0cnVlLFxuICAgIGNoZWNrYm94OiB0cnVlLFxuICAgIGltYWdlOiB0cnVlLFxuICAgIGhpZGRlbjogdHJ1ZSxcbiAgICByYWRpbzogdHJ1ZSxcbiAgICByZXNldDogdHJ1ZSxcbiAgICBzdWJtaXQ6IHRydWVcbiAgfTtcblxuICB2YXIgcHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgICBpZiAoaGFzUmVhZE9ubHlWYWx1ZVtwcm9wcy50eXBlXSB8fCBwcm9wcy5vbkNoYW5nZSB8fCBwcm9wcy5yZWFkT25seSB8fCBwcm9wcy5kaXNhYmxlZCB8fCBwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1lvdSBwcm92aWRlZCBhIGB2YWx1ZWAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICsgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0VmFsdWVgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gICAgfSxcbiAgICBjaGVja2VkOiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgICBpZiAocHJvcHMub25DaGFuZ2UgfHwgcHJvcHMucmVhZE9ubHkgfHwgcHJvcHMuZGlzYWJsZWQgfHwgcHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdZb3UgcHJvdmlkZWQgYSBgY2hlY2tlZGAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICsgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0Q2hlY2tlZGAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFByb3ZpZGUgYSBsaW5rZWQgYHZhbHVlYCBhdHRyaWJ1dGUgZm9yIGNvbnRyb2xsZWQgZm9ybXMuIFlvdSBzaG91bGQgbm90IHVzZVxuICAgKiB0aGlzIG91dHNpZGUgb2YgdGhlIFJlYWN0RE9NIGNvbnRyb2xsZWQgZm9ybSBjb21wb25lbnRzLlxuICAgKi9cbiAgUmVhY3RDb250cm9sbGVkVmFsdWVQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBmdW5jdGlvbiAodGFnTmFtZSwgcHJvcHMpIHtcbiAgICBjaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIHByb3BzLCAncHJvcCcsIHRhZ05hbWUsIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMS5nZXRTdGFja0FkZGVuZHVtKTtcbiAgfTtcbn1cblxudmFyIGVuYWJsZVVzZXJUaW1pbmdBUEkgPSB0cnVlO1xuXG4vLyBIZWxwcyBpZGVudGlmeSBzaWRlIGVmZmVjdHMgaW4gYmVnaW4tcGhhc2UgbGlmZWN5Y2xlIGhvb2tzIGFuZCBzZXRTdGF0ZSByZWR1Y2VyczpcbnZhciBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHMgPSBmYWxzZTtcblxuLy8gSW4gc29tZSBjYXNlcywgU3RyaWN0TW9kZSBzaG91bGQgYWxzbyBkb3VibGUtcmVuZGVyIGxpZmVjeWNsZXMuXG4vLyBUaGlzIGNhbiBiZSBjb25mdXNpbmcgZm9yIHRlc3RzIHRob3VnaCxcbi8vIEFuZCBpdCBjYW4gYmUgYmFkIGZvciBwZXJmb3JtYW5jZSBpbiBwcm9kdWN0aW9uLlxuLy8gVGhpcyBmZWF0dXJlIGZsYWcgY2FuIGJlIHVzZWQgdG8gY29udHJvbCB0aGUgYmVoYXZpb3I6XG52YXIgZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSA9IHRydWU7XG5cbi8vIFRvIHByZXNlcnZlIHRoZSBcIlBhdXNlIG9uIGNhdWdodCBleGNlcHRpb25zXCIgYmVoYXZpb3Igb2YgdGhlIGRlYnVnZ2VyLCB3ZVxuLy8gcmVwbGF5IHRoZSBiZWdpbiBwaGFzZSBvZiBhIGZhaWxlZCBjb21wb25lbnQgaW5zaWRlIGludm9rZUd1YXJkZWRDYWxsYmFjay5cbnZhciByZXBsYXlGYWlsZWRVbml0T2ZXb3JrV2l0aEludm9rZUd1YXJkZWRDYWxsYmFjayA9IHRydWU7XG5cbi8vIFdhcm4gYWJvdXQgZGVwcmVjYXRlZCwgYXN5bmMtdW5zYWZlIGxpZmVjeWNsZXM7IHJlbGF0ZXMgdG8gUkZDICM2OlxudmFyIHdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzID0gZmFsc2U7XG5cbi8vIEdhdGhlciBhZHZhbmNlZCB0aW1pbmcgbWV0cmljcyBmb3IgUHJvZmlsZXIgc3VidHJlZXMuXG52YXIgZW5hYmxlUHJvZmlsZXJUaW1lciA9IHRydWU7XG5cbi8vIFRyYWNlIHdoaWNoIGludGVyYWN0aW9ucyB0cmlnZ2VyIGVhY2ggY29tbWl0LlxudmFyIGVuYWJsZVNjaGVkdWxlclRyYWNpbmcgPSB0cnVlO1xuXG4vLyBPbmx5IHVzZWQgaW4gd3d3IGJ1aWxkcy5cbnZhciBlbmFibGVTdXNwZW5zZVNlcnZlclJlbmRlcmVyID0gZmFsc2U7IC8vIFRPRE86IHRydWU/IEhlcmUgaXQgbWlnaHQganVzdCBiZSBmYWxzZS5cblxuLy8gT25seSB1c2VkIGluIHd3dyBidWlsZHMuXG5cblxuLy8gT25seSB1c2VkIGluIHd3dyBidWlsZHMuXG5cblxuLy8gUmVhY3QgRmlyZTogcHJldmVudCB0aGUgdmFsdWUgYW5kIGNoZWNrZWQgYXR0cmlidXRlcyBmcm9tIHN5bmNpbmdcbi8vIHdpdGggdGhlaXIgcmVsYXRlZCBET00gcHJvcGVydGllc1xudmFyIGRpc2FibGVJbnB1dEF0dHJpYnV0ZVN5bmNpbmcgPSBmYWxzZTtcblxuLy8gVGhlc2UgQVBJcyB3aWxsIG5vIGxvbmdlciBiZSBcInVuc3RhYmxlXCIgaW4gdGhlIHVwY29taW5nIDE2LjcgcmVsZWFzZSxcbi8vIENvbnRyb2wgdGhpcyBiZWhhdmlvciB3aXRoIGEgZmxhZyB0byBzdXBwb3J0IDE2LjYgbWlub3IgcmVsZWFzZXMgaW4gdGhlIG1lYW53aGlsZS5cbnZhciBlbmFibGVTdGFibGVDb25jdXJyZW50TW9kZUFQSXMgPSBmYWxzZTtcblxudmFyIHdhcm5BYm91dFNob3J0aGFuZFByb3BlcnR5Q29sbGlzaW9uID0gZmFsc2U7XG5cbi8vIFRPRE86IGRpcmVjdCBpbXBvcnRzIGxpa2Ugc29tZS1wYWNrYWdlL3NyYy8qIGFyZSBiYWQuIEZpeCBtZS5cbnZhciBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUgPSBmYWxzZTtcbnZhciBkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkID0gZmFsc2U7XG52YXIgZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCA9IGZhbHNlO1xudmFyIGRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gaXNDb250cm9sbGVkKHByb3BzKSB7XG4gIHZhciB1c2VzQ2hlY2tlZCA9IHByb3BzLnR5cGUgPT09ICdjaGVja2JveCcgfHwgcHJvcHMudHlwZSA9PT0gJ3JhZGlvJztcbiAgcmV0dXJuIHVzZXNDaGVja2VkID8gcHJvcHMuY2hlY2tlZCAhPSBudWxsIDogcHJvcHMudmFsdWUgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGFuIDxpbnB1dD4gaG9zdCBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyB0aGVzZSBvcHRpb25hbFxuICogcHJvcHM6IGBjaGVja2VkYCwgYHZhbHVlYCwgYGRlZmF1bHRDaGVja2VkYCwgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICpcbiAqIElmIGBjaGVja2VkYCBvciBgdmFsdWVgIGFyZSBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zXG4gKiB0aGF0IGFmZmVjdCB0aGUgY2hlY2tlZCBzdGF0ZSBvciB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiB0aGV5IGFyZSBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgbm90XG4gKiB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBwcm9wcyBtdXN0IGNoYW5nZSBpbiBvcmRlciBmb3JcbiAqIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCBhcyB1bmNoZWNrZWQgKG9yIGBkZWZhdWx0Q2hlY2tlZGApXG4gKiB3aXRoIGFuIGVtcHR5IHZhbHVlIChvciBgZGVmYXVsdFZhbHVlYCkuXG4gKlxuICogU2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTIvV0QtaHRtbDUtMjAxMjEwMjUvdGhlLWlucHV0LWVsZW1lbnQuaHRtbFxuICovXG5cbmZ1bmN0aW9uIGdldEhvc3RQcm9wcyhlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZDtcblxuICB2YXIgaG9zdFByb3BzID0gX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICBkZWZhdWx0Q2hlY2tlZDogdW5kZWZpbmVkLFxuICAgIGRlZmF1bHRWYWx1ZTogdW5kZWZpbmVkLFxuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgY2hlY2tlZDogY2hlY2tlZCAhPSBudWxsID8gY2hlY2tlZCA6IG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZFxuICB9KTtcblxuICByZXR1cm4gaG9zdFByb3BzO1xufVxuXG5mdW5jdGlvbiBpbml0V3JhcHBlclN0YXRlKGVsZW1lbnQsIHByb3BzKSB7XG4gIHtcbiAgICBSZWFjdENvbnRyb2xsZWRWYWx1ZVByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygnaW5wdXQnLCBwcm9wcyk7XG5cbiAgICBpZiAocHJvcHMuY2hlY2tlZCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRDaGVja2VkICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJyVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIGNoZWNrZWQgYW5kIGRlZmF1bHRDaGVja2VkIHByb3BzLiAnICsgJ0lucHV0IGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSBjaGVja2VkIHByb3AsIG9yIHRoZSBkZWZhdWx0Q2hlY2tlZCBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpO1xuICAgICAgZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJyVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIHZhbHVlIGFuZCBkZWZhdWx0VmFsdWUgcHJvcHMuICcgKyAnSW5wdXQgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lSW5EZXZPck51bGwoKSB8fCAnQSBjb21wb25lbnQnLCBwcm9wcy50eXBlKTtcbiAgICAgIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB2YXIgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlID09IG51bGwgPyAnJyA6IHByb3BzLmRlZmF1bHRWYWx1ZTtcblxuICBub2RlLl93cmFwcGVyU3RhdGUgPSB7XG4gICAgaW5pdGlhbENoZWNrZWQ6IHByb3BzLmNoZWNrZWQgIT0gbnVsbCA/IHByb3BzLmNoZWNrZWQgOiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICBpbml0aWFsVmFsdWU6IGdldFRvU3RyaW5nVmFsdWUocHJvcHMudmFsdWUgIT0gbnVsbCA/IHByb3BzLnZhbHVlIDogZGVmYXVsdFZhbHVlKSxcbiAgICBjb250cm9sbGVkOiBpc0NvbnRyb2xsZWQocHJvcHMpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoZWNrZWQoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB2YXIgY2hlY2tlZCA9IHByb3BzLmNoZWNrZWQ7XG4gIGlmIChjaGVja2VkICE9IG51bGwpIHtcbiAgICBzZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsICdjaGVja2VkJywgY2hlY2tlZCwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVdyYXBwZXIoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB7XG4gICAgdmFyIF9jb250cm9sbGVkID0gaXNDb250cm9sbGVkKHByb3BzKTtcblxuICAgIGlmICghbm9kZS5fd3JhcHBlclN0YXRlLmNvbnRyb2xsZWQgJiYgX2NvbnRyb2xsZWQgJiYgIWRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ0EgY29tcG9uZW50IGlzIGNoYW5naW5nIGFuIHVuY29udHJvbGxlZCBpbnB1dCBvZiB0eXBlICVzIHRvIGJlIGNvbnRyb2xsZWQuICcgKyAnSW5wdXQgZWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgcHJvcHMudHlwZSk7XG4gICAgICBkaWRXYXJuVW5jb250cm9sbGVkVG9Db250cm9sbGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG5vZGUuX3dyYXBwZXJTdGF0ZS5jb250cm9sbGVkICYmICFfY29udHJvbGxlZCAmJiAhZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgYSBjb250cm9sbGVkIGlucHV0IG9mIHR5cGUgJXMgdG8gYmUgdW5jb250cm9sbGVkLiAnICsgJ0lucHV0IGVsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiAnICsgJ0RlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4gTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycsIHByb3BzLnR5cGUpO1xuICAgICAgZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlQ2hlY2tlZChlbGVtZW50LCBwcm9wcyk7XG5cbiAgdmFyIHZhbHVlID0gZ2V0VG9TdHJpbmdWYWx1ZShwcm9wcy52YWx1ZSk7XG4gIHZhciB0eXBlID0gcHJvcHMudHlwZTtcblxuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKHZhbHVlID09PSAwICYmIG5vZGUudmFsdWUgPT09ICcnIHx8XG4gICAgICAvLyBXZSBleHBsaWNpdGx5IHdhbnQgdG8gY29lcmNlIHRvIG51bWJlciBoZXJlIGlmIHBvc3NpYmxlLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBub2RlLnZhbHVlICE9IHZhbHVlKSB7XG4gICAgICAgIG5vZGUudmFsdWUgPSB0b1N0cmluZyh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnZhbHVlICE9PSB0b1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIG5vZGUudmFsdWUgPSB0b1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdWJtaXQnIHx8IHR5cGUgPT09ICdyZXNldCcpIHtcbiAgICAvLyBTdWJtaXQvcmVzZXQgaW5wdXRzIG5lZWQgdGhlIGF0dHJpYnV0ZSByZW1vdmVkIGNvbXBsZXRlbHkgdG8gYXZvaWRcbiAgICAvLyBibGFuay10ZXh0IGJ1dHRvbnMuXG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRpc2FibGVJbnB1dEF0dHJpYnV0ZVN5bmNpbmcpIHtcbiAgICAvLyBXaGVuIG5vdCBzeW5jaW5nIHRoZSB2YWx1ZSBhdHRyaWJ1dGUsIFJlYWN0IG9ubHkgYXNzaWducyBhIG5ldyB2YWx1ZVxuICAgIC8vIHdoZW5ldmVyIHRoZSBkZWZhdWx0VmFsdWUgUmVhY3QgcHJvcCBoYXMgY2hhbmdlZC4gV2hlbiBub3QgcHJlc2VudCxcbiAgICAvLyBSZWFjdCBkb2VzIG5vdGhpbmdcbiAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHRWYWx1ZScpKSB7XG4gICAgICBzZXREZWZhdWx0VmFsdWUobm9kZSwgcHJvcHMudHlwZSwgZ2V0VG9TdHJpbmdWYWx1ZShwcm9wcy5kZWZhdWx0VmFsdWUpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiBzeW5jaW5nIHRoZSB2YWx1ZSBhdHRyaWJ1dGUsIHRoZSB2YWx1ZSBjb21lcyBmcm9tIGEgY2FzY2FkZSBvZlxuICAgIC8vIHByb3BlcnRpZXM6XG4gICAgLy8gIDEuIFRoZSB2YWx1ZSBSZWFjdCBwcm9wZXJ0eVxuICAgIC8vICAyLiBUaGUgZGVmYXVsdFZhbHVlIFJlYWN0IHByb3BlcnR5XG4gICAgLy8gIDMuIE90aGVyd2lzZSB0aGVyZSBzaG91bGQgYmUgbm8gY2hhbmdlXG4gICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XG4gICAgICBzZXREZWZhdWx0VmFsdWUobm9kZSwgcHJvcHMudHlwZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHRWYWx1ZScpKSB7XG4gICAgICBzZXREZWZhdWx0VmFsdWUobm9kZSwgcHJvcHMudHlwZSwgZ2V0VG9TdHJpbmdWYWx1ZShwcm9wcy5kZWZhdWx0VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlzYWJsZUlucHV0QXR0cmlidXRlU3luY2luZykge1xuICAgIC8vIFdoZW4gbm90IHN5bmNpbmcgdGhlIGNoZWNrZWQgYXR0cmlidXRlLCB0aGUgYXR0cmlidXRlIGlzIGRpcmVjdGx5XG4gICAgLy8gY29udHJvbGxhYmxlIGZyb20gdGhlIGRlZmF1bHRWYWx1ZSBSZWFjdCBwcm9wZXJ0eS4gSXQgbmVlZHMgdG8gYmVcbiAgICAvLyB1cGRhdGVkIGFzIG5ldyBwcm9wcyBjb21lIGluLlxuICAgIGlmIChwcm9wcy5kZWZhdWx0Q2hlY2tlZCA9PSBudWxsKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnY2hlY2tlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gISFwcm9wcy5kZWZhdWx0Q2hlY2tlZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiBzeW5jaW5nIHRoZSBjaGVja2VkIGF0dHJpYnV0ZSwgaXQgb25seSBjaGFuZ2VzIHdoZW4gaXQgbmVlZHNcbiAgICAvLyB0byBiZSByZW1vdmVkLCBzdWNoIGFzIHRyYW5zaXRpb25pbmcgZnJvbSBhIGNoZWNrYm94IGludG8gYSB0ZXh0IGlucHV0XG4gICAgaWYgKHByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCAhPSBudWxsKSB7XG4gICAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gISFwcm9wcy5kZWZhdWx0Q2hlY2tlZDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9zdE1vdW50V3JhcHBlcihlbGVtZW50LCBwcm9wcywgaXNIeWRyYXRpbmcpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuXG4gIC8vIERvIG5vdCBhc3NpZ24gdmFsdWUgaWYgaXQgaXMgYWxyZWFkeSBzZXQuIFRoaXMgcHJldmVudHMgdXNlciB0ZXh0IGlucHV0XG4gIC8vIGZyb20gYmVpbmcgbG9zdCBkdXJpbmcgU1NSIGh5ZHJhdGlvbi5cbiAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8IHByb3BzLmhhc093blByb3BlcnR5KCdkZWZhdWx0VmFsdWUnKSkge1xuICAgIHZhciB0eXBlID0gcHJvcHMudHlwZTtcbiAgICB2YXIgaXNCdXR0b24gPSB0eXBlID09PSAnc3VibWl0JyB8fCB0eXBlID09PSAncmVzZXQnO1xuXG4gICAgLy8gQXZvaWQgc2V0dGluZyB2YWx1ZSBhdHRyaWJ1dGUgb24gc3VibWl0L3Jlc2V0IGlucHV0cyBhcyBpdCBvdmVycmlkZXMgdGhlXG4gICAgLy8gZGVmYXVsdCB2YWx1ZSBwcm92aWRlZCBieSB0aGUgYnJvd3Nlci4gU2VlOiAjMTI4NzJcbiAgICBpZiAoaXNCdXR0b24gJiYgKHByb3BzLnZhbHVlID09PSB1bmRlZmluZWQgfHwgcHJvcHMudmFsdWUgPT09IG51bGwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIF9pbml0aWFsVmFsdWUgPSB0b1N0cmluZyhub2RlLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKTtcblxuICAgIC8vIERvIG5vdCBhc3NpZ24gdmFsdWUgaWYgaXQgaXMgYWxyZWFkeSBzZXQuIFRoaXMgcHJldmVudHMgdXNlciB0ZXh0IGlucHV0XG4gICAgLy8gZnJvbSBiZWluZyBsb3N0IGR1cmluZyBTU1IgaHlkcmF0aW9uLlxuICAgIGlmICghaXNIeWRyYXRpbmcpIHtcbiAgICAgIGlmIChkaXNhYmxlSW5wdXRBdHRyaWJ1dGVTeW5jaW5nKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGdldFRvU3RyaW5nVmFsdWUocHJvcHMudmFsdWUpO1xuXG4gICAgICAgIC8vIFdoZW4gbm90IHN5bmNpbmcgdGhlIHZhbHVlIGF0dHJpYnV0ZSwgdGhlIHZhbHVlIHByb3BlcnR5IHBvaW50c1xuICAgICAgICAvLyBkaXJlY3RseSB0byB0aGUgUmVhY3QgcHJvcC4gT25seSBhc3NpZ24gaXQgaWYgaXQgZXhpc3RzLlxuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIEFsd2F5cyBhc3NpZ24gb24gYnV0dG9ucyBzbyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGFzc2lnbiBhblxuICAgICAgICAgIC8vIGVtcHR5IHN0cmluZyB0byBjbGVhciBidXR0b24gdGV4dC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIE90aGVyd2lzZSwgZG8gbm90IHJlLWFzc2lnbiB0aGUgdmFsdWUgcHJvcGVydHkgaWYgaXMgZW1wdHkuIFRoaXNcbiAgICAgICAgICAvLyBwb3RlbnRpYWxseSBhdm9pZHMgYSBET00gd3JpdGUgYW5kIHByZXZlbnRzIEZpcmVmb3ggKH42MC4wLjEpIGZyb21cbiAgICAgICAgICAvLyBwcmVtYXR1cmVseSBtYXJraW5nIHJlcXVpcmVkIGlucHV0cyBhcyBpbnZhbGlkLiBFcXVhbGl0eSBpcyBjb21wYXJlZFxuICAgICAgICAgIC8vIHRvIHRoZSBjdXJyZW50IHZhbHVlIGluIGNhc2UgdGhlIGJyb3dzZXIgcHJvdmlkZWQgdmFsdWUgaXMgbm90IGFuXG4gICAgICAgICAgLy8gZW1wdHkgc3RyaW5nLlxuICAgICAgICAgIGlmIChpc0J1dHRvbiB8fCB2YWx1ZSAhPT0gbm9kZS52YWx1ZSkge1xuICAgICAgICAgICAgbm9kZS52YWx1ZSA9IHRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdoZW4gc3luY2luZyB0aGUgdmFsdWUgYXR0cmlidXRlLCB0aGUgdmFsdWUgcHJvcGVydHkgc2hvdWxkIHVzZVxuICAgICAgICAvLyB0aGUgd3JhcHBlclN0YXRlLl9pbml0aWFsVmFsdWUgcHJvcGVydHkuIFRoaXMgdXNlczpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAxLiBUaGUgdmFsdWUgUmVhY3QgcHJvcGVydHkgd2hlbiBwcmVzZW50XG4gICAgICAgIC8vICAgMi4gVGhlIGRlZmF1bHRWYWx1ZSBSZWFjdCBwcm9wZXJ0eSB3aGVuIHByZXNlbnRcbiAgICAgICAgLy8gICAzLiBBbiBlbXB0eSBzdHJpbmdcbiAgICAgICAgaWYgKF9pbml0aWFsVmFsdWUgIT09IG5vZGUudmFsdWUpIHtcbiAgICAgICAgICBub2RlLnZhbHVlID0gX2luaXRpYWxWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXNhYmxlSW5wdXRBdHRyaWJ1dGVTeW5jaW5nKSB7XG4gICAgICAvLyBXaGVuIG5vdCBzeW5jaW5nIHRoZSB2YWx1ZSBhdHRyaWJ1dGUsIGFzc2lnbiB0aGUgdmFsdWUgYXR0cmlidXRlXG4gICAgICAvLyBkaXJlY3RseSBmcm9tIHRoZSBkZWZhdWx0VmFsdWUgUmVhY3QgcHJvcGVydHkgKHdoZW4gcHJlc2VudClcbiAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgbm9kZS5kZWZhdWx0VmFsdWUgPSB0b1N0cmluZyhkZWZhdWx0VmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UsIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgc3luY2hyb25pemVkIHRvIHRoZSBwcm9wZXJ0eSxcbiAgICAgIC8vIHNvIHdlIGFzc2lnbiBkZWZhdWx0VmFsdWUgdG8gdGhlIHNhbWUgdGhpbmcgYXMgdGhlIHZhbHVlIHByb3BlcnR5XG4gICAgICAvLyBhc3NpZ25tZW50IHN0ZXAgYWJvdmUuXG4gICAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IF9pbml0aWFsVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gTm9ybWFsbHksIHdlJ2QganVzdCBkbyBgbm9kZS5jaGVja2VkID0gbm9kZS5jaGVja2VkYCB1cG9uIGluaXRpYWwgbW91bnQsIGxlc3MgdGhpcyBidWdcbiAgLy8gdGhpcyBpcyBuZWVkZWQgdG8gd29yayBhcm91bmQgYSBjaHJvbWUgYnVnIHdoZXJlIHNldHRpbmcgZGVmYXVsdENoZWNrZWRcbiAgLy8gd2lsbCBzb21ldGltZXMgaW5mbHVlbmNlIHRoZSB2YWx1ZSBvZiBjaGVja2VkIChldmVuIGFmdGVyIGRldGFjaG1lbnQpLlxuICAvLyBSZWZlcmVuY2U6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTYwODQxNlxuICAvLyBXZSBuZWVkIHRvIHRlbXBvcmFyaWx5IHVuc2V0IG5hbWUgdG8gYXZvaWQgZGlzcnVwdGluZyByYWRpbyBidXR0b24gZ3JvdXBzLlxuICB2YXIgbmFtZSA9IG5vZGUubmFtZTtcbiAgaWYgKG5hbWUgIT09ICcnKSB7XG4gICAgbm9kZS5uYW1lID0gJyc7XG4gIH1cblxuICBpZiAoZGlzYWJsZUlucHV0QXR0cmlidXRlU3luY2luZykge1xuICAgIC8vIFdoZW4gbm90IHN5bmNpbmcgdGhlIGNoZWNrZWQgYXR0cmlidXRlLCB0aGUgY2hlY2tlZCBwcm9wZXJ0eVxuICAgIC8vIG5ldmVyIGdldHMgYXNzaWduZWQuIEl0IG11c3QgYmUgbWFudWFsbHkgc2V0LiBXZSBkb24ndCB3YW50XG4gICAgLy8gdG8gZG8gdGhpcyB3aGVuIGh5ZHJhdGluZyBzbyB0aGF0IGV4aXN0aW5nIHVzZXIgaW5wdXQgaXNuJ3RcbiAgICAvLyBtb2RpZmllZFxuICAgIGlmICghaXNIeWRyYXRpbmcpIHtcbiAgICAgIHVwZGF0ZUNoZWNrZWQoZWxlbWVudCwgcHJvcHMpO1xuICAgIH1cblxuICAgIC8vIE9ubHkgYXNzaWduIHRoZSBjaGVja2VkIGF0dHJpYnV0ZSBpZiBpdCBpcyBkZWZpbmVkLiBUaGlzIHNhdmVzXG4gICAgLy8gYSBET00gd3JpdGUgd2hlbiBjb250cm9sbGluZyB0aGUgY2hlY2tlZCBhdHRyaWJ1dGUgaXNuJ3QgbmVlZGVkXG4gICAgLy8gKHRleHQgaW5wdXRzLCBzdWJtaXQvcmVzZXQpXG4gICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KCdkZWZhdWx0Q2hlY2tlZCcpKSB7XG4gICAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gIW5vZGUuZGVmYXVsdENoZWNrZWQ7XG4gICAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gISFwcm9wcy5kZWZhdWx0Q2hlY2tlZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiBzeW5jaW5nIHRoZSBjaGVja2VkIGF0dHJpYnV0ZSwgYm90aCB0aGUgY2hlY2tlZCBwcm9wZXJ0eSBhbmRcbiAgICAvLyBhdHRyaWJ1dGUgYXJlIGFzc2lnbmVkIGF0IHRoZSBzYW1lIHRpbWUgdXNpbmcgZGVmYXVsdENoZWNrZWQuIFRoaXMgdXNlczpcbiAgICAvL1xuICAgIC8vICAgMS4gVGhlIGNoZWNrZWQgUmVhY3QgcHJvcGVydHkgd2hlbiBwcmVzZW50XG4gICAgLy8gICAyLiBUaGUgZGVmYXVsdENoZWNrZWQgUmVhY3QgcHJvcGVydHkgd2hlbiBwcmVzZW50XG4gICAgLy8gICAzLiBPdGhlcndpc2UsIGZhbHNlXG4gICAgbm9kZS5kZWZhdWx0Q2hlY2tlZCA9ICFub2RlLmRlZmF1bHRDaGVja2VkO1xuICAgIG5vZGUuZGVmYXVsdENoZWNrZWQgPSAhIW5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcbiAgfVxuXG4gIGlmIChuYW1lICE9PSAnJykge1xuICAgIG5vZGUubmFtZSA9IG5hbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHVwZGF0ZVdyYXBwZXIobm9kZSwgcHJvcHMpO1xuICB1cGRhdGVOYW1lZENvdXNpbnMobm9kZSwgcHJvcHMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVOYW1lZENvdXNpbnMocm9vdE5vZGUsIHByb3BzKSB7XG4gIHZhciBuYW1lID0gcHJvcHMubmFtZTtcbiAgaWYgKHByb3BzLnR5cGUgPT09ICdyYWRpbycgJiYgbmFtZSAhPSBudWxsKSB7XG4gICAgdmFyIHF1ZXJ5Um9vdCA9IHJvb3ROb2RlO1xuXG4gICAgd2hpbGUgKHF1ZXJ5Um9vdC5wYXJlbnROb2RlKSB7XG4gICAgICBxdWVyeVJvb3QgPSBxdWVyeVJvb3QucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICAvLyBJZiBgcm9vdE5vZGUuZm9ybWAgd2FzIG5vbi1udWxsLCB0aGVuIHdlIGNvdWxkIHRyeSBgZm9ybS5lbGVtZW50c2AsXG4gICAgLy8gYnV0IHRoYXQgc29tZXRpbWVzIGJlaGF2ZXMgc3RyYW5nZWx5IGluIElFOC4gV2UgY291bGQgYWxzbyB0cnkgdXNpbmdcbiAgICAvLyBgZm9ybS5nZXRFbGVtZW50c0J5TmFtZWAsIGJ1dCB0aGF0IHdpbGwgb25seSByZXR1cm4gZGlyZWN0IGNoaWxkcmVuXG4gICAgLy8gYW5kIHdvbid0IGluY2x1ZGUgaW5wdXRzIHRoYXQgdXNlIHRoZSBIVE1MNSBgZm9ybT1gIGF0dHJpYnV0ZS4gU2luY2VcbiAgICAvLyB0aGUgaW5wdXQgbWlnaHQgbm90IGV2ZW4gYmUgaW4gYSBmb3JtLiBJdCBtaWdodCBub3QgZXZlbiBiZSBpbiB0aGVcbiAgICAvLyBkb2N1bWVudC4gTGV0J3MganVzdCB1c2UgdGhlIGxvY2FsIGBxdWVyeVNlbGVjdG9yQWxsYCB0byBlbnN1cmUgd2UgZG9uJ3RcbiAgICAvLyBtaXNzIGFueXRoaW5nLlxuICAgIHZhciBncm91cCA9IHF1ZXJ5Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPScgKyBKU09OLnN0cmluZ2lmeSgnJyArIG5hbWUpICsgJ11bdHlwZT1cInJhZGlvXCJdJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgb3RoZXJOb2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAob3RoZXJOb2RlID09PSByb290Tm9kZSB8fCBvdGhlck5vZGUuZm9ybSAhPT0gcm9vdE5vZGUuZm9ybSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBpZiByYWRpbyBidXR0b25zIHJlbmRlcmVkIGJ5IGRpZmZlcmVudCBjb3BpZXMgb2YgUmVhY3RcbiAgICAgIC8vIGFuZCB0aGUgc2FtZSBuYW1lIGFyZSByZW5kZXJlZCBpbnRvIHRoZSBzYW1lIGZvcm0gKHNhbWUgYXMgIzE5MzkpLlxuICAgICAgLy8gVGhhdCdzIHByb2JhYmx5IG9rYXk7IHdlIGRvbid0IHN1cHBvcnQgaXQganVzdCBhcyB3ZSBkb24ndCBzdXBwb3J0XG4gICAgICAvLyBtaXhpbmcgUmVhY3QgcmFkaW8gYnV0dG9ucyB3aXRoIG5vbi1SZWFjdCBvbmVzLlxuICAgICAgdmFyIG90aGVyUHJvcHMgPSBnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlJDEob3RoZXJOb2RlKTtcbiAgICAgICFvdGhlclByb3BzID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RET01JbnB1dDogTWl4aW5nIFJlYWN0IGFuZCBub24tUmVhY3QgcmFkaW8gaW5wdXRzIHdpdGggdGhlIHNhbWUgYG5hbWVgIGlzIG5vdCBzdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG5cbiAgICAgIC8vIFdlIG5lZWQgdXBkYXRlIHRoZSB0cmFja2VkIHZhbHVlIG9uIHRoZSBuYW1lZCBjb3VzaW4gc2luY2UgdGhlIHZhbHVlXG4gICAgICAvLyB3YXMgY2hhbmdlZCBidXQgdGhlIGlucHV0IHNhdyBubyBldmVudCBvciB2YWx1ZSBzZXRcbiAgICAgIHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKG90aGVyTm9kZSk7XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgYSBjb250cm9sbGVkIHJhZGlvIGJ1dHRvbiBncm91cCwgZm9yY2luZyB0aGUgaW5wdXQgdGhhdFxuICAgICAgLy8gd2FzIHByZXZpb3VzbHkgY2hlY2tlZCB0byB1cGRhdGUgd2lsbCBjYXVzZSBpdCB0byBiZSBjb21lIHJlLWNoZWNrZWRcbiAgICAgIC8vIGFzIGFwcHJvcHJpYXRlLlxuICAgICAgdXBkYXRlV3JhcHBlcihvdGhlck5vZGUsIG90aGVyUHJvcHMpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBJbiBDaHJvbWUsIGFzc2lnbmluZyBkZWZhdWx0VmFsdWUgdG8gY2VydGFpbiBpbnB1dCB0eXBlcyB0cmlnZ2VycyBpbnB1dCB2YWxpZGF0aW9uLlxuLy8gRm9yIG51bWJlciBpbnB1dHMsIHRoZSBkaXNwbGF5IHZhbHVlIGxvc2VzIHRyYWlsaW5nIGRlY2ltYWwgcG9pbnRzLiBGb3IgZW1haWwgaW5wdXRzLFxuLy8gQ2hyb21lIHJhaXNlcyBcIlRoZSBzcGVjaWZpZWQgdmFsdWUgPHg+IGlzIG5vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3NcIi5cbi8vXG4vLyBIZXJlIHdlIGNoZWNrIHRvIHNlZSBpZiB0aGUgZGVmYXVsdFZhbHVlIGhhcyBhY3R1YWxseSBjaGFuZ2VkLCBhdm9pZGluZyB0aGVzZSBwcm9ibGVtc1xuLy8gd2hlbiB0aGUgdXNlciBpcyBpbnB1dHRpbmcgdGV4dFxuLy9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI1M1xuZnVuY3Rpb24gc2V0RGVmYXVsdFZhbHVlKG5vZGUsIHR5cGUsIHZhbHVlKSB7XG4gIGlmIChcbiAgLy8gRm9jdXNlZCBudW1iZXIgaW5wdXRzIHN5bmNocm9uaXplIG9uIGJsdXIuIFNlZSBDaGFuZ2VFdmVudFBsdWdpbi5qc1xuICB0eXBlICE9PSAnbnVtYmVyJyB8fCBub2RlLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gbm9kZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IHRvU3RyaW5nKG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAobm9kZS5kZWZhdWx0VmFsdWUgIT09IHRvU3RyaW5nKHZhbHVlKSkge1xuICAgICAgbm9kZS5kZWZhdWx0VmFsdWUgPSB0b1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBldmVudFR5cGVzJDEgPSB7XG4gIGNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25DaGFuZ2UnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNoYW5nZUNhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtUT1BfQkxVUiwgVE9QX0NIQU5HRSwgVE9QX0NMSUNLLCBUT1BfRk9DVVMsIFRPUF9JTlBVVCwgVE9QX0tFWV9ET1dOLCBUT1BfS0VZX1VQLCBUT1BfU0VMRUNUSU9OX0NIQU5HRV1cbiAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KGluc3QsIG5hdGl2ZUV2ZW50LCB0YXJnZXQpIHtcbiAgdmFyIGV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMkMS5jaGFuZ2UsIGluc3QsIG5hdGl2ZUV2ZW50LCB0YXJnZXQpO1xuICBldmVudC50eXBlID0gJ2NoYW5nZSc7XG4gIC8vIEZsYWcgdGhpcyBldmVudCBsb29wIGFzIG5lZWRpbmcgc3RhdGUgcmVzdG9yZS5cbiAgZW5xdWV1ZVN0YXRlUmVzdG9yZSh0YXJnZXQpO1xuICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuLyoqXG4gKiBGb3IgSUUgc2hpbXNcbiAqL1xudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGNoYW5nZWAgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2hhbmdlRXZlbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnc2VsZWN0JyB8fCBub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBlbGVtLnR5cGUgPT09ICdmaWxlJztcbn1cblxuZnVuY3Rpb24gbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCkge1xuICB2YXIgZXZlbnQgPSBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoYWN0aXZlRWxlbWVudEluc3QsIG5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkpO1xuXG4gIC8vIElmIGNoYW5nZSBhbmQgcHJvcGVydHljaGFuZ2UgYnViYmxlZCwgd2UnZCBqdXN0IGJpbmQgdG8gaXQgbGlrZSBhbGwgdGhlXG4gIC8vIG90aGVyIGV2ZW50cyBhbmQgaGF2ZSBpdCBnbyB0aHJvdWdoIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci4gU2luY2UgaXRcbiAgLy8gZG9lc24ndCwgd2UgbWFudWFsbHkgbGlzdGVuIGZvciB0aGUgZXZlbnRzIGFuZCBzbyB3ZSBoYXZlIHRvIGVucXVldWUgYW5kXG4gIC8vIHByb2Nlc3MgdGhlIGFic3RyYWN0IGV2ZW50IG1hbnVhbGx5LlxuICAvL1xuICAvLyBCYXRjaGluZyBpcyBuZWNlc3NhcnkgaGVyZSBpbiBvcmRlciB0byBlbnN1cmUgdGhhdCBhbGwgZXZlbnQgaGFuZGxlcnMgcnVuXG4gIC8vIGJlZm9yZSB0aGUgbmV4dCByZXJlbmRlciAoaW5jbHVkaW5nIGV2ZW50IGhhbmRsZXJzIGF0dGFjaGVkIHRvIGFuY2VzdG9yXG4gIC8vIGVsZW1lbnRzIGluc3RlYWQgb2YgZGlyZWN0bHkgb24gdGhlIGlucHV0KS4gV2l0aG91dCB0aGlzLCBjb250cm9sbGVkXG4gIC8vIGNvbXBvbmVudHMgZG9uJ3Qgd29yayBwcm9wZXJseSBpbiBjb25qdW5jdGlvbiB3aXRoIGV2ZW50IGJ1YmJsaW5nIGJlY2F1c2VcbiAgLy8gdGhlIGNvbXBvbmVudCBpcyByZXJlbmRlcmVkIGFuZCB0aGUgdmFsdWUgcmV2ZXJ0ZWQgYmVmb3JlIGFsbCB0aGUgZXZlbnRcbiAgLy8gaGFuZGxlcnMgY2FuIHJ1bi4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzA4LlxuICBiYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGV2ZW50KSB7XG4gIHJ1bkV2ZW50c0luQmF0Y2goZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCkge1xuICB2YXIgdGFyZ2V0Tm9kZSA9IGdldE5vZGVGcm9tSW5zdGFuY2UkMSh0YXJnZXRJbnN0KTtcbiAgaWYgKHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKHRhcmdldE5vZGUpKSB7XG4gICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSBUT1BfQ0hBTkdFKSB7XG4gICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gIH1cbn1cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50cy5cbiAgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gaXNFdmVudFN1cHBvcnRlZCgnaW5wdXQnKSAmJiAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5KTtcbn1cblxuLyoqXG4gKiAoRm9yIElFIDw9OSkgU3RhcnRzIHRyYWNraW5nIHByb3BlcnR5Y2hhbmdlIGV2ZW50cyBvbiB0aGUgcGFzc2VkLWluIGVsZW1lbnRcbiAqIGFuZCBvdmVycmlkZSB0aGUgdmFsdWUgcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gZGlzdGluZ3Vpc2ggdXNlciBldmVudHMgZnJvbVxuICogdmFsdWUgY2hhbmdlcyBpbiBKUy5cbiAqL1xuZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG59XG5cbi8qKlxuICogKEZvciBJRSA8PTkpIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBjdXJyZW50bHktdHJhY2tlZCBlbGVtZW50LFxuICogaWYgYW55IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xufVxuXG4vKipcbiAqIChGb3IgSUUgPD05KSBIYW5kbGVzIGEgcHJvcGVydHljaGFuZ2UgZXZlbnQsIHNlbmRpbmcgYSBgY2hhbmdlYCBldmVudCBpZlxuICogdGhlIHZhbHVlIG9mIHRoZSBhY3RpdmUgZWxlbWVudCBoYXMgY2hhbmdlZC5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ3ZhbHVlJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0KSkge1xuICAgIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbCh0b3BMZXZlbFR5cGUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSBUT1BfRk9DVVMpIHtcbiAgICAvLyBJbiBJRTksIHByb3BlcnR5Y2hhbmdlIGZpcmVzIGZvciBtb3N0IGlucHV0IGV2ZW50cyBidXQgaXMgYnVnZ3kgYW5kXG4gICAgLy8gZG9lc24ndCBmaXJlIHdoZW4gdGV4dCBpcyBkZWxldGVkLCBidXQgY29udmVuaWVudGx5LCBzZWxlY3Rpb25jaGFuZ2VcbiAgICAvLyBhcHBlYXJzIHRvIGZpcmUgaW4gYWxsIG9mIHRoZSByZW1haW5pbmcgY2FzZXMgc28gd2UgY2F0Y2ggdGhvc2UgYW5kXG4gICAgLy8gZm9yd2FyZCB0aGUgZXZlbnQgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAgLy8gSW4gZWl0aGVyIGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY2FsbCB0aGUgZXZlbnQgaGFuZGxlciBpZiB0aGUgdmFsdWVcbiAgICAvLyBpcyBjaGFuZ2VkIGZyb20gSlMgc28gd2UgcmVkZWZpbmUgYSBzZXR0ZXIgZm9yIGAudmFsdWVgIHRoYXQgdXBkYXRlc1xuICAgIC8vIG91ciBhY3RpdmVFbGVtZW50VmFsdWUgdmFyaWFibGUsIGFsbG93aW5nIHVzIHRvIGlnbm9yZSB0aG9zZSBjaGFuZ2VzXG4gICAgLy9cbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SW5zdCk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSBUT1BfQkxVUikge1xuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gVE9QX1NFTEVDVElPTl9DSEFOR0UgfHwgdG9wTGV2ZWxUeXBlID09PSBUT1BfS0VZX1VQIHx8IHRvcExldmVsVHlwZSA9PT0gVE9QX0tFWV9ET1dOKSB7XG4gICAgLy8gT24gdGhlIHNlbGVjdGlvbmNoYW5nZSBldmVudCwgdGhlIHRhcmdldCBpcyBqdXN0IGRvY3VtZW50IHdoaWNoIGlzbid0XG4gICAgLy8gaGVscGZ1bCBmb3IgdXMgc28ganVzdCBjaGVjayBhY3RpdmVFbGVtZW50IGluc3RlYWQuXG4gICAgLy9cbiAgICAvLyA5OSUgb2YgdGhlIHRpbWUsIGtleWRvd24gYW5kIGtleXVwIGFyZW4ndCBuZWNlc3NhcnkuIElFOCBmYWlscyB0byBmaXJlXG4gICAgLy8gcHJvcGVydHljaGFuZ2Ugb24gdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFmdGVyIHNldHRpbmcgYHZhbHVlYCBmcm9tIGFcbiAgICAvLyBzY3JpcHQgYW5kIGZpcmVzIG9ubHkga2V5ZG93biwga2V5cHJlc3MsIGtleXVwLiBDYXRjaGluZyBrZXl1cCB1c3VhbGx5XG4gICAgLy8gZ2V0cyBpdCBhbmQgY2F0Y2hpbmcga2V5ZG93biBsZXRzIHVzIGZpcmUgYW4gZXZlbnQgZm9yIHRoZSBmaXJzdFxuICAgIC8vIGtleXN0cm9rZSBpZiB1c2VyIGRvZXMgYSBrZXkgcmVwZWF0IChpdCdsbCBiZSBhIGxpdHRsZSBkZWxheWVkOiByaWdodFxuICAgIC8vIGJlZm9yZSB0aGUgc2Vjb25kIGtleXN0cm9rZSkuIE90aGVyIGlucHV0IG1ldGhvZHMgKGUuZy4sIHBhc3RlKSBzZWVtIHRvXG4gICAgLy8gZmlyZSBzZWxlY3Rpb25jaGFuZ2Ugbm9ybWFsbHkuXG4gICAgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZChhY3RpdmVFbGVtZW50SW5zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGNsaWNrYCBldmVudFxuICovXG5mdW5jdGlvbiBzaG91bGRVc2VDbGlja0V2ZW50KGVsZW0pIHtcbiAgLy8gVXNlIHRoZSBgY2xpY2tgIGV2ZW50IHRvIGRldGVjdCBjaGFuZ2VzIHRvIGNoZWNrYm94IGFuZCByYWRpbyBpbnB1dHMuXG4gIC8vIFRoaXMgYXBwcm9hY2ggd29ya3MgYWNyb3NzIGFsbCBicm93c2Vycywgd2hlcmVhcyBgY2hhbmdlYCBkb2VzIG5vdCBmaXJlXG4gIC8vIHVudGlsIGBibHVyYCBpbiBJRTguXG4gIHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWU7XG4gIHJldHVybiBub2RlTmFtZSAmJiBub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmIChlbGVtLnR5cGUgPT09ICdjaGVja2JveCcgfHwgZWxlbS50eXBlID09PSAncmFkaW8nKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IFRPUF9DTElDSykge1xuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gVE9QX0lOUFVUIHx8IHRvcExldmVsVHlwZSA9PT0gVE9QX0NIQU5HRSkge1xuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29udHJvbGxlZElucHV0Qmx1cihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX3dyYXBwZXJTdGF0ZTtcblxuICBpZiAoIXN0YXRlIHx8ICFzdGF0ZS5jb250cm9sbGVkIHx8IG5vZGUudHlwZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWRpc2FibGVJbnB1dEF0dHJpYnV0ZVN5bmNpbmcpIHtcbiAgICAvLyBJZiBjb250cm9sbGVkLCBhc3NpZ24gdGhlIHZhbHVlIGF0dHJpYnV0ZSB0byB0aGUgY3VycmVudCB2YWx1ZSBvbiBibHVyXG4gICAgc2V0RGVmYXVsdFZhbHVlKG5vZGUsICdudW1iZXInLCBub2RlLnZhbHVlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uQ2hhbmdlYCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgY2hhbmdlIGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuIFRoaXMgZXZlbnQgZmlyZXMgYXQgYSB0aW1lIHdoZW4gaXQncyBwb3NzaWJsZSB0b1xuICogY2hhbmdlIHRoZSBlbGVtZW50J3MgdmFsdWUgd2l0aG91dCBzZWVpbmcgYSBmbGlja2VyLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIHNlbGVjdFxuICovXG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMkMSxcblxuICBfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOiBpc0lucHV0RXZlbnRTdXBwb3J0ZWQsXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIHRhcmdldE5vZGUgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSQxKHRhcmdldEluc3QpIDogd2luZG93O1xuXG4gICAgdmFyIGdldFRhcmdldEluc3RGdW5jID0gdm9pZCAwLFxuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSB2b2lkIDA7XG4gICAgaWYgKHNob3VsZFVzZUNoYW5nZUV2ZW50KHRhcmdldE5vZGUpKSB7XG4gICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudDtcbiAgICB9IGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0YXJnZXROb2RlKSkge1xuICAgICAgaWYgKGlzSW5wdXRFdmVudFN1cHBvcnRlZCkge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZFVzZUNsaWNrRXZlbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGdldFRhcmdldEluc3RGdW5jKSB7XG4gICAgICB2YXIgaW5zdCA9IGdldFRhcmdldEluc3RGdW5jKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCk7XG4gICAgICBpZiAoaW5zdCkge1xuICAgICAgICB2YXIgZXZlbnQgPSBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoaW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYW5kbGVFdmVudEZ1bmMpIHtcbiAgICAgIGhhbmRsZUV2ZW50RnVuYyh0b3BMZXZlbFR5cGUsIHRhcmdldE5vZGUsIHRhcmdldEluc3QpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gYmx1cnJpbmcsIHNldCB0aGUgdmFsdWUgYXR0cmlidXRlIGZvciBudW1iZXIgaW5wdXRzXG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gVE9QX0JMVVIpIHtcbiAgICAgIGhhbmRsZUNvbnRyb2xsZWRJbnB1dEJsdXIodGFyZ2V0Tm9kZSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIE1vZHVsZSB0aGF0IGlzIGluamVjdGFibGUgaW50byBgRXZlbnRQbHVnaW5IdWJgLCB0aGF0IHNwZWNpZmllcyBhXG4gKiBkZXRlcm1pbmlzdGljIG9yZGVyaW5nIG9mIGBFdmVudFBsdWdpbmBzLiBBIGNvbnZlbmllbnQgd2F5IHRvIHJlYXNvbiBhYm91dFxuICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuICogaGF2aW5nIHBsdWdpbnMgYmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgYXJlIGluamVjdGVkIGJlY2F1c2VcbiAqIHRoYXQgb3JkZXJpbmcgd291bGQgYmUgaW5mbHVlbmNlZCBieSB0aGUgcGFja2FnaW5nIG9yZGVyLlxuICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcbiAqIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBldmVudHMgaXMgY29udmVuaWVudCBpbiBgU2ltcGxlRXZlbnRQbHVnaW5gIGhhbmRsZXJzLlxuICovXG52YXIgRE9NRXZlbnRQbHVnaW5PcmRlciA9IFsnUmVzcG9uZGVyRXZlbnRQbHVnaW4nLCAnU2ltcGxlRXZlbnRQbHVnaW4nLCAnRW50ZXJMZWF2ZUV2ZW50UGx1Z2luJywgJ0NoYW5nZUV2ZW50UGx1Z2luJywgJ1NlbGVjdEV2ZW50UGx1Z2luJywgJ0JlZm9yZUlucHV0RXZlbnRQbHVnaW4nXTtcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSBTeW50aGV0aWNFdmVudC5leHRlbmQoe1xuICB2aWV3OiBudWxsLFxuICBkZXRhaWw6IG51bGxcbn0pO1xuXG52YXIgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gIEFsdDogJ2FsdEtleScsXG4gIENvbnRyb2w6ICdjdHJsS2V5JyxcbiAgTWV0YTogJ21ldGFLZXknLFxuICBTaGlmdDogJ3NoaWZ0S2V5J1xufTtcblxuLy8gT2xkZXIgYnJvd3NlcnMgKFNhZmFyaSA8PSAxMCwgaU9TIFNhZmFyaSA8PSAxMC4yKSBkbyBub3Qgc3VwcG9ydFxuLy8gZ2V0TW9kaWZpZXJTdGF0ZS4gSWYgZ2V0TW9kaWZpZXJTdGF0ZSBpcyBub3Qgc3VwcG9ydGVkLCB3ZSBtYXAgaXQgdG8gYSBzZXQgb2Zcbi8vIG1vZGlmaWVyIGtleXMgZXhwb3NlZCBieSB0aGUgZXZlbnQuIEluIHRoaXMgY2FzZSwgTG9jay1rZXlzIGFyZSBub3Qgc3VwcG9ydGVkLlxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIG1vZGlmaWVyIGtleSB0byB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0eSBpbiB0aGUgZXZlbnQuXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8ja2V5cy1Nb2RpZmllcnNcbiAqL1xuXG5mdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICB2YXIgc3ludGhldGljRXZlbnQgPSB0aGlzO1xuICB2YXIgbmF0aXZlRXZlbnQgPSBzeW50aGV0aWNFdmVudC5uYXRpdmVFdmVudDtcbiAgaWYgKG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUpIHtcbiAgICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpO1xuICB9XG4gIHZhciBrZXlQcm9wID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXTtcbiAgcmV0dXJuIGtleVByb3AgPyAhIW5hdGl2ZUV2ZW50W2tleVByb3BdIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50TW9kaWZpZXJTdGF0ZShuYXRpdmVFdmVudCkge1xuICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbn1cblxudmFyIHByZXZpb3VzU2NyZWVuWCA9IDA7XG52YXIgcHJldmlvdXNTY3JlZW5ZID0gMDtcbi8vIFVzZSBmbGFncyB0byBzaWduYWwgbW92ZW1lbnRYL1kgaGFzIGFscmVhZHkgYmVlbiBzZXRcbnZhciBpc01vdmVtZW50WFNldCA9IGZhbHNlO1xudmFyIGlzTW92ZW1lbnRZU2V0ID0gZmFsc2U7XG5cbi8qKlxuICogQGludGVyZmFjZSBNb3VzZUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmV4dGVuZCh7XG4gIHNjcmVlblg6IG51bGwsXG4gIHNjcmVlblk6IG51bGwsXG4gIGNsaWVudFg6IG51bGwsXG4gIGNsaWVudFk6IG51bGwsXG4gIHBhZ2VYOiBudWxsLFxuICBwYWdlWTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICBidXR0b246IG51bGwsXG4gIGJ1dHRvbnM6IG51bGwsXG4gIHJlbGF0ZWRUYXJnZXQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IChldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudCA/IGV2ZW50LnRvRWxlbWVudCA6IGV2ZW50LmZyb21FbGVtZW50KTtcbiAgfSxcbiAgbW92ZW1lbnRYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoJ21vdmVtZW50WCcgaW4gZXZlbnQpIHtcbiAgICAgIHJldHVybiBldmVudC5tb3ZlbWVudFg7XG4gICAgfVxuXG4gICAgdmFyIHNjcmVlblggPSBwcmV2aW91c1NjcmVlblg7XG4gICAgcHJldmlvdXNTY3JlZW5YID0gZXZlbnQuc2NyZWVuWDtcblxuICAgIGlmICghaXNNb3ZlbWVudFhTZXQpIHtcbiAgICAgIGlzTW92ZW1lbnRYU2V0ID0gdHJ1ZTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiBldmVudC50eXBlID09PSAnbW91c2Vtb3ZlJyA/IGV2ZW50LnNjcmVlblggLSBzY3JlZW5YIDogMDtcbiAgfSxcbiAgbW92ZW1lbnRZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoJ21vdmVtZW50WScgaW4gZXZlbnQpIHtcbiAgICAgIHJldHVybiBldmVudC5tb3ZlbWVudFk7XG4gICAgfVxuXG4gICAgdmFyIHNjcmVlblkgPSBwcmV2aW91c1NjcmVlblk7XG4gICAgcHJldmlvdXNTY3JlZW5ZID0gZXZlbnQuc2NyZWVuWTtcblxuICAgIGlmICghaXNNb3ZlbWVudFlTZXQpIHtcbiAgICAgIGlzTW92ZW1lbnRZU2V0ID0gdHJ1ZTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiBldmVudC50eXBlID09PSAnbW91c2Vtb3ZlJyA/IGV2ZW50LnNjcmVlblkgLSBzY3JlZW5ZIDogMDtcbiAgfVxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBQb2ludGVyRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvcG9pbnRlcmV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY1BvaW50ZXJFdmVudCA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZXh0ZW5kKHtcbiAgcG9pbnRlcklkOiBudWxsLFxuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsLFxuICBwcmVzc3VyZTogbnVsbCxcbiAgdGFuZ2VudGlhbFByZXNzdXJlOiBudWxsLFxuICB0aWx0WDogbnVsbCxcbiAgdGlsdFk6IG51bGwsXG4gIHR3aXN0OiBudWxsLFxuICBwb2ludGVyVHlwZTogbnVsbCxcbiAgaXNQcmltYXJ5OiBudWxsXG59KTtcblxudmFyIGV2ZW50VHlwZXMkMiA9IHtcbiAgbW91c2VFbnRlcjoge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbk1vdXNlRW50ZXInLFxuICAgIGRlcGVuZGVuY2llczogW1RPUF9NT1VTRV9PVVQsIFRPUF9NT1VTRV9PVkVSXVxuICB9LFxuICBtb3VzZUxlYXZlOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTW91c2VMZWF2ZScsXG4gICAgZGVwZW5kZW5jaWVzOiBbVE9QX01PVVNFX09VVCwgVE9QX01PVVNFX09WRVJdXG4gIH0sXG4gIHBvaW50ZXJFbnRlcjoge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvblBvaW50ZXJFbnRlcicsXG4gICAgZGVwZW5kZW5jaWVzOiBbVE9QX1BPSU5URVJfT1VULCBUT1BfUE9JTlRFUl9PVkVSXVxuICB9LFxuICBwb2ludGVyTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Qb2ludGVyTGVhdmUnLFxuICAgIGRlcGVuZGVuY2llczogW1RPUF9QT0lOVEVSX09VVCwgVE9QX1BPSU5URVJfT1ZFUl1cbiAgfVxufTtcblxudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyQyLFxuXG4gIC8qKlxuICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuICAgKiBgbW91c2VvdmVyYCBhbmQgYG1vdXNlb3V0YCBldmVudCB0aGF0IG9jY3Vycy4gT25seSB1c2UgYG1vdXNlb3V0YCBzbyB0aGF0XG4gICAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG4gICAqIHRoZSBgbW91c2VvdmVyYCB0b3AtbGV2ZWwgZXZlbnQuXG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgaXNPdmVyRXZlbnQgPSB0b3BMZXZlbFR5cGUgPT09IFRPUF9NT1VTRV9PVkVSIHx8IHRvcExldmVsVHlwZSA9PT0gVE9QX1BPSU5URVJfT1ZFUjtcbiAgICB2YXIgaXNPdXRFdmVudCA9IHRvcExldmVsVHlwZSA9PT0gVE9QX01PVVNFX09VVCB8fCB0b3BMZXZlbFR5cGUgPT09IFRPUF9QT0lOVEVSX09VVDtcblxuICAgIGlmIChpc092ZXJFdmVudCAmJiAobmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghaXNPdXRFdmVudCAmJiAhaXNPdmVyRXZlbnQpIHtcbiAgICAgIC8vIE11c3Qgbm90IGJlIGEgbW91c2Ugb3IgcG9pbnRlciBpbiBvciBvdXQgLSBpZ25vcmluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aW4gPSB2b2lkIDA7XG4gICAgaWYgKG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICAgIC8vIGBuYXRpdmVFdmVudFRhcmdldGAgaXMgcHJvYmFibHkgYSB3aW5kb3cgb2JqZWN0LlxuICAgICAgd2luID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICAgIHZhciBkb2MgPSBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbiA9IHdpbmRvdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZnJvbSA9IHZvaWQgMDtcbiAgICB2YXIgdG8gPSB2b2lkIDA7XG4gICAgaWYgKGlzT3V0RXZlbnQpIHtcbiAgICAgIGZyb20gPSB0YXJnZXRJbnN0O1xuICAgICAgdmFyIHJlbGF0ZWQgPSBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudDtcbiAgICAgIHRvID0gcmVsYXRlZCA/IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHJlbGF0ZWQpIDogbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTW92aW5nIHRvIGEgbm9kZSBmcm9tIG91dHNpZGUgdGhlIHdpbmRvdy5cbiAgICAgIGZyb20gPSBudWxsO1xuICAgICAgdG8gPSB0YXJnZXRJbnN0O1xuICAgIH1cblxuICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgLy8gTm90aGluZyBwZXJ0YWlucyB0byBvdXIgbWFuYWdlZCBjb21wb25lbnRzLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50SW50ZXJmYWNlID0gdm9pZCAwLFxuICAgICAgICBsZWF2ZUV2ZW50VHlwZSA9IHZvaWQgMCxcbiAgICAgICAgZW50ZXJFdmVudFR5cGUgPSB2b2lkIDAsXG4gICAgICAgIGV2ZW50VHlwZVByZWZpeCA9IHZvaWQgMDtcblxuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IFRPUF9NT1VTRV9PVVQgfHwgdG9wTGV2ZWxUeXBlID09PSBUT1BfTU9VU0VfT1ZFUikge1xuICAgICAgZXZlbnRJbnRlcmZhY2UgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgbGVhdmVFdmVudFR5cGUgPSBldmVudFR5cGVzJDIubW91c2VMZWF2ZTtcbiAgICAgIGVudGVyRXZlbnRUeXBlID0gZXZlbnRUeXBlcyQyLm1vdXNlRW50ZXI7XG4gICAgICBldmVudFR5cGVQcmVmaXggPSAnbW91c2UnO1xuICAgIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSBUT1BfUE9JTlRFUl9PVVQgfHwgdG9wTGV2ZWxUeXBlID09PSBUT1BfUE9JTlRFUl9PVkVSKSB7XG4gICAgICBldmVudEludGVyZmFjZSA9IFN5bnRoZXRpY1BvaW50ZXJFdmVudDtcbiAgICAgIGxlYXZlRXZlbnRUeXBlID0gZXZlbnRUeXBlcyQyLnBvaW50ZXJMZWF2ZTtcbiAgICAgIGVudGVyRXZlbnRUeXBlID0gZXZlbnRUeXBlcyQyLnBvaW50ZXJFbnRlcjtcbiAgICAgIGV2ZW50VHlwZVByZWZpeCA9ICdwb2ludGVyJztcbiAgICB9XG5cbiAgICB2YXIgZnJvbU5vZGUgPSBmcm9tID09IG51bGwgPyB3aW4gOiBnZXROb2RlRnJvbUluc3RhbmNlJDEoZnJvbSk7XG4gICAgdmFyIHRvTm9kZSA9IHRvID09IG51bGwgPyB3aW4gOiBnZXROb2RlRnJvbUluc3RhbmNlJDEodG8pO1xuXG4gICAgdmFyIGxlYXZlID0gZXZlbnRJbnRlcmZhY2UuZ2V0UG9vbGVkKGxlYXZlRXZlbnRUeXBlLCBmcm9tLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGxlYXZlLnR5cGUgPSBldmVudFR5cGVQcmVmaXggKyAnbGVhdmUnO1xuICAgIGxlYXZlLnRhcmdldCA9IGZyb21Ob2RlO1xuICAgIGxlYXZlLnJlbGF0ZWRUYXJnZXQgPSB0b05vZGU7XG5cbiAgICB2YXIgZW50ZXIgPSBldmVudEludGVyZmFjZS5nZXRQb29sZWQoZW50ZXJFdmVudFR5cGUsIHRvLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGVudGVyLnR5cGUgPSBldmVudFR5cGVQcmVmaXggKyAnZW50ZXInO1xuICAgIGVudGVyLnRhcmdldCA9IHRvTm9kZTtcbiAgICBlbnRlci5yZWxhdGVkVGFyZ2V0ID0gZnJvbU5vZGU7XG5cbiAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tLCB0byk7XG5cbiAgICByZXR1cm4gW2xlYXZlLCBlbnRlcl07XG4gIH1cbn07XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgcmV0dXJuIHggPT09IHkgJiYgKHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5KSB8fCB4ICE9PSB4ICYmIHkgIT09IHkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgO1xufVxuXG52YXIgaGFzT3duUHJvcGVydHkkMSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkkMS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIGBSZWFjdEluc3RhbmNlTWFwYCBtYWludGFpbnMgYSBtYXBwaW5nIGZyb20gYSBwdWJsaWMgZmFjaW5nIHN0YXRlZnVsXG4gKiBpbnN0YW5jZSAoa2V5KSBhbmQgdGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uICh2YWx1ZSkuIFRoaXMgYWxsb3dzIHB1YmxpY1xuICogbWV0aG9kcyB0byBhY2NlcHQgdGhlIHVzZXIgZmFjaW5nIGluc3RhbmNlIGFzIGFuIGFyZ3VtZW50IGFuZCBtYXAgdGhlbSBiYWNrXG4gKiB0byBpbnRlcm5hbCBtZXRob2RzLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIG1vZHVsZSBpcyBjdXJyZW50bHkgc2hhcmVkIGFuZCBhc3N1bWVkIHRvIGJlIHN0YXRlbGVzcy5cbiAqIElmIHRoaXMgYmVjb21lcyBhbiBhY3R1YWwgTWFwLCB0aGF0IHdpbGwgYnJlYWsuXG4gKi9cblxuLyoqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgY2FsbGVkIGBkZWxldGVgIGJ1dCB3ZSdkIGhhdmUgdG8gbWFrZSBzdXJlIHRvIGFsd2F5c1xuICogdHJhbnNmb3JtIHRoZXNlIHRvIHN0cmluZ3MgZm9yIElFIHN1cHBvcnQuIFdoZW4gdGhpcyB0cmFuc2Zvcm0gaXMgZnVsbHlcbiAqIHN1cHBvcnRlZCB3ZSBjYW4gcmVuYW1lIGl0LlxuICovXG5cblxuZnVuY3Rpb24gZ2V0KGtleSkge1xuICByZXR1cm4ga2V5Ll9yZWFjdEludGVybmFsRmliZXI7XG59XG5cbmZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEZpYmVyICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gIGtleS5fcmVhY3RJbnRlcm5hbEZpYmVyID0gdmFsdWU7XG59XG5cbi8vIERvbid0IGNoYW5nZSB0aGVzZSB0d28gdmFsdWVzLiBUaGV5J3JlIHVzZWQgYnkgUmVhY3QgRGV2IFRvb2xzLlxudmFyIE5vRWZmZWN0ID0gLyogICAgICAgICAgICAgICovMDtcbnZhciBQZXJmb3JtZWRXb3JrID0gLyogICAgICAgICAqLzE7XG5cbi8vIFlvdSBjYW4gY2hhbmdlIHRoZSByZXN0IChhbmQgYWRkIG1vcmUpLlxudmFyIFBsYWNlbWVudCA9IC8qICAgICAgICAgICAgICovMjtcbnZhciBVcGRhdGUgPSAvKiAgICAgICAgICAgICAgICAqLzQ7XG52YXIgUGxhY2VtZW50QW5kVXBkYXRlID0gLyogICAgKi82O1xudmFyIERlbGV0aW9uID0gLyogICAgICAgICAgICAgICovODtcbnZhciBDb250ZW50UmVzZXQgPSAvKiAgICAgICAgICAqLzE2O1xudmFyIENhbGxiYWNrID0gLyogICAgICAgICAgICAgICovMzI7XG52YXIgRGlkQ2FwdHVyZSA9IC8qICAgICAgICAgICAgKi82NDtcbnZhciBSZWYgPSAvKiAgICAgICAgICAgICAgICAgICAqLzEyODtcbnZhciBTbmFwc2hvdCA9IC8qICAgICAgICAgICAgICAqLzI1NjtcbnZhciBQYXNzaXZlID0gLyogICAgICAgICAgICAgICAqLzUxMjtcblxuLy8gUGFzc2l2ZSAmIFVwZGF0ZSAmIENhbGxiYWNrICYgUmVmICYgU25hcHNob3RcbnZhciBMaWZlY3ljbGVFZmZlY3RNYXNrID0gLyogICAqLzkzMjtcblxuLy8gVW5pb24gb2YgYWxsIGhvc3QgZWZmZWN0c1xudmFyIEhvc3RFZmZlY3RNYXNrID0gLyogICAgICAgICovMTAyMztcblxudmFyIEluY29tcGxldGUgPSAvKiAgICAgICAgICAgICovMTAyNDtcbnZhciBTaG91bGRDYXB0dXJlID0gLyogICAgICAgICAqLzIwNDg7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG5cbnZhciBNT1VOVElORyA9IDE7XG52YXIgTU9VTlRFRCA9IDI7XG52YXIgVU5NT1VOVEVEID0gMztcblxuZnVuY3Rpb24gaXNGaWJlck1vdW50ZWRJbXBsKGZpYmVyKSB7XG4gIHZhciBub2RlID0gZmliZXI7XG4gIGlmICghZmliZXIuYWx0ZXJuYXRlKSB7XG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gYWx0ZXJuYXRlLCB0aGlzIG1pZ2h0IGJlIGEgbmV3IHRyZWUgdGhhdCBpc24ndCBpbnNlcnRlZFxuICAgIC8vIHlldC4gSWYgaXQgaXMsIHRoZW4gaXQgd2lsbCBoYXZlIGEgcGVuZGluZyBpbnNlcnRpb24gZWZmZWN0IG9uIGl0LlxuICAgIGlmICgobm9kZS5lZmZlY3RUYWcgJiBQbGFjZW1lbnQpICE9PSBOb0VmZmVjdCkge1xuICAgICAgcmV0dXJuIE1PVU5USU5HO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZS5yZXR1cm4pIHtcbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIGlmICgobm9kZS5lZmZlY3RUYWcgJiBQbGFjZW1lbnQpICE9PSBOb0VmZmVjdCkge1xuICAgICAgICByZXR1cm4gTU9VTlRJTkc7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHdoaWxlIChub2RlLnJldHVybikge1xuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAobm9kZS50YWcgPT09IEhvc3RSb290KSB7XG4gICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhpcyB3YXMgYSBuZXN0ZWQgSG9zdFJvb3Qgd2hlbiB1c2VkIHdpdGhcbiAgICAvLyByZW5kZXJDb250YWluZXJJbnRvU3VidHJlZS5cbiAgICByZXR1cm4gTU9VTlRFRDtcbiAgfVxuICAvLyBJZiB3ZSBkaWRuJ3QgaGl0IHRoZSByb290LCB0aGF0IG1lYW5zIHRoYXQgd2UncmUgaW4gYW4gZGlzY29ubmVjdGVkIHRyZWVcbiAgLy8gdGhhdCBoYXMgYmVlbiB1bm1vdW50ZWQuXG4gIHJldHVybiBVTk1PVU5URUQ7XG59XG5cbmZ1bmN0aW9uIGlzRmliZXJNb3VudGVkKGZpYmVyKSB7XG4gIHJldHVybiBpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpID09PSBNT1VOVEVEO1xufVxuXG5mdW5jdGlvbiBpc01vdW50ZWQoY29tcG9uZW50KSB7XG4gIHtcbiAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lciQxLmN1cnJlbnQ7XG4gICAgaWYgKG93bmVyICE9PSBudWxsICYmIG93bmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpIHtcbiAgICAgIHZhciBvd25lckZpYmVyID0gb3duZXI7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBvd25lckZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICFpbnN0YW5jZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyBpcyBhY2Nlc3NpbmcgaXNNb3VudGVkIGluc2lkZSBpdHMgcmVuZGVyKCkgZnVuY3Rpb24uICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBnZXRDb21wb25lbnROYW1lKG93bmVyRmliZXIudHlwZSkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBpbnN0YW5jZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaWJlciA9IGdldChjb21wb25lbnQpO1xuICBpZiAoIWZpYmVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpID09PSBNT1VOVEVEO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRJc01vdW50ZWQoZmliZXIpIHtcbiAgIShpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpID09PSBNT1VOVEVEKSA/IGludmFyaWFudChmYWxzZSwgJ1VuYWJsZSB0byBmaW5kIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4nKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgaWYgKCFhbHRlcm5hdGUpIHtcbiAgICAvLyBJZiB0aGVyZSBpcyBubyBhbHRlcm5hdGUsIHRoZW4gd2Ugb25seSBuZWVkIHRvIGNoZWNrIGlmIGl0IGlzIG1vdW50ZWQuXG4gICAgdmFyIHN0YXRlID0gaXNGaWJlck1vdW50ZWRJbXBsKGZpYmVyKTtcbiAgICAhKHN0YXRlICE9PSBVTk1PVU5URUQpID8gaW52YXJpYW50KGZhbHNlLCAnVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpIDogdm9pZCAwO1xuICAgIGlmIChzdGF0ZSA9PT0gTU9VTlRJTkcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZmliZXI7XG4gIH1cbiAgLy8gSWYgd2UgaGF2ZSB0d28gcG9zc2libGUgYnJhbmNoZXMsIHdlJ2xsIHdhbGsgYmFja3dhcmRzIHVwIHRvIHRoZSByb290XG4gIC8vIHRvIHNlZSB3aGF0IHBhdGggdGhlIHJvb3QgcG9pbnRzIHRvLiBPbiB0aGUgd2F5IHdlIG1heSBoaXQgb25lIG9mIHRoZVxuICAvLyBzcGVjaWFsIGNhc2VzIGFuZCB3ZSdsbCBkZWFsIHdpdGggdGhlbS5cbiAgdmFyIGEgPSBmaWJlcjtcbiAgdmFyIGIgPSBhbHRlcm5hdGU7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdmFyIHBhcmVudEEgPSBhLnJldHVybjtcbiAgICB2YXIgcGFyZW50QiA9IHBhcmVudEEgPyBwYXJlbnRBLmFsdGVybmF0ZSA6IG51bGw7XG4gICAgaWYgKCFwYXJlbnRBIHx8ICFwYXJlbnRCKSB7XG4gICAgICAvLyBXZSdyZSBhdCB0aGUgcm9vdC5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIElmIGJvdGggY29waWVzIG9mIHRoZSBwYXJlbnQgZmliZXIgcG9pbnQgdG8gdGhlIHNhbWUgY2hpbGQsIHdlIGNhblxuICAgIC8vIGFzc3VtZSB0aGF0IHRoZSBjaGlsZCBpcyBjdXJyZW50LiBUaGlzIGhhcHBlbnMgd2hlbiB3ZSBiYWlsb3V0IG9uIGxvd1xuICAgIC8vIHByaW9yaXR5OiB0aGUgYmFpbGVkIG91dCBmaWJlcidzIGNoaWxkIHJldXNlcyB0aGUgY3VycmVudCBjaGlsZC5cbiAgICBpZiAocGFyZW50QS5jaGlsZCA9PT0gcGFyZW50Qi5jaGlsZCkge1xuICAgICAgdmFyIGNoaWxkID0gcGFyZW50QS5jaGlsZDtcbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQgPT09IGEpIHtcbiAgICAgICAgICAvLyBXZSd2ZSBkZXRlcm1pbmVkIHRoYXQgQSBpcyB0aGUgY3VycmVudCBicmFuY2guXG4gICAgICAgICAgYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpO1xuICAgICAgICAgIHJldHVybiBmaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQgPT09IGIpIHtcbiAgICAgICAgICAvLyBXZSd2ZSBkZXRlcm1pbmVkIHRoYXQgQiBpcyB0aGUgY3VycmVudCBicmFuY2guXG4gICAgICAgICAgYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpO1xuICAgICAgICAgIHJldHVybiBhbHRlcm5hdGU7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgLy8gV2Ugc2hvdWxkIG5ldmVyIGhhdmUgYW4gYWx0ZXJuYXRlIGZvciBhbnkgbW91bnRpbmcgbm9kZS4gU28gdGhlIG9ubHlcbiAgICAgIC8vIHdheSB0aGlzIGNvdWxkIHBvc3NpYmx5IGhhcHBlbiBpcyBpZiB0aGlzIHdhcyB1bm1vdW50ZWQsIGlmIGF0IGFsbC5cbiAgICAgIGludmFyaWFudChmYWxzZSwgJ1VuYWJsZSB0byBmaW5kIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4nKTtcbiAgICB9XG5cbiAgICBpZiAoYS5yZXR1cm4gIT09IGIucmV0dXJuKSB7XG4gICAgICAvLyBUaGUgcmV0dXJuIHBvaW50ZXIgb2YgQSBhbmQgdGhlIHJldHVybiBwb2ludGVyIG9mIEIgcG9pbnQgdG8gZGlmZmVyZW50XG4gICAgICAvLyBmaWJlcnMuIFdlIGFzc3VtZSB0aGF0IHJldHVybiBwb2ludGVycyBuZXZlciBjcmlzcy1jcm9zcywgc28gQSBtdXN0XG4gICAgICAvLyBiZWxvbmcgdG8gdGhlIGNoaWxkIHNldCBvZiBBLnJldHVybiwgYW5kIEIgbXVzdCBiZWxvbmcgdG8gdGhlIGNoaWxkXG4gICAgICAvLyBzZXQgb2YgQi5yZXR1cm4uXG4gICAgICBhID0gcGFyZW50QTtcbiAgICAgIGIgPSBwYXJlbnRCO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgcmV0dXJuIHBvaW50ZXJzIHBvaW50IHRvIHRoZSBzYW1lIGZpYmVyLiBXZSdsbCBoYXZlIHRvIHVzZSB0aGVcbiAgICAgIC8vIGRlZmF1bHQsIHNsb3cgcGF0aDogc2NhbiB0aGUgY2hpbGQgc2V0cyBvZiBlYWNoIHBhcmVudCBhbHRlcm5hdGUgdG8gc2VlXG4gICAgICAvLyB3aGljaCBjaGlsZCBiZWxvbmdzIHRvIHdoaWNoIHNldC5cbiAgICAgIC8vXG4gICAgICAvLyBTZWFyY2ggcGFyZW50IEEncyBjaGlsZCBzZXRcbiAgICAgIHZhciBkaWRGaW5kQ2hpbGQgPSBmYWxzZTtcbiAgICAgIHZhciBfY2hpbGQgPSBwYXJlbnRBLmNoaWxkO1xuICAgICAgd2hpbGUgKF9jaGlsZCkge1xuICAgICAgICBpZiAoX2NoaWxkID09PSBhKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICBhID0gcGFyZW50QTtcbiAgICAgICAgICBiID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2NoaWxkID09PSBiKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICBhID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBfY2hpbGQgPSBfY2hpbGQuc2libGluZztcbiAgICAgIH1cbiAgICAgIGlmICghZGlkRmluZENoaWxkKSB7XG4gICAgICAgIC8vIFNlYXJjaCBwYXJlbnQgQidzIGNoaWxkIHNldFxuICAgICAgICBfY2hpbGQgPSBwYXJlbnRCLmNoaWxkO1xuICAgICAgICB3aGlsZSAoX2NoaWxkKSB7XG4gICAgICAgICAgaWYgKF9jaGlsZCA9PT0gYSkge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICAgIGEgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYiA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF9jaGlsZCA9PT0gYikge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICAgIGIgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYSA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgX2NoaWxkID0gX2NoaWxkLnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgIWRpZEZpbmRDaGlsZCA/IGludmFyaWFudChmYWxzZSwgJ0NoaWxkIHdhcyBub3QgZm91bmQgaW4gZWl0aGVyIHBhcmVudCBzZXQuIFRoaXMgaW5kaWNhdGVzIGEgYnVnIGluIFJlYWN0IHJlbGF0ZWQgdG8gdGhlIHJldHVybiBwb2ludGVyLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAhKGEuYWx0ZXJuYXRlID09PSBiKSA/IGludmFyaWFudChmYWxzZSwgJ1JldHVybiBmaWJlcnMgc2hvdWxkIGFsd2F5cyBiZSBlYWNoIG90aGVyc1xcJyBhbHRlcm5hdGVzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICB9XG4gIC8vIElmIHRoZSByb290IGlzIG5vdCBhIGhvc3QgY29udGFpbmVyLCB3ZSdyZSBpbiBhIGRpc2Nvbm5lY3RlZCB0cmVlLiBJLmUuXG4gIC8vIHVubW91bnRlZC5cbiAgIShhLnRhZyA9PT0gSG9zdFJvb3QpID8gaW52YXJpYW50KGZhbHNlLCAnVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpIDogdm9pZCAwO1xuICBpZiAoYS5zdGF0ZU5vZGUuY3VycmVudCA9PT0gYSkge1xuICAgIC8vIFdlJ3ZlIGRldGVybWluZWQgdGhhdCBBIGlzIHRoZSBjdXJyZW50IGJyYW5jaC5cbiAgICByZXR1cm4gZmliZXI7XG4gIH1cbiAgLy8gT3RoZXJ3aXNlIEIgaGFzIHRvIGJlIGN1cnJlbnQgYnJhbmNoLlxuICByZXR1cm4gYWx0ZXJuYXRlO1xufVxuXG5mdW5jdGlvbiBmaW5kQ3VycmVudEhvc3RGaWJlcihwYXJlbnQpIHtcbiAgdmFyIGN1cnJlbnRQYXJlbnQgPSBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChwYXJlbnQpO1xuICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE5leHQgd2UnbGwgZHJpbGwgZG93biB0aGlzIGNvbXBvbmVudCB0byBmaW5kIHRoZSBmaXJzdCBIb3N0Q29tcG9uZW50L1RleHQuXG4gIHZhciBub2RlID0gY3VycmVudFBhcmVudDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGQpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSBjdXJyZW50UGFyZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgd2hpbGUgKCFub2RlLnNpYmxpbmcpIHtcbiAgICAgIGlmICghbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICB9XG4gIC8vIEZsb3cgbmVlZHMgdGhlIHJldHVybiBudWxsIGhlcmUsIGJ1dCBFU0xpbnQgY29tcGxhaW5zIGFib3V0IGl0LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5yZWFjaGFibGVcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFscyhwYXJlbnQpIHtcbiAgdmFyIGN1cnJlbnRQYXJlbnQgPSBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChwYXJlbnQpO1xuICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE5leHQgd2UnbGwgZHJpbGwgZG93biB0aGlzIGNvbXBvbmVudCB0byBmaW5kIHRoZSBmaXJzdCBIb3N0Q29tcG9uZW50L1RleHQuXG4gIHZhciBub2RlID0gY3VycmVudFBhcmVudDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGQgJiYgbm9kZS50YWcgIT09IEhvc3RQb3J0YWwpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSBjdXJyZW50UGFyZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgd2hpbGUgKCFub2RlLnNpYmxpbmcpIHtcbiAgICAgIGlmICghbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICB9XG4gIC8vIEZsb3cgbmVlZHMgdGhlIHJldHVybiBudWxsIGhlcmUsIGJ1dCBFU0xpbnQgY29tcGxhaW5zIGFib3V0IGl0LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5yZWFjaGFibGVcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50QnViYmxlTGlzdGVuZXIoZWxlbWVudCwgZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudENhcHR1cmVMaXN0ZW5lcihlbGVtZW50LCBldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtYW5pbWF0aW9ucy8jQW5pbWF0aW9uRXZlbnQtaW50ZXJmYWNlXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9BbmltYXRpb25FdmVudFxuICovXG52YXIgU3ludGhldGljQW5pbWF0aW9uRXZlbnQgPSBTeW50aGV0aWNFdmVudC5leHRlbmQoe1xuICBhbmltYXRpb25OYW1lOiBudWxsLFxuICBlbGFwc2VkVGltZTogbnVsbCxcbiAgcHNldWRvRWxlbWVudDogbnVsbFxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jbGlwYm9hcmQtYXBpcy9cbiAqL1xudmFyIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gU3ludGhldGljRXZlbnQuZXh0ZW5kKHtcbiAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdjbGlwYm9hcmREYXRhJyBpbiBldmVudCA/IGV2ZW50LmNsaXBib2FyZERhdGEgOiB3aW5kb3cuY2xpcGJvYXJkRGF0YTtcbiAgfVxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBGb2N1c0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmV4dGVuZCh7XG4gIHJlbGF0ZWRUYXJnZXQ6IG51bGxcbn0pO1xuXG4vKipcbiAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuICogYFN0cmluZy5mcm9tQ2hhckNvZGVgLiBBcyBzdWNoLCBvbmx5IGtleXMgdGhhdCBjb3JyZXNwb25kIHRvIHByaW50YWJsZVxuICogY2hhcmFjdGVycyBwcm9kdWNlIGEgdmFsaWQgYGNoYXJDb2RlYCwgdGhlIG9ubHkgZXhjZXB0aW9uIHRvIHRoaXMgaXMgRW50ZXIuXG4gKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuICogcHJlc3VtYWJseSBiZWNhdXNlIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB0YWItY2hhcmFjdGVyIGluIGJyb3dzZXJzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge251bWJlcn0gTm9ybWFsaXplZCBgY2hhckNvZGVgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjaGFyQ29kZSA9IHZvaWQgMDtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcblxuICAgIC8vIEZGIGRvZXMgbm90IHNldCBgY2hhckNvZGVgIGZvciB0aGUgRW50ZXIta2V5LCBjaGVjayBhZ2FpbnN0IGBrZXlDb2RlYC5cbiAgICBpZiAoY2hhckNvZGUgPT09IDAgJiYga2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGNoYXJDb2RlID0gMTM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgY2hhckNvZGUgPSBrZXlDb2RlO1xuICB9XG5cbiAgLy8gSUUgYW5kIEVkZ2UgKG9uIFdpbmRvd3MpIGFuZCBDaHJvbWUgLyBTYWZhcmkgKG9uIFdpbmRvd3MgYW5kIExpbnV4KVxuICAvLyByZXBvcnQgRW50ZXIgYXMgY2hhckNvZGUgMTAgd2hlbiBjdHJsIGlzIHByZXNzZWQuXG4gIGlmIChjaGFyQ29kZSA9PT0gMTApIHtcbiAgICBjaGFyQ29kZSA9IDEzO1xuICB9XG5cbiAgLy8gU29tZSBub24tcHJpbnRhYmxlIGtleXMgYXJlIHJlcG9ydGVkIGluIGBjaGFyQ29kZWAvYGtleUNvZGVgLCBkaXNjYXJkIHRoZW0uXG4gIC8vIE11c3Qgbm90IGRpc2NhcmQgdGhlIChub24tKXByaW50YWJsZSBFbnRlci1rZXkuXG4gIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gY2hhckNvZGU7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemF0aW9uIG9mIGRlcHJlY2F0ZWQgSFRNTDUgYGtleWAgdmFsdWVzXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgbm9ybWFsaXplS2V5ID0ge1xuICBFc2M6ICdFc2NhcGUnLFxuICBTcGFjZWJhcjogJyAnLFxuICBMZWZ0OiAnQXJyb3dMZWZ0JyxcbiAgVXA6ICdBcnJvd1VwJyxcbiAgUmlnaHQ6ICdBcnJvd1JpZ2h0JyxcbiAgRG93bjogJ0Fycm93RG93bicsXG4gIERlbDogJ0RlbGV0ZScsXG4gIFdpbjogJ09TJyxcbiAgTWVudTogJ0NvbnRleHRNZW51JyxcbiAgQXBwczogJ0NvbnRleHRNZW51JyxcbiAgU2Nyb2xsOiAnU2Nyb2xsTG9jaycsXG4gIE1velByaW50YWJsZUtleTogJ1VuaWRlbnRpZmllZCdcbn07XG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBsZWdhY3kgYGtleUNvZGVgIHRvIEhUTUw1IGBrZXlgXG4gKiBPbmx5IHNwZWNpYWwga2V5cyBzdXBwb3J0ZWQsIGFsbCBvdGhlcnMgZGVwZW5kIG9uIGtleWJvYXJkIGxheW91dCBvciBicm93c2VyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgdHJhbnNsYXRlVG9LZXkgPSB7XG4gICc4JzogJ0JhY2tzcGFjZScsXG4gICc5JzogJ1RhYicsXG4gICcxMic6ICdDbGVhcicsXG4gICcxMyc6ICdFbnRlcicsXG4gICcxNic6ICdTaGlmdCcsXG4gICcxNyc6ICdDb250cm9sJyxcbiAgJzE4JzogJ0FsdCcsXG4gICcxOSc6ICdQYXVzZScsXG4gICcyMCc6ICdDYXBzTG9jaycsXG4gICcyNyc6ICdFc2NhcGUnLFxuICAnMzInOiAnICcsXG4gICczMyc6ICdQYWdlVXAnLFxuICAnMzQnOiAnUGFnZURvd24nLFxuICAnMzUnOiAnRW5kJyxcbiAgJzM2JzogJ0hvbWUnLFxuICAnMzcnOiAnQXJyb3dMZWZ0JyxcbiAgJzM4JzogJ0Fycm93VXAnLFxuICAnMzknOiAnQXJyb3dSaWdodCcsXG4gICc0MCc6ICdBcnJvd0Rvd24nLFxuICAnNDUnOiAnSW5zZXJ0JyxcbiAgJzQ2JzogJ0RlbGV0ZScsXG4gICcxMTInOiAnRjEnLFxuICAnMTEzJzogJ0YyJyxcbiAgJzExNCc6ICdGMycsXG4gICcxMTUnOiAnRjQnLFxuICAnMTE2JzogJ0Y1JyxcbiAgJzExNyc6ICdGNicsXG4gICcxMTgnOiAnRjcnLFxuICAnMTE5JzogJ0Y4JyxcbiAgJzEyMCc6ICdGOScsXG4gICcxMjEnOiAnRjEwJyxcbiAgJzEyMic6ICdGMTEnLFxuICAnMTIzJzogJ0YxMicsXG4gICcxNDQnOiAnTnVtTG9jaycsXG4gICcxNDUnOiAnU2Nyb2xsTG9jaycsXG4gICcyMjQnOiAnTWV0YSdcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBrZXlgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudEtleShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQua2V5KSB7XG4gICAgLy8gTm9ybWFsaXplIGluY29uc2lzdGVudCB2YWx1ZXMgcmVwb3J0ZWQgYnkgYnJvd3NlcnMgZHVlIHRvXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIG9mIGEgd29ya2luZyBkcmFmdCBzcGVjaWZpY2F0aW9uLlxuXG4gICAgLy8gRmlyZUZveCBpbXBsZW1lbnRzIGBrZXlgIGJ1dCByZXR1cm5zIGBNb3pQcmludGFibGVLZXlgIGZvciBhbGxcbiAgICAvLyBwcmludGFibGUgY2hhcmFjdGVycyAobm9ybWFsaXplZCB0byBgVW5pZGVudGlmaWVkYCksIGlnbm9yZSBpdC5cbiAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5W25hdGl2ZUV2ZW50LmtleV0gfHwgbmF0aXZlRXZlbnQua2V5O1xuICAgIGlmIChrZXkgIT09ICdVbmlkZW50aWZpZWQnKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIEJyb3dzZXIgZG9lcyBub3QgaW1wbGVtZW50IGBrZXlgLCBwb2x5ZmlsbCBhcyBtdWNoIG9mIGl0IGFzIHdlIGNhbi5cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICB2YXIgY2hhckNvZGUgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KTtcblxuICAgIC8vIFRoZSBlbnRlci1rZXkgaXMgdGVjaG5pY2FsbHkgYm90aCBwcmludGFibGUgYW5kIG5vbi1wcmludGFibGUgYW5kIGNhblxuICAgIC8vIHRodXMgYmUgY2FwdHVyZWQgYnkgYGtleXByZXNzYCwgbm8gb3RoZXIgbm9uLXByaW50YWJsZSBrZXkgc2hvdWxkLlxuICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMTMgPyAnRW50ZXInIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gIH1cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBuYXRpdmVFdmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgLy8gV2hpbGUgdXNlciBrZXlib2FyZCBsYXlvdXQgZGV0ZXJtaW5lcyB0aGUgYWN0dWFsIG1lYW5pbmcgb2YgZWFjaFxuICAgIC8vIGBrZXlDb2RlYCB2YWx1ZSwgYWxtb3N0IGFsbCBmdW5jdGlvbiBrZXlzIGhhdmUgYSB1bml2ZXJzYWwgdmFsdWUuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZVRvS2V5W25hdGl2ZUV2ZW50LmtleUNvZGVdIHx8ICdVbmlkZW50aWZpZWQnO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIEtleWJvYXJkRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IFN5bnRoZXRpY1VJRXZlbnQuZXh0ZW5kKHtcbiAga2V5OiBnZXRFdmVudEtleSxcbiAgbG9jYXRpb246IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIHJlcGVhdDogbnVsbCxcbiAgbG9jYWxlOiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIC8vIExlZ2FjeSBJbnRlcmZhY2VcbiAgY2hhckNvZGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGBjaGFyQ29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleVByZXNzIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoZSBhY3R1YWwgcHJpbnRhYmxlIGNoYXJhY3Rlci5cblxuICAgIC8vIEtleVByZXNzIGlzIGRlcHJlY2F0ZWQsIGJ1dCBpdHMgcmVwbGFjZW1lbnQgaXMgbm90IHlldCBmaW5hbCBhbmQgbm90XG4gICAgLy8gaW1wbGVtZW50ZWQgaW4gYW55IG1ham9yIGJyb3dzZXIuIE9ubHkgS2V5UHJlc3MgaGFzIGNoYXJDb2RlLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuXG4gICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gd2hpY2ggY2Fubm90IGJlIGRldGVjdGVkLiBBc3N1bWluZyB0aGF0IGl0IGlzIGEgVVMga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gcHJvdmlkZXMgYSBzdXJwcmlzaW5nbHkgYWNjdXJhdGUgbWFwcGluZyBmb3IgVVMgYW5kIEV1cm9wZWFuIHVzZXJzLlxuICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBgd2hpY2hgIGlzIGFuIGFsaWFzIGZvciBlaXRoZXIgYGtleUNvZGVgIG9yIGBjaGFyQ29kZWAgZGVwZW5kaW5nIG9uIHRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG59KTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIERyYWdFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBTeW50aGV0aWNEcmFnRXZlbnQgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmV4dGVuZCh7XG4gIGRhdGFUcmFuc2ZlcjogbnVsbFxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBUb3VjaEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL3RvdWNoLWV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmV4dGVuZCh7XG4gIHRvdWNoZXM6IG51bGwsXG4gIHRhcmdldFRvdWNoZXM6IG51bGwsXG4gIGNoYW5nZWRUb3VjaGVzOiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbn0pO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOS9XRC1jc3MzLXRyYW5zaXRpb25zLTIwMDkwMzIwLyN0cmFuc2l0aW9uLWV2ZW50cy1cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RyYW5zaXRpb25FdmVudFxuICovXG52YXIgU3ludGhldGljVHJhbnNpdGlvbkV2ZW50ID0gU3ludGhldGljRXZlbnQuZXh0ZW5kKHtcbiAgcHJvcGVydHlOYW1lOiBudWxsLFxuICBlbGFwc2VkVGltZTogbnVsbCxcbiAgcHNldWRvRWxlbWVudDogbnVsbFxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBXaGVlbEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY1doZWVsRXZlbnQgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmV4dGVuZCh7XG4gIGRlbHRhWDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdkZWx0YVgnIGluIGV2ZW50ID8gZXZlbnQuZGVsdGFYIDogLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFYIDogMDtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWScgaW4gZXZlbnQgPyBldmVudC5kZWx0YVkgOiAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGFZJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhWSA6IC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhYCBmb3IgSUU8OSBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YScgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YSA6IDA7XG4gIH0sXG5cbiAgZGVsdGFaOiBudWxsLFxuXG4gIC8vIEJyb3dzZXJzIHdpdGhvdXQgXCJkZWx0YU1vZGVcIiBpcyByZXBvcnRpbmcgaW4gcmF3IHdoZWVsIGRlbHRhIHdoZXJlIG9uZVxuICAvLyBub3RjaCBvbiB0aGUgc2Nyb2xsIGlzIGFsd2F5cyArLy0gMTIwLCByb3VnaGx5IGVxdWl2YWxlbnQgdG8gcGl4ZWxzLlxuICAvLyBBIGdvb2QgYXBwcm94aW1hdGlvbiBvZiBET01fREVMVEFfTElORSAoMSkgaXMgNSUgb2Ygdmlld3BvcnQgc2l6ZSBvclxuICAvLyB+NDAgcGl4ZWxzLCBmb3IgRE9NX0RFTFRBX1NDUkVFTiAoMikgaXQgaXMgODcuNSUgb2Ygdmlld3BvcnQgc2l6ZS5cbiAgZGVsdGFNb2RlOiBudWxsXG59KTtcblxuLyoqXG4gKiBUdXJuc1xuICogWydhYm9ydCcsIC4uLl1cbiAqIGludG9cbiAqIGV2ZW50VHlwZXMgPSB7XG4gKiAgICdhYm9ydCc6IHtcbiAqICAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICogICAgICAgYnViYmxlZDogJ29uQWJvcnQnLFxuICogICAgICAgY2FwdHVyZWQ6ICdvbkFib3J0Q2FwdHVyZScsXG4gKiAgICAgfSxcbiAqICAgICBkZXBlbmRlbmNpZXM6IFtUT1BfQUJPUlRdLFxuICogICB9LFxuICogICAuLi5cbiAqIH07XG4gKiB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSBuZXcgTWFwKFtcbiAqICAgW1RPUF9BQk9SVCwgeyBzYW1lQ29uZmlnIH1dLFxuICogXSk7XG4gKi9cblxudmFyIGludGVyYWN0aXZlRXZlbnRUeXBlTmFtZXMgPSBbW1RPUF9CTFVSLCAnYmx1ciddLCBbVE9QX0NBTkNFTCwgJ2NhbmNlbCddLCBbVE9QX0NMSUNLLCAnY2xpY2snXSwgW1RPUF9DTE9TRSwgJ2Nsb3NlJ10sIFtUT1BfQ09OVEVYVF9NRU5VLCAnY29udGV4dE1lbnUnXSwgW1RPUF9DT1BZLCAnY29weSddLCBbVE9QX0NVVCwgJ2N1dCddLCBbVE9QX0FVWF9DTElDSywgJ2F1eENsaWNrJ10sIFtUT1BfRE9VQkxFX0NMSUNLLCAnZG91YmxlQ2xpY2snXSwgW1RPUF9EUkFHX0VORCwgJ2RyYWdFbmQnXSwgW1RPUF9EUkFHX1NUQVJULCAnZHJhZ1N0YXJ0J10sIFtUT1BfRFJPUCwgJ2Ryb3AnXSwgW1RPUF9GT0NVUywgJ2ZvY3VzJ10sIFtUT1BfSU5QVVQsICdpbnB1dCddLCBbVE9QX0lOVkFMSUQsICdpbnZhbGlkJ10sIFtUT1BfS0VZX0RPV04sICdrZXlEb3duJ10sIFtUT1BfS0VZX1BSRVNTLCAna2V5UHJlc3MnXSwgW1RPUF9LRVlfVVAsICdrZXlVcCddLCBbVE9QX01PVVNFX0RPV04sICdtb3VzZURvd24nXSwgW1RPUF9NT1VTRV9VUCwgJ21vdXNlVXAnXSwgW1RPUF9QQVNURSwgJ3Bhc3RlJ10sIFtUT1BfUEFVU0UsICdwYXVzZSddLCBbVE9QX1BMQVksICdwbGF5J10sIFtUT1BfUE9JTlRFUl9DQU5DRUwsICdwb2ludGVyQ2FuY2VsJ10sIFtUT1BfUE9JTlRFUl9ET1dOLCAncG9pbnRlckRvd24nXSwgW1RPUF9QT0lOVEVSX1VQLCAncG9pbnRlclVwJ10sIFtUT1BfUkFURV9DSEFOR0UsICdyYXRlQ2hhbmdlJ10sIFtUT1BfUkVTRVQsICdyZXNldCddLCBbVE9QX1NFRUtFRCwgJ3NlZWtlZCddLCBbVE9QX1NVQk1JVCwgJ3N1Ym1pdCddLCBbVE9QX1RPVUNIX0NBTkNFTCwgJ3RvdWNoQ2FuY2VsJ10sIFtUT1BfVE9VQ0hfRU5ELCAndG91Y2hFbmQnXSwgW1RPUF9UT1VDSF9TVEFSVCwgJ3RvdWNoU3RhcnQnXSwgW1RPUF9WT0xVTUVfQ0hBTkdFLCAndm9sdW1lQ2hhbmdlJ11dO1xudmFyIG5vbkludGVyYWN0aXZlRXZlbnRUeXBlTmFtZXMgPSBbW1RPUF9BQk9SVCwgJ2Fib3J0J10sIFtUT1BfQU5JTUFUSU9OX0VORCwgJ2FuaW1hdGlvbkVuZCddLCBbVE9QX0FOSU1BVElPTl9JVEVSQVRJT04sICdhbmltYXRpb25JdGVyYXRpb24nXSwgW1RPUF9BTklNQVRJT05fU1RBUlQsICdhbmltYXRpb25TdGFydCddLCBbVE9QX0NBTl9QTEFZLCAnY2FuUGxheSddLCBbVE9QX0NBTl9QTEFZX1RIUk9VR0gsICdjYW5QbGF5VGhyb3VnaCddLCBbVE9QX0RSQUcsICdkcmFnJ10sIFtUT1BfRFJBR19FTlRFUiwgJ2RyYWdFbnRlciddLCBbVE9QX0RSQUdfRVhJVCwgJ2RyYWdFeGl0J10sIFtUT1BfRFJBR19MRUFWRSwgJ2RyYWdMZWF2ZSddLCBbVE9QX0RSQUdfT1ZFUiwgJ2RyYWdPdmVyJ10sIFtUT1BfRFVSQVRJT05fQ0hBTkdFLCAnZHVyYXRpb25DaGFuZ2UnXSwgW1RPUF9FTVBUSUVELCAnZW1wdGllZCddLCBbVE9QX0VOQ1JZUFRFRCwgJ2VuY3J5cHRlZCddLCBbVE9QX0VOREVELCAnZW5kZWQnXSwgW1RPUF9FUlJPUiwgJ2Vycm9yJ10sIFtUT1BfR09UX1BPSU5URVJfQ0FQVFVSRSwgJ2dvdFBvaW50ZXJDYXB0dXJlJ10sIFtUT1BfTE9BRCwgJ2xvYWQnXSwgW1RPUF9MT0FERURfREFUQSwgJ2xvYWRlZERhdGEnXSwgW1RPUF9MT0FERURfTUVUQURBVEEsICdsb2FkZWRNZXRhZGF0YSddLCBbVE9QX0xPQURfU1RBUlQsICdsb2FkU3RhcnQnXSwgW1RPUF9MT1NUX1BPSU5URVJfQ0FQVFVSRSwgJ2xvc3RQb2ludGVyQ2FwdHVyZSddLCBbVE9QX01PVVNFX01PVkUsICdtb3VzZU1vdmUnXSwgW1RPUF9NT1VTRV9PVVQsICdtb3VzZU91dCddLCBbVE9QX01PVVNFX09WRVIsICdtb3VzZU92ZXInXSwgW1RPUF9QTEFZSU5HLCAncGxheWluZyddLCBbVE9QX1BPSU5URVJfTU9WRSwgJ3BvaW50ZXJNb3ZlJ10sIFtUT1BfUE9JTlRFUl9PVVQsICdwb2ludGVyT3V0J10sIFtUT1BfUE9JTlRFUl9PVkVSLCAncG9pbnRlck92ZXInXSwgW1RPUF9QUk9HUkVTUywgJ3Byb2dyZXNzJ10sIFtUT1BfU0NST0xMLCAnc2Nyb2xsJ10sIFtUT1BfU0VFS0lORywgJ3NlZWtpbmcnXSwgW1RPUF9TVEFMTEVELCAnc3RhbGxlZCddLCBbVE9QX1NVU1BFTkQsICdzdXNwZW5kJ10sIFtUT1BfVElNRV9VUERBVEUsICd0aW1lVXBkYXRlJ10sIFtUT1BfVE9HR0xFLCAndG9nZ2xlJ10sIFtUT1BfVE9VQ0hfTU9WRSwgJ3RvdWNoTW92ZSddLCBbVE9QX1RSQU5TSVRJT05fRU5ELCAndHJhbnNpdGlvbkVuZCddLCBbVE9QX1dBSVRJTkcsICd3YWl0aW5nJ10sIFtUT1BfV0hFRUwsICd3aGVlbCddXTtcblxudmFyIGV2ZW50VHlwZXMkNCA9IHt9O1xudmFyIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRFdmVudFR5cGVOYW1lVG9Db25maWcoX3JlZiwgaXNJbnRlcmFjdGl2ZSkge1xuICB2YXIgdG9wRXZlbnQgPSBfcmVmWzBdLFxuICAgICAgZXZlbnQgPSBfcmVmWzFdO1xuXG4gIHZhciBjYXBpdGFsaXplZEV2ZW50ID0gZXZlbnRbMF0udG9VcHBlckNhc2UoKSArIGV2ZW50LnNsaWNlKDEpO1xuICB2YXIgb25FdmVudCA9ICdvbicgKyBjYXBpdGFsaXplZEV2ZW50O1xuXG4gIHZhciB0eXBlID0ge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBvbkV2ZW50LFxuICAgICAgY2FwdHVyZWQ6IG9uRXZlbnQgKyAnQ2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcEV2ZW50XSxcbiAgICBpc0ludGVyYWN0aXZlOiBpc0ludGVyYWN0aXZlXG4gIH07XG4gIGV2ZW50VHlwZXMkNFtldmVudF0gPSB0eXBlO1xuICB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wRXZlbnRdID0gdHlwZTtcbn1cblxuaW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudFR1cGxlKSB7XG4gIGFkZEV2ZW50VHlwZU5hbWVUb0NvbmZpZyhldmVudFR1cGxlLCB0cnVlKTtcbn0pO1xubm9uSW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudFR1cGxlKSB7XG4gIGFkZEV2ZW50VHlwZU5hbWVUb0NvbmZpZyhldmVudFR1cGxlLCBmYWxzZSk7XG59KTtcblxuLy8gT25seSB1c2VkIGluIERFViBmb3IgZXhoYXVzdGl2ZW5lc3MgdmFsaWRhdGlvbi5cbnZhciBrbm93bkhUTUxUb3BMZXZlbFR5cGVzID0gW1RPUF9BQk9SVCwgVE9QX0NBTkNFTCwgVE9QX0NBTl9QTEFZLCBUT1BfQ0FOX1BMQVlfVEhST1VHSCwgVE9QX0NMT1NFLCBUT1BfRFVSQVRJT05fQ0hBTkdFLCBUT1BfRU1QVElFRCwgVE9QX0VOQ1JZUFRFRCwgVE9QX0VOREVELCBUT1BfRVJST1IsIFRPUF9JTlBVVCwgVE9QX0lOVkFMSUQsIFRPUF9MT0FELCBUT1BfTE9BREVEX0RBVEEsIFRPUF9MT0FERURfTUVUQURBVEEsIFRPUF9MT0FEX1NUQVJULCBUT1BfUEFVU0UsIFRPUF9QTEFZLCBUT1BfUExBWUlORywgVE9QX1BST0dSRVNTLCBUT1BfUkFURV9DSEFOR0UsIFRPUF9SRVNFVCwgVE9QX1NFRUtFRCwgVE9QX1NFRUtJTkcsIFRPUF9TVEFMTEVELCBUT1BfU1VCTUlULCBUT1BfU1VTUEVORCwgVE9QX1RJTUVfVVBEQVRFLCBUT1BfVE9HR0xFLCBUT1BfVk9MVU1FX0NIQU5HRSwgVE9QX1dBSVRJTkddO1xuXG52YXIgU2ltcGxlRXZlbnRQbHVnaW4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMkNCxcblxuICBpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUpIHtcbiAgICB2YXIgY29uZmlnID0gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3RvcExldmVsVHlwZV07XG4gICAgcmV0dXJuIGNvbmZpZyAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZy5pc0ludGVyYWN0aXZlID09PSB0cnVlO1xuICB9LFxuXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3RvcExldmVsVHlwZV07XG4gICAgaWYgKCFkaXNwYXRjaENvbmZpZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBFdmVudENvbnN0cnVjdG9yID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICBjYXNlIFRPUF9LRVlfUFJFU1M6XG4gICAgICAgIC8vIEZpcmVmb3ggY3JlYXRlcyBhIGtleXByZXNzIGV2ZW50IGZvciBmdW5jdGlvbiBrZXlzIHRvby4gVGhpcyByZW1vdmVzXG4gICAgICAgIC8vIHRoZSB1bndhbnRlZCBrZXlwcmVzcyBldmVudHMuIEVudGVyIGlzIGhvd2V2ZXIgYm90aCBwcmludGFibGUgYW5kXG4gICAgICAgIC8vIG5vbi1wcmludGFibGUuIE9uZSB3b3VsZCBleHBlY3QgVGFiIHRvIGJlIGFzIHdlbGwgKGJ1dCBpdCBpc24ndCkuXG4gICAgICAgIGlmIChnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRPUF9LRVlfRE9XTjpcbiAgICAgIGNhc2UgVE9QX0tFWV9VUDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfQkxVUjpcbiAgICAgIGNhc2UgVE9QX0ZPQ1VTOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRPUF9DTElDSzpcbiAgICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEgY2xpY2sgZXZlbnQgb24gcmlnaHQgbW91c2UgY2xpY2tzLiBUaGlzIHJlbW92ZXMgdGhlXG4gICAgICAgIC8vIHVud2FudGVkIGNsaWNrIGV2ZW50cy5cbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRPUF9BVVhfQ0xJQ0s6XG4gICAgICBjYXNlIFRPUF9ET1VCTEVfQ0xJQ0s6XG4gICAgICBjYXNlIFRPUF9NT1VTRV9ET1dOOlxuICAgICAgY2FzZSBUT1BfTU9VU0VfTU9WRTpcbiAgICAgIGNhc2UgVE9QX01PVVNFX1VQOlxuICAgICAgLy8gVE9ETzogRGlzYWJsZWQgZWxlbWVudHMgc2hvdWxkIG5vdCByZXNwb25kIHRvIG1vdXNlIGV2ZW50c1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUT1BfTU9VU0VfT1VUOlxuICAgICAgY2FzZSBUT1BfTU9VU0VfT1ZFUjpcbiAgICAgIGNhc2UgVE9QX0NPTlRFWFRfTUVOVTpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfRFJBRzpcbiAgICAgIGNhc2UgVE9QX0RSQUdfRU5EOlxuICAgICAgY2FzZSBUT1BfRFJBR19FTlRFUjpcbiAgICAgIGNhc2UgVE9QX0RSQUdfRVhJVDpcbiAgICAgIGNhc2UgVE9QX0RSQUdfTEVBVkU6XG4gICAgICBjYXNlIFRPUF9EUkFHX09WRVI6XG4gICAgICBjYXNlIFRPUF9EUkFHX1NUQVJUOlxuICAgICAgY2FzZSBUT1BfRFJPUDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRPUF9UT1VDSF9DQU5DRUw6XG4gICAgICBjYXNlIFRPUF9UT1VDSF9FTkQ6XG4gICAgICBjYXNlIFRPUF9UT1VDSF9NT1ZFOlxuICAgICAgY2FzZSBUT1BfVE9VQ0hfU1RBUlQ6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVE9QX0FOSU1BVElPTl9FTkQ6XG4gICAgICBjYXNlIFRPUF9BTklNQVRJT05fSVRFUkFUSU9OOlxuICAgICAgY2FzZSBUT1BfQU5JTUFUSU9OX1NUQVJUOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfVFJBTlNJVElPTl9FTkQ6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfU0NST0xMOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRPUF9XSEVFTDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfQ09QWTpcbiAgICAgIGNhc2UgVE9QX0NVVDpcbiAgICAgIGNhc2UgVE9QX1BBU1RFOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfR09UX1BPSU5URVJfQ0FQVFVSRTpcbiAgICAgIGNhc2UgVE9QX0xPU1RfUE9JTlRFUl9DQVBUVVJFOlxuICAgICAgY2FzZSBUT1BfUE9JTlRFUl9DQU5DRUw6XG4gICAgICBjYXNlIFRPUF9QT0lOVEVSX0RPV046XG4gICAgICBjYXNlIFRPUF9QT0lOVEVSX01PVkU6XG4gICAgICBjYXNlIFRPUF9QT0lOVEVSX09VVDpcbiAgICAgIGNhc2UgVE9QX1BPSU5URVJfT1ZFUjpcbiAgICAgIGNhc2UgVE9QX1BPSU5URVJfVVA6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChrbm93bkhUTUxUb3BMZXZlbFR5cGVzLmluZGV4T2YodG9wTGV2ZWxUeXBlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1NpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC4gVGhpcyB3YXJuaW5nICcgKyAnaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgdG9wTGV2ZWxUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSFRNTCBFdmVudHNcbiAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmRleC5odG1sI2V2ZW50cy0wXG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBldmVudCA9IEV2ZW50Q29uc3RydWN0b3IuZ2V0UG9vbGVkKGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxufTtcblxudmFyIGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSA9IFNpbXBsZUV2ZW50UGx1Z2luLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTtcblxuXG52YXIgQ0FMTEJBQ0tfQk9PS0tFRVBJTkdfUE9PTF9TSVpFID0gMTA7XG52YXIgY2FsbGJhY2tCb29ra2VlcGluZ1Bvb2wgPSBbXTtcblxuLyoqXG4gKiBGaW5kIHRoZSBkZWVwZXN0IFJlYWN0IGNvbXBvbmVudCBjb21wbGV0ZWx5IGNvbnRhaW5pbmcgdGhlIHJvb3Qgb2YgdGhlXG4gKiBwYXNzZWQtaW4gaW5zdGFuY2UgKGZvciB1c2Ugd2hlbiBlbnRpcmUgUmVhY3QgdHJlZXMgYXJlIG5lc3RlZCB3aXRoaW4gZWFjaFxuICogb3RoZXIpLiBJZiBSZWFjdCB0cmVlcyBhcmUgbm90IG5lc3RlZCwgcmV0dXJucyBudWxsLlxuICovXG5mdW5jdGlvbiBmaW5kUm9vdENvbnRhaW5lck5vZGUoaW5zdCkge1xuICAvLyBUT0RPOiBJdCBtYXkgYmUgYSBnb29kIGlkZWEgdG8gY2FjaGUgdGhpcyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IERPTVxuICAvLyB0cmF2ZXJzYWwsIGJ1dCBjYWNoaW5nIGlzIGRpZmZpY3VsdCB0byBkbyBjb3JyZWN0bHkgd2l0aG91dCB1c2luZyBhXG4gIC8vIG11dGF0aW9uIG9ic2VydmVyIHRvIGxpc3RlbiBmb3IgYWxsIERPTSBjaGFuZ2VzLlxuICB3aGlsZSAoaW5zdC5yZXR1cm4pIHtcbiAgICBpbnN0ID0gaW5zdC5yZXR1cm47XG4gIH1cbiAgaWYgKGluc3QudGFnICE9PSBIb3N0Um9vdCkge1xuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiB3ZSdyZSBpbiBhIGRldGFjaGVkIHRyZWUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGluc3Quc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG59XG5cbi8vIFVzZWQgdG8gc3RvcmUgYW5jZXN0b3IgaGllcmFyY2h5IGluIHRvcCBsZXZlbCBjYWxsYmFja1xuZnVuY3Rpb24gZ2V0VG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQsIHRhcmdldEluc3QpIHtcbiAgaWYgKGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLnBvcCgpO1xuICAgIGluc3RhbmNlLnRvcExldmVsVHlwZSA9IHRvcExldmVsVHlwZTtcbiAgICBpbnN0YW5jZS5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgIGluc3RhbmNlLnRhcmdldEluc3QgPSB0YXJnZXRJbnN0O1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHRvcExldmVsVHlwZTogdG9wTGV2ZWxUeXBlLFxuICAgIG5hdGl2ZUV2ZW50OiBuYXRpdmVFdmVudCxcbiAgICB0YXJnZXRJbnN0OiB0YXJnZXRJbnN0LFxuICAgIGFuY2VzdG9yczogW11cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVsZWFzZVRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyhpbnN0YW5jZSkge1xuICBpbnN0YW5jZS50b3BMZXZlbFR5cGUgPSBudWxsO1xuICBpbnN0YW5jZS5uYXRpdmVFdmVudCA9IG51bGw7XG4gIGluc3RhbmNlLnRhcmdldEluc3QgPSBudWxsO1xuICBpbnN0YW5jZS5hbmNlc3RvcnMubGVuZ3RoID0gMDtcbiAgaWYgKGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLmxlbmd0aCA8IENBTExCQUNLX0JPT0tLRUVQSU5HX1BPT0xfU0laRSkge1xuICAgIGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nKSB7XG4gIHZhciB0YXJnZXRJbnN0ID0gYm9va0tlZXBpbmcudGFyZ2V0SW5zdDtcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cbiAgLy8gSXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBidWlsZCB0aGUgYXJyYXkgb2YgYW5jZXN0b3JzIGJlZm9yZSBjYWxsaW5nIGFueVxuICAvLyBldmVudCBoYW5kbGVycywgYmVjYXVzZSBldmVudCBoYW5kbGVycyBjYW4gbW9kaWZ5IHRoZSBET00sIGxlYWRpbmcgdG9cbiAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cbiAgdmFyIGFuY2VzdG9yID0gdGFyZ2V0SW5zdDtcbiAgZG8ge1xuICAgIGlmICghYW5jZXN0b3IpIHtcbiAgICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgcm9vdCA9IGZpbmRSb290Q29udGFpbmVyTm9kZShhbmNlc3Rvcik7XG4gICAgaWYgKCFyb290KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYm9va0tlZXBpbmcuYW5jZXN0b3JzLnB1c2goYW5jZXN0b3IpO1xuICAgIGFuY2VzdG9yID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocm9vdCk7XG4gIH0gd2hpbGUgKGFuY2VzdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHRhcmdldEluc3QgPSBib29rS2VlcGluZy5hbmNlc3RvcnNbaV07XG4gICAgcnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaChib29rS2VlcGluZy50b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCkpO1xuICB9XG59XG5cbi8vIFRPRE86IGNhbiB3ZSBzdG9wIGV4cG9ydGluZyB0aGVzZT9cbnZhciBfZW5hYmxlZCA9IHRydWU7XG5cbmZ1bmN0aW9uIHNldEVuYWJsZWQoZW5hYmxlZCkge1xuICBfZW5hYmxlZCA9ICEhZW5hYmxlZDtcbn1cblxuZnVuY3Rpb24gaXNFbmFibGVkKCkge1xuICByZXR1cm4gX2VuYWJsZWQ7XG59XG5cbi8qKlxuICogVHJhcHMgdG9wLWxldmVsIGV2ZW50cyBieSB1c2luZyBldmVudCBidWJibGluZy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdG9wTGV2ZWxUeXBlIE51bWJlciBmcm9tIGBUb3BMZXZlbEV2ZW50VHlwZXNgLlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnQgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB0cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZSwgZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgZGlzcGF0Y2ggPSBpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUodG9wTGV2ZWxUeXBlKSA/IGRpc3BhdGNoSW50ZXJhY3RpdmVFdmVudCA6IGRpc3BhdGNoRXZlbnQ7XG5cbiAgYWRkRXZlbnRCdWJibGVMaXN0ZW5lcihlbGVtZW50LCBnZXRSYXdFdmVudE5hbWUodG9wTGV2ZWxUeXBlKSxcbiAgLy8gQ2hlY2sgaWYgaW50ZXJhY3RpdmUgYW5kIHdyYXAgaW4gaW50ZXJhY3RpdmVVcGRhdGVzXG4gIGRpc3BhdGNoLmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKSk7XG59XG5cbi8qKlxuICogVHJhcHMgYSB0b3AtbGV2ZWwgZXZlbnQgYnkgdXNpbmcgZXZlbnQgY2FwdHVyaW5nLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3BMZXZlbFR5cGUgTnVtYmVyIGZyb20gYFRvcExldmVsRXZlbnRUeXBlc2AuXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudCBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAqIEByZXR1cm4gez9vYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHRyYXBDYXB0dXJlZEV2ZW50KHRvcExldmVsVHlwZSwgZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgZGlzcGF0Y2ggPSBpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUodG9wTGV2ZWxUeXBlKSA/IGRpc3BhdGNoSW50ZXJhY3RpdmVFdmVudCA6IGRpc3BhdGNoRXZlbnQ7XG5cbiAgYWRkRXZlbnRDYXB0dXJlTGlzdGVuZXIoZWxlbWVudCwgZ2V0UmF3RXZlbnROYW1lKHRvcExldmVsVHlwZSksXG4gIC8vIENoZWNrIGlmIGludGVyYWN0aXZlIGFuZCB3cmFwIGluIGludGVyYWN0aXZlVXBkYXRlc1xuICBkaXNwYXRjaC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSkpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEludGVyYWN0aXZlRXZlbnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBpbnRlcmFjdGl2ZVVwZGF0ZXMoZGlzcGF0Y2hFdmVudCwgdG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBpZiAoIV9lbmFibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5hdGl2ZUV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpO1xuICB2YXIgdGFyZ2V0SW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgaWYgKHRhcmdldEluc3QgIT09IG51bGwgJiYgdHlwZW9mIHRhcmdldEluc3QudGFnID09PSAnbnVtYmVyJyAmJiAhaXNGaWJlck1vdW50ZWQodGFyZ2V0SW5zdCkpIHtcbiAgICAvLyBJZiB3ZSBnZXQgYW4gZXZlbnQgKGV4OiBpbWcgb25sb2FkKSBiZWZvcmUgY29tbWl0dGluZyB0aGF0XG4gICAgLy8gY29tcG9uZW50J3MgbW91bnQsIGlnbm9yZSBpdCBmb3Igbm93ICh0aGF0IGlzLCB0cmVhdCBpdCBhcyBpZiBpdCB3YXMgYW5cbiAgICAvLyBldmVudCBvbiBhIG5vbi1SZWFjdCB0cmVlKS4gV2UgbWlnaHQgYWxzbyBjb25zaWRlciBxdWV1ZWluZyBldmVudHMgYW5kXG4gICAgLy8gZGlzcGF0Y2hpbmcgdGhlbSBhZnRlciB0aGUgbW91bnQuXG4gICAgdGFyZ2V0SW5zdCA9IG51bGw7XG4gIH1cblxuICB2YXIgYm9va0tlZXBpbmcgPSBnZXRUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCwgdGFyZ2V0SW5zdCk7XG5cbiAgdHJ5IHtcbiAgICAvLyBFdmVudCBxdWV1ZSBiZWluZyBwcm9jZXNzZWQgaW4gdGhlIHNhbWUgY3ljbGUgYWxsb3dzXG4gICAgLy8gYHByZXZlbnREZWZhdWx0YC5cbiAgICBiYXRjaGVkVXBkYXRlcyhoYW5kbGVUb3BMZXZlbCwgYm9va0tlZXBpbmcpO1xuICB9IGZpbmFsbHkge1xuICAgIHJlbGVhc2VUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcoYm9va0tlZXBpbmcpO1xuICB9XG59XG5cbi8qKlxuICogU3VtbWFyeSBvZiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBldmVudCBoYW5kbGluZzpcbiAqXG4gKiAgLSBUb3AtbGV2ZWwgZGVsZWdhdGlvbiBpcyB1c2VkIHRvIHRyYXAgbW9zdCBuYXRpdmUgYnJvd3NlciBldmVudHMuIFRoaXNcbiAqICAgIG1heSBvbmx5IG9jY3VyIGluIHRoZSBtYWluIHRocmVhZCBhbmQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mXG4gKiAgICBSZWFjdERPTUV2ZW50TGlzdGVuZXIsIHdoaWNoIGlzIGluamVjdGVkIGFuZCBjYW4gdGhlcmVmb3JlIHN1cHBvcnRcbiAqICAgIHBsdWdnYWJsZSBldmVudCBzb3VyY2VzLiBUaGlzIGlzIHRoZSBvbmx5IHdvcmsgdGhhdCBvY2N1cnMgaW4gdGhlIG1haW5cbiAqICAgIHRocmVhZC5cbiAqXG4gKiAgLSBXZSBub3JtYWxpemUgYW5kIGRlLWR1cGxpY2F0ZSBldmVudHMgdG8gYWNjb3VudCBmb3IgYnJvd3NlciBxdWlya3MuIFRoaXNcbiAqICAgIG1heSBiZSBkb25lIGluIHRoZSB3b3JrZXIgdGhyZWFkLlxuICpcbiAqICAtIEZvcndhcmQgdGhlc2UgbmF0aXZlIGV2ZW50cyAod2l0aCB0aGUgYXNzb2NpYXRlZCB0b3AtbGV2ZWwgdHlwZSB1c2VkIHRvXG4gKiAgICB0cmFwIGl0KSB0byBgRXZlbnRQbHVnaW5IdWJgLCB3aGljaCBpbiB0dXJuIHdpbGwgYXNrIHBsdWdpbnMgaWYgdGhleSB3YW50XG4gKiAgICB0byBleHRyYWN0IGFueSBzeW50aGV0aWMgZXZlbnRzLlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHdpbGwgdGhlbiBwcm9jZXNzIGVhY2ggZXZlbnQgYnkgYW5ub3RhdGluZyB0aGVtIHdpdGhcbiAqICAgIFwiZGlzcGF0Y2hlc1wiLCBhIHNlcXVlbmNlIG9mIGxpc3RlbmVycyBhbmQgSURzIHRoYXQgY2FyZSBhYm91dCB0aGF0IGV2ZW50LlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHRoZW4gZGlzcGF0Y2hlcyB0aGUgZXZlbnRzLlxuICpcbiAqIE92ZXJ2aWV3IG9mIFJlYWN0IGFuZCB0aGUgZXZlbnQgc3lzdGVtOlxuICpcbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgICAgRE9NICAgICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqICAgICAgIHwgICAgICAgICAgIC5cbiAqICAgICAgIHYgICAgICAgICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgUmVhY3RFdmVudCB8ICAgIC5cbiAqIHwgIExpc3RlbmVyICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICstLS0tLS0tLSt8U2ltcGxlRXZlbnR8XG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgfCAgICAgICAgIHxQbHVnaW4gICAgIHxcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICB2ICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58RXZlbnRQbHVnaW5IdWJ8ICAgICAgICAgICAgICAgICAgICB8ICAgIEV2ZW50ICAgfFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8IFByb3BhZ2F0b3JzfFxuICogfCBSZWFjdEV2ZW50IHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICB8VGFwRXZlbnQgICB8ICB8LS0tLS0tLS0tLS0tfFxuICogfCAgRW1pdHRlciAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8PC0tLSt8UGx1Z2luICAgICB8ICB8b3RoZXIgcGx1Z2lufFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8ICB1dGlsaXRpZXMgfFxuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58ICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rXG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgIF4gICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICAgfCAgICAgICAgfEVudGVyL0xlYXZlfFxuICogICAgICAgKyAgICAgICAgICAgLiAgICAgICAgICAgICAgICArLS0tLS0tLSt8UGx1Z2luICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSsgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgYXBwbGljYXRpb24gfCAgIC5cbiAqIHwtLS0tLS0tLS0tLS0tfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqICstLS0tLS0tLS0tLS0tKyAgIC5cbiAqICAgICAgICAgICAgICAgICAgIC5cbiAqICAgIFJlYWN0IENvcmUgICAgIC4gIEdlbmVyYWwgUHVycG9zZSBFdmVudCBQbHVnaW4gU3lzdGVtXG4gKi9cblxudmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xudmFyIHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciA9IDA7XG5cbi8qKlxuICogVG8gZW5zdXJlIG5vIGNvbmZsaWN0cyB3aXRoIG90aGVyIHBvdGVudGlhbCBSZWFjdCBpbnN0YW5jZXMgb24gdGhlIHBhZ2VcbiAqL1xudmFyIHRvcExpc3RlbmVyc0lES2V5ID0gJ19yZWFjdExpc3RlbmVyc0lEJyArICgnJyArIE1hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuXG5mdW5jdGlvbiBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KSB7XG4gIC8vIEluIElFOCwgYG1vdW50QXRgIGlzIGEgaG9zdCBvYmplY3QgYW5kIGRvZXNuJ3QgaGF2ZSBgaGFzT3duUHJvcGVydHlgXG4gIC8vIGRpcmVjdGx5LlxuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3VudEF0LCB0b3BMaXN0ZW5lcnNJREtleSkpIHtcbiAgICBtb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XSA9IHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlcisrO1xuICAgIGFscmVhZHlMaXN0ZW5pbmdUb1ttb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XV0gPSB7fTtcbiAgfVxuICByZXR1cm4gYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXTtcbn1cblxuLyoqXG4gKiBXZSBsaXN0ZW4gZm9yIGJ1YmJsZWQgdG91Y2ggZXZlbnRzIG9uIHRoZSBkb2N1bWVudCBvYmplY3QuXG4gKlxuICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICogbW91bnRpbmcgYG9ubW91c2Vtb3ZlYCBldmVudHMgYXQgc29tZSBub2RlIHRoYXQgd2FzIG5vdCB0aGUgZG9jdW1lbnRcbiAqIGVsZW1lbnQuIFRoZSBzeW1wdG9tcyB3ZXJlIHRoYXQgaWYgeW91ciBtb3VzZSBpcyBub3QgbW92aW5nIG92ZXIgc29tZXRoaW5nXG4gKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgZm9yIGBvbm1vdXNlbW92ZWAgd29uJ3QgYmUgY2FsbGVkLiBIb3dldmVyLCBpZiB5b3VcbiAqIHJlZ2lzdGVyIHRoZSBgbW91c2Vtb3ZlYCBvbiB0aGUgZG9jdW1lbnQgb2JqZWN0LCB0aGVuIGl0IHdpbGwgb2YgY291cnNlXG4gKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gKiB0b3AtbGV2ZWwgbGlzdGVuZXJzIHRvIHRoZSBkb2N1bWVudCBvYmplY3Qgb25seSwgYXQgbGVhc3QgZm9yIHRoZXNlXG4gKiBtb3ZlbWVudCB0eXBlcyBvZiBldmVudHMgYW5kIHBvc3NpYmx5IGFsbCBldmVudHMuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxMC8wOS9jbGlja19ldmVudF9kZWwuaHRtbFxuICpcbiAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAqIHRoZXkgYnViYmxlIHRvIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBtb3VudEF0IENvbnRhaW5lciB3aGVyZSB0byBtb3VudCB0aGUgbGlzdGVuZXJcbiAqL1xuZnVuY3Rpb24gbGlzdGVuVG8ocmVnaXN0cmF0aW9uTmFtZSwgbW91bnRBdCkge1xuICB2YXIgaXNMaXN0ZW5pbmcgPSBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KTtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICBpZiAoIShpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJiBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSkpIHtcbiAgICAgIHN3aXRjaCAoZGVwZW5kZW5jeSkge1xuICAgICAgICBjYXNlIFRPUF9TQ1JPTEw6XG4gICAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoVE9QX1NDUk9MTCwgbW91bnRBdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVE9QX0ZPQ1VTOlxuICAgICAgICBjYXNlIFRPUF9CTFVSOlxuICAgICAgICAgIHRyYXBDYXB0dXJlZEV2ZW50KFRPUF9GT0NVUywgbW91bnRBdCk7XG4gICAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoVE9QX0JMVVIsIG1vdW50QXQpO1xuICAgICAgICAgIC8vIFdlIHNldCB0aGUgZmxhZyBmb3IgYSBzaW5nbGUgZGVwZW5kZW5jeSBsYXRlciBpbiB0aGlzIGZ1bmN0aW9uLFxuICAgICAgICAgIC8vIGJ1dCB0aGlzIGVuc3VyZXMgd2UgbWFyayBib3RoIGFzIGF0dGFjaGVkIHJhdGhlciB0aGFuIGp1c3Qgb25lLlxuICAgICAgICAgIGlzTGlzdGVuaW5nW1RPUF9CTFVSXSA9IHRydWU7XG4gICAgICAgICAgaXNMaXN0ZW5pbmdbVE9QX0ZPQ1VTXSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVE9QX0NBTkNFTDpcbiAgICAgICAgY2FzZSBUT1BfQ0xPU0U6XG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoZ2V0UmF3RXZlbnROYW1lKGRlcGVuZGVuY3kpKSkge1xuICAgICAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoZGVwZW5kZW5jeSwgbW91bnRBdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRPUF9JTlZBTElEOlxuICAgICAgICBjYXNlIFRPUF9TVUJNSVQ6XG4gICAgICAgIGNhc2UgVE9QX1JFU0VUOlxuICAgICAgICAgIC8vIFdlIGxpc3RlbiB0byB0aGVtIG9uIHRoZSB0YXJnZXQgRE9NIGVsZW1lbnRzLlxuICAgICAgICAgIC8vIFNvbWUgb2YgdGhlbSBidWJibGUgc28gd2UgZG9uJ3Qgd2FudCB0aGVtIHRvIGZpcmUgdHdpY2UuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gQnkgZGVmYXVsdCwgbGlzdGVuIG9uIHRoZSB0b3AgbGV2ZWwgdG8gYWxsIG5vbi1tZWRpYSBldmVudHMuXG4gICAgICAgICAgLy8gTWVkaWEgZXZlbnRzIGRvbid0IGJ1YmJsZSBzbyBhZGRpbmcgdGhlIGxpc3RlbmVyIHdvdWxkbid0IGRvIGFueXRoaW5nLlxuICAgICAgICAgIHZhciBpc01lZGlhRXZlbnQgPSBtZWRpYUV2ZW50VHlwZXMuaW5kZXhPZihkZXBlbmRlbmN5KSAhPT0gLTE7XG4gICAgICAgICAgaWYgKCFpc01lZGlhRXZlbnQpIHtcbiAgICAgICAgICAgIHRyYXBCdWJibGVkRXZlbnQoZGVwZW5kZW5jeSwgbW91bnRBdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV0gPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xpc3RlbmluZ1RvQWxsRGVwZW5kZW5jaWVzKHJlZ2lzdHJhdGlvbk5hbWUsIG1vdW50QXQpIHtcbiAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzW2ldO1xuICAgIGlmICghKGlzTGlzdGVuaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpICYmIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIHtcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGFueSBub2RlIHJldHVybiB0aGUgZmlyc3QgbGVhZiBub2RlIHdpdGhvdXQgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICB2YXIgbm9kZVN0YXJ0ID0gMDtcbiAgdmFyIG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkge1xuICAgICAgbm9kZUVuZCA9IG5vZGVTdGFydCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuXG4gICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbm9kZVN0YXJ0ID0gbm9kZUVuZDtcbiAgICB9XG5cbiAgICBub2RlID0gZ2V0TGVhZk5vZGUoZ2V0U2libGluZ05vZGUobm9kZSkpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBvdXRlck5vZGVcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldHMob3V0ZXJOb2RlKSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gb3V0ZXJOb2RlLm93bmVyRG9jdW1lbnQ7XG5cbiAgdmFyIHdpbiA9IG93bmVyRG9jdW1lbnQgJiYgb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHZhciBzZWxlY3Rpb24gPSB3aW4uZ2V0U2VsZWN0aW9uICYmIHdpbi5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIXNlbGVjdGlvbiB8fCBzZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG5cbiAgLy8gSW4gRmlyZWZveCwgYW5jaG9yTm9kZSBhbmQgZm9jdXNOb2RlIGNhbiBiZSBcImFub255bW91cyBkaXZzXCIsIGUuZy4gdGhlXG4gIC8vIHVwL2Rvd24gYnV0dG9ucyBvbiBhbiA8aW5wdXQgdHlwZT1cIm51bWJlclwiPi4gQW5vbnltb3VzIGRpdnMgZG8gbm90IHNlZW0gdG9cbiAgLy8gZXhwb3NlIHByb3BlcnRpZXMsIHRyaWdnZXJpbmcgYSBcIlBlcm1pc3Npb24gZGVuaWVkIGVycm9yXCIgaWYgYW55IG9mIGl0c1xuICAvLyBwcm9wZXJ0aWVzIGFyZSBhY2Nlc3NlZC4gVGhlIG9ubHkgc2VlbWluZ2x5IHBvc3NpYmxlIHdheSB0byBhdm9pZCBlcnJvcmluZ1xuICAvLyBpcyB0byBhY2Nlc3MgYSBwcm9wZXJ0eSB0aGF0IHR5cGljYWxseSB3b3JrcyBmb3Igbm9uLWFub255bW91cyBkaXZzIGFuZFxuICAvLyBjYXRjaCBhbnkgZXJyb3IgdGhhdCBtYXkgb3RoZXJ3aXNlIGFyaXNlLiBTZWVcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjA4NDI3XG5cbiAgdHJ5IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICBhbmNob3JOb2RlLm5vZGVUeXBlO1xuICAgIGZvY3VzTm9kZS5ub2RlVHlwZTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZ2V0TW9kZXJuT2Zmc2V0c0Zyb21Qb2ludHMob3V0ZXJOb2RlLCBhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xufVxuXG4vKipcbiAqIFJldHVybnMge3N0YXJ0LCBlbmR9IHdoZXJlIGBzdGFydGAgaXMgdGhlIGNoYXJhY3Rlci9jb2RlcG9pbnQgaW5kZXggb2ZcbiAqIChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpIHdpdGhpbiB0aGUgdGV4dENvbnRlbnQgb2YgYG91dGVyTm9kZWAsIGFuZFxuICogYGVuZGAgaXMgdGhlIGluZGV4IG9mIChmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KS5cbiAqXG4gKiBSZXR1cm5zIG51bGwgaWYgeW91IHBhc3MgaW4gZ2FyYmFnZSBpbnB1dCBidXQgd2Ugc2hvdWxkIHByb2JhYmx5IGp1c3QgY3Jhc2guXG4gKlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdGluZy5cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kZXJuT2Zmc2V0c0Zyb21Qb2ludHMob3V0ZXJOb2RlLCBhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpIHtcbiAgdmFyIGxlbmd0aCA9IDA7XG4gIHZhciBzdGFydCA9IC0xO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBpbmRleFdpdGhpbkFuY2hvciA9IDA7XG4gIHZhciBpbmRleFdpdGhpbkZvY3VzID0gMDtcbiAgdmFyIG5vZGUgPSBvdXRlck5vZGU7XG4gIHZhciBwYXJlbnROb2RlID0gbnVsbDtcblxuICBvdXRlcjogd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgbmV4dCA9IG51bGw7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKG5vZGUgPT09IGFuY2hvck5vZGUgJiYgKGFuY2hvck9mZnNldCA9PT0gMCB8fCBub2RlLm5vZGVUeXBlID09PSBURVhUX05PREUpKSB7XG4gICAgICAgIHN0YXJ0ID0gbGVuZ3RoICsgYW5jaG9yT2Zmc2V0O1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUgPT09IGZvY3VzTm9kZSAmJiAoZm9jdXNPZmZzZXQgPT09IDAgfHwgbm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFKSkge1xuICAgICAgICBlbmQgPSBsZW5ndGggKyBmb2N1c09mZnNldDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkge1xuICAgICAgICBsZW5ndGggKz0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoKG5leHQgPSBub2RlLmZpcnN0Q2hpbGQpID09PSBudWxsKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTW92aW5nIGZyb20gYG5vZGVgIHRvIGl0cyBmaXJzdCBjaGlsZCBgbmV4dGAuXG4gICAgICBwYXJlbnROb2RlID0gbm9kZTtcbiAgICAgIG5vZGUgPSBuZXh0O1xuICAgIH1cblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAobm9kZSA9PT0gb3V0ZXJOb2RlKSB7XG4gICAgICAgIC8vIElmIGBvdXRlck5vZGVgIGhhcyBjaGlsZHJlbiwgdGhpcyBpcyBhbHdheXMgdGhlIHNlY29uZCB0aW1lIHZpc2l0aW5nXG4gICAgICAgIC8vIGl0LiBJZiBpdCBoYXMgbm8gY2hpbGRyZW4sIHRoaXMgaXMgc3RpbGwgdGhlIGZpcnN0IGxvb3AsIGFuZCB0aGUgb25seVxuICAgICAgICAvLyB2YWxpZCBzZWxlY3Rpb24gaXMgYW5jaG9yTm9kZSBhbmQgZm9jdXNOb2RlIGJvdGggZXF1YWwgdG8gdGhpcyBub2RlXG4gICAgICAgIC8vIGFuZCBib3RoIG9mZnNldHMgMCwgaW4gd2hpY2ggY2FzZSB3ZSB3aWxsIGhhdmUgaGFuZGxlZCBhYm92ZS5cbiAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50Tm9kZSA9PT0gYW5jaG9yTm9kZSAmJiArK2luZGV4V2l0aGluQW5jaG9yID09PSBhbmNob3JPZmZzZXQpIHtcbiAgICAgICAgc3RhcnQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50Tm9kZSA9PT0gZm9jdXNOb2RlICYmICsraW5kZXhXaXRoaW5Gb2N1cyA9PT0gZm9jdXNPZmZzZXQpIHtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKChuZXh0ID0gbm9kZS5uZXh0U2libGluZykgIT09IG51bGwpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBub2RlID0gcGFyZW50Tm9kZTtcbiAgICAgIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgLy8gTW92aW5nIGZyb20gYG5vZGVgIHRvIGl0cyBuZXh0IHNpYmxpbmcgYG5leHRgLlxuICAgIG5vZGUgPSBuZXh0O1xuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBlbmQgPT09IC0xKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLiAoV291bGQgaGFwcGVuIGlmIHRoZSBhbmNob3IvZm9jdXMgbm9kZXMgYXJlbid0XG4gICAgLy8gYWN0dWFsbHkgaW5zaWRlIHRoZSBwYXNzZWQtaW4gbm9kZS4pXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBlbmQ6IGVuZFxuICB9O1xufVxuXG4vKipcbiAqIEluIG1vZGVybiBub24tSUUgYnJvd3NlcnMsIHdlIGNhbiBzdXBwb3J0IGJvdGggZm9yd2FyZCBhbmQgYmFja3dhcmRcbiAqIHNlbGVjdGlvbnMuXG4gKlxuICogTm90ZTogSUUxMCsgc3VwcG9ydHMgdGhlIFNlbGVjdGlvbiBvYmplY3QsIGJ1dCBpdCBkb2VzIG5vdCBzdXBwb3J0XG4gKiB0aGUgYGV4dGVuZGAgbWV0aG9kLCB3aGljaCBtZWFucyB0aGF0IGV2ZW4gaW4gbW9kZXJuIElFLCBpdCdzIG5vdCBwb3NzaWJsZVxuICogdG8gcHJvZ3JhbW1hdGljYWxseSBjcmVhdGUgYSBiYWNrd2FyZCBzZWxlY3Rpb24uIFRodXMsIGZvciBhbGwgSUVcbiAqIHZlcnNpb25zLCB3ZSB1c2UgdGhlIG9sZCBJRSBBUEkgdG8gY3JlYXRlIG91ciBzZWxlY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0T2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG4gIHZhciB3aW4gPSBkb2MgJiYgZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcblxuICAvLyBFZGdlIGZhaWxzIHdpdGggXCJPYmplY3QgZXhwZWN0ZWRcIiBpbiBzb21lIHNjZW5hcmlvcy5cbiAgLy8gKEZvciBpbnN0YW5jZTogVGlueU1DRSBlZGl0b3IgdXNlZCBpbiBhIGxpc3QgY29tcG9uZW50IHRoYXQgc3VwcG9ydHMgcGFzdGluZyB0byBhZGQgbW9yZSxcbiAgLy8gZmFpbHMgd2hlbiBwYXN0aW5nIDEwMCsgaXRlbXMpXG4gIGlmICghd2luLmdldFNlbGVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSB3aW4uZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBsZW5ndGggPSBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgdmFyIHN0YXJ0ID0gTWF0aC5taW4ob2Zmc2V0cy5zdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IG9mZnNldHMuZW5kID09PSB1bmRlZmluZWQgPyBzdGFydCA6IE1hdGgubWluKG9mZnNldHMuZW5kLCBsZW5ndGgpO1xuXG4gIC8vIElFIDExIHVzZXMgbW9kZXJuIHNlbGVjdGlvbiwgYnV0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZXh0ZW5kIG1ldGhvZC5cbiAgLy8gRmxpcCBiYWNrd2FyZCBzZWxlY3Rpb25zLCBzbyB3ZSBjYW4gc2V0IHdpdGggYSBzaW5nbGUgcmFuZ2UuXG4gIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBzdGFydCA+IGVuZCkge1xuICAgIHZhciB0ZW1wID0gZW5kO1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gdGVtcDtcbiAgfVxuXG4gIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuXG4gIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcbiAgICBpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDEgJiYgc2VsZWN0aW9uLmFuY2hvck5vZGUgPT09IHN0YXJ0TWFya2VyLm5vZGUgJiYgc2VsZWN0aW9uLmFuY2hvck9mZnNldCA9PT0gc3RhcnRNYXJrZXIub2Zmc2V0ICYmIHNlbGVjdGlvbi5mb2N1c05vZGUgPT09IGVuZE1hcmtlci5ub2RlICYmIHNlbGVjdGlvbi5mb2N1c09mZnNldCA9PT0gZW5kTWFya2VyLm9mZnNldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmFuZ2UgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZXRTdGFydChzdGFydE1hcmtlci5ub2RlLCBzdGFydE1hcmtlci5vZmZzZXQpO1xuICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcblxuICAgIGlmIChzdGFydCA+IGVuZCkge1xuICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIHNlbGVjdGlvbi5leHRlbmQoZW5kTWFya2VyLm5vZGUsIGVuZE1hcmtlci5vZmZzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZS5zZXRFbmQoZW5kTWFya2VyLm5vZGUsIGVuZE1hcmtlci5vZmZzZXQpO1xuICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCAmJiBjb250YWluc05vZGUobm9kZS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgbm9kZSk7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZU9yaWdpbkZyYW1lKGlmcmFtZSkge1xuICB0cnkge1xuICAgIC8vIEFjY2Vzc2luZyB0aGUgY29udGVudERvY3VtZW50IG9mIGEgSFRNTElmcmFtZUVsZW1lbnQgY2FuIGNhdXNlIHRoZSBicm93c2VyXG4gICAgLy8gdG8gdGhyb3csIGUuZy4gaWYgaXQgaGFzIGEgY3Jvc3Mtb3JpZ2luIHNyYyBhdHRyaWJ1dGUuXG4gICAgLy8gU2FmYXJpIHdpbGwgc2hvdyBhbiBlcnJvciBpbiB0aGUgY29uc29sZSB3aGVuIHRoZSBhY2Nlc3MgcmVzdWx0cyBpbiBcIkJsb2NrZWQgYSBmcmFtZSB3aXRoIG9yaWdpblwiLiBlLmc6XG4gICAgLy8gaWZyYW1lLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICAvLyBBIHNhZmV0eSB3YXkgaXMgdG8gYWNjZXNzIG9uZSBvZiB0aGUgY3Jvc3Mgb3JpZ2luIHByb3BlcnRpZXM6IFdpbmRvdyBvciBMb2NhdGlvblxuICAgIC8vIFdoaWNoIG1pZ2h0IHJlc3VsdCBpbiBcIlNlY3VyaXR5RXJyb3JcIiBET00gRXhjZXB0aW9uIGFuZCBpdCBpcyBjb21wYXRpYmxlIHRvIFNhZmFyaS5cbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9icm93c2Vycy5odG1sI2ludGVncmF0aW9uLXdpdGgtaWRsXG5cbiAgICByZXR1cm4gdHlwZW9mIGlmcmFtZS5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWYgPT09ICdzdHJpbmcnO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudERlZXAoKSB7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBlbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICB3aGlsZSAoZWxlbWVudCBpbnN0YW5jZW9mIHdpbi5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgIGlmIChpc1NhbWVPcmlnaW5GcmFtZShlbGVtZW50KSkge1xuICAgICAgd2luID0gZWxlbWVudC5jb250ZW50V2luZG93O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG4gICAgZWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQod2luLmRvY3VtZW50KTtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBAUmVhY3RJbnB1dFNlbGVjdGlvbjogUmVhY3QgaW5wdXQgc2VsZWN0aW9uIG1vZHVsZS4gQmFzZWQgb24gU2VsZWN0aW9uLmpzLFxuICogYnV0IG1vZGlmaWVkIHRvIGJlIHN1aXRhYmxlIGZvciByZWFjdCBhbmQgaGFzIGEgY291cGxlIG9mIGJ1ZyBmaXhlcyAoZG9lc24ndFxuICogYXNzdW1lIGJ1dHRvbnMgaGF2ZSByYW5nZSBzZWxlY3Rpb25zIGFsbG93ZWQpLlxuICogSW5wdXQgc2VsZWN0aW9uIG1vZHVsZSBmb3IgUmVhY3QuXG4gKi9cblxuLyoqXG4gKiBAaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzOiB3ZSBnZXQgdGhlIGVsZW1lbnQgdHlwZXMgdGhhdCBzdXBwb3J0IHNlbGVjdGlvblxuICogZnJvbSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNkby1ub3QtYXBwbHksIGxvb2tpbmcgYXQgYHNlbGVjdGlvblN0YXJ0YFxuICogYW5kIGBzZWxlY3Rpb25FbmRgIHJvd3MuXG4gKi9cbmZ1bmN0aW9uIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhlbGVtKSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW0gJiYgZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBub2RlTmFtZSAmJiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgKGVsZW0udHlwZSA9PT0gJ3RleHQnIHx8IGVsZW0udHlwZSA9PT0gJ3NlYXJjaCcgfHwgZWxlbS50eXBlID09PSAndGVsJyB8fCBlbGVtLnR5cGUgPT09ICd1cmwnIHx8IGVsZW0udHlwZSA9PT0gJ3Bhc3N3b3JkJykgfHwgbm9kZU5hbWUgPT09ICd0ZXh0YXJlYScgfHwgZWxlbS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyk7XG59XG5cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uKCkge1xuICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50RGVlcCgpO1xuICByZXR1cm4ge1xuICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICBzZWxlY3Rpb25SYW5nZTogaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGZvY3VzZWRFbGVtKSA/IGdldFNlbGVjdGlvbiQxKGZvY3VzZWRFbGVtKSA6IG51bGxcbiAgfTtcbn1cblxuLyoqXG4gKiBAcmVzdG9yZVNlbGVjdGlvbjogSWYgYW55IHNlbGVjdGlvbiBpbmZvcm1hdGlvbiB3YXMgcG90ZW50aWFsbHkgbG9zdCxcbiAqIHJlc3RvcmUgaXQuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcGVyZm9ybWluZyBvcGVyYXRpb25zIHRoYXQgY291bGQgcmVtb3ZlIGRvbVxuICogbm9kZXMgYW5kIHBsYWNlIHRoZW0gYmFjayBpbiwgcmVzdWx0aW5nIGluIGZvY3VzIGJlaW5nIGxvc3QuXG4gKi9cbmZ1bmN0aW9uIHJlc3RvcmVTZWxlY3Rpb24ocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuICB2YXIgY3VyRm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50RGVlcCgpO1xuICB2YXIgcHJpb3JGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uZm9jdXNlZEVsZW07XG4gIHZhciBwcmlvclNlbGVjdGlvblJhbmdlID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5zZWxlY3Rpb25SYW5nZTtcbiAgaWYgKGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmIGlzSW5Eb2N1bWVudChwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgIGlmIChwcmlvclNlbGVjdGlvblJhbmdlICE9PSBudWxsICYmIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgc2V0U2VsZWN0aW9uKHByaW9yRm9jdXNlZEVsZW0sIHByaW9yU2VsZWN0aW9uUmFuZ2UpO1xuICAgIH1cblxuICAgIC8vIEZvY3VzaW5nIGEgbm9kZSBjYW4gY2hhbmdlIHRoZSBzY3JvbGwgcG9zaXRpb24sIHdoaWNoIGlzIHVuZGVzaXJhYmxlXG4gICAgdmFyIGFuY2VzdG9ycyA9IFtdO1xuICAgIHZhciBhbmNlc3RvciA9IHByaW9yRm9jdXNlZEVsZW07XG4gICAgd2hpbGUgKGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50Tm9kZSkge1xuICAgICAgaWYgKGFuY2VzdG9yLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2goe1xuICAgICAgICAgIGVsZW1lbnQ6IGFuY2VzdG9yLFxuICAgICAgICAgIGxlZnQ6IGFuY2VzdG9yLnNjcm9sbExlZnQsXG4gICAgICAgICAgdG9wOiBhbmNlc3Rvci5zY3JvbGxUb3BcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwcmlvckZvY3VzZWRFbGVtLmZvY3VzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcmlvckZvY3VzZWRFbGVtLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbmNlc3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpbmZvID0gYW5jZXN0b3JzW2ldO1xuICAgICAgaW5mby5lbGVtZW50LnNjcm9sbExlZnQgPSBpbmZvLmxlZnQ7XG4gICAgICBpbmZvLmVsZW1lbnQuc2Nyb2xsVG9wID0gaW5mby50b3A7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQGdldFNlbGVjdGlvbjogR2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIGZvY3VzZWQgdGV4dGFyZWEsIGlucHV0IG9yXG4gKiBjb250ZW50RWRpdGFibGUgbm9kZS5cbiAqIC1AaW5wdXQ6IExvb2sgdXAgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0XG4gKiAtQHJldHVybiB7c3RhcnQ6IHNlbGVjdGlvblN0YXJ0LCBlbmQ6IHNlbGVjdGlvbkVuZH1cbiAqL1xuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uJDEoaW5wdXQpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IHZvaWQgMDtcblxuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgIC8vIE1vZGVybiBicm93c2VyIHdpdGggaW5wdXQgb3IgdGV4dGFyZWEuXG4gICAgc2VsZWN0aW9uID0ge1xuICAgICAgc3RhcnQ6IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBpbnB1dC5zZWxlY3Rpb25FbmRcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIENvbnRlbnQgZWRpdGFibGUgb3Igb2xkIElFIHRleHRhcmVhLlxuICAgIHNlbGVjdGlvbiA9IGdldE9mZnNldHMoaW5wdXQpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7IHN0YXJ0OiAwLCBlbmQ6IDAgfTtcbn1cblxuLyoqXG4gKiBAc2V0U2VsZWN0aW9uOiBTZXRzIHRoZSBzZWxlY3Rpb24gYm91bmRzIG9mIGEgdGV4dGFyZWEgb3IgaW5wdXQgYW5kIGZvY3VzZXNcbiAqIHRoZSBpbnB1dC5cbiAqIC1AaW5wdXQgICAgIFNldCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXQgb3IgdGV4dGFyZWFcbiAqIC1Ab2Zmc2V0cyAgIE9iamVjdCBvZiBzYW1lIGZvcm0gdGhhdCBpcyByZXR1cm5lZCBmcm9tIGdldCpcbiAqL1xuZnVuY3Rpb24gc2V0U2VsZWN0aW9uKGlucHV0LCBvZmZzZXRzKSB7XG4gIHZhciBzdGFydCA9IG9mZnNldHMuc3RhcnQsXG4gICAgICBlbmQgPSBvZmZzZXRzLmVuZDtcblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSBzdGFydDtcbiAgfVxuXG4gIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBzdGFydDtcbiAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihlbmQsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgc2V0T2Zmc2V0cyhpbnB1dCwgb2Zmc2V0cyk7XG4gIH1cbn1cblxudmFyIHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCA9IGNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPD0gMTE7XG5cbnZhciBldmVudFR5cGVzJDMgPSB7XG4gIHNlbGVjdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25TZWxlY3QnLFxuICAgICAgY2FwdHVyZWQ6ICdvblNlbGVjdENhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtUT1BfQkxVUiwgVE9QX0NPTlRFWFRfTUVOVSwgVE9QX0RSQUdfRU5ELCBUT1BfRk9DVVMsIFRPUF9LRVlfRE9XTiwgVE9QX0tFWV9VUCwgVE9QX01PVVNFX0RPV04sIFRPUF9NT1VTRV9VUCwgVE9QX1NFTEVDVElPTl9DSEFOR0VdXG4gIH1cbn07XG5cbnZhciBhY3RpdmVFbGVtZW50JDEgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBudWxsO1xudmFyIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xudmFyIG1vdXNlRG93biA9IGZhbHNlO1xuXG4vKipcbiAqIEdldCBhbiBvYmplY3Qgd2hpY2ggaXMgYSB1bmlxdWUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBub3QgYmUgY29uc2lzdGVudCBhY3Jvc3Mgbm9kZXMgb3IgYnJvd3NlcnMsIGJ1dFxuICogdHdvIGlkZW50aWNhbCBzZWxlY3Rpb25zIG9uIHRoZSBzYW1lIG5vZGUgd2lsbCByZXR1cm4gaWRlbnRpY2FsIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbihub2RlKSB7XG4gIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIG5vZGUgJiYgaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKG5vZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBub2RlLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBub2RlLnNlbGVjdGlvbkVuZFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdmFyIHdpbiA9IG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICAgIHZhciBzZWxlY3Rpb24gPSB3aW4uZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuY2hvck5vZGU6IHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgYW5jaG9yT2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgZm9jdXNOb2RlOiBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbi5mb2N1c09mZnNldFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgZG9jdW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudCB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gKiBAcmV0dXJuIHtEb2N1bWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXREb2N1bWVudChldmVudFRhcmdldCkge1xuICByZXR1cm4gZXZlbnRUYXJnZXQud2luZG93ID09PSBldmVudFRhcmdldCA/IGV2ZW50VGFyZ2V0LmRvY3VtZW50IDogZXZlbnRUYXJnZXQubm9kZVR5cGUgPT09IERPQ1VNRU5UX05PREUgPyBldmVudFRhcmdldCA6IGV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG59XG5cbi8qKlxuICogUG9sbCBzZWxlY3Rpb24gdG8gc2VlIHdoZXRoZXIgaXQncyBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gKiBAcmV0dXJuIHs/U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAvLyBFbnN1cmUgd2UgaGF2ZSB0aGUgcmlnaHQgZWxlbWVudCwgYW5kIHRoYXQgdGhlIHVzZXIgaXMgbm90IGRyYWdnaW5nIGFcbiAgLy8gc2VsZWN0aW9uICh0aGlzIG1hdGNoZXMgbmF0aXZlIGBzZWxlY3RgIGV2ZW50IGJlaGF2aW9yKS4gSW4gSFRNTDUsIHNlbGVjdFxuICAvLyBmaXJlcyBvbmx5IG9uIGlucHV0IGFuZCB0ZXh0YXJlYSB0aHVzIGlmIHRoZXJlJ3Mgbm8gZm9jdXNlZCBlbGVtZW50IHdlXG4gIC8vIHdvbid0IGRpc3BhdGNoLlxuICB2YXIgZG9jID0gZ2V0RXZlbnRUYXJnZXREb2N1bWVudChuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgaWYgKG1vdXNlRG93biB8fCBhY3RpdmVFbGVtZW50JDEgPT0gbnVsbCB8fCBhY3RpdmVFbGVtZW50JDEgIT09IGdldEFjdGl2ZUVsZW1lbnQoZG9jKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gT25seSBmaXJlIHdoZW4gc2VsZWN0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbihhY3RpdmVFbGVtZW50JDEpO1xuICBpZiAoIWxhc3RTZWxlY3Rpb24gfHwgIXNoYWxsb3dFcXVhbChsYXN0U2VsZWN0aW9uLCBjdXJyZW50U2VsZWN0aW9uKSkge1xuICAgIGxhc3RTZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uO1xuXG4gICAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMkMy5zZWxlY3QsIGFjdGl2ZUVsZW1lbnRJbnN0JDEsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgICBzeW50aGV0aWNFdmVudC50eXBlID0gJ3NlbGVjdCc7XG4gICAgc3ludGhldGljRXZlbnQudGFyZ2V0ID0gYWN0aXZlRWxlbWVudCQxO1xuXG4gICAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhzeW50aGV0aWNFdmVudCk7XG5cbiAgICByZXR1cm4gc3ludGhldGljRXZlbnQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvblNlbGVjdGAgZXZlbnQgdGhhdCBub3JtYWxpemVzIHNlbGVjdCBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIGNvbnRlbnRFZGl0YWJsZVxuICpcbiAqIFRoaXMgZGlmZmVycyBmcm9tIG5hdGl2ZSBicm93c2VyIGltcGxlbWVudGF0aW9ucyBpbiB0aGUgZm9sbG93aW5nIHdheXM6XG4gKiAtIEZpcmVzIG9uIGNvbnRlbnRFZGl0YWJsZSBmaWVsZHMgYXMgd2VsbCBhcyBpbnB1dHMuXG4gKiAtIEZpcmVzIGZvciBjb2xsYXBzZWQgc2VsZWN0aW9uLlxuICogLSBGaXJlcyBhZnRlciB1c2VyIGlucHV0LlxuICovXG52YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMkMyxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgZG9jID0gZ2V0RXZlbnRUYXJnZXREb2N1bWVudChuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgLy8gVHJhY2sgd2hldGhlciBhbGwgbGlzdGVuZXJzIGV4aXN0cyBmb3IgdGhpcyBwbHVnaW4uIElmIG5vbmUgZXhpc3QsIHdlIGRvXG4gICAgLy8gbm90IGV4dHJhY3QgZXZlbnRzLiBTZWUgIzM2MzkuXG4gICAgaWYgKCFkb2MgfHwgIWlzTGlzdGVuaW5nVG9BbGxEZXBlbmRlbmNpZXMoJ29uU2VsZWN0JywgZG9jKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldE5vZGUgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSQxKHRhcmdldEluc3QpIDogd2luZG93O1xuXG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIC8vIFRyYWNrIHRoZSBpbnB1dCBub2RlIHRoYXQgaGFzIGZvY3VzLlxuICAgICAgY2FzZSBUT1BfRk9DVVM6XG4gICAgICAgIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodGFyZ2V0Tm9kZSkgfHwgdGFyZ2V0Tm9kZS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJykge1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnQkMSA9IHRhcmdldE5vZGU7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudEluc3QkMSA9IHRhcmdldEluc3Q7XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRPUF9CTFVSOlxuICAgICAgICBhY3RpdmVFbGVtZW50JDEgPSBudWxsO1xuICAgICAgICBhY3RpdmVFbGVtZW50SW5zdCQxID0gbnVsbDtcbiAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcuIFRoaXMgbWF0Y2hlcyB0aGVcbiAgICAgIC8vIHNlbWFudGljcyBvZiB0aGUgbmF0aXZlIHNlbGVjdCBldmVudC5cbiAgICAgIGNhc2UgVE9QX01PVVNFX0RPV046XG4gICAgICAgIG1vdXNlRG93biA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfQ09OVEVYVF9NRU5VOlxuICAgICAgY2FzZSBUT1BfTU9VU0VfVVA6XG4gICAgICBjYXNlIFRPUF9EUkFHX0VORDpcbiAgICAgICAgbW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgLy8gQ2hyb21lIGFuZCBJRSBmaXJlIG5vbi1zdGFuZGFyZCBldmVudCB3aGVuIHNlbGVjdGlvbiBpcyBjaGFuZ2VkIChhbmRcbiAgICAgIC8vIHNvbWV0aW1lcyB3aGVuIGl0IGhhc24ndCkuIElFJ3MgZXZlbnQgZmlyZXMgb3V0IG9mIG9yZGVyIHdpdGggcmVzcGVjdFxuICAgICAgLy8gdG8ga2V5IGFuZCBpbnB1dCBldmVudHMgb24gZGVsZXRpb24sIHNvIHdlIGRpc2NhcmQgaXQuXG4gICAgICAvL1xuICAgICAgLy8gRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgc2VsZWN0aW9uY2hhbmdlLCBzbyBjaGVjayBzZWxlY3Rpb24gc3RhdHVzXG4gICAgICAvLyBhZnRlciBlYWNoIGtleSBlbnRyeS4gVGhlIHNlbGVjdGlvbiBjaGFuZ2VzIGFmdGVyIGtleWRvd24gYW5kIGJlZm9yZVxuICAgICAgLy8ga2V5dXAsIGJ1dCB3ZSBjaGVjayBvbiBrZXlkb3duIGFzIHdlbGwgaW4gdGhlIGNhc2Ugb2YgaG9sZGluZyBkb3duIGFcbiAgICAgIC8vIGtleSwgd2hlbiBtdWx0aXBsZSBrZXlkb3duIGV2ZW50cyBhcmUgZmlyZWQgYnV0IG9ubHkgb25lIGtleXVwIGlzLlxuICAgICAgLy8gVGhpcyBpcyBhbHNvIG91ciBhcHByb2FjaCBmb3IgSUUgaGFuZGxpbmcsIGZvciB0aGUgcmVhc29uIGFib3ZlLlxuICAgICAgY2FzZSBUT1BfU0VMRUNUSU9OX0NIQU5HRTpcbiAgICAgICAgaWYgKHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIFRPUF9LRVlfRE9XTjpcbiAgICAgIGNhc2UgVE9QX0tFWV9VUDpcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSW5qZWN0IG1vZHVsZXMgZm9yIHJlc29sdmluZyBET00gaGllcmFyY2h5IGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gKi9cbmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKERPTUV2ZW50UGx1Z2luT3JkZXIpO1xuc2V0Q29tcG9uZW50VHJlZShnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlJDEsIGdldEluc3RhbmNlRnJvbU5vZGUkMSwgZ2V0Tm9kZUZyb21JbnN0YW5jZSQxKTtcblxuLyoqXG4gKiBTb21lIGltcG9ydGFudCBldmVudCBwbHVnaW5zIGluY2x1ZGVkIGJ5IGRlZmF1bHQgKHdpdGhvdXQgaGF2aW5nIHRvIHJlcXVpcmVcbiAqIHRoZW0pLlxuICovXG5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtcbiAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICBFbnRlckxlYXZlRXZlbnRQbHVnaW46IEVudGVyTGVhdmVFdmVudFBsdWdpbixcbiAgQ2hhbmdlRXZlbnRQbHVnaW46IENoYW5nZUV2ZW50UGx1Z2luLFxuICBTZWxlY3RFdmVudFBsdWdpbjogU2VsZWN0RXZlbnRQbHVnaW4sXG4gIEJlZm9yZUlucHV0RXZlbnRQbHVnaW46IEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cbn0pO1xuXG52YXIgZGlkV2FyblNlbGVjdGVkU2V0T25PcHRpb24gPSBmYWxzZTtcbnZhciBkaWRXYXJuSW52YWxpZENoaWxkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbikge1xuICB2YXIgY29udGVudCA9ICcnO1xuXG4gIC8vIEZsYXR0ZW4gY2hpbGRyZW4uIFdlJ2xsIHdhcm4gaWYgdGhleSBhcmUgaW52YWxpZFxuICAvLyBkdXJpbmcgdmFsaWRhdGVQcm9wcygpIHdoaWNoIHJ1bnMgZm9yIGh5ZHJhdGlvbiB0b28uXG4gIC8vIE5vdGUgdGhhdCB0aGlzIHdvdWxkIHRocm93IG9uIG5vbi1lbGVtZW50IG9iamVjdHMuXG4gIC8vIEVsZW1lbnRzIGFyZSBzdHJpbmdpZmllZCAod2hpY2ggaXMgbm9ybWFsbHkgaXJyZWxldmFudFxuICAvLyBidXQgbWF0dGVycyBmb3IgPGZidD4pLlxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb250ZW50ICs9IGNoaWxkO1xuICAgIC8vIE5vdGU6IHdlIGRvbid0IHdhcm4gYWJvdXQgaW52YWxpZCBjaGlsZHJlbiBoZXJlLlxuICAgIC8vIEluc3RlYWQsIHRoaXMgaXMgZG9uZSBzZXBhcmF0ZWx5IGJlbG93IHNvIHRoYXRcbiAgICAvLyBpdCBoYXBwZW5zIGR1cmluZyB0aGUgaHlkcmF0aW9uIGNvZGVwYXRoIHRvby5cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBob3N0IGNvbXBvbmVudCB0aGF0IHdhcm5zIHdoZW4gYHNlbGVjdGVkYCBpcyBzZXQuXG4gKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhlbGVtZW50LCBwcm9wcykge1xuICB7XG4gICAgLy8gVGhpcyBtaXJyb3JzIHRoZSBjb2RlcGF0aCBhYm92ZSwgYnV0IHJ1bnMgZm9yIGh5ZHJhdGlvbiB0b28uXG4gICAgLy8gV2FybiBhYm91dCBpbnZhbGlkIGNoaWxkcmVuIGhlcmUgc28gdGhhdCBjbGllbnQgYW5kIGh5ZHJhdGlvbiBhcmUgY29uc2lzdGVudC5cbiAgICAvLyBUT0RPOiB0aGlzIHNlZW1zIGxpa2UgaXQgY291bGQgY2F1c2UgYSBERVYtb25seSB0aHJvdyBmb3IgaHlkcmF0aW9uXG4gICAgLy8gaWYgY2hpbGRyZW4gY29udGFpbnMgYSBub24tZWxlbWVudCBvYmplY3QuIFdlIHNob3VsZCB0cnkgdG8gYXZvaWQgdGhhdC5cbiAgICBpZiAodHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnb2JqZWN0JyAmJiBwcm9wcy5jaGlsZHJlbiAhPT0gbnVsbCkge1xuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjaGlsZC50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRpZFdhcm5JbnZhbGlkQ2hpbGQpIHtcbiAgICAgICAgICBkaWRXYXJuSW52YWxpZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdPbmx5IHN0cmluZ3MgYW5kIG51bWJlcnMgYXJlIHN1cHBvcnRlZCBhcyA8b3B0aW9uPiBjaGlsZHJlbi4nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogUmVtb3ZlIHN1cHBvcnQgZm9yIGBzZWxlY3RlZGAgaW4gPG9wdGlvbj4uXG4gICAgaWYgKHByb3BzLnNlbGVjdGVkICE9IG51bGwgJiYgIWRpZFdhcm5TZWxlY3RlZFNldE9uT3B0aW9uKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgb24gPHNlbGVjdD4gaW5zdGVhZCBvZiAnICsgJ3NldHRpbmcgYHNlbGVjdGVkYCBvbiA8b3B0aW9uPi4nKTtcbiAgICAgIGRpZFdhcm5TZWxlY3RlZFNldE9uT3B0aW9uID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9zdE1vdW50V3JhcHBlciQxKGVsZW1lbnQsIHByb3BzKSB7XG4gIC8vIHZhbHVlPVwiXCIgc2hvdWxkIG1ha2UgYSB2YWx1ZSBhdHRyaWJ1dGUgKCM2MjE5KVxuICBpZiAocHJvcHMudmFsdWUgIT0gbnVsbCkge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHRvU3RyaW5nKGdldFRvU3RyaW5nVmFsdWUocHJvcHMudmFsdWUpKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SG9zdFByb3BzJDEoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIGhvc3RQcm9wcyA9IF9hc3NpZ24oeyBjaGlsZHJlbjogdW5kZWZpbmVkIH0sIHByb3BzKTtcbiAgdmFyIGNvbnRlbnQgPSBmbGF0dGVuQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pO1xuXG4gIGlmIChjb250ZW50KSB7XG4gICAgaG9zdFByb3BzLmNoaWxkcmVuID0gY29udGVudDtcbiAgfVxuXG4gIHJldHVybiBob3N0UHJvcHM7XG59XG5cbi8vIFRPRE86IGRpcmVjdCBpbXBvcnRzIGxpa2Ugc29tZS1wYWNrYWdlL3NyYy8qIGFyZSBiYWQuIEZpeCBtZS5cbnZhciBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUkMSA9IHZvaWQgMDtcblxue1xuICBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUkMSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSB7XG4gIHZhciBvd25lck5hbWUgPSBnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCgpO1xuICBpZiAob3duZXJOYW1lKSB7XG4gICAgcmV0dXJuICdcXG5cXG5DaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG93bmVyTmFtZSArICdgLic7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG52YXIgdmFsdWVQcm9wTmFtZXMgPSBbJ3ZhbHVlJywgJ2RlZmF1bHRWYWx1ZSddO1xuXG4vKipcbiAqIFZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICovXG5mdW5jdGlvbiBjaGVja1NlbGVjdFByb3BUeXBlcyhwcm9wcykge1xuICBSZWFjdENvbnRyb2xsZWRWYWx1ZVByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygnc2VsZWN0JywgcHJvcHMpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVQcm9wTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcE5hbWUgPSB2YWx1ZVByb3BOYW1lc1tpXTtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKTtcbiAgICBpZiAocHJvcHMubXVsdGlwbGUgJiYgIWlzQXJyYXkpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhbiBhcnJheSBpZiAnICsgJ2BtdWx0aXBsZWAgaXMgdHJ1ZS4lcycsIHByb3BOYW1lLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSk7XG4gICAgfSBlbHNlIGlmICghcHJvcHMubXVsdGlwbGUgJiYgaXNBcnJheSkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnVGhlIGAlc2AgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGEgc2NhbGFyICcgKyAndmFsdWUgaWYgYG11bHRpcGxlYCBpcyBmYWxzZS4lcycsIHByb3BOYW1lLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMobm9kZSwgbXVsdGlwbGUsIHByb3BWYWx1ZSwgc2V0RGVmYXVsdFNlbGVjdGVkKSB7XG4gIHZhciBvcHRpb25zID0gbm9kZS5vcHRpb25zO1xuXG4gIGlmIChtdWx0aXBsZSkge1xuICAgIHZhciBzZWxlY3RlZFZhbHVlcyA9IHByb3BWYWx1ZTtcbiAgICB2YXIgc2VsZWN0ZWRWYWx1ZSA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIFByZWZpeCB0byBhdm9pZCBjaGFvcyB3aXRoIHNwZWNpYWwga2V5cy5cbiAgICAgIHNlbGVjdGVkVmFsdWVbJyQnICsgc2VsZWN0ZWRWYWx1ZXNbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG9wdGlvbnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBzZWxlY3RlZFZhbHVlLmhhc093blByb3BlcnR5KCckJyArIG9wdGlvbnNbX2ldLnZhbHVlKTtcbiAgICAgIGlmIChvcHRpb25zW19pXS5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uc1tfaV0uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBzZXREZWZhdWx0U2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uc1tfaV0uZGVmYXVsdFNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRG8gbm90IHNldCBgc2VsZWN0LnZhbHVlYCBhcyBleGFjdCBiZWhhdmlvciBpc24ndCBjb25zaXN0ZW50IGFjcm9zcyBhbGxcbiAgICAvLyBicm93c2VycyBmb3IgYWxsIGNhc2VzLlxuICAgIHZhciBfc2VsZWN0ZWRWYWx1ZSA9IHRvU3RyaW5nKGdldFRvU3RyaW5nVmFsdWUocHJvcFZhbHVlKSk7XG4gICAgdmFyIGRlZmF1bHRTZWxlY3RlZCA9IG51bGw7XG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgb3B0aW9ucy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICBpZiAob3B0aW9uc1tfaTJdLnZhbHVlID09PSBfc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICBvcHRpb25zW19pMl0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoc2V0RGVmYXVsdFNlbGVjdGVkKSB7XG4gICAgICAgICAgb3B0aW9uc1tfaTJdLmRlZmF1bHRTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRTZWxlY3RlZCA9PT0gbnVsbCAmJiAhb3B0aW9uc1tfaTJdLmRpc2FibGVkKSB7XG4gICAgICAgIGRlZmF1bHRTZWxlY3RlZCA9IG9wdGlvbnNbX2kyXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlZmF1bHRTZWxlY3RlZCAhPT0gbnVsbCkge1xuICAgICAgZGVmYXVsdFNlbGVjdGVkLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHNlbGVjdD4gaG9zdCBjb21wb25lbnQgdGhhdCBhbGxvd3Mgb3B0aW9uYWxseSBzZXR0aW5nIHRoZVxuICogcHJvcHMgYHZhbHVlYCBhbmQgYGRlZmF1bHRWYWx1ZWAuIElmIGBtdWx0aXBsZWAgaXMgZmFsc2UsIHRoZSBwcm9wIG11c3QgYmUgYVxuICogc3RyaW5nYWJsZS4gSWYgYG11bHRpcGxlYCBpcyB0cnVlLCB0aGUgcHJvcCBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ2FibGVzLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGNoYW5nZSB0aGVcbiAqIHNlbGVjdGVkIG9wdGlvbiB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAqXG4gKiBJZiBpdCBpcyBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBvcHRpb25zIHdpbGwgbm90XG4gKiB1cGRhdGUgaW4gcmVzcG9uc2UgdG8gdXNlciBhY3Rpb25zLiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIG9wdGlvbnMgdG8gdXBkYXRlLlxuICpcbiAqIElmIGBkZWZhdWx0VmFsdWVgIGlzIHByb3ZpZGVkLCBhbnkgb3B0aW9ucyB3aXRoIHRoZSBzdXBwbGllZCB2YWx1ZXMgd2lsbCBiZVxuICogc2VsZWN0ZWQuXG4gKi9cblxuZnVuY3Rpb24gZ2V0SG9zdFByb3BzJDIoZWxlbWVudCwgcHJvcHMpIHtcbiAgcmV0dXJuIF9hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgdmFsdWU6IHVuZGVmaW5lZFxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5pdFdyYXBwZXJTdGF0ZSQxKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAge1xuICAgIGNoZWNrU2VsZWN0UHJvcFR5cGVzKHByb3BzKTtcbiAgfVxuXG4gIG5vZGUuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICB3YXNNdWx0aXBsZTogISFwcm9wcy5tdWx0aXBsZVxuICB9O1xuXG4gIHtcbiAgICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlJDEpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1NlbGVjdCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgc2VsZWN0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJyk7XG4gICAgICBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUkMSA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBvc3RNb3VudFdyYXBwZXIkMihlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIG5vZGUubXVsdGlwbGUgPSAhIXByb3BzLm11bHRpcGxlO1xuICB2YXIgdmFsdWUgPSBwcm9wcy52YWx1ZTtcbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICB1cGRhdGVPcHRpb25zKG5vZGUsICEhcHJvcHMubXVsdGlwbGUsIHZhbHVlLCBmYWxzZSk7XG4gIH0gZWxzZSBpZiAocHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICB1cGRhdGVPcHRpb25zKG5vZGUsICEhcHJvcHMubXVsdGlwbGUsIHByb3BzLmRlZmF1bHRWYWx1ZSwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9zdFVwZGF0ZVdyYXBwZXIoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB2YXIgd2FzTXVsdGlwbGUgPSBub2RlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7XG4gIG5vZGUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSA9ICEhcHJvcHMubXVsdGlwbGU7XG5cbiAgdmFyIHZhbHVlID0gcHJvcHMudmFsdWU7XG4gIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgdXBkYXRlT3B0aW9ucyhub2RlLCAhIXByb3BzLm11bHRpcGxlLCB2YWx1ZSwgZmFsc2UpO1xuICB9IGVsc2UgaWYgKHdhc011bHRpcGxlICE9PSAhIXByb3BzLm11bHRpcGxlKSB7XG4gICAgLy8gRm9yIHNpbXBsaWNpdHksIHJlYXBwbHkgYGRlZmF1bHRWYWx1ZWAgaWYgYG11bHRpcGxlYCBpcyB0b2dnbGVkLlxuICAgIGlmIChwcm9wcy5kZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgdXBkYXRlT3B0aW9ucyhub2RlLCAhIXByb3BzLm11bHRpcGxlLCBwcm9wcy5kZWZhdWx0VmFsdWUsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZXZlcnQgdGhlIHNlbGVjdCBiYWNrIHRvIGl0cyBkZWZhdWx0IHVuc2VsZWN0ZWQgc3RhdGUuXG4gICAgICB1cGRhdGVPcHRpb25zKG5vZGUsICEhcHJvcHMubXVsdGlwbGUsIHByb3BzLm11bHRpcGxlID8gW10gOiAnJywgZmFsc2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDIoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB2YXIgdmFsdWUgPSBwcm9wcy52YWx1ZTtcblxuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZU9wdGlvbnMobm9kZSwgISFwcm9wcy5tdWx0aXBsZSwgdmFsdWUsIGZhbHNlKTtcbiAgfVxufVxuXG52YXIgZGlkV2FyblZhbERlZmF1bHRWYWwgPSBmYWxzZTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHRleHRhcmVhPiBob3N0IGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIGB2YWx1ZWAsIGFuZFxuICogYGRlZmF1bHRWYWx1ZWAuIFRoaXMgZGlmZmVycyBmcm9tIHRoZSB0cmFkaXRpb25hbCBET00gQVBJIGJlY2F1c2UgdmFsdWUgaXNcbiAqIHVzdWFsbHkgc2V0IGFzIFBDREFUQSBjaGlsZHJlbi5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBhZmZlY3QgdGhlXG4gKiB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbFxuICogbm90IHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIGFuIGVtcHR5IHZhbHVlLCB0aGUgcHJvcFxuICogYGRlZmF1bHRWYWx1ZWAgaWYgc3BlY2lmaWVkLCBvciB0aGUgY2hpbGRyZW4gY29udGVudCAoZGVwcmVjYXRlZCkuXG4gKi9cblxuZnVuY3Rpb24gZ2V0SG9zdFByb3BzJDMoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICAhKHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBkb2VzIG5vdCBtYWtlIHNlbnNlIG9uIDx0ZXh0YXJlYT4uJykgOiB2b2lkIDA7XG5cbiAgLy8gQWx3YXlzIHNldCBjaGlsZHJlbiB0byB0aGUgc2FtZSB0aGluZy4gSW4gSUU5LCB0aGUgc2VsZWN0aW9uIHJhbmdlIHdpbGxcbiAgLy8gZ2V0IHJlc2V0IGlmIGB0ZXh0Q29udGVudGAgaXMgbXV0YXRlZC4gIFdlIGNvdWxkIGFkZCBhIGNoZWNrIGluIHNldFRleHRDb250ZW50XG4gIC8vIHRvIG9ubHkgc2V0IHRoZSB2YWx1ZSBpZi93aGVuIHRoZSB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIG5vZGUgdmFsdWUgKHdoaWNoIHdvdWxkXG4gIC8vIGNvbXBsZXRlbHkgc29sdmUgdGhpcyBJRTkgYnVnKSwgYnV0IFNlYmFzdGlhbitTb3BoaWUgc2VlbWVkIHRvIGxpa2UgdGhpc1xuICAvLyBzb2x1dGlvbi4gVGhlIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQncyBmb3JjZWRcbiAgLy8gdG8gYmUgYSBzdHJpbmcuXG4gIHZhciBob3N0UHJvcHMgPSBfYXNzaWduKHt9LCBwcm9wcywge1xuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgY2hpbGRyZW46IHRvU3RyaW5nKG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpXG4gIH0pO1xuXG4gIHJldHVybiBob3N0UHJvcHM7XG59XG5cbmZ1bmN0aW9uIGluaXRXcmFwcGVyU3RhdGUkMihlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHtcbiAgICBSZWFjdENvbnRyb2xsZWRWYWx1ZVByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygndGV4dGFyZWEnLCBwcm9wcyk7XG4gICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWxEZWZhdWx0VmFsKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICclcyBjb250YWlucyBhIHRleHRhcmVhIHdpdGggYm90aCB2YWx1ZSBhbmQgZGVmYXVsdFZhbHVlIHByb3BzLiAnICsgJ1RleHRhcmVhIGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSB2YWx1ZSBwcm9wLCBvciB0aGUgZGVmYXVsdFZhbHVlIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCB0ZXh0YXJlYSAnICsgJ2FuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCgpIHx8ICdBIGNvbXBvbmVudCcpO1xuICAgICAgZGlkV2FyblZhbERlZmF1bHRWYWwgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsVmFsdWUgPSBwcm9wcy52YWx1ZTtcblxuICAvLyBPbmx5IGJvdGhlciBmZXRjaGluZyBkZWZhdWx0IHZhbHVlIGlmIHdlJ3JlIGdvaW5nIHRvIHVzZSBpdFxuICBpZiAoaW5pdGlhbFZhbHVlID09IG51bGwpIHtcbiAgICB2YXIgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIC8vIFRPRE8gKHl1bmdzdGVycyk6IFJlbW92ZSBzdXBwb3J0IGZvciBjaGlsZHJlbiBjb250ZW50IGluIDx0ZXh0YXJlYT4uXG4gICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIHtcbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIGluc3RlYWQgb2Ygc2V0dGluZyAnICsgJ2NoaWxkcmVuIG9uIDx0ZXh0YXJlYT4uJyk7XG4gICAgICB9XG4gICAgICAhKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0lmIHlvdSBzdXBwbHkgYGRlZmF1bHRWYWx1ZWAgb24gYSA8dGV4dGFyZWE+LCBkbyBub3QgcGFzcyBjaGlsZHJlbi4nKSA6IHZvaWQgMDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICAhKGNoaWxkcmVuLmxlbmd0aCA8PSAxKSA/IGludmFyaWFudChmYWxzZSwgJzx0ZXh0YXJlYT4gY2FuIG9ubHkgaGF2ZSBhdCBtb3N0IG9uZSBjaGlsZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdFZhbHVlID0gY2hpbGRyZW47XG4gICAgfVxuICAgIGlmIChkZWZhdWx0VmFsdWUgPT0gbnVsbCkge1xuICAgICAgZGVmYXVsdFZhbHVlID0gJyc7XG4gICAgfVxuICAgIGluaXRpYWxWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIG5vZGUuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICBpbml0aWFsVmFsdWU6IGdldFRvU3RyaW5nVmFsdWUoaW5pdGlhbFZhbHVlKVxuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVXcmFwcGVyJDEoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB2YXIgdmFsdWUgPSBnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLnZhbHVlKTtcbiAgdmFyIGRlZmF1bHRWYWx1ZSA9IGdldFRvU3RyaW5nVmFsdWUocHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICB2YXIgbmV3VmFsdWUgPSB0b1N0cmluZyh2YWx1ZSk7XG4gICAgLy8gVG8gYXZvaWQgc2lkZSBlZmZlY3RzIChzdWNoIGFzIGxvc2luZyB0ZXh0IHNlbGVjdGlvbiksIG9ubHkgc2V0IHZhbHVlIGlmIGNoYW5nZWRcbiAgICBpZiAobmV3VmFsdWUgIT09IG5vZGUudmFsdWUpIHtcbiAgICAgIG5vZGUudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSA9PSBudWxsICYmIG5vZGUuZGVmYXVsdFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgbm9kZS5kZWZhdWx0VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgbm9kZS5kZWZhdWx0VmFsdWUgPSB0b1N0cmluZyhkZWZhdWx0VmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBvc3RNb3VudFdyYXBwZXIkMyhlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIC8vIFRoaXMgaXMgaW4gcG9zdE1vdW50IGJlY2F1c2Ugd2UgbmVlZCBhY2Nlc3MgdG8gdGhlIERPTSBub2RlLCB3aGljaCBpcyBub3RcbiAgLy8gYXZhaWxhYmxlIHVudGlsIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIG1vdW50ZWQuXG4gIHZhciB0ZXh0Q29udGVudCA9IG5vZGUudGV4dENvbnRlbnQ7XG5cbiAgLy8gT25seSBzZXQgbm9kZS52YWx1ZSBpZiB0ZXh0Q29udGVudCBpcyBlcXVhbCB0byB0aGUgZXhwZWN0ZWRcbiAgLy8gaW5pdGlhbCB2YWx1ZS4gSW4gSUUxMC9JRTExIHRoZXJlIGlzIGEgYnVnIHdoZXJlIHRoZSBwbGFjZWhvbGRlciBhdHRyaWJ1dGVcbiAgLy8gd2lsbCBwb3B1bGF0ZSB0ZXh0Q29udGVudCBhcyB3ZWxsLlxuICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMDE1MjUvXG4gIGlmICh0ZXh0Q29udGVudCA9PT0gbm9kZS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSkge1xuICAgIG5vZGUudmFsdWUgPSB0ZXh0Q29udGVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDMoZWxlbWVudCwgcHJvcHMpIHtcbiAgLy8gRE9NIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkOyB1cGRhdGVcbiAgdXBkYXRlV3JhcHBlciQxKGVsZW1lbnQsIHByb3BzKTtcbn1cblxudmFyIEhUTUxfTkFNRVNQQUNFJDEgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XG52YXIgTUFUSF9OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCc7XG52YXIgU1ZHX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cbnZhciBOYW1lc3BhY2VzID0ge1xuICBodG1sOiBIVE1MX05BTUVTUEFDRSQxLFxuICBtYXRobWw6IE1BVEhfTkFNRVNQQUNFLFxuICBzdmc6IFNWR19OQU1FU1BBQ0Vcbn07XG5cbi8vIEFzc3VtZXMgdGhlcmUgaXMgbm8gcGFyZW50IG5hbWVzcGFjZS5cbmZ1bmN0aW9uIGdldEludHJpbnNpY05hbWVzcGFjZSh0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3N2Zyc6XG4gICAgICByZXR1cm4gU1ZHX05BTUVTUEFDRTtcbiAgICBjYXNlICdtYXRoJzpcbiAgICAgIHJldHVybiBNQVRIX05BTUVTUEFDRTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIEhUTUxfTkFNRVNQQUNFJDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGROYW1lc3BhY2UocGFyZW50TmFtZXNwYWNlLCB0eXBlKSB7XG4gIGlmIChwYXJlbnROYW1lc3BhY2UgPT0gbnVsbCB8fCBwYXJlbnROYW1lc3BhY2UgPT09IEhUTUxfTkFNRVNQQUNFJDEpIHtcbiAgICAvLyBObyAob3IgZGVmYXVsdCkgcGFyZW50IG5hbWVzcGFjZTogcG90ZW50aWFsIGVudHJ5IHBvaW50LlxuICAgIHJldHVybiBnZXRJbnRyaW5zaWNOYW1lc3BhY2UodHlwZSk7XG4gIH1cbiAgaWYgKHBhcmVudE5hbWVzcGFjZSA9PT0gU1ZHX05BTUVTUEFDRSAmJiB0eXBlID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyBXZSdyZSBsZWF2aW5nIFNWRy5cbiAgICByZXR1cm4gSFRNTF9OQU1FU1BBQ0UkMTtcbiAgfVxuICAvLyBCeSBkZWZhdWx0LCBwYXNzIG5hbWVzcGFjZSBiZWxvdy5cbiAgcmV0dXJuIHBhcmVudE5hbWVzcGFjZTtcbn1cblxuLyogZ2xvYmFscyBNU0FwcCAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIGZ1bmN0aW9uIHdoaWNoIGhhcyAndW5zYWZlJyBwcml2aWxlZ2VzIChyZXF1aXJlZCBieSB3aW5kb3dzOCBhcHBzKVxuICovXG52YXIgY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gIGlmICh0eXBlb2YgTVNBcHAgIT09ICd1bmRlZmluZWQnICYmIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcwLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuYztcbiAgfVxufTtcblxuLy8gU1ZHIHRlbXAgY29udGFpbmVyIGZvciBJRSBsYWNraW5nIGlubmVySFRNTFxudmFyIHJldXNhYmxlU1ZHQ29udGFpbmVyID0gdm9pZCAwO1xuXG4vKipcbiAqIFNldCB0aGUgaW5uZXJIVE1MIHByb3BlcnR5IG9mIGEgbm9kZVxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0SW5uZXJIVE1MID0gY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbiAobm9kZSwgaHRtbCkge1xuICAvLyBJRSBkb2VzIG5vdCBoYXZlIGlubmVySFRNTCBmb3IgU1ZHIG5vZGVzLCBzbyBpbnN0ZWFkIHdlIGluamVjdCB0aGVcbiAgLy8gbmV3IG1hcmt1cCBpbiBhIHRlbXAgbm9kZSBhbmQgdGhlbiBtb3ZlIHRoZSBjaGlsZCBub2RlcyBhY3Jvc3MgaW50b1xuICAvLyB0aGUgdGFyZ2V0IG5vZGVcblxuICBpZiAobm9kZS5uYW1lc3BhY2VVUkkgPT09IE5hbWVzcGFjZXMuc3ZnICYmICEoJ2lubmVySFRNTCcgaW4gbm9kZSkpIHtcbiAgICByZXVzYWJsZVNWR0NvbnRhaW5lciA9IHJldXNhYmxlU1ZHQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJldXNhYmxlU1ZHQ29udGFpbmVyLmlubmVySFRNTCA9ICc8c3ZnPicgKyBodG1sICsgJzwvc3ZnPic7XG4gICAgdmFyIHN2Z05vZGUgPSByZXVzYWJsZVNWR0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgIHdoaWxlIChub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgd2hpbGUgKHN2Z05vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgbm9kZS5hcHBlbmRDaGlsZChzdmdOb2RlLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gIH1cbn0pO1xuXG4vKipcbiAqIFNldCB0aGUgdGV4dENvbnRlbnQgcHJvcGVydHkgb2YgYSBub2RlLiBGb3IgdGV4dCB1cGRhdGVzLCBpdCdzIGZhc3RlclxuICogdG8gc2V0IHRoZSBgbm9kZVZhbHVlYCBvZiB0aGUgVGV4dCBub2RlIGRpcmVjdGx5IGluc3RlYWQgb2YgdXNpbmdcbiAqIGAudGV4dENvbnRlbnRgIHdoaWNoIHdpbGwgcmVtb3ZlIHRoZSBleGlzdGluZyBub2RlIGFuZCBjcmVhdGUgYSBuZXcgb25lLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbiAobm9kZSwgdGV4dCkge1xuICBpZiAodGV4dCkge1xuICAgIHZhciBmaXJzdENoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuXG4gICAgaWYgKGZpcnN0Q2hpbGQgJiYgZmlyc3RDaGlsZCA9PT0gbm9kZS5sYXN0Q2hpbGQgJiYgZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFKSB7XG4gICAgICBmaXJzdENoaWxkLm5vZGVWYWx1ZSA9IHRleHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufTtcblxuLy8gTGlzdCBkZXJpdmVkIGZyb20gR2Vja28gc291cmNlIGNvZGU6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9nZWNrby1kZXYvYmxvYi80ZTYzOGVmYzcxL2xheW91dC9zdHlsZS90ZXN0L3Byb3BlcnR5X2RhdGFiYXNlLmpzXG52YXIgc2hvcnRoYW5kVG9Mb25naGFuZCA9IHtcbiAgYW5pbWF0aW9uOiBbJ2FuaW1hdGlvbkRlbGF5JywgJ2FuaW1hdGlvbkRpcmVjdGlvbicsICdhbmltYXRpb25EdXJhdGlvbicsICdhbmltYXRpb25GaWxsTW9kZScsICdhbmltYXRpb25JdGVyYXRpb25Db3VudCcsICdhbmltYXRpb25OYW1lJywgJ2FuaW1hdGlvblBsYXlTdGF0ZScsICdhbmltYXRpb25UaW1pbmdGdW5jdGlvbiddLFxuICBiYWNrZ3JvdW5kOiBbJ2JhY2tncm91bmRBdHRhY2htZW50JywgJ2JhY2tncm91bmRDbGlwJywgJ2JhY2tncm91bmRDb2xvcicsICdiYWNrZ3JvdW5kSW1hZ2UnLCAnYmFja2dyb3VuZE9yaWdpbicsICdiYWNrZ3JvdW5kUG9zaXRpb25YJywgJ2JhY2tncm91bmRQb3NpdGlvblknLCAnYmFja2dyb3VuZFJlcGVhdCcsICdiYWNrZ3JvdW5kU2l6ZSddLFxuICBiYWNrZ3JvdW5kUG9zaXRpb246IFsnYmFja2dyb3VuZFBvc2l0aW9uWCcsICdiYWNrZ3JvdW5kUG9zaXRpb25ZJ10sXG4gIGJvcmRlcjogWydib3JkZXJCb3R0b21Db2xvcicsICdib3JkZXJCb3R0b21TdHlsZScsICdib3JkZXJCb3R0b21XaWR0aCcsICdib3JkZXJJbWFnZU91dHNldCcsICdib3JkZXJJbWFnZVJlcGVhdCcsICdib3JkZXJJbWFnZVNsaWNlJywgJ2JvcmRlckltYWdlU291cmNlJywgJ2JvcmRlckltYWdlV2lkdGgnLCAnYm9yZGVyTGVmdENvbG9yJywgJ2JvcmRlckxlZnRTdHlsZScsICdib3JkZXJMZWZ0V2lkdGgnLCAnYm9yZGVyUmlnaHRDb2xvcicsICdib3JkZXJSaWdodFN0eWxlJywgJ2JvcmRlclJpZ2h0V2lkdGgnLCAnYm9yZGVyVG9wQ29sb3InLCAnYm9yZGVyVG9wU3R5bGUnLCAnYm9yZGVyVG9wV2lkdGgnXSxcbiAgYm9yZGVyQmxvY2tFbmQ6IFsnYm9yZGVyQmxvY2tFbmRDb2xvcicsICdib3JkZXJCbG9ja0VuZFN0eWxlJywgJ2JvcmRlckJsb2NrRW5kV2lkdGgnXSxcbiAgYm9yZGVyQmxvY2tTdGFydDogWydib3JkZXJCbG9ja1N0YXJ0Q29sb3InLCAnYm9yZGVyQmxvY2tTdGFydFN0eWxlJywgJ2JvcmRlckJsb2NrU3RhcnRXaWR0aCddLFxuICBib3JkZXJCb3R0b206IFsnYm9yZGVyQm90dG9tQ29sb3InLCAnYm9yZGVyQm90dG9tU3R5bGUnLCAnYm9yZGVyQm90dG9tV2lkdGgnXSxcbiAgYm9yZGVyQ29sb3I6IFsnYm9yZGVyQm90dG9tQ29sb3InLCAnYm9yZGVyTGVmdENvbG9yJywgJ2JvcmRlclJpZ2h0Q29sb3InLCAnYm9yZGVyVG9wQ29sb3InXSxcbiAgYm9yZGVySW1hZ2U6IFsnYm9yZGVySW1hZ2VPdXRzZXQnLCAnYm9yZGVySW1hZ2VSZXBlYXQnLCAnYm9yZGVySW1hZ2VTbGljZScsICdib3JkZXJJbWFnZVNvdXJjZScsICdib3JkZXJJbWFnZVdpZHRoJ10sXG4gIGJvcmRlcklubGluZUVuZDogWydib3JkZXJJbmxpbmVFbmRDb2xvcicsICdib3JkZXJJbmxpbmVFbmRTdHlsZScsICdib3JkZXJJbmxpbmVFbmRXaWR0aCddLFxuICBib3JkZXJJbmxpbmVTdGFydDogWydib3JkZXJJbmxpbmVTdGFydENvbG9yJywgJ2JvcmRlcklubGluZVN0YXJ0U3R5bGUnLCAnYm9yZGVySW5saW5lU3RhcnRXaWR0aCddLFxuICBib3JkZXJMZWZ0OiBbJ2JvcmRlckxlZnRDb2xvcicsICdib3JkZXJMZWZ0U3R5bGUnLCAnYm9yZGVyTGVmdFdpZHRoJ10sXG4gIGJvcmRlclJhZGl1czogWydib3JkZXJCb3R0b21MZWZ0UmFkaXVzJywgJ2JvcmRlckJvdHRvbVJpZ2h0UmFkaXVzJywgJ2JvcmRlclRvcExlZnRSYWRpdXMnLCAnYm9yZGVyVG9wUmlnaHRSYWRpdXMnXSxcbiAgYm9yZGVyUmlnaHQ6IFsnYm9yZGVyUmlnaHRDb2xvcicsICdib3JkZXJSaWdodFN0eWxlJywgJ2JvcmRlclJpZ2h0V2lkdGgnXSxcbiAgYm9yZGVyU3R5bGU6IFsnYm9yZGVyQm90dG9tU3R5bGUnLCAnYm9yZGVyTGVmdFN0eWxlJywgJ2JvcmRlclJpZ2h0U3R5bGUnLCAnYm9yZGVyVG9wU3R5bGUnXSxcbiAgYm9yZGVyVG9wOiBbJ2JvcmRlclRvcENvbG9yJywgJ2JvcmRlclRvcFN0eWxlJywgJ2JvcmRlclRvcFdpZHRoJ10sXG4gIGJvcmRlcldpZHRoOiBbJ2JvcmRlckJvdHRvbVdpZHRoJywgJ2JvcmRlckxlZnRXaWR0aCcsICdib3JkZXJSaWdodFdpZHRoJywgJ2JvcmRlclRvcFdpZHRoJ10sXG4gIGNvbHVtblJ1bGU6IFsnY29sdW1uUnVsZUNvbG9yJywgJ2NvbHVtblJ1bGVTdHlsZScsICdjb2x1bW5SdWxlV2lkdGgnXSxcbiAgY29sdW1uczogWydjb2x1bW5Db3VudCcsICdjb2x1bW5XaWR0aCddLFxuICBmbGV4OiBbJ2ZsZXhCYXNpcycsICdmbGV4R3JvdycsICdmbGV4U2hyaW5rJ10sXG4gIGZsZXhGbG93OiBbJ2ZsZXhEaXJlY3Rpb24nLCAnZmxleFdyYXAnXSxcbiAgZm9udDogWydmb250RmFtaWx5JywgJ2ZvbnRGZWF0dXJlU2V0dGluZ3MnLCAnZm9udEtlcm5pbmcnLCAnZm9udExhbmd1YWdlT3ZlcnJpZGUnLCAnZm9udFNpemUnLCAnZm9udFNpemVBZGp1c3QnLCAnZm9udFN0cmV0Y2gnLCAnZm9udFN0eWxlJywgJ2ZvbnRWYXJpYW50JywgJ2ZvbnRWYXJpYW50QWx0ZXJuYXRlcycsICdmb250VmFyaWFudENhcHMnLCAnZm9udFZhcmlhbnRFYXN0QXNpYW4nLCAnZm9udFZhcmlhbnRMaWdhdHVyZXMnLCAnZm9udFZhcmlhbnROdW1lcmljJywgJ2ZvbnRWYXJpYW50UG9zaXRpb24nLCAnZm9udFdlaWdodCcsICdsaW5lSGVpZ2h0J10sXG4gIGZvbnRWYXJpYW50OiBbJ2ZvbnRWYXJpYW50QWx0ZXJuYXRlcycsICdmb250VmFyaWFudENhcHMnLCAnZm9udFZhcmlhbnRFYXN0QXNpYW4nLCAnZm9udFZhcmlhbnRMaWdhdHVyZXMnLCAnZm9udFZhcmlhbnROdW1lcmljJywgJ2ZvbnRWYXJpYW50UG9zaXRpb24nXSxcbiAgZ2FwOiBbJ2NvbHVtbkdhcCcsICdyb3dHYXAnXSxcbiAgZ3JpZDogWydncmlkQXV0b0NvbHVtbnMnLCAnZ3JpZEF1dG9GbG93JywgJ2dyaWRBdXRvUm93cycsICdncmlkVGVtcGxhdGVBcmVhcycsICdncmlkVGVtcGxhdGVDb2x1bW5zJywgJ2dyaWRUZW1wbGF0ZVJvd3MnXSxcbiAgZ3JpZEFyZWE6IFsnZ3JpZENvbHVtbkVuZCcsICdncmlkQ29sdW1uU3RhcnQnLCAnZ3JpZFJvd0VuZCcsICdncmlkUm93U3RhcnQnXSxcbiAgZ3JpZENvbHVtbjogWydncmlkQ29sdW1uRW5kJywgJ2dyaWRDb2x1bW5TdGFydCddLFxuICBncmlkQ29sdW1uR2FwOiBbJ2NvbHVtbkdhcCddLFxuICBncmlkR2FwOiBbJ2NvbHVtbkdhcCcsICdyb3dHYXAnXSxcbiAgZ3JpZFJvdzogWydncmlkUm93RW5kJywgJ2dyaWRSb3dTdGFydCddLFxuICBncmlkUm93R2FwOiBbJ3Jvd0dhcCddLFxuICBncmlkVGVtcGxhdGU6IFsnZ3JpZFRlbXBsYXRlQXJlYXMnLCAnZ3JpZFRlbXBsYXRlQ29sdW1ucycsICdncmlkVGVtcGxhdGVSb3dzJ10sXG4gIGxpc3RTdHlsZTogWydsaXN0U3R5bGVJbWFnZScsICdsaXN0U3R5bGVQb3NpdGlvbicsICdsaXN0U3R5bGVUeXBlJ10sXG4gIG1hcmdpbjogWydtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Ub3AnXSxcbiAgbWFya2VyOiBbJ21hcmtlckVuZCcsICdtYXJrZXJNaWQnLCAnbWFya2VyU3RhcnQnXSxcbiAgbWFzazogWydtYXNrQ2xpcCcsICdtYXNrQ29tcG9zaXRlJywgJ21hc2tJbWFnZScsICdtYXNrTW9kZScsICdtYXNrT3JpZ2luJywgJ21hc2tQb3NpdGlvblgnLCAnbWFza1Bvc2l0aW9uWScsICdtYXNrUmVwZWF0JywgJ21hc2tTaXplJ10sXG4gIG1hc2tQb3NpdGlvbjogWydtYXNrUG9zaXRpb25YJywgJ21hc2tQb3NpdGlvblknXSxcbiAgb3V0bGluZTogWydvdXRsaW5lQ29sb3InLCAnb3V0bGluZVN0eWxlJywgJ291dGxpbmVXaWR0aCddLFxuICBvdmVyZmxvdzogWydvdmVyZmxvd1gnLCAnb3ZlcmZsb3dZJ10sXG4gIHBhZGRpbmc6IFsncGFkZGluZ0JvdHRvbScsICdwYWRkaW5nTGVmdCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ1RvcCddLFxuICBwbGFjZUNvbnRlbnQ6IFsnYWxpZ25Db250ZW50JywgJ2p1c3RpZnlDb250ZW50J10sXG4gIHBsYWNlSXRlbXM6IFsnYWxpZ25JdGVtcycsICdqdXN0aWZ5SXRlbXMnXSxcbiAgcGxhY2VTZWxmOiBbJ2FsaWduU2VsZicsICdqdXN0aWZ5U2VsZiddLFxuICB0ZXh0RGVjb3JhdGlvbjogWyd0ZXh0RGVjb3JhdGlvbkNvbG9yJywgJ3RleHREZWNvcmF0aW9uTGluZScsICd0ZXh0RGVjb3JhdGlvblN0eWxlJ10sXG4gIHRleHRFbXBoYXNpczogWyd0ZXh0RW1waGFzaXNDb2xvcicsICd0ZXh0RW1waGFzaXNTdHlsZSddLFxuICB0cmFuc2l0aW9uOiBbJ3RyYW5zaXRpb25EZWxheScsICd0cmFuc2l0aW9uRHVyYXRpb24nLCAndHJhbnNpdGlvblByb3BlcnR5JywgJ3RyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiddLFxuICB3b3JkV3JhcDogWydvdmVyZmxvd1dyYXAnXVxufTtcblxuLyoqXG4gKiBDU1MgcHJvcGVydGllcyB3aGljaCBhY2NlcHQgbnVtYmVycyBidXQgYXJlIG5vdCBpbiB1bml0cyBvZiBcInB4XCIuXG4gKi9cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IHRydWUsXG4gIGJvcmRlckltYWdlU2xpY2U6IHRydWUsXG4gIGJvcmRlckltYWdlV2lkdGg6IHRydWUsXG4gIGJveEZsZXg6IHRydWUsXG4gIGJveEZsZXhHcm91cDogdHJ1ZSxcbiAgYm94T3JkaW5hbEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgY29sdW1uczogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmbGV4T3JkZXI6IHRydWUsXG4gIGdyaWRBcmVhOiB0cnVlLFxuICBncmlkUm93OiB0cnVlLFxuICBncmlkUm93RW5kOiB0cnVlLFxuICBncmlkUm93U3BhbjogdHJ1ZSxcbiAgZ3JpZFJvd1N0YXJ0OiB0cnVlLFxuICBncmlkQ29sdW1uOiB0cnVlLFxuICBncmlkQ29sdW1uRW5kOiB0cnVlLFxuICBncmlkQ29sdW1uU3BhbjogdHJ1ZSxcbiAgZ3JpZENvbHVtblN0YXJ0OiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIGxpbmVIZWlnaHQ6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB0YWJTaXplOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcblxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBmbG9vZE9wYWNpdHk6IHRydWUsXG4gIHN0b3BPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNoYXJyYXk6IHRydWUsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IHRydWUsXG4gIHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG4gIHN0cm9rZU9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZVdpZHRoOiB0cnVlXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggdmVuZG9yLXNwZWNpZmljIHByZWZpeCwgZWc6IFdlYmtpdFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBzdHlsZSBuYW1lLCBlZzogdHJhbnNpdGlvbkR1cmF0aW9uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHN0eWxlIG5hbWUgcHJlZml4ZWQgd2l0aCBgcHJlZml4YCwgcHJvcGVybHkgY2FtZWxDYXNlZCwgZWc6XG4gKiBXZWJraXRUcmFuc2l0aW9uRHVyYXRpb25cbiAqL1xuZnVuY3Rpb24gcHJlZml4S2V5KHByZWZpeCwga2V5KSB7XG4gIHJldHVybiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgc3R5bGUgbmFtZXMgdGhhdCBtYXkgY29tZSBwYXNzZWQgaW4gcHJlZml4ZWQgYnkgYWRkaW5nIHBlcm11dGF0aW9uc1xuICogb2YgdmVuZG9yIHByZWZpeGVzLlxuICovXG52YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdtcycsICdNb3onLCAnTyddO1xuXG4vLyBVc2luZyBPYmplY3Qua2V5cyBoZXJlLCBvciBlbHNlIHRoZSB2YW5pbGxhIGZvci1pbiBsb29wIG1ha2VzIElFOCBnbyBpbnRvIGFuXG4vLyBpbmZpbml0ZSBsb29wLCBiZWNhdXNlIGl0IGl0ZXJhdGVzIG92ZXIgdGhlIG5ld2x5IGFkZGVkIHByb3BzIHRvby5cbk9iamVjdC5rZXlzKGlzVW5pdGxlc3NOdW1iZXIpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgaXNVbml0bGVzc051bWJlcltwcmVmaXhLZXkocHJlZml4LCBwcm9wKV0gPSBpc1VuaXRsZXNzTnVtYmVyW3Byb3BdO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSBpbnRvIHRoZSBwcm9wZXIgY3NzIHdyaXRhYmxlIHZhbHVlLiBUaGUgc3R5bGUgbmFtZSBgbmFtZWBcbiAqIHNob3VsZCBiZSBsb2dpY2FsIChubyBoeXBoZW5zKSwgYXMgc3BlY2lmaWVkXG4gKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIHByb3BlcnR5IG5hbWUgc3VjaCBhcyBgdG9wTWFyZ2luYC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIHN0eWxlIHZhbHVlIHdpdGggZGltZW5zaW9ucyBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlLCBpc0N1c3RvbVByb3BlcnR5KSB7XG4gIC8vIE5vdGUgdGhhdCB3ZSd2ZSByZW1vdmVkIGVzY2FwZVRleHRGb3JCcm93c2VyKCkgY2FsbHMgaGVyZSBzaW5jZSB0aGVcbiAgLy8gd2hvbGUgc3RyaW5nIHdpbGwgYmUgZXNjYXBlZCB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgaW5qZWN0ZWQgaW50b1xuICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG4gIC8vIGFyYml0cmFyeSBDU1Mgd2hpY2ggbWF5IGJlIHByb2JsZW1hdGljIChJIGNvdWxkbid0IHJlcHJvIHRoaXMpOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldFxuICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cbiAgLy8gVGhpcyBpcyBub3QgYW4gWFNTIGhvbGUgYnV0IGluc3RlYWQgYSBwb3RlbnRpYWwgQ1NTIGluamVjdGlvbiBpc3N1ZVxuICAvLyB3aGljaCBoYXMgbGVhZCB0byBhIGdyZWF0ZXIgZGlzY3Vzc2lvbiBhYm91dCBob3cgd2UncmUgZ29pbmcgdG9cbiAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG5cbiAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJztcbiAgaWYgKGlzRW1wdHkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoIWlzQ3VzdG9tUHJvcGVydHkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCAmJiAhKGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkpIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnOyAvLyBQcmVzdW1lcyBpbXBsaWNpdCAncHgnIHN1ZmZpeCBmb3IgdW5pdGxlc3MgbnVtYmVyc1xuICB9XG5cbiAgcmV0dXJuICgnJyArIHZhbHVlKS50cmltKCk7XG59XG5cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gLyhbQS1aXSkvZztcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ01velRyYW5zaXRpb24nKVxuICogICA8IFwiLW1vei10cmFuc2l0aW9uXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbXMtdHJhbnNpdGlvblwiXG4gKlxuICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gYC1tcy1gLlxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG52YXIgd2FyblZhbGlkU3R5bGUgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICAvLyAnbXNUcmFuc2Zvcm0nIGlzIGNvcnJlY3QsIGJ1dCB0aGUgb3RoZXIgcHJlZml4ZXMgc2hvdWxkIGJlIGNhcGl0YWxpemVkXG4gIHZhciBiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4gPSAvXig/OndlYmtpdHxtb3p8bylbQS1aXS87XG4gIHZhciBtc1BhdHRlcm4kMSA9IC9eLW1zLS87XG4gIHZhciBoeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcblxuICAvLyBzdHlsZSB2YWx1ZXMgc2hvdWxkbid0IGNvbnRhaW4gYSBzZW1pY29sb25cbiAgdmFyIGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiA9IC87XFxzKiQvO1xuXG4gIHZhciB3YXJuZWRTdHlsZU5hbWVzID0ge307XG4gIHZhciB3YXJuZWRTdHlsZVZhbHVlcyA9IHt9O1xuICB2YXIgd2FybmVkRm9yTmFOVmFsdWUgPSBmYWxzZTtcbiAgdmFyIHdhcm5lZEZvckluZmluaXR5VmFsdWUgPSBmYWxzZTtcblxuICB2YXIgY2FtZWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGh5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChfLCBjaGFyYWN0ZXIpIHtcbiAgICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICB3YXJuaW5nJDEoZmFsc2UsICdVbnN1cHBvcnRlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsIG5hbWUsXG4gICAgLy8gQXMgQW5kaSBTbWl0aCBzdWdnZXN0c1xuICAgIC8vIChodHRwOi8vd3d3LmFuZGlzbWl0aC5jb20vYmxvZy8yMDEyLzAyL21vZGVybml6ci1wcmVmaXhlZC8pLCBhbiBgLW1zYCBwcmVmaXhcbiAgICAvLyBpcyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGBtc2AuXG4gICAgY2FtZWxpemUobmFtZS5yZXBsYWNlKG1zUGF0dGVybiQxLCAnbXMtJykpKTtcbiAgfTtcblxuICB2YXIgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgd2FybmluZyQxKGZhbHNlLCAnVW5zdXBwb3J0ZWQgdmVuZG9yLXByZWZpeGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JywgbmFtZSwgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSkpO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24gPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVWYWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpICYmIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSA9IHRydWU7XG4gICAgd2FybmluZyQxKGZhbHNlLCBcIlN0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvbi4gXCIgKyAnVHJ5IFwiJXM6ICVzXCIgaW5zdGVhZC4nLCBuYW1lLCB2YWx1ZS5yZXBsYWNlKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiwgJycpKTtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVJc05hTiA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh3YXJuZWRGb3JOYU5WYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZEZvck5hTlZhbHVlID0gdHJ1ZTtcbiAgICB3YXJuaW5nJDEoZmFsc2UsICdgTmFOYCBpcyBhbiBpbnZhbGlkIHZhbHVlIGZvciB0aGUgYCVzYCBjc3Mgc3R5bGUgcHJvcGVydHkuJywgbmFtZSk7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlSXNJbmZpbml0eSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh3YXJuZWRGb3JJbmZpbml0eVZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkRm9ySW5maW5pdHlWYWx1ZSA9IHRydWU7XG4gICAgd2FybmluZyQxKGZhbHNlLCAnYEluZmluaXR5YCBpcyBhbiBpbnZhbGlkIHZhbHVlIGZvciB0aGUgYCVzYCBjc3Mgc3R5bGUgcHJvcGVydHkuJywgbmFtZSk7XG4gIH07XG5cbiAgd2FyblZhbGlkU3R5bGUgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4udGVzdChuYW1lKSkge1xuICAgICAgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24obmFtZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIHdhcm5TdHlsZVZhbHVlSXNOYU4obmFtZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICghaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIHdhcm5TdHlsZVZhbHVlSXNJbmZpbml0eShuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG52YXIgd2FyblZhbGlkU3R5bGUkMSA9IHdhcm5WYWxpZFN0eWxlO1xuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBDU1MgcHJvcGVydGllcy5cbiAqL1xuXG4vKipcbiAqIFRoaXMgY3JlYXRlcyBhIHN0cmluZyB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlIGVxdWl2YWxlbnQgdG8gdGhlIHN0eWxlXG4gKiBhdHRyaWJ1dGUgZ2VuZXJhdGVkIGJ5IHNlcnZlci1zaWRlIHJlbmRlcmluZy4gSXQgYnktcGFzc2VzIHdhcm5pbmdzIGFuZFxuICogc2VjdXJpdHkgY2hlY2tzIHNvIGl0J3Mgbm90IHNhZmUgdG8gdXNlIHRoaXMgdmFsdWUgZm9yIGFueXRoaW5nIG90aGVyIHRoYW5cbiAqIGNvbXBhcmlzb24uIEl0IGlzIG9ubHkgdXNlZCBpbiBERVYgZm9yIFNTUiB2YWxpZGF0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVEYW5nZXJvdXNTdHJpbmdGb3JTdHlsZXMoc3R5bGVzKSB7XG4gIHtcbiAgICB2YXIgc2VyaWFsaXplZCA9ICcnO1xuICAgIHZhciBkZWxpbWl0ZXIgPSAnJztcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHN0eWxlVmFsdWUgPSBzdHlsZXNbc3R5bGVOYW1lXTtcbiAgICAgIGlmIChzdHlsZVZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGlzQ3VzdG9tUHJvcGVydHkgPSBzdHlsZU5hbWUuaW5kZXhPZignLS0nKSA9PT0gMDtcbiAgICAgICAgc2VyaWFsaXplZCArPSBkZWxpbWl0ZXIgKyBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKSArICc6JztcbiAgICAgICAgc2VyaWFsaXplZCArPSBkYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSwgaXNDdXN0b21Qcm9wZXJ0eSk7XG5cbiAgICAgICAgZGVsaW1pdGVyID0gJzsnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZCB8fCBudWxsO1xuICB9XG59XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgZm9yIG11bHRpcGxlIHN0eWxlcyBvbiBhIG5vZGUuICBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhc1xuICogJycgKGVtcHR5IHN0cmluZyksIHRoZSBjb3JyZXNwb25kaW5nIHN0eWxlIHByb3BlcnR5IHdpbGwgYmUgdW5zZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gKi9cbmZ1bmN0aW9uIHNldFZhbHVlRm9yU3R5bGVzKG5vZGUsIHN0eWxlcykge1xuICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBpc0N1c3RvbVByb3BlcnR5ID0gc3R5bGVOYW1lLmluZGV4T2YoJy0tJykgPT09IDA7XG4gICAge1xuICAgICAgaWYgKCFpc0N1c3RvbVByb3BlcnR5KSB7XG4gICAgICAgIHdhcm5WYWxpZFN0eWxlJDEoc3R5bGVOYW1lLCBzdHlsZXNbc3R5bGVOYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBzdHlsZVZhbHVlID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBpc0N1c3RvbVByb3BlcnR5KTtcbiAgICBpZiAoc3R5bGVOYW1lID09PSAnZmxvYXQnKSB7XG4gICAgICBzdHlsZU5hbWUgPSAnY3NzRmxvYXQnO1xuICAgIH1cbiAgICBpZiAoaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9IHN0eWxlVmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsdWVFbXB0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJyc7XG59XG5cbi8qKlxuICogR2l2ZW4ge2NvbG9yOiAncmVkJywgb3ZlcmZsb3c6ICdoaWRkZW4nfSByZXR1cm5zIHtcbiAqICAgY29sb3I6ICdjb2xvcicsXG4gKiAgIG92ZXJmbG93WDogJ292ZXJmbG93JyxcbiAqICAgb3ZlcmZsb3dZOiAnb3ZlcmZsb3cnLFxuICogfS4gVGhpcyBjYW4gYmUgcmVhZCBhcyBcInRoZSBvdmVyZmxvd1kgcHJvcGVydHkgd2FzIHNldCBieSB0aGUgb3ZlcmZsb3dcbiAqIHNob3J0aGFuZFwiLiBUaGF0IGlzLCB0aGUgdmFsdWVzIGFyZSB0aGUgcHJvcGVydHkgdGhhdCBlYWNoIHdhcyBkZXJpdmVkIGZyb20uXG4gKi9cbmZ1bmN0aW9uIGV4cGFuZFNob3J0aGFuZE1hcChzdHlsZXMpIHtcbiAgdmFyIGV4cGFuZGVkID0ge307XG4gIGZvciAodmFyIGtleSBpbiBzdHlsZXMpIHtcbiAgICB2YXIgbG9uZ2hhbmRzID0gc2hvcnRoYW5kVG9Mb25naGFuZFtrZXldIHx8IFtrZXldO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2hhbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleHBhbmRlZFtsb25naGFuZHNbaV1dID0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXhwYW5kZWQ7XG59XG5cbi8qKlxuICogV2hlbiBtaXhpbmcgc2hvcnRoYW5kIGFuZCBsb25naGFuZCBwcm9wZXJ0eSBuYW1lcywgd2Ugd2FybiBkdXJpbmcgdXBkYXRlcyBpZlxuICogd2UgZXhwZWN0IGFuIGluY29ycmVjdCByZXN1bHQgdG8gb2NjdXIuIEluIHBhcnRpY3VsYXIsIHdlIHdhcm4gZm9yOlxuICpcbiAqIFVwZGF0aW5nIGEgc2hvcnRoYW5kIHByb3BlcnR5IChsb25naGFuZCBnZXRzIG92ZXJ3cml0dGVuKTpcbiAqICAge2ZvbnQ6ICdmb28nLCBmb250VmFyaWFudDogJ2Jhcid9IC0+IHtmb250OiAnYmF6JywgZm9udFZhcmlhbnQ6ICdiYXInfVxuICogICBiZWNvbWVzIC5zdHlsZS5mb250ID0gJ2JheidcbiAqIFJlbW92aW5nIGEgc2hvcnRoYW5kIHByb3BlcnR5IChsb25naGFuZCBnZXRzIGxvc3QgdG9vKTpcbiAqICAge2ZvbnQ6ICdmb28nLCBmb250VmFyaWFudDogJ2Jhcid9IC0+IHtmb250VmFyaWFudDogJ2Jhcid9XG4gKiAgIGJlY29tZXMgLnN0eWxlLmZvbnQgPSAnJ1xuICogUmVtb3ZpbmcgYSBsb25naGFuZCBwcm9wZXJ0eSAoc2hvdWxkIHJldmVydCB0byBzaG9ydGhhbmQ7IGRvZXNuJ3QpOlxuICogICB7Zm9udDogJ2ZvbycsIGZvbnRWYXJpYW50OiAnYmFyJ30gLT4ge2ZvbnQ6ICdmb28nfVxuICogICBiZWNvbWVzIC5zdHlsZS5mb250VmFyaWFudCA9ICcnXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlU2hvcnRoYW5kUHJvcGVydHlDb2xsaXNpb25JbkRldihzdHlsZVVwZGF0ZXMsIG5leHRTdHlsZXMpIHtcbiAgaWYgKCF3YXJuQWJvdXRTaG9ydGhhbmRQcm9wZXJ0eUNvbGxpc2lvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghbmV4dFN0eWxlcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBleHBhbmRlZFVwZGF0ZXMgPSBleHBhbmRTaG9ydGhhbmRNYXAoc3R5bGVVcGRhdGVzKTtcbiAgdmFyIGV4cGFuZGVkU3R5bGVzID0gZXhwYW5kU2hvcnRoYW5kTWFwKG5leHRTdHlsZXMpO1xuICB2YXIgd2FybmVkQWJvdXQgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIGV4cGFuZGVkVXBkYXRlcykge1xuICAgIHZhciBvcmlnaW5hbEtleSA9IGV4cGFuZGVkVXBkYXRlc1trZXldO1xuICAgIHZhciBjb3JyZWN0T3JpZ2luYWxLZXkgPSBleHBhbmRlZFN0eWxlc1trZXldO1xuICAgIGlmIChjb3JyZWN0T3JpZ2luYWxLZXkgJiYgb3JpZ2luYWxLZXkgIT09IGNvcnJlY3RPcmlnaW5hbEtleSkge1xuICAgICAgdmFyIHdhcm5pbmdLZXkgPSBvcmlnaW5hbEtleSArICcsJyArIGNvcnJlY3RPcmlnaW5hbEtleTtcbiAgICAgIGlmICh3YXJuZWRBYm91dFt3YXJuaW5nS2V5XSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZEFib3V0W3dhcm5pbmdLZXldID0gdHJ1ZTtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJyVzIGEgc3R5bGUgcHJvcGVydHkgZHVyaW5nIHJlcmVuZGVyICglcykgd2hlbiBhICcgKyAnY29uZmxpY3RpbmcgcHJvcGVydHkgaXMgc2V0ICglcykgY2FuIGxlYWQgdG8gc3R5bGluZyBidWdzLiBUbyAnICsgXCJhdm9pZCB0aGlzLCBkb24ndCBtaXggc2hvcnRoYW5kIGFuZCBub24tc2hvcnRoYW5kIHByb3BlcnRpZXMgXCIgKyAnZm9yIHRoZSBzYW1lIHZhbHVlOyBpbnN0ZWFkLCByZXBsYWNlIHRoZSBzaG9ydGhhbmQgd2l0aCAnICsgJ3NlcGFyYXRlIHZhbHVlcy4nLCBpc1ZhbHVlRW1wdHkoc3R5bGVVcGRhdGVzW29yaWdpbmFsS2V5XSkgPyAnUmVtb3ZpbmcnIDogJ1VwZGF0aW5nJywgb3JpZ2luYWxLZXksIGNvcnJlY3RPcmlnaW5hbEtleSk7XG4gICAgfVxuICB9XG59XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3Mgc2hvdWxkIG9taXQgdGhlaXIgY2xvc2UgdGFnLiBXZSBrZWVwIGEgd2hpdGVsaXN0IGZvclxuLy8gdGhvc2Ugc3BlY2lhbC1jYXNlIHRhZ3MuXG5cbnZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICBhcmVhOiB0cnVlLFxuICBiYXNlOiB0cnVlLFxuICBicjogdHJ1ZSxcbiAgY29sOiB0cnVlLFxuICBlbWJlZDogdHJ1ZSxcbiAgaHI6IHRydWUsXG4gIGltZzogdHJ1ZSxcbiAgaW5wdXQ6IHRydWUsXG4gIGtleWdlbjogdHJ1ZSxcbiAgbGluazogdHJ1ZSxcbiAgbWV0YTogdHJ1ZSxcbiAgcGFyYW06IHRydWUsXG4gIHNvdXJjZTogdHJ1ZSxcbiAgdHJhY2s6IHRydWUsXG4gIHdicjogdHJ1ZVxuICAvLyBOT1RFOiBtZW51aXRlbSdzIGNsb3NlIHRhZyBzaG91bGQgYmUgb21pdHRlZCwgYnV0IHRoYXQgY2F1c2VzIHByb2JsZW1zLlxufTtcblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBjYW5ub3QgaGF2ZSBjaGlsZHJlbi4gVGhpcyBoYXMgdGhlIHNhbWUgcHVycG9zZSBhc1xuLy8gYG9taXR0ZWRDbG9zZVRhZ3NgIGV4Y2VwdCB0aGF0IGBtZW51aXRlbWAgc2hvdWxkIHN0aWxsIGhhdmUgaXRzIGNsb3NpbmcgdGFnLlxuXG52YXIgdm9pZEVsZW1lbnRUYWdzID0gX2Fzc2lnbih7XG4gIG1lbnVpdGVtOiB0cnVlXG59LCBvbWl0dGVkQ2xvc2VUYWdzKTtcblxuLy8gVE9ETzogV2UgY2FuIHJlbW92ZSB0aGlzIGlmIHdlIGFkZCBpbnZhcmlhbnRXaXRoU3RhY2soKVxuLy8gb3IgYWRkIHN0YWNrIGJ5IGRlZmF1bHQgdG8gaW52YXJpYW50cyB3aGVyZSBwb3NzaWJsZS5cbnZhciBIVE1MJDEgPSAnX19odG1sJztcblxudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMiA9IG51bGw7XG57XG4gIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHModGFnLCBwcm9wcykge1xuICBpZiAoIXByb3BzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIE5vdGUgdGhlIHVzZSBvZiBgPT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gIGlmICh2b2lkRWxlbWVudFRhZ3NbdGFnXSkge1xuICAgICEocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCAmJiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJyVzIGlzIGEgdm9pZCBlbGVtZW50IHRhZyBhbmQgbXVzdCBuZWl0aGVyIGhhdmUgYGNoaWxkcmVuYCBub3IgdXNlIGBkYW5nZXJvdXNseVNldElubmVySFRNTGAuJXMnLCB0YWcsIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMi5nZXRTdGFja0FkZGVuZHVtKCkpIDogdm9pZCAwO1xuICB9XG4gIGlmIChwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAhPSBudWxsKSB7XG4gICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0NhbiBvbmx5IHNldCBvbmUgb2YgYGNoaWxkcmVuYCBvciBgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLicpIDogdm9pZCAwO1xuICAgICEodHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09PSAnb2JqZWN0JyAmJiBIVE1MJDEgaW4gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpID8gaW52YXJpYW50KGZhbHNlLCAnYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIGluIHRoZSBmb3JtIGB7X19odG1sOiAuLi59YC4gUGxlYXNlIHZpc2l0IGh0dHBzOi8vZmIubWUvcmVhY3QtaW52YXJpYW50LWRhbmdlcm91c2x5LXNldC1pbm5lci1odG1sIGZvciBtb3JlIGluZm9ybWF0aW9uLicpIDogdm9pZCAwO1xuICB9XG4gIHtcbiAgICAhKHByb3BzLnN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyB8fCAhcHJvcHMuY29udGVudEVkaXRhYmxlIHx8IHByb3BzLmNoaWxkcmVuID09IG51bGwpID8gd2FybmluZyQxKGZhbHNlLCAnQSBjb21wb25lbnQgaXMgYGNvbnRlbnRFZGl0YWJsZWAgYW5kIGNvbnRhaW5zIGBjaGlsZHJlbmAgbWFuYWdlZCBieSAnICsgJ1JlYWN0LiBJdCBpcyBub3cgeW91ciByZXNwb25zaWJpbGl0eSB0byBndWFyYW50ZWUgdGhhdCBub25lIG9mICcgKyAndGhvc2Ugbm9kZXMgYXJlIHVuZXhwZWN0ZWRseSBtb2RpZmllZCBvciBkdXBsaWNhdGVkLiBUaGlzIGlzICcgKyAncHJvYmFibHkgbm90IGludGVudGlvbmFsLicpIDogdm9pZCAwO1xuICB9XG4gICEocHJvcHMuc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdvYmplY3QnKSA/IGludmFyaWFudChmYWxzZSwgJ1RoZSBgc3R5bGVgIHByb3AgZXhwZWN0cyBhIG1hcHBpbmcgZnJvbSBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcywgbm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArIFxcJ2VtXFwnfX0gd2hlbiB1c2luZyBKU1guJXMnLCBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDIuZ2V0U3RhY2tBZGRlbmR1bSgpKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gaXNDdXN0b21Db21wb25lbnQodGFnTmFtZSwgcHJvcHMpIHtcbiAgaWYgKHRhZ05hbWUuaW5kZXhPZignLScpID09PSAtMSkge1xuICAgIHJldHVybiB0eXBlb2YgcHJvcHMuaXMgPT09ICdzdHJpbmcnO1xuICB9XG4gIHN3aXRjaCAodGFnTmFtZSkge1xuICAgIC8vIFRoZXNlIGFyZSByZXNlcnZlZCBTVkcgYW5kIE1hdGhNTCBlbGVtZW50cy5cbiAgICAvLyBXZSBkb24ndCBtaW5kIHRoaXMgd2hpdGVsaXN0IHRvbyBtdWNoIGJlY2F1c2Ugd2UgZXhwZWN0IGl0IHRvIG5ldmVyIGdyb3cuXG4gICAgLy8gVGhlIGFsdGVybmF0aXZlIGlzIHRvIHRyYWNrIHRoZSBuYW1lc3BhY2UgaW4gYSBmZXcgcGxhY2VzIHdoaWNoIGlzIGNvbnZvbHV0ZWQuXG4gICAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmNvbXBvbmVudHMvc3BlYy9jdXN0b20vI2N1c3RvbS1lbGVtZW50cy1jb3JlLWNvbmNlcHRzXG4gICAgY2FzZSAnYW5ub3RhdGlvbi14bWwnOlxuICAgIGNhc2UgJ2NvbG9yLXByb2ZpbGUnOlxuICAgIGNhc2UgJ2ZvbnQtZmFjZSc6XG4gICAgY2FzZSAnZm9udC1mYWNlLXNyYyc6XG4gICAgY2FzZSAnZm9udC1mYWNlLXVyaSc6XG4gICAgY2FzZSAnZm9udC1mYWNlLWZvcm1hdCc6XG4gICAgY2FzZSAnZm9udC1mYWNlLW5hbWUnOlxuICAgIGNhc2UgJ21pc3NpbmctZ2x5cGgnOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vLyBXaGVuIGFkZGluZyBhdHRyaWJ1dGVzIHRvIHRoZSBIVE1MIG9yIFNWRyB3aGl0ZWxpc3QsIGJlIHN1cmUgdG9cbi8vIGFsc28gYWRkIHRoZW0gdG8gdGhpcyBtb2R1bGUgdG8gZW5zdXJlIGNhc2luZyBhbmQgaW5jb3JyZWN0IG5hbWVcbi8vIHdhcm5pbmdzLlxudmFyIHBvc3NpYmxlU3RhbmRhcmROYW1lcyA9IHtcbiAgLy8gSFRNTFxuICBhY2NlcHQ6ICdhY2NlcHQnLFxuICBhY2NlcHRjaGFyc2V0OiAnYWNjZXB0Q2hhcnNldCcsXG4gICdhY2NlcHQtY2hhcnNldCc6ICdhY2NlcHRDaGFyc2V0JyxcbiAgYWNjZXNza2V5OiAnYWNjZXNzS2V5JyxcbiAgYWN0aW9uOiAnYWN0aW9uJyxcbiAgYWxsb3dmdWxsc2NyZWVuOiAnYWxsb3dGdWxsU2NyZWVuJyxcbiAgYWx0OiAnYWx0JyxcbiAgYXM6ICdhcycsXG4gIGFzeW5jOiAnYXN5bmMnLFxuICBhdXRvY2FwaXRhbGl6ZTogJ2F1dG9DYXBpdGFsaXplJyxcbiAgYXV0b2NvbXBsZXRlOiAnYXV0b0NvbXBsZXRlJyxcbiAgYXV0b2NvcnJlY3Q6ICdhdXRvQ29ycmVjdCcsXG4gIGF1dG9mb2N1czogJ2F1dG9Gb2N1cycsXG4gIGF1dG9wbGF5OiAnYXV0b1BsYXknLFxuICBhdXRvc2F2ZTogJ2F1dG9TYXZlJyxcbiAgY2FwdHVyZTogJ2NhcHR1cmUnLFxuICBjZWxscGFkZGluZzogJ2NlbGxQYWRkaW5nJyxcbiAgY2VsbHNwYWNpbmc6ICdjZWxsU3BhY2luZycsXG4gIGNoYWxsZW5nZTogJ2NoYWxsZW5nZScsXG4gIGNoYXJzZXQ6ICdjaGFyU2V0JyxcbiAgY2hlY2tlZDogJ2NoZWNrZWQnLFxuICBjaGlsZHJlbjogJ2NoaWxkcmVuJyxcbiAgY2l0ZTogJ2NpdGUnLFxuICBjbGFzczogJ2NsYXNzTmFtZScsXG4gIGNsYXNzaWQ6ICdjbGFzc0lEJyxcbiAgY2xhc3NuYW1lOiAnY2xhc3NOYW1lJyxcbiAgY29sczogJ2NvbHMnLFxuICBjb2xzcGFuOiAnY29sU3BhbicsXG4gIGNvbnRlbnQ6ICdjb250ZW50JyxcbiAgY29udGVudGVkaXRhYmxlOiAnY29udGVudEVkaXRhYmxlJyxcbiAgY29udGV4dG1lbnU6ICdjb250ZXh0TWVudScsXG4gIGNvbnRyb2xzOiAnY29udHJvbHMnLFxuICBjb250cm9sc2xpc3Q6ICdjb250cm9sc0xpc3QnLFxuICBjb29yZHM6ICdjb29yZHMnLFxuICBjcm9zc29yaWdpbjogJ2Nyb3NzT3JpZ2luJyxcbiAgZGFuZ2Vyb3VzbHlzZXRpbm5lcmh0bWw6ICdkYW5nZXJvdXNseVNldElubmVySFRNTCcsXG4gIGRhdGE6ICdkYXRhJyxcbiAgZGF0ZXRpbWU6ICdkYXRlVGltZScsXG4gIGRlZmF1bHQ6ICdkZWZhdWx0JyxcbiAgZGVmYXVsdGNoZWNrZWQ6ICdkZWZhdWx0Q2hlY2tlZCcsXG4gIGRlZmF1bHR2YWx1ZTogJ2RlZmF1bHRWYWx1ZScsXG4gIGRlZmVyOiAnZGVmZXInLFxuICBkaXI6ICdkaXInLFxuICBkaXNhYmxlZDogJ2Rpc2FibGVkJyxcbiAgZG93bmxvYWQ6ICdkb3dubG9hZCcsXG4gIGRyYWdnYWJsZTogJ2RyYWdnYWJsZScsXG4gIGVuY3R5cGU6ICdlbmNUeXBlJyxcbiAgZm9yOiAnaHRtbEZvcicsXG4gIGZvcm06ICdmb3JtJyxcbiAgZm9ybW1ldGhvZDogJ2Zvcm1NZXRob2QnLFxuICBmb3JtYWN0aW9uOiAnZm9ybUFjdGlvbicsXG4gIGZvcm1lbmN0eXBlOiAnZm9ybUVuY1R5cGUnLFxuICBmb3Jtbm92YWxpZGF0ZTogJ2Zvcm1Ob1ZhbGlkYXRlJyxcbiAgZm9ybXRhcmdldDogJ2Zvcm1UYXJnZXQnLFxuICBmcmFtZWJvcmRlcjogJ2ZyYW1lQm9yZGVyJyxcbiAgaGVhZGVyczogJ2hlYWRlcnMnLFxuICBoZWlnaHQ6ICdoZWlnaHQnLFxuICBoaWRkZW46ICdoaWRkZW4nLFxuICBoaWdoOiAnaGlnaCcsXG4gIGhyZWY6ICdocmVmJyxcbiAgaHJlZmxhbmc6ICdocmVmTGFuZycsXG4gIGh0bWxmb3I6ICdodG1sRm9yJyxcbiAgaHR0cGVxdWl2OiAnaHR0cEVxdWl2JyxcbiAgJ2h0dHAtZXF1aXYnOiAnaHR0cEVxdWl2JyxcbiAgaWNvbjogJ2ljb24nLFxuICBpZDogJ2lkJyxcbiAgaW5uZXJodG1sOiAnaW5uZXJIVE1MJyxcbiAgaW5wdXRtb2RlOiAnaW5wdXRNb2RlJyxcbiAgaW50ZWdyaXR5OiAnaW50ZWdyaXR5JyxcbiAgaXM6ICdpcycsXG4gIGl0ZW1pZDogJ2l0ZW1JRCcsXG4gIGl0ZW1wcm9wOiAnaXRlbVByb3AnLFxuICBpdGVtcmVmOiAnaXRlbVJlZicsXG4gIGl0ZW1zY29wZTogJ2l0ZW1TY29wZScsXG4gIGl0ZW10eXBlOiAnaXRlbVR5cGUnLFxuICBrZXlwYXJhbXM6ICdrZXlQYXJhbXMnLFxuICBrZXl0eXBlOiAna2V5VHlwZScsXG4gIGtpbmQ6ICdraW5kJyxcbiAgbGFiZWw6ICdsYWJlbCcsXG4gIGxhbmc6ICdsYW5nJyxcbiAgbGlzdDogJ2xpc3QnLFxuICBsb29wOiAnbG9vcCcsXG4gIGxvdzogJ2xvdycsXG4gIG1hbmlmZXN0OiAnbWFuaWZlc3QnLFxuICBtYXJnaW53aWR0aDogJ21hcmdpbldpZHRoJyxcbiAgbWFyZ2luaGVpZ2h0OiAnbWFyZ2luSGVpZ2h0JyxcbiAgbWF4OiAnbWF4JyxcbiAgbWF4bGVuZ3RoOiAnbWF4TGVuZ3RoJyxcbiAgbWVkaWE6ICdtZWRpYScsXG4gIG1lZGlhZ3JvdXA6ICdtZWRpYUdyb3VwJyxcbiAgbWV0aG9kOiAnbWV0aG9kJyxcbiAgbWluOiAnbWluJyxcbiAgbWlubGVuZ3RoOiAnbWluTGVuZ3RoJyxcbiAgbXVsdGlwbGU6ICdtdWx0aXBsZScsXG4gIG11dGVkOiAnbXV0ZWQnLFxuICBuYW1lOiAnbmFtZScsXG4gIG5vbW9kdWxlOiAnbm9Nb2R1bGUnLFxuICBub25jZTogJ25vbmNlJyxcbiAgbm92YWxpZGF0ZTogJ25vVmFsaWRhdGUnLFxuICBvcGVuOiAnb3BlbicsXG4gIG9wdGltdW06ICdvcHRpbXVtJyxcbiAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICBwbGFjZWhvbGRlcjogJ3BsYWNlaG9sZGVyJyxcbiAgcGxheXNpbmxpbmU6ICdwbGF5c0lubGluZScsXG4gIHBvc3RlcjogJ3Bvc3RlcicsXG4gIHByZWxvYWQ6ICdwcmVsb2FkJyxcbiAgcHJvZmlsZTogJ3Byb2ZpbGUnLFxuICByYWRpb2dyb3VwOiAncmFkaW9Hcm91cCcsXG4gIHJlYWRvbmx5OiAncmVhZE9ubHknLFxuICByZWZlcnJlcnBvbGljeTogJ3JlZmVycmVyUG9saWN5JyxcbiAgcmVsOiAncmVsJyxcbiAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gIHJldmVyc2VkOiAncmV2ZXJzZWQnLFxuICByb2xlOiAncm9sZScsXG4gIHJvd3M6ICdyb3dzJyxcbiAgcm93c3BhbjogJ3Jvd1NwYW4nLFxuICBzYW5kYm94OiAnc2FuZGJveCcsXG4gIHNjb3BlOiAnc2NvcGUnLFxuICBzY29wZWQ6ICdzY29wZWQnLFxuICBzY3JvbGxpbmc6ICdzY3JvbGxpbmcnLFxuICBzZWFtbGVzczogJ3NlYW1sZXNzJyxcbiAgc2VsZWN0ZWQ6ICdzZWxlY3RlZCcsXG4gIHNoYXBlOiAnc2hhcGUnLFxuICBzaXplOiAnc2l6ZScsXG4gIHNpemVzOiAnc2l6ZXMnLFxuICBzcGFuOiAnc3BhbicsXG4gIHNwZWxsY2hlY2s6ICdzcGVsbENoZWNrJyxcbiAgc3JjOiAnc3JjJyxcbiAgc3JjZG9jOiAnc3JjRG9jJyxcbiAgc3JjbGFuZzogJ3NyY0xhbmcnLFxuICBzcmNzZXQ6ICdzcmNTZXQnLFxuICBzdGFydDogJ3N0YXJ0JyxcbiAgc3RlcDogJ3N0ZXAnLFxuICBzdHlsZTogJ3N0eWxlJyxcbiAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICB0YWJpbmRleDogJ3RhYkluZGV4JyxcbiAgdGFyZ2V0OiAndGFyZ2V0JyxcbiAgdGl0bGU6ICd0aXRsZScsXG4gIHR5cGU6ICd0eXBlJyxcbiAgdXNlbWFwOiAndXNlTWFwJyxcbiAgdmFsdWU6ICd2YWx1ZScsXG4gIHdpZHRoOiAnd2lkdGgnLFxuICB3bW9kZTogJ3dtb2RlJyxcbiAgd3JhcDogJ3dyYXAnLFxuXG4gIC8vIFNWR1xuICBhYm91dDogJ2Fib3V0JyxcbiAgYWNjZW50aGVpZ2h0OiAnYWNjZW50SGVpZ2h0JyxcbiAgJ2FjY2VudC1oZWlnaHQnOiAnYWNjZW50SGVpZ2h0JyxcbiAgYWNjdW11bGF0ZTogJ2FjY3VtdWxhdGUnLFxuICBhZGRpdGl2ZTogJ2FkZGl0aXZlJyxcbiAgYWxpZ25tZW50YmFzZWxpbmU6ICdhbGlnbm1lbnRCYXNlbGluZScsXG4gICdhbGlnbm1lbnQtYmFzZWxpbmUnOiAnYWxpZ25tZW50QmFzZWxpbmUnLFxuICBhbGxvd3Jlb3JkZXI6ICdhbGxvd1Jlb3JkZXInLFxuICBhbHBoYWJldGljOiAnYWxwaGFiZXRpYycsXG4gIGFtcGxpdHVkZTogJ2FtcGxpdHVkZScsXG4gIGFyYWJpY2Zvcm06ICdhcmFiaWNGb3JtJyxcbiAgJ2FyYWJpYy1mb3JtJzogJ2FyYWJpY0Zvcm0nLFxuICBhc2NlbnQ6ICdhc2NlbnQnLFxuICBhdHRyaWJ1dGVuYW1lOiAnYXR0cmlidXRlTmFtZScsXG4gIGF0dHJpYnV0ZXR5cGU6ICdhdHRyaWJ1dGVUeXBlJyxcbiAgYXV0b3JldmVyc2U6ICdhdXRvUmV2ZXJzZScsXG4gIGF6aW11dGg6ICdhemltdXRoJyxcbiAgYmFzZWZyZXF1ZW5jeTogJ2Jhc2VGcmVxdWVuY3knLFxuICBiYXNlbGluZXNoaWZ0OiAnYmFzZWxpbmVTaGlmdCcsXG4gICdiYXNlbGluZS1zaGlmdCc6ICdiYXNlbGluZVNoaWZ0JyxcbiAgYmFzZXByb2ZpbGU6ICdiYXNlUHJvZmlsZScsXG4gIGJib3g6ICdiYm94JyxcbiAgYmVnaW46ICdiZWdpbicsXG4gIGJpYXM6ICdiaWFzJyxcbiAgYnk6ICdieScsXG4gIGNhbGNtb2RlOiAnY2FsY01vZGUnLFxuICBjYXBoZWlnaHQ6ICdjYXBIZWlnaHQnLFxuICAnY2FwLWhlaWdodCc6ICdjYXBIZWlnaHQnLFxuICBjbGlwOiAnY2xpcCcsXG4gIGNsaXBwYXRoOiAnY2xpcFBhdGgnLFxuICAnY2xpcC1wYXRoJzogJ2NsaXBQYXRoJyxcbiAgY2xpcHBhdGh1bml0czogJ2NsaXBQYXRoVW5pdHMnLFxuICBjbGlwcnVsZTogJ2NsaXBSdWxlJyxcbiAgJ2NsaXAtcnVsZSc6ICdjbGlwUnVsZScsXG4gIGNvbG9yOiAnY29sb3InLFxuICBjb2xvcmludGVycG9sYXRpb246ICdjb2xvckludGVycG9sYXRpb24nLFxuICAnY29sb3ItaW50ZXJwb2xhdGlvbic6ICdjb2xvckludGVycG9sYXRpb24nLFxuICBjb2xvcmludGVycG9sYXRpb25maWx0ZXJzOiAnY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVycycsXG4gICdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnOiAnY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVycycsXG4gIGNvbG9ycHJvZmlsZTogJ2NvbG9yUHJvZmlsZScsXG4gICdjb2xvci1wcm9maWxlJzogJ2NvbG9yUHJvZmlsZScsXG4gIGNvbG9ycmVuZGVyaW5nOiAnY29sb3JSZW5kZXJpbmcnLFxuICAnY29sb3ItcmVuZGVyaW5nJzogJ2NvbG9yUmVuZGVyaW5nJyxcbiAgY29udGVudHNjcmlwdHR5cGU6ICdjb250ZW50U2NyaXB0VHlwZScsXG4gIGNvbnRlbnRzdHlsZXR5cGU6ICdjb250ZW50U3R5bGVUeXBlJyxcbiAgY3Vyc29yOiAnY3Vyc29yJyxcbiAgY3g6ICdjeCcsXG4gIGN5OiAnY3knLFxuICBkOiAnZCcsXG4gIGRhdGF0eXBlOiAnZGF0YXR5cGUnLFxuICBkZWNlbGVyYXRlOiAnZGVjZWxlcmF0ZScsXG4gIGRlc2NlbnQ6ICdkZXNjZW50JyxcbiAgZGlmZnVzZWNvbnN0YW50OiAnZGlmZnVzZUNvbnN0YW50JyxcbiAgZGlyZWN0aW9uOiAnZGlyZWN0aW9uJyxcbiAgZGlzcGxheTogJ2Rpc3BsYXknLFxuICBkaXZpc29yOiAnZGl2aXNvcicsXG4gIGRvbWluYW50YmFzZWxpbmU6ICdkb21pbmFudEJhc2VsaW5lJyxcbiAgJ2RvbWluYW50LWJhc2VsaW5lJzogJ2RvbWluYW50QmFzZWxpbmUnLFxuICBkdXI6ICdkdXInLFxuICBkeDogJ2R4JyxcbiAgZHk6ICdkeScsXG4gIGVkZ2Vtb2RlOiAnZWRnZU1vZGUnLFxuICBlbGV2YXRpb246ICdlbGV2YXRpb24nLFxuICBlbmFibGViYWNrZ3JvdW5kOiAnZW5hYmxlQmFja2dyb3VuZCcsXG4gICdlbmFibGUtYmFja2dyb3VuZCc6ICdlbmFibGVCYWNrZ3JvdW5kJyxcbiAgZW5kOiAnZW5kJyxcbiAgZXhwb25lbnQ6ICdleHBvbmVudCcsXG4gIGV4dGVybmFscmVzb3VyY2VzcmVxdWlyZWQ6ICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJyxcbiAgZmlsbDogJ2ZpbGwnLFxuICBmaWxsb3BhY2l0eTogJ2ZpbGxPcGFjaXR5JyxcbiAgJ2ZpbGwtb3BhY2l0eSc6ICdmaWxsT3BhY2l0eScsXG4gIGZpbGxydWxlOiAnZmlsbFJ1bGUnLFxuICAnZmlsbC1ydWxlJzogJ2ZpbGxSdWxlJyxcbiAgZmlsdGVyOiAnZmlsdGVyJyxcbiAgZmlsdGVycmVzOiAnZmlsdGVyUmVzJyxcbiAgZmlsdGVydW5pdHM6ICdmaWx0ZXJVbml0cycsXG4gIGZsb29kb3BhY2l0eTogJ2Zsb29kT3BhY2l0eScsXG4gICdmbG9vZC1vcGFjaXR5JzogJ2Zsb29kT3BhY2l0eScsXG4gIGZsb29kY29sb3I6ICdmbG9vZENvbG9yJyxcbiAgJ2Zsb29kLWNvbG9yJzogJ2Zsb29kQ29sb3InLFxuICBmb2N1c2FibGU6ICdmb2N1c2FibGUnLFxuICBmb250ZmFtaWx5OiAnZm9udEZhbWlseScsXG4gICdmb250LWZhbWlseSc6ICdmb250RmFtaWx5JyxcbiAgZm9udHNpemU6ICdmb250U2l6ZScsXG4gICdmb250LXNpemUnOiAnZm9udFNpemUnLFxuICBmb250c2l6ZWFkanVzdDogJ2ZvbnRTaXplQWRqdXN0JyxcbiAgJ2ZvbnQtc2l6ZS1hZGp1c3QnOiAnZm9udFNpemVBZGp1c3QnLFxuICBmb250c3RyZXRjaDogJ2ZvbnRTdHJldGNoJyxcbiAgJ2ZvbnQtc3RyZXRjaCc6ICdmb250U3RyZXRjaCcsXG4gIGZvbnRzdHlsZTogJ2ZvbnRTdHlsZScsXG4gICdmb250LXN0eWxlJzogJ2ZvbnRTdHlsZScsXG4gIGZvbnR2YXJpYW50OiAnZm9udFZhcmlhbnQnLFxuICAnZm9udC12YXJpYW50JzogJ2ZvbnRWYXJpYW50JyxcbiAgZm9udHdlaWdodDogJ2ZvbnRXZWlnaHQnLFxuICAnZm9udC13ZWlnaHQnOiAnZm9udFdlaWdodCcsXG4gIGZvcm1hdDogJ2Zvcm1hdCcsXG4gIGZyb206ICdmcm9tJyxcbiAgZng6ICdmeCcsXG4gIGZ5OiAnZnknLFxuICBnMTogJ2cxJyxcbiAgZzI6ICdnMicsXG4gIGdseXBobmFtZTogJ2dseXBoTmFtZScsXG4gICdnbHlwaC1uYW1lJzogJ2dseXBoTmFtZScsXG4gIGdseXBob3JpZW50YXRpb25ob3Jpem9udGFsOiAnZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWwnLFxuICAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCc6ICdnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbCcsXG4gIGdseXBob3JpZW50YXRpb252ZXJ0aWNhbDogJ2dseXBoT3JpZW50YXRpb25WZXJ0aWNhbCcsXG4gICdnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCc6ICdnbHlwaE9yaWVudGF0aW9uVmVydGljYWwnLFxuICBnbHlwaHJlZjogJ2dseXBoUmVmJyxcbiAgZ3JhZGllbnR0cmFuc2Zvcm06ICdncmFkaWVudFRyYW5zZm9ybScsXG4gIGdyYWRpZW50dW5pdHM6ICdncmFkaWVudFVuaXRzJyxcbiAgaGFuZ2luZzogJ2hhbmdpbmcnLFxuICBob3JpemFkdng6ICdob3JpekFkdlgnLFxuICAnaG9yaXotYWR2LXgnOiAnaG9yaXpBZHZYJyxcbiAgaG9yaXpvcmlnaW54OiAnaG9yaXpPcmlnaW5YJyxcbiAgJ2hvcml6LW9yaWdpbi14JzogJ2hvcml6T3JpZ2luWCcsXG4gIGlkZW9ncmFwaGljOiAnaWRlb2dyYXBoaWMnLFxuICBpbWFnZXJlbmRlcmluZzogJ2ltYWdlUmVuZGVyaW5nJyxcbiAgJ2ltYWdlLXJlbmRlcmluZyc6ICdpbWFnZVJlbmRlcmluZycsXG4gIGluMjogJ2luMicsXG4gIGluOiAnaW4nLFxuICBpbmxpc3Q6ICdpbmxpc3QnLFxuICBpbnRlcmNlcHQ6ICdpbnRlcmNlcHQnLFxuICBrMTogJ2sxJyxcbiAgazI6ICdrMicsXG4gIGszOiAnazMnLFxuICBrNDogJ2s0JyxcbiAgazogJ2snLFxuICBrZXJuZWxtYXRyaXg6ICdrZXJuZWxNYXRyaXgnLFxuICBrZXJuZWx1bml0bGVuZ3RoOiAna2VybmVsVW5pdExlbmd0aCcsXG4gIGtlcm5pbmc6ICdrZXJuaW5nJyxcbiAga2V5cG9pbnRzOiAna2V5UG9pbnRzJyxcbiAga2V5c3BsaW5lczogJ2tleVNwbGluZXMnLFxuICBrZXl0aW1lczogJ2tleVRpbWVzJyxcbiAgbGVuZ3RoYWRqdXN0OiAnbGVuZ3RoQWRqdXN0JyxcbiAgbGV0dGVyc3BhY2luZzogJ2xldHRlclNwYWNpbmcnLFxuICAnbGV0dGVyLXNwYWNpbmcnOiAnbGV0dGVyU3BhY2luZycsXG4gIGxpZ2h0aW5nY29sb3I6ICdsaWdodGluZ0NvbG9yJyxcbiAgJ2xpZ2h0aW5nLWNvbG9yJzogJ2xpZ2h0aW5nQ29sb3InLFxuICBsaW1pdGluZ2NvbmVhbmdsZTogJ2xpbWl0aW5nQ29uZUFuZ2xlJyxcbiAgbG9jYWw6ICdsb2NhbCcsXG4gIG1hcmtlcmVuZDogJ21hcmtlckVuZCcsXG4gICdtYXJrZXItZW5kJzogJ21hcmtlckVuZCcsXG4gIG1hcmtlcmhlaWdodDogJ21hcmtlckhlaWdodCcsXG4gIG1hcmtlcm1pZDogJ21hcmtlck1pZCcsXG4gICdtYXJrZXItbWlkJzogJ21hcmtlck1pZCcsXG4gIG1hcmtlcnN0YXJ0OiAnbWFya2VyU3RhcnQnLFxuICAnbWFya2VyLXN0YXJ0JzogJ21hcmtlclN0YXJ0JyxcbiAgbWFya2VydW5pdHM6ICdtYXJrZXJVbml0cycsXG4gIG1hcmtlcndpZHRoOiAnbWFya2VyV2lkdGgnLFxuICBtYXNrOiAnbWFzaycsXG4gIG1hc2tjb250ZW50dW5pdHM6ICdtYXNrQ29udGVudFVuaXRzJyxcbiAgbWFza3VuaXRzOiAnbWFza1VuaXRzJyxcbiAgbWF0aGVtYXRpY2FsOiAnbWF0aGVtYXRpY2FsJyxcbiAgbW9kZTogJ21vZGUnLFxuICBudW1vY3RhdmVzOiAnbnVtT2N0YXZlcycsXG4gIG9mZnNldDogJ29mZnNldCcsXG4gIG9wYWNpdHk6ICdvcGFjaXR5JyxcbiAgb3BlcmF0b3I6ICdvcGVyYXRvcicsXG4gIG9yZGVyOiAnb3JkZXInLFxuICBvcmllbnQ6ICdvcmllbnQnLFxuICBvcmllbnRhdGlvbjogJ29yaWVudGF0aW9uJyxcbiAgb3JpZ2luOiAnb3JpZ2luJyxcbiAgb3ZlcmZsb3c6ICdvdmVyZmxvdycsXG4gIG92ZXJsaW5lcG9zaXRpb246ICdvdmVybGluZVBvc2l0aW9uJyxcbiAgJ292ZXJsaW5lLXBvc2l0aW9uJzogJ292ZXJsaW5lUG9zaXRpb24nLFxuICBvdmVybGluZXRoaWNrbmVzczogJ292ZXJsaW5lVGhpY2tuZXNzJyxcbiAgJ292ZXJsaW5lLXRoaWNrbmVzcyc6ICdvdmVybGluZVRoaWNrbmVzcycsXG4gIHBhaW50b3JkZXI6ICdwYWludE9yZGVyJyxcbiAgJ3BhaW50LW9yZGVyJzogJ3BhaW50T3JkZXInLFxuICBwYW5vc2UxOiAncGFub3NlMScsXG4gICdwYW5vc2UtMSc6ICdwYW5vc2UxJyxcbiAgcGF0aGxlbmd0aDogJ3BhdGhMZW5ndGgnLFxuICBwYXR0ZXJuY29udGVudHVuaXRzOiAncGF0dGVybkNvbnRlbnRVbml0cycsXG4gIHBhdHRlcm50cmFuc2Zvcm06ICdwYXR0ZXJuVHJhbnNmb3JtJyxcbiAgcGF0dGVybnVuaXRzOiAncGF0dGVyblVuaXRzJyxcbiAgcG9pbnRlcmV2ZW50czogJ3BvaW50ZXJFdmVudHMnLFxuICAncG9pbnRlci1ldmVudHMnOiAncG9pbnRlckV2ZW50cycsXG4gIHBvaW50czogJ3BvaW50cycsXG4gIHBvaW50c2F0eDogJ3BvaW50c0F0WCcsXG4gIHBvaW50c2F0eTogJ3BvaW50c0F0WScsXG4gIHBvaW50c2F0ejogJ3BvaW50c0F0WicsXG4gIHByZWZpeDogJ3ByZWZpeCcsXG4gIHByZXNlcnZlYWxwaGE6ICdwcmVzZXJ2ZUFscGhhJyxcbiAgcHJlc2VydmVhc3BlY3RyYXRpbzogJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLFxuICBwcmltaXRpdmV1bml0czogJ3ByaW1pdGl2ZVVuaXRzJyxcbiAgcHJvcGVydHk6ICdwcm9wZXJ0eScsXG4gIHI6ICdyJyxcbiAgcmFkaXVzOiAncmFkaXVzJyxcbiAgcmVmeDogJ3JlZlgnLFxuICByZWZ5OiAncmVmWScsXG4gIHJlbmRlcmluZ2ludGVudDogJ3JlbmRlcmluZ0ludGVudCcsXG4gICdyZW5kZXJpbmctaW50ZW50JzogJ3JlbmRlcmluZ0ludGVudCcsXG4gIHJlcGVhdGNvdW50OiAncmVwZWF0Q291bnQnLFxuICByZXBlYXRkdXI6ICdyZXBlYXREdXInLFxuICByZXF1aXJlZGV4dGVuc2lvbnM6ICdyZXF1aXJlZEV4dGVuc2lvbnMnLFxuICByZXF1aXJlZGZlYXR1cmVzOiAncmVxdWlyZWRGZWF0dXJlcycsXG4gIHJlc291cmNlOiAncmVzb3VyY2UnLFxuICByZXN0YXJ0OiAncmVzdGFydCcsXG4gIHJlc3VsdDogJ3Jlc3VsdCcsXG4gIHJlc3VsdHM6ICdyZXN1bHRzJyxcbiAgcm90YXRlOiAncm90YXRlJyxcbiAgcng6ICdyeCcsXG4gIHJ5OiAncnknLFxuICBzY2FsZTogJ3NjYWxlJyxcbiAgc2VjdXJpdHk6ICdzZWN1cml0eScsXG4gIHNlZWQ6ICdzZWVkJyxcbiAgc2hhcGVyZW5kZXJpbmc6ICdzaGFwZVJlbmRlcmluZycsXG4gICdzaGFwZS1yZW5kZXJpbmcnOiAnc2hhcGVSZW5kZXJpbmcnLFxuICBzbG9wZTogJ3Nsb3BlJyxcbiAgc3BhY2luZzogJ3NwYWNpbmcnLFxuICBzcGVjdWxhcmNvbnN0YW50OiAnc3BlY3VsYXJDb25zdGFudCcsXG4gIHNwZWN1bGFyZXhwb25lbnQ6ICdzcGVjdWxhckV4cG9uZW50JyxcbiAgc3BlZWQ6ICdzcGVlZCcsXG4gIHNwcmVhZG1ldGhvZDogJ3NwcmVhZE1ldGhvZCcsXG4gIHN0YXJ0b2Zmc2V0OiAnc3RhcnRPZmZzZXQnLFxuICBzdGRkZXZpYXRpb246ICdzdGREZXZpYXRpb24nLFxuICBzdGVtaDogJ3N0ZW1oJyxcbiAgc3RlbXY6ICdzdGVtdicsXG4gIHN0aXRjaHRpbGVzOiAnc3RpdGNoVGlsZXMnLFxuICBzdG9wY29sb3I6ICdzdG9wQ29sb3InLFxuICAnc3RvcC1jb2xvcic6ICdzdG9wQ29sb3InLFxuICBzdG9wb3BhY2l0eTogJ3N0b3BPcGFjaXR5JyxcbiAgJ3N0b3Atb3BhY2l0eSc6ICdzdG9wT3BhY2l0eScsXG4gIHN0cmlrZXRocm91Z2hwb3NpdGlvbjogJ3N0cmlrZXRocm91Z2hQb3NpdGlvbicsXG4gICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJzogJ3N0cmlrZXRocm91Z2hQb3NpdGlvbicsXG4gIHN0cmlrZXRocm91Z2h0aGlja25lc3M6ICdzdHJpa2V0aHJvdWdoVGhpY2tuZXNzJyxcbiAgJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJzogJ3N0cmlrZXRocm91Z2hUaGlja25lc3MnLFxuICBzdHJpbmc6ICdzdHJpbmcnLFxuICBzdHJva2U6ICdzdHJva2UnLFxuICBzdHJva2VkYXNoYXJyYXk6ICdzdHJva2VEYXNoYXJyYXknLFxuICAnc3Ryb2tlLWRhc2hhcnJheSc6ICdzdHJva2VEYXNoYXJyYXknLFxuICBzdHJva2VkYXNob2Zmc2V0OiAnc3Ryb2tlRGFzaG9mZnNldCcsXG4gICdzdHJva2UtZGFzaG9mZnNldCc6ICdzdHJva2VEYXNob2Zmc2V0JyxcbiAgc3Ryb2tlbGluZWNhcDogJ3N0cm9rZUxpbmVjYXAnLFxuICAnc3Ryb2tlLWxpbmVjYXAnOiAnc3Ryb2tlTGluZWNhcCcsXG4gIHN0cm9rZWxpbmVqb2luOiAnc3Ryb2tlTGluZWpvaW4nLFxuICAnc3Ryb2tlLWxpbmVqb2luJzogJ3N0cm9rZUxpbmVqb2luJyxcbiAgc3Ryb2tlbWl0ZXJsaW1pdDogJ3N0cm9rZU1pdGVybGltaXQnLFxuICAnc3Ryb2tlLW1pdGVybGltaXQnOiAnc3Ryb2tlTWl0ZXJsaW1pdCcsXG4gIHN0cm9rZXdpZHRoOiAnc3Ryb2tlV2lkdGgnLFxuICAnc3Ryb2tlLXdpZHRoJzogJ3N0cm9rZVdpZHRoJyxcbiAgc3Ryb2tlb3BhY2l0eTogJ3N0cm9rZU9wYWNpdHknLFxuICAnc3Ryb2tlLW9wYWNpdHknOiAnc3Ryb2tlT3BhY2l0eScsXG4gIHN1cHByZXNzY29udGVudGVkaXRhYmxld2FybmluZzogJ3N1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZycsXG4gIHN1cHByZXNzaHlkcmF0aW9ud2FybmluZzogJ3N1cHByZXNzSHlkcmF0aW9uV2FybmluZycsXG4gIHN1cmZhY2VzY2FsZTogJ3N1cmZhY2VTY2FsZScsXG4gIHN5c3RlbWxhbmd1YWdlOiAnc3lzdGVtTGFuZ3VhZ2UnLFxuICB0YWJsZXZhbHVlczogJ3RhYmxlVmFsdWVzJyxcbiAgdGFyZ2V0eDogJ3RhcmdldFgnLFxuICB0YXJnZXR5OiAndGFyZ2V0WScsXG4gIHRleHRhbmNob3I6ICd0ZXh0QW5jaG9yJyxcbiAgJ3RleHQtYW5jaG9yJzogJ3RleHRBbmNob3InLFxuICB0ZXh0ZGVjb3JhdGlvbjogJ3RleHREZWNvcmF0aW9uJyxcbiAgJ3RleHQtZGVjb3JhdGlvbic6ICd0ZXh0RGVjb3JhdGlvbicsXG4gIHRleHRsZW5ndGg6ICd0ZXh0TGVuZ3RoJyxcbiAgdGV4dHJlbmRlcmluZzogJ3RleHRSZW5kZXJpbmcnLFxuICAndGV4dC1yZW5kZXJpbmcnOiAndGV4dFJlbmRlcmluZycsXG4gIHRvOiAndG8nLFxuICB0cmFuc2Zvcm06ICd0cmFuc2Zvcm0nLFxuICB0eXBlb2Y6ICd0eXBlb2YnLFxuICB1MTogJ3UxJyxcbiAgdTI6ICd1MicsXG4gIHVuZGVybGluZXBvc2l0aW9uOiAndW5kZXJsaW5lUG9zaXRpb24nLFxuICAndW5kZXJsaW5lLXBvc2l0aW9uJzogJ3VuZGVybGluZVBvc2l0aW9uJyxcbiAgdW5kZXJsaW5ldGhpY2tuZXNzOiAndW5kZXJsaW5lVGhpY2tuZXNzJyxcbiAgJ3VuZGVybGluZS10aGlja25lc3MnOiAndW5kZXJsaW5lVGhpY2tuZXNzJyxcbiAgdW5pY29kZTogJ3VuaWNvZGUnLFxuICB1bmljb2RlYmlkaTogJ3VuaWNvZGVCaWRpJyxcbiAgJ3VuaWNvZGUtYmlkaSc6ICd1bmljb2RlQmlkaScsXG4gIHVuaWNvZGVyYW5nZTogJ3VuaWNvZGVSYW5nZScsXG4gICd1bmljb2RlLXJhbmdlJzogJ3VuaWNvZGVSYW5nZScsXG4gIHVuaXRzcGVyZW06ICd1bml0c1BlckVtJyxcbiAgJ3VuaXRzLXBlci1lbSc6ICd1bml0c1BlckVtJyxcbiAgdW5zZWxlY3RhYmxlOiAndW5zZWxlY3RhYmxlJyxcbiAgdmFscGhhYmV0aWM6ICd2QWxwaGFiZXRpYycsXG4gICd2LWFscGhhYmV0aWMnOiAndkFscGhhYmV0aWMnLFxuICB2YWx1ZXM6ICd2YWx1ZXMnLFxuICB2ZWN0b3JlZmZlY3Q6ICd2ZWN0b3JFZmZlY3QnLFxuICAndmVjdG9yLWVmZmVjdCc6ICd2ZWN0b3JFZmZlY3QnLFxuICB2ZXJzaW9uOiAndmVyc2lvbicsXG4gIHZlcnRhZHZ5OiAndmVydEFkdlknLFxuICAndmVydC1hZHYteSc6ICd2ZXJ0QWR2WScsXG4gIHZlcnRvcmlnaW54OiAndmVydE9yaWdpblgnLFxuICAndmVydC1vcmlnaW4teCc6ICd2ZXJ0T3JpZ2luWCcsXG4gIHZlcnRvcmlnaW55OiAndmVydE9yaWdpblknLFxuICAndmVydC1vcmlnaW4teSc6ICd2ZXJ0T3JpZ2luWScsXG4gIHZoYW5naW5nOiAndkhhbmdpbmcnLFxuICAndi1oYW5naW5nJzogJ3ZIYW5naW5nJyxcbiAgdmlkZW9ncmFwaGljOiAndklkZW9ncmFwaGljJyxcbiAgJ3YtaWRlb2dyYXBoaWMnOiAndklkZW9ncmFwaGljJyxcbiAgdmlld2JveDogJ3ZpZXdCb3gnLFxuICB2aWV3dGFyZ2V0OiAndmlld1RhcmdldCcsXG4gIHZpc2liaWxpdHk6ICd2aXNpYmlsaXR5JyxcbiAgdm1hdGhlbWF0aWNhbDogJ3ZNYXRoZW1hdGljYWwnLFxuICAndi1tYXRoZW1hdGljYWwnOiAndk1hdGhlbWF0aWNhbCcsXG4gIHZvY2FiOiAndm9jYWInLFxuICB3aWR0aHM6ICd3aWR0aHMnLFxuICB3b3Jkc3BhY2luZzogJ3dvcmRTcGFjaW5nJyxcbiAgJ3dvcmQtc3BhY2luZyc6ICd3b3JkU3BhY2luZycsXG4gIHdyaXRpbmdtb2RlOiAnd3JpdGluZ01vZGUnLFxuICAnd3JpdGluZy1tb2RlJzogJ3dyaXRpbmdNb2RlJyxcbiAgeDE6ICd4MScsXG4gIHgyOiAneDInLFxuICB4OiAneCcsXG4gIHhjaGFubmVsc2VsZWN0b3I6ICd4Q2hhbm5lbFNlbGVjdG9yJyxcbiAgeGhlaWdodDogJ3hIZWlnaHQnLFxuICAneC1oZWlnaHQnOiAneEhlaWdodCcsXG4gIHhsaW5rYWN0dWF0ZTogJ3hsaW5rQWN0dWF0ZScsXG4gICd4bGluazphY3R1YXRlJzogJ3hsaW5rQWN0dWF0ZScsXG4gIHhsaW5rYXJjcm9sZTogJ3hsaW5rQXJjcm9sZScsXG4gICd4bGluazphcmNyb2xlJzogJ3hsaW5rQXJjcm9sZScsXG4gIHhsaW5raHJlZjogJ3hsaW5rSHJlZicsXG4gICd4bGluazpocmVmJzogJ3hsaW5rSHJlZicsXG4gIHhsaW5rcm9sZTogJ3hsaW5rUm9sZScsXG4gICd4bGluazpyb2xlJzogJ3hsaW5rUm9sZScsXG4gIHhsaW5rc2hvdzogJ3hsaW5rU2hvdycsXG4gICd4bGluazpzaG93JzogJ3hsaW5rU2hvdycsXG4gIHhsaW5rdGl0bGU6ICd4bGlua1RpdGxlJyxcbiAgJ3hsaW5rOnRpdGxlJzogJ3hsaW5rVGl0bGUnLFxuICB4bGlua3R5cGU6ICd4bGlua1R5cGUnLFxuICAneGxpbms6dHlwZSc6ICd4bGlua1R5cGUnLFxuICB4bWxiYXNlOiAneG1sQmFzZScsXG4gICd4bWw6YmFzZSc6ICd4bWxCYXNlJyxcbiAgeG1sbGFuZzogJ3htbExhbmcnLFxuICAneG1sOmxhbmcnOiAneG1sTGFuZycsXG4gIHhtbG5zOiAneG1sbnMnLFxuICAneG1sOnNwYWNlJzogJ3htbFNwYWNlJyxcbiAgeG1sbnN4bGluazogJ3htbG5zWGxpbmsnLFxuICAneG1sbnM6eGxpbmsnOiAneG1sbnNYbGluaycsXG4gIHhtbHNwYWNlOiAneG1sU3BhY2UnLFxuICB5MTogJ3kxJyxcbiAgeTI6ICd5MicsXG4gIHk6ICd5JyxcbiAgeWNoYW5uZWxzZWxlY3RvcjogJ3lDaGFubmVsU2VsZWN0b3InLFxuICB6OiAneicsXG4gIHpvb21hbmRwYW46ICd6b29tQW5kUGFuJ1xufTtcblxudmFyIGFyaWFQcm9wZXJ0aWVzID0ge1xuICAnYXJpYS1jdXJyZW50JzogMCwgLy8gc3RhdGVcbiAgJ2FyaWEtZGV0YWlscyc6IDAsXG4gICdhcmlhLWRpc2FibGVkJzogMCwgLy8gc3RhdGVcbiAgJ2FyaWEtaGlkZGVuJzogMCwgLy8gc3RhdGVcbiAgJ2FyaWEtaW52YWxpZCc6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWtleXNob3J0Y3V0cyc6IDAsXG4gICdhcmlhLWxhYmVsJzogMCxcbiAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzogMCxcbiAgLy8gV2lkZ2V0IEF0dHJpYnV0ZXNcbiAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogMCxcbiAgJ2FyaWEtY2hlY2tlZCc6IDAsXG4gICdhcmlhLWV4cGFuZGVkJzogMCxcbiAgJ2FyaWEtaGFzcG9wdXAnOiAwLFxuICAnYXJpYS1sZXZlbCc6IDAsXG4gICdhcmlhLW1vZGFsJzogMCxcbiAgJ2FyaWEtbXVsdGlsaW5lJzogMCxcbiAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogMCxcbiAgJ2FyaWEtb3JpZW50YXRpb24nOiAwLFxuICAnYXJpYS1wbGFjZWhvbGRlcic6IDAsXG4gICdhcmlhLXByZXNzZWQnOiAwLFxuICAnYXJpYS1yZWFkb25seSc6IDAsXG4gICdhcmlhLXJlcXVpcmVkJzogMCxcbiAgJ2FyaWEtc2VsZWN0ZWQnOiAwLFxuICAnYXJpYS1zb3J0JzogMCxcbiAgJ2FyaWEtdmFsdWVtYXgnOiAwLFxuICAnYXJpYS12YWx1ZW1pbic6IDAsXG4gICdhcmlhLXZhbHVlbm93JzogMCxcbiAgJ2FyaWEtdmFsdWV0ZXh0JzogMCxcbiAgLy8gTGl2ZSBSZWdpb24gQXR0cmlidXRlc1xuICAnYXJpYS1hdG9taWMnOiAwLFxuICAnYXJpYS1idXN5JzogMCxcbiAgJ2FyaWEtbGl2ZSc6IDAsXG4gICdhcmlhLXJlbGV2YW50JzogMCxcbiAgLy8gRHJhZy1hbmQtRHJvcCBBdHRyaWJ1dGVzXG4gICdhcmlhLWRyb3BlZmZlY3QnOiAwLFxuICAnYXJpYS1ncmFiYmVkJzogMCxcbiAgLy8gUmVsYXRpb25zaGlwIEF0dHJpYnV0ZXNcbiAgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCc6IDAsXG4gICdhcmlhLWNvbGNvdW50JzogMCxcbiAgJ2FyaWEtY29saW5kZXgnOiAwLFxuICAnYXJpYS1jb2xzcGFuJzogMCxcbiAgJ2FyaWEtY29udHJvbHMnOiAwLFxuICAnYXJpYS1kZXNjcmliZWRieSc6IDAsXG4gICdhcmlhLWVycm9ybWVzc2FnZSc6IDAsXG4gICdhcmlhLWZsb3d0byc6IDAsXG4gICdhcmlhLWxhYmVsbGVkYnknOiAwLFxuICAnYXJpYS1vd25zJzogMCxcbiAgJ2FyaWEtcG9zaW5zZXQnOiAwLFxuICAnYXJpYS1yb3djb3VudCc6IDAsXG4gICdhcmlhLXJvd2luZGV4JzogMCxcbiAgJ2FyaWEtcm93c3Bhbic6IDAsXG4gICdhcmlhLXNldHNpemUnOiAwXG59O1xuXG52YXIgd2FybmVkUHJvcGVydGllcyA9IHt9O1xudmFyIHJBUklBID0gbmV3IFJlZ0V4cCgnXihhcmlhKS1bJyArIEFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG52YXIgckFSSUFDYW1lbCA9IG5ldyBSZWdFeHAoJ14oYXJpYSlbQS1aXVsnICsgQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcblxudmFyIGhhc093blByb3BlcnR5JDIgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5KHRhZ05hbWUsIG5hbWUpIHtcbiAgaWYgKGhhc093blByb3BlcnR5JDIuY2FsbCh3YXJuZWRQcm9wZXJ0aWVzLCBuYW1lKSAmJiB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAockFSSUFDYW1lbC50ZXN0KG5hbWUpKSB7XG4gICAgdmFyIGFyaWFOYW1lID0gJ2FyaWEtJyArIG5hbWUuc2xpY2UoNCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgY29ycmVjdE5hbWUgPSBhcmlhUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShhcmlhTmFtZSkgPyBhcmlhTmFtZSA6IG51bGw7XG5cbiAgICAvLyBJZiB0aGlzIGlzIGFuIGFyaWEtKiBhdHRyaWJ1dGUsIGJ1dCBpcyBub3QgbGlzdGVkIGluIHRoZSBrbm93biBET01cbiAgICAvLyBET00gcHJvcGVydGllcywgdGhlbiBpdCBpcyBhbiBpbnZhbGlkIGFyaWEtKiBhdHRyaWJ1dGUuXG4gICAgaWYgKGNvcnJlY3ROYW1lID09IG51bGwpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ0ludmFsaWQgQVJJQSBhdHRyaWJ1dGUgYCVzYC4gQVJJQSBhdHRyaWJ1dGVzIGZvbGxvdyB0aGUgcGF0dGVybiBhcmlhLSogYW5kIG11c3QgYmUgbG93ZXJjYXNlLicsIG5hbWUpO1xuICAgICAgd2FybmVkUHJvcGVydGllc1tuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gYXJpYS0qIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGxvd2VyY2FzZTsgc3VnZ2VzdCB0aGUgbG93ZXJjYXNlIHZlcnNpb24uXG4gICAgaWYgKG5hbWUgIT09IGNvcnJlY3ROYW1lKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdJbnZhbGlkIEFSSUEgYXR0cmlidXRlIGAlc2AuIERpZCB5b3UgbWVhbiBgJXNgPycsIG5hbWUsIGNvcnJlY3ROYW1lKTtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJBUklBLnRlc3QobmFtZSkpIHtcbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIHN0YW5kYXJkTmFtZSA9IGFyaWFQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSA/IGxvd2VyQ2FzZWROYW1lIDogbnVsbDtcblxuICAgIC8vIElmIHRoaXMgaXMgYW4gYXJpYS0qIGF0dHJpYnV0ZSwgYnV0IGlzIG5vdCBsaXN0ZWQgaW4gdGhlIGtub3duIERPTVxuICAgIC8vIERPTSBwcm9wZXJ0aWVzLCB0aGVuIGl0IGlzIGFuIGludmFsaWQgYXJpYS0qIGF0dHJpYnV0ZS5cbiAgICBpZiAoc3RhbmRhcmROYW1lID09IG51bGwpIHtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBhcmlhLSogYXR0cmlidXRlcyBzaG91bGQgYmUgbG93ZXJjYXNlOyBzdWdnZXN0IHRoZSBsb3dlcmNhc2UgdmVyc2lvbi5cbiAgICBpZiAobmFtZSAhPT0gc3RhbmRhcmROYW1lKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdVbmtub3duIEFSSUEgYXR0cmlidXRlIGAlc2AuIERpZCB5b3UgbWVhbiBgJXNgPycsIG5hbWUsIHN0YW5kYXJkTmFtZSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB3YXJuSW52YWxpZEFSSUFQcm9wcyh0eXBlLCBwcm9wcykge1xuICB2YXIgaW52YWxpZFByb3BzID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgdmFyIGlzVmFsaWQgPSB2YWxpZGF0ZVByb3BlcnR5KHR5cGUsIGtleSk7XG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICBpbnZhbGlkUHJvcHMucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB1bmtub3duUHJvcFN0cmluZyA9IGludmFsaWRQcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICByZXR1cm4gJ2AnICsgcHJvcCArICdgJztcbiAgfSkuam9pbignLCAnKTtcblxuICBpZiAoaW52YWxpZFByb3BzLmxlbmd0aCA9PT0gMSkge1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ0ludmFsaWQgYXJpYSBwcm9wICVzIG9uIDwlcz4gdGFnLiAnICsgJ0ZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9mYi5tZS9pbnZhbGlkLWFyaWEtcHJvcCcsIHVua25vd25Qcm9wU3RyaW5nLCB0eXBlKTtcbiAgfSBlbHNlIGlmIChpbnZhbGlkUHJvcHMubGVuZ3RoID4gMSkge1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ0ludmFsaWQgYXJpYSBwcm9wcyAlcyBvbiA8JXM+IHRhZy4gJyArICdGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vZmIubWUvaW52YWxpZC1hcmlhLXByb3AnLCB1bmtub3duUHJvcFN0cmluZywgdHlwZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0aWVzKHR5cGUsIHByb3BzKSB7XG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudCh0eXBlLCBwcm9wcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgd2FybkludmFsaWRBUklBUHJvcHModHlwZSwgcHJvcHMpO1xufVxuXG52YXIgZGlkV2FyblZhbHVlTnVsbCA9IGZhbHNlO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnRpZXMkMSh0eXBlLCBwcm9wcykge1xuICBpZiAodHlwZSAhPT0gJ2lucHV0JyAmJiB0eXBlICE9PSAndGV4dGFyZWEnICYmIHR5cGUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHByb3BzICE9IG51bGwgJiYgcHJvcHMudmFsdWUgPT09IG51bGwgJiYgIWRpZFdhcm5WYWx1ZU51bGwpIHtcbiAgICBkaWRXYXJuVmFsdWVOdWxsID0gdHJ1ZTtcbiAgICBpZiAodHlwZSA9PT0gJ3NlbGVjdCcgJiYgcHJvcHMubXVsdGlwbGUpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ2B2YWx1ZWAgcHJvcCBvbiBgJXNgIHNob3VsZCBub3QgYmUgbnVsbC4gJyArICdDb25zaWRlciB1c2luZyBhbiBlbXB0eSBhcnJheSB3aGVuIGBtdWx0aXBsZWAgaXMgc2V0IHRvIGB0cnVlYCAnICsgJ3RvIGNsZWFyIHRoZSBjb21wb25lbnQgb3IgYHVuZGVmaW5lZGAgZm9yIHVuY29udHJvbGxlZCBjb21wb25lbnRzLicsIHR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdgdmFsdWVgIHByb3Agb24gYCVzYCBzaG91bGQgbm90IGJlIG51bGwuICcgKyAnQ29uc2lkZXIgdXNpbmcgYW4gZW1wdHkgc3RyaW5nIHRvIGNsZWFyIHRoZSBjb21wb25lbnQgb3IgYHVuZGVmaW5lZGAgJyArICdmb3IgdW5jb250cm9sbGVkIGNvbXBvbmVudHMuJywgdHlwZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciB2YWxpZGF0ZVByb3BlcnR5JDEgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICB2YXIgd2FybmVkUHJvcGVydGllcyQxID0ge307XG4gIHZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICB2YXIgRVZFTlRfTkFNRV9SRUdFWCA9IC9eb24uLztcbiAgdmFyIElOVkFMSURfRVZFTlRfTkFNRV9SRUdFWCA9IC9eb25bXkEtWl0vO1xuICB2YXIgckFSSUEkMSA9IG5ldyBSZWdFeHAoJ14oYXJpYSktWycgKyBBVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpO1xuICB2YXIgckFSSUFDYW1lbCQxID0gbmV3IFJlZ0V4cCgnXihhcmlhKVtBLVpdWycgKyBBVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpO1xuXG4gIHZhbGlkYXRlUHJvcGVydHkkMSA9IGZ1bmN0aW9uICh0YWdOYW1lLCBuYW1lLCB2YWx1ZSwgY2FuVXNlRXZlbnRTeXN0ZW0pIHtcbiAgICBpZiAoX2hhc093blByb3BlcnR5LmNhbGwod2FybmVkUHJvcGVydGllcyQxLCBuYW1lKSAmJiB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobG93ZXJDYXNlZE5hbWUgPT09ICdvbmZvY3VzaW4nIHx8IGxvd2VyQ2FzZWROYW1lID09PSAnb25mb2N1c291dCcpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlYWN0IHVzZXMgb25Gb2N1cyBhbmQgb25CbHVyIGluc3RlYWQgb2Ygb25Gb2N1c0luIGFuZCBvbkZvY3VzT3V0LiAnICsgJ0FsbCBSZWFjdCBldmVudHMgYXJlIG5vcm1hbGl6ZWQgdG8gYnViYmxlLCBzbyBvbkZvY3VzSW4gYW5kIG9uRm9jdXNPdXQgJyArICdhcmUgbm90IG5lZWRlZC9zdXBwb3J0ZWQgYnkgUmVhY3QuJyk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gV2UgY2FuJ3QgcmVseSBvbiB0aGUgZXZlbnQgc3lzdGVtIGJlaW5nIGluamVjdGVkIG9uIHRoZSBzZXJ2ZXIuXG4gICAgaWYgKGNhblVzZUV2ZW50U3lzdGVtKSB7XG4gICAgICBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID8gcG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gOiBudWxsO1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgIT0gbnVsbCkge1xuICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdJbnZhbGlkIGV2ZW50IGhhbmRsZXIgcHJvcGVydHkgYCVzYC4gRGlkIHlvdSBtZWFuIGAlc2A/JywgbmFtZSwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKEVWRU5UX05BTUVfUkVHRVgudGVzdChuYW1lKSkge1xuICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdVbmtub3duIGV2ZW50IGhhbmRsZXIgcHJvcGVydHkgYCVzYC4gSXQgd2lsbCBiZSBpZ25vcmVkLicsIG5hbWUpO1xuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEVWRU5UX05BTUVfUkVHRVgudGVzdChuYW1lKSkge1xuICAgICAgLy8gSWYgbm8gZXZlbnQgcGx1Z2lucyBoYXZlIGJlZW4gaW5qZWN0ZWQsIHdlIGFyZSBpbiBhIHNlcnZlciBlbnZpcm9ubWVudC5cbiAgICAgIC8vIFNvIHdlIGNhbid0IHRlbGwgaWYgdGhlIGV2ZW50IG5hbWUgaXMgY29ycmVjdCBmb3Igc3VyZSwgYnV0IHdlIGNhbiBmaWx0ZXJcbiAgICAgIC8vIG91dCBrbm93biBiYWQgb25lcyBsaWtlIGBvbmNsaWNrYC4gV2UgY2FuJ3Qgc3VnZ2VzdCBhIHNwZWNpZmljIHJlcGxhY2VtZW50IHRob3VnaC5cbiAgICAgIGlmIChJTlZBTElEX0VWRU5UX05BTUVfUkVHRVgudGVzdChuYW1lKSkge1xuICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdJbnZhbGlkIGV2ZW50IGhhbmRsZXIgcHJvcGVydHkgYCVzYC4gJyArICdSZWFjdCBldmVudHMgdXNlIHRoZSBjYW1lbENhc2UgbmFtaW5nIGNvbnZlbnRpb24sIGZvciBleGFtcGxlIGBvbkNsaWNrYC4nLCBuYW1lKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBMZXQgdGhlIEFSSUEgYXR0cmlidXRlIGhvb2sgdmFsaWRhdGUgQVJJQSBhdHRyaWJ1dGVzXG4gICAgaWYgKHJBUklBJDEudGVzdChuYW1lKSB8fCByQVJJQUNhbWVsJDEudGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGxvd2VyQ2FzZWROYW1lID09PSAnaW5uZXJodG1sJykge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnRGlyZWN0bHkgc2V0dGluZyBwcm9wZXJ0eSBgaW5uZXJIVE1MYCBpcyBub3QgcGVybWl0dGVkLiAnICsgJ0ZvciBtb3JlIGluZm9ybWF0aW9uLCBsb29rdXAgZG9jdW1lbnRhdGlvbiBvbiBgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLicpO1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChsb3dlckNhc2VkTmFtZSA9PT0gJ2FyaWEnKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdUaGUgYGFyaWFgIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBmb3IgZnV0dXJlIHVzZSBpbiBSZWFjdC4gJyArICdQYXNzIGluZGl2aWR1YWwgYGFyaWEtYCBhdHRyaWJ1dGVzIGluc3RlYWQuJyk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGxvd2VyQ2FzZWROYW1lID09PSAnaXMnICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVjZWl2ZWQgYSBgJXNgIGZvciBhIHN0cmluZyBhdHRyaWJ1dGUgYGlzYC4gSWYgdGhpcyBpcyBleHBlY3RlZCwgY2FzdCAnICsgJ3RoZSB2YWx1ZSB0byBhIHN0cmluZy4nLCB0eXBlb2YgdmFsdWUpO1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbHVlKSkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVjZWl2ZWQgTmFOIGZvciB0aGUgYCVzYCBhdHRyaWJ1dGUuIElmIHRoaXMgaXMgZXhwZWN0ZWQsIGNhc3QgJyArICd0aGUgdmFsdWUgdG8gYSBzdHJpbmcuJywgbmFtZSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHByb3BlcnR5SW5mbyA9IGdldFByb3BlcnR5SW5mbyhuYW1lKTtcbiAgICB2YXIgaXNSZXNlcnZlZCA9IHByb3BlcnR5SW5mbyAhPT0gbnVsbCAmJiBwcm9wZXJ0eUluZm8udHlwZSA9PT0gUkVTRVJWRUQ7XG5cbiAgICAvLyBLbm93biBhdHRyaWJ1dGVzIHNob3VsZCBtYXRjaCB0aGUgY2FzaW5nIHNwZWNpZmllZCBpbiB0aGUgcHJvcGVydHkgY29uZmlnLlxuICAgIGlmIChwb3NzaWJsZVN0YW5kYXJkTmFtZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpKSB7XG4gICAgICB2YXIgc3RhbmRhcmROYW1lID0gcG9zc2libGVTdGFuZGFyZE5hbWVzW2xvd2VyQ2FzZWROYW1lXTtcbiAgICAgIGlmIChzdGFuZGFyZE5hbWUgIT09IG5hbWUpIHtcbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnSW52YWxpZCBET00gcHJvcGVydHkgYCVzYC4gRGlkIHlvdSBtZWFuIGAlc2A/JywgbmFtZSwgc3RhbmRhcmROYW1lKTtcbiAgICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZCAmJiBuYW1lICE9PSBsb3dlckNhc2VkTmFtZSkge1xuICAgICAgLy8gVW5rbm93biBhdHRyaWJ1dGVzIHNob3VsZCBoYXZlIGxvd2VyY2FzZSBjYXNpbmcgc2luY2UgdGhhdCdzIGhvdyB0aGV5XG4gICAgICAvLyB3aWxsIGJlIGNhc2VkIGFueXdheSB3aXRoIHNlcnZlciByZW5kZXJpbmcuXG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdSZWFjdCBkb2VzIG5vdCByZWNvZ25pemUgdGhlIGAlc2AgcHJvcCBvbiBhIERPTSBlbGVtZW50LiBJZiB5b3UgJyArICdpbnRlbnRpb25hbGx5IHdhbnQgaXQgdG8gYXBwZWFyIGluIHRoZSBET00gYXMgYSBjdXN0b20gJyArICdhdHRyaWJ1dGUsIHNwZWxsIGl0IGFzIGxvd2VyY2FzZSBgJXNgIGluc3RlYWQuICcgKyAnSWYgeW91IGFjY2lkZW50YWxseSBwYXNzZWQgaXQgZnJvbSBhIHBhcmVudCBjb21wb25lbnQsIHJlbW92ZSAnICsgJ2l0IGZyb20gdGhlIERPTSBlbGVtZW50LicsIG5hbWUsIGxvd2VyQ2FzZWROYW1lKTtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgJiYgc2hvdWxkUmVtb3ZlQXR0cmlidXRlV2l0aFdhcm5pbmcobmFtZSwgdmFsdWUsIHByb3BlcnR5SW5mbywgZmFsc2UpKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVjZWl2ZWQgYCVzYCBmb3IgYSBub24tYm9vbGVhbiBhdHRyaWJ1dGUgYCVzYC5cXG5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIHdyaXRlIGl0IHRvIHRoZSBET00sIHBhc3MgYSBzdHJpbmcgaW5zdGVhZDogJyArICclcz1cIiVzXCIgb3IgJXM9e3ZhbHVlLnRvU3RyaW5nKCl9LicsIHZhbHVlLCBuYW1lLCBuYW1lLCB2YWx1ZSwgbmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdSZWNlaXZlZCBgJXNgIGZvciBhIG5vbi1ib29sZWFuIGF0dHJpYnV0ZSBgJXNgLlxcblxcbicgKyAnSWYgeW91IHdhbnQgdG8gd3JpdGUgaXQgdG8gdGhlIERPTSwgcGFzcyBhIHN0cmluZyBpbnN0ZWFkOiAnICsgJyVzPVwiJXNcIiBvciAlcz17dmFsdWUudG9TdHJpbmcoKX0uXFxuXFxuJyArICdJZiB5b3UgdXNlZCB0byBjb25kaXRpb25hbGx5IG9taXQgaXQgd2l0aCAlcz17Y29uZGl0aW9uICYmIHZhbHVlfSwgJyArICdwYXNzICVzPXtjb25kaXRpb24gPyB2YWx1ZSA6IHVuZGVmaW5lZH0gaW5zdGVhZC4nLCB2YWx1ZSwgbmFtZSwgbmFtZSwgdmFsdWUsIG5hbWUsIG5hbWUsIG5hbWUpO1xuICAgICAgfVxuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIE5vdyB0aGF0IHdlJ3ZlIHZhbGlkYXRlZCBjYXNpbmcsIGRvIG5vdCB2YWxpZGF0ZVxuICAgIC8vIGRhdGEgdHlwZXMgZm9yIHJlc2VydmVkIHByb3BzXG4gICAgaWYgKGlzUmVzZXJ2ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIFdhcm4gd2hlbiBhIGtub3duIGF0dHJpYnV0ZSBpcyBhIGJhZCB0eXBlXG4gICAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZVdpdGhXYXJuaW5nKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGZhbHNlKSkge1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBXYXJuIHdoZW4gcGFzc2luZyB0aGUgc3RyaW5ncyAnZmFsc2UnIG9yICd0cnVlJyBpbnRvIGEgYm9vbGVhbiBwcm9wXG4gICAgaWYgKCh2YWx1ZSA9PT0gJ2ZhbHNlJyB8fCB2YWx1ZSA9PT0gJ3RydWUnKSAmJiBwcm9wZXJ0eUluZm8gIT09IG51bGwgJiYgcHJvcGVydHlJbmZvLnR5cGUgPT09IEJPT0xFQU4pIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlY2VpdmVkIHRoZSBzdHJpbmcgYCVzYCBmb3IgdGhlIGJvb2xlYW4gYXR0cmlidXRlIGAlc2AuICcgKyAnJXMgJyArICdEaWQgeW91IG1lYW4gJXM9eyVzfT8nLCB2YWx1ZSwgbmFtZSwgdmFsdWUgPT09ICdmYWxzZScgPyAnVGhlIGJyb3dzZXIgd2lsbCBpbnRlcnByZXQgaXQgYXMgYSB0cnV0aHkgdmFsdWUuJyA6ICdBbHRob3VnaCB0aGlzIHdvcmtzLCBpdCB3aWxsIG5vdCB3b3JrIGFzIGV4cGVjdGVkIGlmIHlvdSBwYXNzIHRoZSBzdHJpbmcgXCJmYWxzZVwiLicsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbn1cblxudmFyIHdhcm5Vbmtub3duUHJvcGVydGllcyA9IGZ1bmN0aW9uICh0eXBlLCBwcm9wcywgY2FuVXNlRXZlbnRTeXN0ZW0pIHtcbiAgdmFyIHVua25vd25Qcm9wcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICB2YXIgaXNWYWxpZCA9IHZhbGlkYXRlUHJvcGVydHkkMSh0eXBlLCBrZXksIHByb3BzW2tleV0sIGNhblVzZUV2ZW50U3lzdGVtKTtcbiAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgIHVua25vd25Qcm9wcy5wdXNoKGtleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHVua25vd25Qcm9wU3RyaW5nID0gdW5rbm93blByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgIHJldHVybiAnYCcgKyBwcm9wICsgJ2AnO1xuICB9KS5qb2luKCcsICcpO1xuICBpZiAodW5rbm93blByb3BzLmxlbmd0aCA9PT0gMSkge1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ0ludmFsaWQgdmFsdWUgZm9yIHByb3AgJXMgb24gPCVzPiB0YWcuIEVpdGhlciByZW1vdmUgaXQgZnJvbSB0aGUgZWxlbWVudCwgJyArICdvciBwYXNzIGEgc3RyaW5nIG9yIG51bWJlciB2YWx1ZSB0byBrZWVwIGl0IGluIHRoZSBET00uICcgKyAnRm9yIGRldGFpbHMsIHNlZSBodHRwczovL2ZiLm1lL3JlYWN0LWF0dHJpYnV0ZS1iZWhhdmlvcicsIHVua25vd25Qcm9wU3RyaW5nLCB0eXBlKTtcbiAgfSBlbHNlIGlmICh1bmtub3duUHJvcHMubGVuZ3RoID4gMSkge1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ0ludmFsaWQgdmFsdWVzIGZvciBwcm9wcyAlcyBvbiA8JXM+IHRhZy4gRWl0aGVyIHJlbW92ZSB0aGVtIGZyb20gdGhlIGVsZW1lbnQsICcgKyAnb3IgcGFzcyBhIHN0cmluZyBvciBudW1iZXIgdmFsdWUgdG8ga2VlcCB0aGVtIGluIHRoZSBET00uICcgKyAnRm9yIGRldGFpbHMsIHNlZSBodHRwczovL2ZiLm1lL3JlYWN0LWF0dHJpYnV0ZS1iZWhhdmlvcicsIHVua25vd25Qcm9wU3RyaW5nLCB0eXBlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0aWVzJDIodHlwZSwgcHJvcHMsIGNhblVzZUV2ZW50U3lzdGVtKSB7XG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudCh0eXBlLCBwcm9wcykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgd2FyblVua25vd25Qcm9wZXJ0aWVzKHR5cGUsIHByb3BzLCBjYW5Vc2VFdmVudFN5c3RlbSk7XG59XG5cbi8vIFRPRE86IGRpcmVjdCBpbXBvcnRzIGxpa2Ugc29tZS1wYWNrYWdlL3NyYy8qIGFyZSBiYWQuIEZpeCBtZS5cbnZhciBkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiA9IGZhbHNlO1xudmFyIGRpZFdhcm5TaGFkeURPTSA9IGZhbHNlO1xuXG52YXIgREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwgPSAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnO1xudmFyIFNVUFBSRVNTX0NPTlRFTlRfRURJVEFCTEVfV0FSTklORyA9ICdzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcnO1xudmFyIFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDEgPSAnc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJztcbnZhciBBVVRPRk9DVVMgPSAnYXV0b0ZvY3VzJztcbnZhciBDSElMRFJFTiA9ICdjaGlsZHJlbic7XG52YXIgU1RZTEUkMSA9ICdzdHlsZSc7XG52YXIgSFRNTCA9ICdfX2h0bWwnO1xuXG52YXIgSFRNTF9OQU1FU1BBQ0UgPSBOYW1lc3BhY2VzLmh0bWw7XG5cblxudmFyIHdhcm5lZFVua25vd25UYWdzID0gdm9pZCAwO1xudmFyIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyA9IHZvaWQgMDtcblxudmFyIHZhbGlkYXRlUHJvcGVydGllc0luRGV2ZWxvcG1lbnQgPSB2b2lkIDA7XG52YXIgd2FybkZvclRleHREaWZmZXJlbmNlID0gdm9pZCAwO1xudmFyIHdhcm5Gb3JQcm9wRGlmZmVyZW5jZSA9IHZvaWQgMDtcbnZhciB3YXJuRm9yRXh0cmFBdHRyaWJ1dGVzID0gdm9pZCAwO1xudmFyIHdhcm5Gb3JJbnZhbGlkRXZlbnRMaXN0ZW5lciA9IHZvaWQgMDtcbnZhciBjYW5EaWZmU3R5bGVGb3JIeWRyYXRpb25XYXJuaW5nID0gdm9pZCAwO1xuXG52YXIgbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlID0gdm9pZCAwO1xudmFyIG5vcm1hbGl6ZUhUTUwgPSB2b2lkIDA7XG5cbntcbiAgd2FybmVkVW5rbm93blRhZ3MgPSB7XG4gICAgLy8gQ2hyb21lIGlzIHRoZSBvbmx5IG1ham9yIGJyb3dzZXIgbm90IHNoaXBwaW5nIDx0aW1lPi4gQnV0IGFzIG9mIEp1bHlcbiAgICAvLyAyMDE3IGl0IGludGVuZHMgdG8gc2hpcCBpdCBkdWUgdG8gd2lkZXNwcmVhZCB1c2FnZS4gV2UgaW50ZW50aW9uYWxseVxuICAgIC8vICpkb24ndCogd2FybiBmb3IgPHRpbWU+IGV2ZW4gaWYgaXQncyB1bnJlY29nbml6ZWQgYnkgQ2hyb21lIGJlY2F1c2VcbiAgICAvLyBpdCBzb29uIHdpbGwgYmUsIGFuZCBtYW55IGFwcHMgaGF2ZSBiZWVuIHVzaW5nIGl0IGFueXdheS5cbiAgICB0aW1lOiB0cnVlLFxuICAgIC8vIFRoZXJlIGFyZSB3b3JraW5nIHBvbHlmaWxscyBmb3IgPGRpYWxvZz4uIExldCBwZW9wbGUgdXNlIGl0LlxuICAgIGRpYWxvZzogdHJ1ZSxcbiAgICAvLyBFbGVjdHJvbiBzaGlwcyBhIGN1c3RvbSA8d2Vidmlldz4gdGFnIHRvIGRpc3BsYXkgZXh0ZXJuYWwgd2ViIGNvbnRlbnQgaW5cbiAgICAvLyBhbiBpc29sYXRlZCBmcmFtZSBhbmQgcHJvY2Vzcy5cbiAgICAvLyBUaGlzIHRhZyBpcyBub3QgcHJlc2VudCBpbiBub24gRWxlY3Ryb24gZW52aXJvbm1lbnRzIHN1Y2ggYXMgSlNEb20gd2hpY2hcbiAgICAvLyBpcyBvZnRlbiB1c2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICAgIC8vIEBzZWUgaHR0cHM6Ly9lbGVjdHJvbmpzLm9yZy9kb2NzL2FwaS93ZWJ2aWV3LXRhZ1xuICAgIHdlYnZpZXc6IHRydWVcbiAgfTtcblxuICB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50ID0gZnVuY3Rpb24gKHR5cGUsIHByb3BzKSB7XG4gICAgdmFsaWRhdGVQcm9wZXJ0aWVzKHR5cGUsIHByb3BzKTtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXMkMSh0eXBlLCBwcm9wcyk7XG4gICAgdmFsaWRhdGVQcm9wZXJ0aWVzJDIodHlwZSwgcHJvcHMsIC8qIGNhblVzZUV2ZW50U3lzdGVtICovdHJ1ZSk7XG4gIH07XG5cbiAgLy8gSUUgMTEgcGFyc2VzICYgbm9ybWFsaXplcyB0aGUgc3R5bGUgYXR0cmlidXRlIGFzIG9wcG9zZWQgdG8gb3RoZXJcbiAgLy8gYnJvd3NlcnMuIEl0IGFkZHMgc3BhY2VzIGFuZCBzb3J0cyB0aGUgcHJvcGVydGllcyBpbiBzb21lXG4gIC8vIG5vbi1hbHBoYWJldGljYWwgb3JkZXIuIEhhbmRsaW5nIHRoYXQgd291bGQgcmVxdWlyZSBzb3J0aW5nIENTU1xuICAvLyBwcm9wZXJ0aWVzIGluIHRoZSBjbGllbnQgJiBzZXJ2ZXIgdmVyc2lvbnMgb3IgYXBwbHlpbmdcbiAgLy8gYGV4cGVjdGVkU3R5bGVgIHRvIGEgdGVtcG9yYXJ5IERPTSBub2RlIHRvIHJlYWQgaXRzIGBzdHlsZWAgYXR0cmlidXRlXG4gIC8vIG5vcm1hbGl6ZWQuIFNpbmNlIGl0IG9ubHkgYWZmZWN0cyBJRSwgd2UncmUgc2tpcHBpbmcgc3R5bGUgd2FybmluZ3NcbiAgLy8gaW4gdGhhdCBicm93c2VyIGNvbXBsZXRlbHkgaW4gZmF2b3Igb2YgZG9pbmcgYWxsIHRoYXQgd29yay5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTE4MDdcbiAgY2FuRGlmZlN0eWxlRm9ySHlkcmF0aW9uV2FybmluZyA9IGNhblVzZURPTSAmJiAhZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuXG4gIC8vIEhUTUwgcGFyc2luZyBub3JtYWxpemVzIENSIGFuZCBDUkxGIHRvIExGLlxuICAvLyBJdCBhbHNvIGNhbiB0dXJuIFxcdTAwMDAgaW50byBcXHVGRkZEIGluc2lkZSBhdHRyaWJ1dGVzLlxuICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvc2luZ2xlLXBhZ2UuaHRtbCNwcmVwcm9jZXNzaW5nLXRoZS1pbnB1dC1zdHJlYW1cbiAgLy8gSWYgd2UgaGF2ZSBhIG1pc21hdGNoLCBpdCBtaWdodCBiZSBjYXVzZWQgYnkgdGhhdC5cbiAgLy8gV2Ugd2lsbCBzdGlsbCBwYXRjaCB1cCBpbiB0aGlzIGNhc2UgYnV0IG5vdCBmaXJlIHRoZSB3YXJuaW5nLlxuICB2YXIgTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYID0gL1xcclxcbj8vZztcbiAgdmFyIE5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCA9IC9cXHUwMDAwfFxcdUZGRkQvZztcblxuICBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobWFya3VwKSB7XG4gICAgdmFyIG1hcmt1cFN0cmluZyA9IHR5cGVvZiBtYXJrdXAgPT09ICdzdHJpbmcnID8gbWFya3VwIDogJycgKyBtYXJrdXA7XG4gICAgcmV0dXJuIG1hcmt1cFN0cmluZy5yZXBsYWNlKE5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCwgJ1xcbicpLnJlcGxhY2UoTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYLCAnJyk7XG4gIH07XG5cbiAgd2FybkZvclRleHREaWZmZXJlbmNlID0gZnVuY3Rpb24gKHNlcnZlclRleHQsIGNsaWVudFRleHQpIHtcbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6ZWRDbGllbnRUZXh0ID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKGNsaWVudFRleHQpO1xuICAgIHZhciBub3JtYWxpemVkU2VydmVyVGV4dCA9IG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShzZXJ2ZXJUZXh0KTtcbiAgICBpZiAobm9ybWFsaXplZFNlcnZlclRleHQgPT09IG5vcm1hbGl6ZWRDbGllbnRUZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdUZXh0IGNvbnRlbnQgZGlkIG5vdCBtYXRjaC4gU2VydmVyOiBcIiVzXCIgQ2xpZW50OiBcIiVzXCInLCBub3JtYWxpemVkU2VydmVyVGV4dCwgbm9ybWFsaXplZENsaWVudFRleHQpO1xuICB9O1xuXG4gIHdhcm5Gb3JQcm9wRGlmZmVyZW5jZSA9IGZ1bmN0aW9uIChwcm9wTmFtZSwgc2VydmVyVmFsdWUsIGNsaWVudFZhbHVlKSB7XG4gICAgaWYgKGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBub3JtYWxpemVkQ2xpZW50VmFsdWUgPSBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUoY2xpZW50VmFsdWUpO1xuICAgIHZhciBub3JtYWxpemVkU2VydmVyVmFsdWUgPSBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUoc2VydmVyVmFsdWUpO1xuICAgIGlmIChub3JtYWxpemVkU2VydmVyVmFsdWUgPT09IG5vcm1hbGl6ZWRDbGllbnRWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiA9IHRydWU7XG4gICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnUHJvcCBgJXNgIGRpZCBub3QgbWF0Y2guIFNlcnZlcjogJXMgQ2xpZW50OiAlcycsIHByb3BOYW1lLCBKU09OLnN0cmluZ2lmeShub3JtYWxpemVkU2VydmVyVmFsdWUpLCBKU09OLnN0cmluZ2lmeShub3JtYWxpemVkQ2xpZW50VmFsdWUpKTtcbiAgfTtcblxuICB3YXJuRm9yRXh0cmFBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgaWYgKGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgICB2YXIgbmFtZXMgPSBbXTtcbiAgICBhdHRyaWJ1dGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBuYW1lcy5wdXNoKG5hbWUpO1xuICAgIH0pO1xuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0V4dHJhIGF0dHJpYnV0ZXMgZnJvbSB0aGUgc2VydmVyOiAlcycsIG5hbWVzKTtcbiAgfTtcblxuICB3YXJuRm9ySW52YWxpZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAocmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAobGlzdGVuZXIgPT09IGZhbHNlKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdFeHBlY3RlZCBgJXNgIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IGBmYWxzZWAuXFxuXFxuJyArICdJZiB5b3UgdXNlZCB0byBjb25kaXRpb25hbGx5IG9taXQgaXQgd2l0aCAlcz17Y29uZGl0aW9uICYmIHZhbHVlfSwgJyArICdwYXNzICVzPXtjb25kaXRpb24gPyB2YWx1ZSA6IHVuZGVmaW5lZH0gaW5zdGVhZC4nLCByZWdpc3RyYXRpb25OYW1lLCByZWdpc3RyYXRpb25OYW1lLCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnRXhwZWN0ZWQgYCVzYCBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCBhIHZhbHVlIG9mIGAlc2AgdHlwZS4nLCByZWdpc3RyYXRpb25OYW1lLCB0eXBlb2YgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcblxuICAvLyBQYXJzZSB0aGUgSFRNTCBhbmQgcmVhZCBpdCBiYWNrIHRvIG5vcm1hbGl6ZSB0aGUgSFRNTCBzdHJpbmcgc28gdGhhdCBpdFxuICAvLyBjYW4gYmUgdXNlZCBmb3IgY29tcGFyaXNvbi5cbiAgbm9ybWFsaXplSFRNTCA9IGZ1bmN0aW9uIChwYXJlbnQsIGh0bWwpIHtcbiAgICAvLyBXZSBjb3VsZCBoYXZlIGNyZWF0ZWQgYSBzZXBhcmF0ZSBkb2N1bWVudCBoZXJlIHRvIGF2b2lkXG4gICAgLy8gcmUtaW5pdGlhbGl6aW5nIGN1c3RvbSBlbGVtZW50cyBpZiB0aGV5IGV4aXN0LiBCdXQgdGhpcyBicmVha3NcbiAgICAvLyBob3cgPG5vc2NyaXB0PiBpcyBiZWluZyBoYW5kbGVkLiBTbyB3ZSB1c2UgdGhlIHNhbWUgZG9jdW1lbnQuXG4gICAgLy8gU2VlIHRoZSBkaXNjdXNzaW9uIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzExMTU3LlxuICAgIHZhciB0ZXN0RWxlbWVudCA9IHBhcmVudC5uYW1lc3BhY2VVUkkgPT09IEhUTUxfTkFNRVNQQUNFID8gcGFyZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChwYXJlbnQudGFnTmFtZSkgOiBwYXJlbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMocGFyZW50Lm5hbWVzcGFjZVVSSSwgcGFyZW50LnRhZ05hbWUpO1xuICAgIHRlc3RFbGVtZW50LmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIHRlc3RFbGVtZW50LmlubmVySFRNTDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlTGlzdGVuaW5nVG8ocm9vdENvbnRhaW5lckVsZW1lbnQsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgdmFyIGlzRG9jdW1lbnRPckZyYWdtZW50ID0gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGUgPT09IERPQ1VNRU5UX05PREUgfHwgcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREU7XG4gIHZhciBkb2MgPSBpc0RvY3VtZW50T3JGcmFnbWVudCA/IHJvb3RDb250YWluZXJFbGVtZW50IDogcm9vdENvbnRhaW5lckVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgbGlzdGVuVG8ocmVnaXN0cmF0aW9uTmFtZSwgZG9jKTtcbn1cblxuZnVuY3Rpb24gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJFbGVtZW50KSB7XG4gIHJldHVybiByb290Q29udGFpbmVyRWxlbWVudC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfTk9ERSA/IHJvb3RDb250YWluZXJFbGVtZW50IDogcm9vdENvbnRhaW5lckVsZW1lbnQub3duZXJEb2N1bWVudDtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIHRyYXBDbGlja09uTm9uSW50ZXJhY3RpdmVFbGVtZW50KG5vZGUpIHtcbiAgLy8gTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb25cbiAgLy8gbm9uLWludGVyYWN0aXZlIGVsZW1lbnRzLCB3aGljaCBtZWFucyBkZWxlZ2F0ZWQgY2xpY2sgbGlzdGVuZXJzIGRvIG5vdFxuICAvLyBmaXJlLiBUaGUgd29ya2Fyb3VuZCBmb3IgdGhpcyBidWcgaW52b2x2ZXMgYXR0YWNoaW5nIGFuIGVtcHR5IGNsaWNrXG4gIC8vIGxpc3RlbmVyIG9uIHRoZSB0YXJnZXQgbm9kZS5cbiAgLy8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTAvMDkvY2xpY2tfZXZlbnRfZGVsLmh0bWxcbiAgLy8gSnVzdCBzZXQgaXQgdXNpbmcgdGhlIG9uY2xpY2sgcHJvcGVydHkgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIG1hbmFnZSBhbnlcbiAgLy8gYm9va2tlZXBpbmcgZm9yIGl0LiBOb3Qgc3VyZSBpZiB3ZSBuZWVkIHRvIGNsZWFyIGl0IHdoZW4gdGhlIGxpc3RlbmVyIGlzXG4gIC8vIHJlbW92ZWQuXG4gIC8vIFRPRE86IE9ubHkgZG8gdGhpcyBmb3IgdGhlIHJlbGV2YW50IFNhZmFyaXMgbWF5YmU/XG4gIG5vZGUub25jbGljayA9IG5vb3A7XG59XG5cbmZ1bmN0aW9uIHNldEluaXRpYWxET01Qcm9wZXJ0aWVzKHRhZywgZG9tRWxlbWVudCwgcm9vdENvbnRhaW5lckVsZW1lbnQsIG5leHRQcm9wcywgaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgZm9yICh2YXIgcHJvcEtleSBpbiBuZXh0UHJvcHMpIHtcbiAgICBpZiAoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBuZXh0UHJvcCA9IG5leHRQcm9wc1twcm9wS2V5XTtcbiAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUkMSkge1xuICAgICAge1xuICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICAvLyBGcmVlemUgdGhlIG5leHQgc3R5bGUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGFzc3VtZSBpdCB3b24ndCBiZVxuICAgICAgICAgIC8vIG11dGF0ZWQuIFdlIGhhdmUgYWxyZWFkeSB3YXJuZWQgZm9yIHRoaXMgaW4gdGhlIHBhc3QuXG4gICAgICAgICAgT2JqZWN0LmZyZWV6ZShuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFJlbGllcyBvbiBgdXBkYXRlU3R5bGVzQnlJRGAgbm90IG11dGF0aW5nIGBzdHlsZVVwZGF0ZXNgLlxuICAgICAgc2V0VmFsdWVGb3JTdHlsZXMoZG9tRWxlbWVudCwgbmV4dFByb3ApO1xuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwpIHtcbiAgICAgIHZhciBuZXh0SHRtbCA9IG5leHRQcm9wID8gbmV4dFByb3BbSFRNTF0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAobmV4dEh0bWwgIT0gbnVsbCkge1xuICAgICAgICBzZXRJbm5lckhUTUwoZG9tRWxlbWVudCwgbmV4dEh0bWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gQ0hJTERSRU4pIHtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEF2b2lkIHNldHRpbmcgaW5pdGlhbCB0ZXh0Q29udGVudCB3aGVuIHRoZSB0ZXh0IGlzIGVtcHR5LiBJbiBJRTExIHNldHRpbmdcbiAgICAgICAgLy8gdGV4dENvbnRlbnQgb24gYSA8dGV4dGFyZWE+IHdpbGwgY2F1c2UgdGhlIHBsYWNlaG9sZGVyIHRvIG5vdFxuICAgICAgICAvLyBzaG93IHdpdGhpbiB0aGUgPHRleHRhcmVhPiB1bnRpbCBpdCBoYXMgYmVlbiBmb2N1c2VkIGFuZCBibHVycmVkIGFnYWluLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzY3MzEjaXNzdWVjb21tZW50LTI1NDg3NDU1M1xuICAgICAgICB2YXIgY2FuU2V0VGV4dENvbnRlbnQgPSB0YWcgIT09ICd0ZXh0YXJlYScgfHwgbmV4dFByb3AgIT09ICcnO1xuICAgICAgICBpZiAoY2FuU2V0VGV4dENvbnRlbnQpIHtcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChkb21FbGVtZW50LCBuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRQcm9wID09PSAnbnVtYmVyJykge1xuICAgICAgICBzZXRUZXh0Q29udGVudChkb21FbGVtZW50LCAnJyArIG5leHRQcm9wKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IFNVUFBSRVNTX0NPTlRFTlRfRURJVEFCTEVfV0FSTklORyB8fCBwcm9wS2V5ID09PSBTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyQxKSB7XG4gICAgICAvLyBOb29wXG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBBVVRPRk9DVVMpIHtcbiAgICAgIC8vIFdlIHBvbHlmaWxsIGl0IHNlcGFyYXRlbHkgb24gdGhlIGNsaWVudCBkdXJpbmcgY29tbWl0LlxuICAgICAgLy8gV2UgY291bGQgaGF2ZSBleGNsdWRlZCBpdCBpbiB0aGUgcHJvcGVydHkgbGlzdCBpbnN0ZWFkIG9mXG4gICAgICAvLyBhZGRpbmcgYSBzcGVjaWFsIGNhc2UgaGVyZSwgYnV0IHRoZW4gaXQgd291bGRuJ3QgYmUgZW1pdHRlZFxuICAgICAgLy8gb24gc2VydmVyIHJlbmRlcmluZyAoYnV0IHdlICpkbyogd2FudCB0byBlbWl0IGl0IGluIFNTUikuXG4gICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgaWYgKG5leHRQcm9wICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHRydWUgJiYgdHlwZW9mIG5leHRQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2FybkZvckludmFsaWRFdmVudExpc3RlbmVyKHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBlbnN1cmVMaXN0ZW5pbmdUbyhyb290Q29udGFpbmVyRWxlbWVudCwgcHJvcEtleSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0UHJvcCAhPSBudWxsKSB7XG4gICAgICBzZXRWYWx1ZUZvclByb3BlcnR5KGRvbUVsZW1lbnQsIHByb3BLZXksIG5leHRQcm9wLCBpc0N1c3RvbUNvbXBvbmVudFRhZyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BlcnRpZXMoZG9tRWxlbWVudCwgdXBkYXRlUGF5bG9hZCwgd2FzQ3VzdG9tQ29tcG9uZW50VGFnLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICAvLyBUT0RPOiBIYW5kbGUgd2FzQ3VzdG9tQ29tcG9uZW50VGFnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdXBkYXRlUGF5bG9hZC5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBwcm9wS2V5ID0gdXBkYXRlUGF5bG9hZFtpXTtcbiAgICB2YXIgcHJvcFZhbHVlID0gdXBkYXRlUGF5bG9hZFtpICsgMV07XG4gICAgaWYgKHByb3BLZXkgPT09IFNUWUxFJDEpIHtcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHByb3BWYWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBEQU5HRVJPVVNMWV9TRVRfSU5ORVJfSFRNTCkge1xuICAgICAgc2V0SW5uZXJIVE1MKGRvbUVsZW1lbnQsIHByb3BWYWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBDSElMRFJFTikge1xuICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgcHJvcFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VmFsdWVGb3JQcm9wZXJ0eShkb21FbGVtZW50LCBwcm9wS2V5LCBwcm9wVmFsdWUsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckVsZW1lbnQsIHBhcmVudE5hbWVzcGFjZSkge1xuICB2YXIgaXNDdXN0b21Db21wb25lbnRUYWcgPSB2b2lkIDA7XG5cbiAgLy8gV2UgY3JlYXRlIHRhZ3MgaW4gdGhlIG5hbWVzcGFjZSBvZiB0aGVpciBwYXJlbnQgY29udGFpbmVyLCBleGNlcHQgSFRNTFxuICAvLyB0YWdzIGdldCBubyBuYW1lc3BhY2UuXG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJFbGVtZW50KTtcbiAgdmFyIGRvbUVsZW1lbnQgPSB2b2lkIDA7XG4gIHZhciBuYW1lc3BhY2VVUkkgPSBwYXJlbnROYW1lc3BhY2U7XG4gIGlmIChuYW1lc3BhY2VVUkkgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgbmFtZXNwYWNlVVJJID0gZ2V0SW50cmluc2ljTmFtZXNwYWNlKHR5cGUpO1xuICB9XG4gIGlmIChuYW1lc3BhY2VVUkkgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAge1xuICAgICAgaXNDdXN0b21Db21wb25lbnRUYWcgPSBpc0N1c3RvbUNvbXBvbmVudCh0eXBlLCBwcm9wcyk7XG4gICAgICAvLyBTaG91bGQgdGhpcyBjaGVjayBiZSBnYXRlZCBieSBwYXJlbnQgbmFtZXNwYWNlPyBOb3Qgc3VyZSB3ZSB3YW50IHRvXG4gICAgICAvLyBhbGxvdyA8U1ZHPiBvciA8bUFUSD4uXG4gICAgICAhKGlzQ3VzdG9tQ29tcG9uZW50VGFnIHx8IHR5cGUgPT09IHR5cGUudG9Mb3dlckNhc2UoKSkgPyB3YXJuaW5nJDEoZmFsc2UsICc8JXMgLz4gaXMgdXNpbmcgaW5jb3JyZWN0IGNhc2luZy4gJyArICdVc2UgUGFzY2FsQ2FzZSBmb3IgUmVhY3QgY29tcG9uZW50cywgJyArICdvciBsb3dlcmNhc2UgZm9yIEhUTUwgZWxlbWVudHMuJywgdHlwZSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdzY3JpcHQnKSB7XG4gICAgICAvLyBDcmVhdGUgdGhlIHNjcmlwdCB2aWEgLmlubmVySFRNTCBzbyBpdHMgXCJwYXJzZXItaW5zZXJ0ZWRcIiBmbGFnIGlzXG4gICAgICAvLyBzZXQgdG8gdHJ1ZSBhbmQgaXQgZG9lcyBub3QgZXhlY3V0ZVxuICAgICAgdmFyIGRpdiA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBkaXYuaW5uZXJIVE1MID0gJzxzY3JpcHQ+PCcgKyAnL3NjcmlwdD4nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAvLyBUaGlzIGlzIGd1YXJhbnRlZWQgdG8geWllbGQgYSBzY3JpcHQgZWxlbWVudC5cbiAgICAgIHZhciBmaXJzdENoaWxkID0gZGl2LmZpcnN0Q2hpbGQ7XG4gICAgICBkb21FbGVtZW50ID0gZGl2LnJlbW92ZUNoaWxkKGZpcnN0Q2hpbGQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzLmlzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gJEZsb3dJc3N1ZSBgY3JlYXRlRWxlbWVudGAgc2hvdWxkIGJlIHVwZGF0ZWQgZm9yIFdlYiBDb21wb25lbnRzXG4gICAgICBkb21FbGVtZW50ID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUsIHsgaXM6IHByb3BzLmlzIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXBhcmF0ZSBlbHNlIGJyYW5jaCBpbnN0ZWFkIG9mIHVzaW5nIGBwcm9wcy5pcyB8fCB1bmRlZmluZWRgIGFib3ZlIGJlY2F1c2Ugb2YgYSBGaXJlZm94IGJ1Zy5cbiAgICAgIC8vIFNlZSBkaXNjdXNzaW9uIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzY4OTZcbiAgICAgIC8vIGFuZCBkaXNjdXNzaW9uIGluIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyNzYyNDBcbiAgICAgIGRvbUVsZW1lbnQgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgICAvLyBOb3JtYWxseSBhdHRyaWJ1dGVzIGFyZSBhc3NpZ25lZCBpbiBgc2V0SW5pdGlhbERPTVByb3BlcnRpZXNgLCBob3dldmVyIHRoZSBgbXVsdGlwbGVgIGFuZCBgc2l6ZWBcbiAgICAgIC8vIGF0dHJpYnV0ZXMgb24gYHNlbGVjdGBzIG5lZWRzIHRvIGJlIGFkZGVkIGJlZm9yZSBgb3B0aW9uYHMgYXJlIGluc2VydGVkLlxuICAgICAgLy8gVGhpcyBwcmV2ZW50czpcbiAgICAgIC8vIC0gYSBidWcgd2hlcmUgdGhlIGBzZWxlY3RgIGRvZXMgbm90IHNjcm9sbCB0byB0aGUgY29ycmVjdCBvcHRpb24gYmVjYXVzZSBzaW5ndWxhclxuICAgICAgLy8gIGBzZWxlY3RgIGVsZW1lbnRzIGF1dG9tYXRpY2FsbHkgcGljayB0aGUgZmlyc3QgaXRlbSAjMTMyMjJcbiAgICAgIC8vIC0gYSBidWcgd2hlcmUgdGhlIGBzZWxlY3RgIHNldCB0aGUgZmlyc3QgaXRlbSBhcyBzZWxlY3RlZCBkZXNwaXRlIHRoZSBgc2l6ZWAgYXR0cmlidXRlICMxNDIzOVxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTMyMjJcbiAgICAgIC8vIGFuZCBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MjM5XG4gICAgICBpZiAodHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBkb21FbGVtZW50O1xuICAgICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgICBub2RlLm11bHRpcGxlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5zaXplKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBhIHNpemUgZ3JlYXRlciB0aGFuIDEgY2F1c2VzIGEgc2VsZWN0IHRvIGJlaGF2ZSBsaWtlIGBtdWx0aXBsZT10cnVlYCwgd2hlcmVcbiAgICAgICAgICAvLyBpdCBpcyBwb3NzaWJsZSB0aGF0IG5vIG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFRoaXMgaXMgb25seSBuZWNlc3Nhcnkgd2hlbiBhIHNlbGVjdCBpbiBcInNpbmdsZSBzZWxlY3Rpb24gbW9kZVwiLlxuICAgICAgICAgIG5vZGUuc2l6ZSA9IHByb3BzLnNpemU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZG9tRWxlbWVudCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgdHlwZSk7XG4gIH1cblxuICB7XG4gICAgaWYgKG5hbWVzcGFjZVVSSSA9PT0gSFRNTF9OQU1FU1BBQ0UpIHtcbiAgICAgIGlmICghaXNDdXN0b21Db21wb25lbnRUYWcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvbUVsZW1lbnQpID09PSAnW29iamVjdCBIVE1MVW5rbm93bkVsZW1lbnRdJyAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHdhcm5lZFVua25vd25UYWdzLCB0eXBlKSkge1xuICAgICAgICB3YXJuZWRVbmtub3duVGFnc1t0eXBlXSA9IHRydWU7XG4gICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1RoZSB0YWcgPCVzPiBpcyB1bnJlY29nbml6ZWQgaW4gdGhpcyBicm93c2VyLiAnICsgJ0lmIHlvdSBtZWFudCB0byByZW5kZXIgYSBSZWFjdCBjb21wb25lbnQsIHN0YXJ0IGl0cyBuYW1lIHdpdGggJyArICdhbiB1cHBlcmNhc2UgbGV0dGVyLicsIHR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkb21FbGVtZW50O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSh0ZXh0LCByb290Q29udGFpbmVyRWxlbWVudCkge1xuICByZXR1cm4gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJFbGVtZW50KS5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTtcbn1cblxuZnVuY3Rpb24gc2V0SW5pdGlhbFByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCByYXdQcm9wcywgcm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgdmFyIGlzQ3VzdG9tQ29tcG9uZW50VGFnID0gaXNDdXN0b21Db21wb25lbnQodGFnLCByYXdQcm9wcyk7XG4gIHtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50KHRhZywgcmF3UHJvcHMpO1xuICAgIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZyAmJiAhZGlkV2FyblNoYWR5RE9NICYmIGRvbUVsZW1lbnQuc2hhZHlSb290KSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICclcyBpcyB1c2luZyBzaGFkeSBET00uIFVzaW5nIHNoYWR5IERPTSB3aXRoIFJlYWN0IGNhbiAnICsgJ2NhdXNlIHRoaW5ncyB0byBicmVhayBzdWJ0bHkuJywgZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lSW5EZXZPck51bGwoKSB8fCAnQSBjb21wb25lbnQnKTtcbiAgICAgIGRpZFdhcm5TaGFkeURPTSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gVE9ETzogTWFrZSBzdXJlIHRoYXQgd2UgY2hlY2sgaXNNb3VudGVkIGJlZm9yZSBmaXJpbmcgYW55IG9mIHRoZXNlIGV2ZW50cy5cbiAgdmFyIHByb3BzID0gdm9pZCAwO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX0xPQUQsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICBjYXNlICdhdWRpbyc6XG4gICAgICAvLyBDcmVhdGUgbGlzdGVuZXIgZm9yIGVhY2ggbWVkaWEgZXZlbnRcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVkaWFFdmVudFR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyYXBCdWJibGVkRXZlbnQobWVkaWFFdmVudFR5cGVzW2ldLCBkb21FbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzb3VyY2UnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfRVJST1IsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2ltZyc6XG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfRVJST1IsIGRvbUVsZW1lbnQpO1xuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfTE9BRCwgZG9tRWxlbWVudCk7XG4gICAgICBwcm9wcyA9IHJhd1Byb3BzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZm9ybSc6XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KFRPUF9SRVNFVCwgZG9tRWxlbWVudCk7XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KFRPUF9TVUJNSVQsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2RldGFpbHMnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfVE9HR0xFLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpbml0V3JhcHBlclN0YXRlKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHByb3BzID0gZ2V0SG9zdFByb3BzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX0lOVkFMSUQsIGRvbUVsZW1lbnQpO1xuICAgICAgLy8gRm9yIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3ZSBhbHdheXMgbmVlZCB0byBlbnN1cmUgd2UncmUgbGlzdGVuaW5nXG4gICAgICAvLyB0byBvbkNoYW5nZS4gRXZlbiBpZiB0aGVyZSBpcyBubyBsaXN0ZW5lci5cbiAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCAnb25DaGFuZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICB2YWxpZGF0ZVByb3BzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHByb3BzID0gZ2V0SG9zdFByb3BzJDEoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUkMShkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBwcm9wcyA9IGdldEhvc3RQcm9wcyQyKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX0lOVkFMSUQsIGRvbUVsZW1lbnQpO1xuICAgICAgLy8gRm9yIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3ZSBhbHdheXMgbmVlZCB0byBlbnN1cmUgd2UncmUgbGlzdGVuaW5nXG4gICAgICAvLyB0byBvbkNoYW5nZS4gRXZlbiBpZiB0aGVyZSBpcyBubyBsaXN0ZW5lci5cbiAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCAnb25DaGFuZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUkMihkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBwcm9wcyA9IGdldEhvc3RQcm9wcyQzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX0lOVkFMSUQsIGRvbUVsZW1lbnQpO1xuICAgICAgLy8gRm9yIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3ZSBhbHdheXMgbmVlZCB0byBlbnN1cmUgd2UncmUgbGlzdGVuaW5nXG4gICAgICAvLyB0byBvbkNoYW5nZS4gRXZlbiBpZiB0aGVyZSBpcyBubyBsaXN0ZW5lci5cbiAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCAnb25DaGFuZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwcm9wcyA9IHJhd1Byb3BzO1xuICB9XG5cbiAgYXNzZXJ0VmFsaWRQcm9wcyh0YWcsIHByb3BzKTtcblxuICBzZXRJbml0aWFsRE9NUHJvcGVydGllcyh0YWcsIGRvbUVsZW1lbnQsIHJvb3RDb250YWluZXJFbGVtZW50LCBwcm9wcywgaXNDdXN0b21Db21wb25lbnRUYWcpO1xuXG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgLy8gVE9ETzogTWFrZSBzdXJlIHdlIGNoZWNrIGlmIHRoaXMgaXMgc3RpbGwgdW5tb3VudGVkIG9yIGRvIGFueSBjbGVhblxuICAgICAgLy8gdXAgbmVjZXNzYXJ5IHNpbmNlIHdlIG5ldmVyIHN0b3AgdHJhY2tpbmcgYW55bW9yZS5cbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcG9zdE1vdW50V3JhcHBlcihkb21FbGVtZW50LCByYXdQcm9wcywgZmFsc2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgLy8gVE9ETzogTWFrZSBzdXJlIHdlIGNoZWNrIGlmIHRoaXMgaXMgc3RpbGwgdW5tb3VudGVkIG9yIGRvIGFueSBjbGVhblxuICAgICAgLy8gdXAgbmVjZXNzYXJ5IHNpbmNlIHdlIG5ldmVyIHN0b3AgdHJhY2tpbmcgYW55bW9yZS5cbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcG9zdE1vdW50V3JhcHBlciQzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICBwb3N0TW91bnRXcmFwcGVyJDEoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIHBvc3RNb3VudFdyYXBwZXIkMihkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgY2FzdCBtYXkgbm90IGJlIHNvdW5kIGZvciBTVkcsIE1hdGhNTCBvciBjdXN0b20gZWxlbWVudHMuXG4gICAgICAgIHRyYXBDbGlja09uTm9uSW50ZXJhY3RpdmVFbGVtZW50KGRvbUVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuLy8gQ2FsY3VsYXRlIHRoZSBkaWZmIGJldHdlZW4gdGhlIHR3byBvYmplY3RzLlxuZnVuY3Rpb24gZGlmZlByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBsYXN0UmF3UHJvcHMsIG5leHRSYXdQcm9wcywgcm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAge1xuICAgIHZhbGlkYXRlUHJvcGVydGllc0luRGV2ZWxvcG1lbnQodGFnLCBuZXh0UmF3UHJvcHMpO1xuICB9XG5cbiAgdmFyIHVwZGF0ZVBheWxvYWQgPSBudWxsO1xuXG4gIHZhciBsYXN0UHJvcHMgPSB2b2lkIDA7XG4gIHZhciBuZXh0UHJvcHMgPSB2b2lkIDA7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgbGFzdFByb3BzID0gZ2V0SG9zdFByb3BzKGRvbUVsZW1lbnQsIGxhc3RSYXdQcm9wcyk7XG4gICAgICBuZXh0UHJvcHMgPSBnZXRIb3N0UHJvcHMoZG9tRWxlbWVudCwgbmV4dFJhd1Byb3BzKTtcbiAgICAgIHVwZGF0ZVBheWxvYWQgPSBbXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICBsYXN0UHJvcHMgPSBnZXRIb3N0UHJvcHMkMShkb21FbGVtZW50LCBsYXN0UmF3UHJvcHMpO1xuICAgICAgbmV4dFByb3BzID0gZ2V0SG9zdFByb3BzJDEoZG9tRWxlbWVudCwgbmV4dFJhd1Byb3BzKTtcbiAgICAgIHVwZGF0ZVBheWxvYWQgPSBbXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBsYXN0UHJvcHMgPSBnZXRIb3N0UHJvcHMkMihkb21FbGVtZW50LCBsYXN0UmF3UHJvcHMpO1xuICAgICAgbmV4dFByb3BzID0gZ2V0SG9zdFByb3BzJDIoZG9tRWxlbWVudCwgbmV4dFJhd1Byb3BzKTtcbiAgICAgIHVwZGF0ZVBheWxvYWQgPSBbXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIGxhc3RQcm9wcyA9IGdldEhvc3RQcm9wcyQzKGRvbUVsZW1lbnQsIGxhc3RSYXdQcm9wcyk7XG4gICAgICBuZXh0UHJvcHMgPSBnZXRIb3N0UHJvcHMkMyhkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGxhc3RQcm9wcyA9IGxhc3RSYXdQcm9wcztcbiAgICAgIG5leHRQcm9wcyA9IG5leHRSYXdQcm9wcztcbiAgICAgIGlmICh0eXBlb2YgbGFzdFByb3BzLm9uQ2xpY2sgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG5leHRQcm9wcy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgY2FzdCBtYXkgbm90IGJlIHNvdW5kIGZvciBTVkcsIE1hdGhNTCBvciBjdXN0b20gZWxlbWVudHMuXG4gICAgICAgIHRyYXBDbGlja09uTm9uSW50ZXJhY3RpdmVFbGVtZW50KGRvbUVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cblxuICBhc3NlcnRWYWxpZFByb3BzKHRhZywgbmV4dFByb3BzKTtcblxuICB2YXIgcHJvcEtleSA9IHZvaWQgMDtcbiAgdmFyIHN0eWxlTmFtZSA9IHZvaWQgMDtcbiAgdmFyIHN0eWxlVXBkYXRlcyA9IG51bGw7XG4gIGZvciAocHJvcEtleSBpbiBsYXN0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8ICFsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbGFzdFByb3BzW3Byb3BLZXldID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUkMSkge1xuICAgICAgdmFyIGxhc3RTdHlsZSA9IGxhc3RQcm9wc1twcm9wS2V5XTtcbiAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RTdHlsZSkge1xuICAgICAgICBpZiAobGFzdFN0eWxlLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgICBpZiAoIXN0eWxlVXBkYXRlcykge1xuICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IERBTkdFUk9VU0xZX1NFVF9JTk5FUl9IVE1MIHx8IHByb3BLZXkgPT09IENISUxEUkVOKSB7XG4gICAgICAvLyBOb29wLiBUaGlzIGlzIGhhbmRsZWQgYnkgdGhlIGNsZWFyIHRleHQgbWVjaGFuaXNtLlxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gU1VQUFJFU1NfQ09OVEVOVF9FRElUQUJMRV9XQVJOSU5HIHx8IHByb3BLZXkgPT09IFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDEpIHtcbiAgICAgIC8vIE5vb3BcbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IEFVVE9GT0NVUykge1xuICAgICAgLy8gTm9vcC4gSXQgZG9lc24ndCB3b3JrIG9uIHVwZGF0ZXMgYW55d2F5LlxuICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2UuIElmIGFueSBsaXN0ZW5lciB1cGRhdGVzIHdlIG5lZWQgdG8gZW5zdXJlXG4gICAgICAvLyB0aGF0IHRoZSBcImN1cnJlbnRcIiBmaWJlciBwb2ludGVyIGdldHMgdXBkYXRlZCBzbyB3ZSBuZWVkIGEgY29tbWl0XG4gICAgICAvLyB0byB1cGRhdGUgdGhpcyBlbGVtZW50LlxuICAgICAgaWYgKCF1cGRhdGVQYXlsb2FkKSB7XG4gICAgICAgIHVwZGF0ZVBheWxvYWQgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRm9yIGFsbCBvdGhlciBkZWxldGVkIHByb3BlcnRpZXMgd2UgYWRkIGl0IHRvIHRoZSBxdWV1ZS4gV2UgdXNlXG4gICAgICAvLyB0aGUgd2hpdGVsaXN0IGluIHRoZSBjb21taXQgcGhhc2UgaW5zdGVhZC5cbiAgICAgICh1cGRhdGVQYXlsb2FkID0gdXBkYXRlUGF5bG9hZCB8fCBbXSkucHVzaChwcm9wS2V5LCBudWxsKTtcbiAgICB9XG4gIH1cbiAgZm9yIChwcm9wS2V5IGluIG5leHRQcm9wcykge1xuICAgIHZhciBuZXh0UHJvcCA9IG5leHRQcm9wc1twcm9wS2V5XTtcbiAgICB2YXIgbGFzdFByb3AgPSBsYXN0UHJvcHMgIT0gbnVsbCA/IGxhc3RQcm9wc1twcm9wS2V5XSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCBuZXh0UHJvcCA9PT0gbGFzdFByb3AgfHwgbmV4dFByb3AgPT0gbnVsbCAmJiBsYXN0UHJvcCA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHByb3BLZXkgPT09IFNUWUxFJDEpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKG5leHRQcm9wKSB7XG4gICAgICAgICAgLy8gRnJlZXplIHRoZSBuZXh0IHN0eWxlIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBhc3N1bWUgaXQgd29uJ3QgYmVcbiAgICAgICAgICAvLyBtdXRhdGVkLiBXZSBoYXZlIGFscmVhZHkgd2FybmVkIGZvciB0aGlzIGluIHRoZSBwYXN0LlxuICAgICAgICAgIE9iamVjdC5mcmVlemUobmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGFzdFByb3ApIHtcbiAgICAgICAgLy8gVW5zZXQgc3R5bGVzIG9uIGBsYXN0UHJvcGAgYnV0IG5vdCBvbiBgbmV4dFByb3BgLlxuICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0UHJvcCkge1xuICAgICAgICAgIGlmIChsYXN0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpICYmICghbmV4dFByb3AgfHwgIW5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpKSB7XG4gICAgICAgICAgICBpZiAoIXN0eWxlVXBkYXRlcykge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSBzdHlsZXMgdGhhdCBjaGFuZ2VkIHNpbmNlIGBsYXN0UHJvcGAuXG4gICAgICAgIGZvciAoc3R5bGVOYW1lIGluIG5leHRQcm9wKSB7XG4gICAgICAgICAgaWYgKG5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiYgbGFzdFByb3Bbc3R5bGVOYW1lXSAhPT0gbmV4dFByb3Bbc3R5bGVOYW1lXSkge1xuICAgICAgICAgICAgaWYgKCFzdHlsZVVwZGF0ZXMpIHtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9IG5leHRQcm9wW3N0eWxlTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZWxpZXMgb24gYHVwZGF0ZVN0eWxlc0J5SURgIG5vdCBtdXRhdGluZyBgc3R5bGVVcGRhdGVzYC5cbiAgICAgICAgaWYgKCFzdHlsZVVwZGF0ZXMpIHtcbiAgICAgICAgICBpZiAoIXVwZGF0ZVBheWxvYWQpIHtcbiAgICAgICAgICAgIHVwZGF0ZVBheWxvYWQgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlUGF5bG9hZC5wdXNoKHByb3BLZXksIHN0eWxlVXBkYXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgc3R5bGVVcGRhdGVzID0gbmV4dFByb3A7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBEQU5HRVJPVVNMWV9TRVRfSU5ORVJfSFRNTCkge1xuICAgICAgdmFyIG5leHRIdG1sID0gbmV4dFByb3AgPyBuZXh0UHJvcFtIVE1MXSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBsYXN0SHRtbCA9IGxhc3RQcm9wID8gbGFzdFByb3BbSFRNTF0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAobmV4dEh0bWwgIT0gbnVsbCkge1xuICAgICAgICBpZiAobGFzdEh0bWwgIT09IG5leHRIdG1sKSB7XG4gICAgICAgICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKHByb3BLZXksICcnICsgbmV4dEh0bWwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPOiBJdCBtaWdodCBiZSB0b28gbGF0ZSB0byBjbGVhciB0aGlzIGlmIHdlIGhhdmUgY2hpbGRyZW5cbiAgICAgICAgLy8gaW5zZXJ0ZWQgYWxyZWFkeS5cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IENISUxEUkVOKSB7XG4gICAgICBpZiAobGFzdFByb3AgIT09IG5leHRQcm9wICYmICh0eXBlb2YgbmV4dFByb3AgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuZXh0UHJvcCA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgICh1cGRhdGVQYXlsb2FkID0gdXBkYXRlUGF5bG9hZCB8fCBbXSkucHVzaChwcm9wS2V5LCAnJyArIG5leHRQcm9wKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IFNVUFBSRVNTX0NPTlRFTlRfRURJVEFCTEVfV0FSTklORyB8fCBwcm9wS2V5ID09PSBTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyQxKSB7XG4gICAgICAvLyBOb29wXG4gICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgaWYgKG5leHRQcm9wICE9IG51bGwpIHtcbiAgICAgICAgLy8gV2UgZWFnZXJseSBsaXN0ZW4gdG8gdGhpcyBldmVuIHRob3VnaCB3ZSBoYXZlbid0IGNvbW1pdHRlZCB5ZXQuXG4gICAgICAgIGlmICh0cnVlICYmIHR5cGVvZiBuZXh0UHJvcCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHdhcm5Gb3JJbnZhbGlkRXZlbnRMaXN0ZW5lcihwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgZW5zdXJlTGlzdGVuaW5nVG8ocm9vdENvbnRhaW5lckVsZW1lbnQsIHByb3BLZXkpO1xuICAgICAgfVxuICAgICAgaWYgKCF1cGRhdGVQYXlsb2FkICYmIGxhc3RQcm9wICE9PSBuZXh0UHJvcCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgc3BlY2lhbCBjYXNlLiBJZiBhbnkgbGlzdGVuZXIgdXBkYXRlcyB3ZSBuZWVkIHRvIGVuc3VyZVxuICAgICAgICAvLyB0aGF0IHRoZSBcImN1cnJlbnRcIiBwcm9wcyBwb2ludGVyIGdldHMgdXBkYXRlZCBzbyB3ZSBuZWVkIGEgY29tbWl0XG4gICAgICAgIC8vIHRvIHVwZGF0ZSB0aGlzIGVsZW1lbnQuXG4gICAgICAgIHVwZGF0ZVBheWxvYWQgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRm9yIGFueSBvdGhlciBwcm9wZXJ0eSB3ZSBhbHdheXMgYWRkIGl0IHRvIHRoZSBxdWV1ZSBhbmQgdGhlbiB3ZVxuICAgICAgLy8gZmlsdGVyIGl0IG91dCB1c2luZyB0aGUgd2hpdGVsaXN0IGR1cmluZyB0aGUgY29tbWl0LlxuICAgICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKHByb3BLZXksIG5leHRQcm9wKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN0eWxlVXBkYXRlcykge1xuICAgIHtcbiAgICAgIHZhbGlkYXRlU2hvcnRoYW5kUHJvcGVydHlDb2xsaXNpb25JbkRldihzdHlsZVVwZGF0ZXMsIG5leHRQcm9wc1tTVFlMRSQxXSk7XG4gICAgfVxuICAgICh1cGRhdGVQYXlsb2FkID0gdXBkYXRlUGF5bG9hZCB8fCBbXSkucHVzaChTVFlMRSQxLCBzdHlsZVVwZGF0ZXMpO1xuICB9XG4gIHJldHVybiB1cGRhdGVQYXlsb2FkO1xufVxuXG4vLyBBcHBseSB0aGUgZGlmZi5cbmZ1bmN0aW9uIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgdXBkYXRlUGF5bG9hZCwgdGFnLCBsYXN0UmF3UHJvcHMsIG5leHRSYXdQcm9wcykge1xuICAvLyBVcGRhdGUgY2hlY2tlZCAqYmVmb3JlKiBuYW1lLlxuICAvLyBJbiB0aGUgbWlkZGxlIG9mIGFuIHVwZGF0ZSwgaXQgaXMgcG9zc2libGUgdG8gaGF2ZSBtdWx0aXBsZSBjaGVja2VkLlxuICAvLyBXaGVuIGEgY2hlY2tlZCByYWRpbyB0cmllcyB0byBjaGFuZ2UgbmFtZSwgYnJvd3NlciBtYWtlcyBhbm90aGVyIHJhZGlvJ3MgY2hlY2tlZCBmYWxzZS5cbiAgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiBuZXh0UmF3UHJvcHMudHlwZSA9PT0gJ3JhZGlvJyAmJiBuZXh0UmF3UHJvcHMubmFtZSAhPSBudWxsKSB7XG4gICAgdXBkYXRlQ2hlY2tlZChkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICB9XG5cbiAgdmFyIHdhc0N1c3RvbUNvbXBvbmVudFRhZyA9IGlzQ3VzdG9tQ29tcG9uZW50KHRhZywgbGFzdFJhd1Byb3BzKTtcbiAgdmFyIGlzQ3VzdG9tQ29tcG9uZW50VGFnID0gaXNDdXN0b21Db21wb25lbnQodGFnLCBuZXh0UmF3UHJvcHMpO1xuICAvLyBBcHBseSB0aGUgZGlmZi5cbiAgdXBkYXRlRE9NUHJvcGVydGllcyhkb21FbGVtZW50LCB1cGRhdGVQYXlsb2FkLCB3YXNDdXN0b21Db21wb25lbnRUYWcsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKTtcblxuICAvLyBUT0RPOiBFbnN1cmUgdGhhdCBhbiB1cGRhdGUgZ2V0cyBzY2hlZHVsZWQgaWYgYW55IG9mIHRoZSBzcGVjaWFsIHByb3BzXG4gIC8vIGNoYW5nZWQuXG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgLy8gVXBkYXRlIHRoZSB3cmFwcGVyIGFyb3VuZCBpbnB1dHMgKmFmdGVyKiB1cGRhdGluZyBwcm9wcy4gVGhpcyBoYXMgdG9cbiAgICAgIC8vIGhhcHBlbiBhZnRlciBgdXBkYXRlRE9NUHJvcGVydGllc2AuIE90aGVyd2lzZSBIVE1MNSBpbnB1dCB2YWxpZGF0aW9uc1xuICAgICAgLy8gcmFpc2Ugd2FybmluZ3MgYW5kIHByZXZlbnQgdGhlIG5ldyB2YWx1ZSBmcm9tIGJlaW5nIGFzc2lnbmVkLlxuICAgICAgdXBkYXRlV3JhcHBlcihkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgdXBkYXRlV3JhcHBlciQxKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgLy8gPHNlbGVjdD4gdmFsdWUgdXBkYXRlIG5lZWRzIHRvIG9jY3VyIGFmdGVyIDxvcHRpb24+IGNoaWxkcmVuXG4gICAgICAvLyByZWNvbmNpbGlhdGlvblxuICAgICAgcG9zdFVwZGF0ZVdyYXBwZXIoZG9tRWxlbWVudCwgbmV4dFJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBvc3NpYmxlU3RhbmRhcmROYW1lKHByb3BOYW1lKSB7XG4gIHtcbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBwcm9wTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICghcG9zc2libGVTdGFuZGFyZE5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBwb3NzaWJsZVN0YW5kYXJkTmFtZXNbbG93ZXJDYXNlZE5hbWVdIHx8IG51bGw7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGRpZmZIeWRyYXRlZFByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCByYXdQcm9wcywgcGFyZW50TmFtZXNwYWNlLCByb290Q29udGFpbmVyRWxlbWVudCkge1xuICB2YXIgaXNDdXN0b21Db21wb25lbnRUYWcgPSB2b2lkIDA7XG4gIHZhciBleHRyYUF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xuXG4gIHtcbiAgICBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgPSByYXdQcm9wc1tTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyQxXSA9PT0gdHJ1ZTtcbiAgICBpc0N1c3RvbUNvbXBvbmVudFRhZyA9IGlzQ3VzdG9tQ29tcG9uZW50KHRhZywgcmF3UHJvcHMpO1xuICAgIHZhbGlkYXRlUHJvcGVydGllc0luRGV2ZWxvcG1lbnQodGFnLCByYXdQcm9wcyk7XG4gICAgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnICYmICFkaWRXYXJuU2hhZHlET00gJiYgZG9tRWxlbWVudC5zaGFkeVJvb3QpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJyVzIGlzIHVzaW5nIHNoYWR5IERPTS4gVXNpbmcgc2hhZHkgRE9NIHdpdGggUmVhY3QgY2FuICcgKyAnY2F1c2UgdGhpbmdzIHRvIGJyZWFrIHN1YnRseS4nLCBnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCgpIHx8ICdBIGNvbXBvbmVudCcpO1xuICAgICAgZGlkV2FyblNoYWR5RE9NID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPOiBNYWtlIHN1cmUgdGhhdCB3ZSBjaGVjayBpc01vdW50ZWQgYmVmb3JlIGZpcmluZyBhbnkgb2YgdGhlc2UgZXZlbnRzLlxuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX0xPQUQsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndmlkZW8nOlxuICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgIC8vIENyZWF0ZSBsaXN0ZW5lciBmb3IgZWFjaCBtZWRpYSBldmVudFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWRpYUV2ZW50VHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdHJhcEJ1YmJsZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbaV0sIGRvbUVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc291cmNlJzpcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX0VSUk9SLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2ltZyc6XG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfRVJST1IsIGRvbUVsZW1lbnQpO1xuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfTE9BRCwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmb3JtJzpcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX1JFU0VULCBkb21FbGVtZW50KTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX1NVQk1JVCwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdkZXRhaWxzJzpcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX1RPR0dMRSwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpbml0V3JhcHBlclN0YXRlKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX0lOVkFMSUQsIGRvbUVsZW1lbnQpO1xuICAgICAgLy8gRm9yIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3ZSBhbHdheXMgbmVlZCB0byBlbnN1cmUgd2UncmUgbGlzdGVuaW5nXG4gICAgICAvLyB0byBvbkNoYW5nZS4gRXZlbiBpZiB0aGVyZSBpcyBubyBsaXN0ZW5lci5cbiAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCAnb25DaGFuZ2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICB2YWxpZGF0ZVByb3BzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBpbml0V3JhcHBlclN0YXRlJDEoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfSU5WQUxJRCwgZG9tRWxlbWVudCk7XG4gICAgICAvLyBGb3IgY29udHJvbGxlZCBjb21wb25lbnRzIHdlIGFsd2F5cyBuZWVkIHRvIGVuc3VyZSB3ZSdyZSBsaXN0ZW5pbmdcbiAgICAgIC8vIHRvIG9uQ2hhbmdlLiBFdmVuIGlmIHRoZXJlIGlzIG5vIGxpc3RlbmVyLlxuICAgICAgZW5zdXJlTGlzdGVuaW5nVG8ocm9vdENvbnRhaW5lckVsZW1lbnQsICdvbkNoYW5nZScpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgaW5pdFdyYXBwZXJTdGF0ZSQyKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX0lOVkFMSUQsIGRvbUVsZW1lbnQpO1xuICAgICAgLy8gRm9yIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3ZSBhbHdheXMgbmVlZCB0byBlbnN1cmUgd2UncmUgbGlzdGVuaW5nXG4gICAgICAvLyB0byBvbkNoYW5nZS4gRXZlbiBpZiB0aGVyZSBpcyBubyBsaXN0ZW5lci5cbiAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCAnb25DaGFuZ2UnKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgYXNzZXJ0VmFsaWRQcm9wcyh0YWcsIHJhd1Byb3BzKTtcblxuICB7XG4gICAgZXh0cmFBdHRyaWJ1dGVOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IGRvbUVsZW1lbnQuYXR0cmlidXRlcztcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXR0cmlidXRlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBuYW1lID0gYXR0cmlidXRlc1tfaV0ubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgIC8vIEJ1aWx0LWluIFNTUiBhdHRyaWJ1dGUgaXMgd2hpdGVsaXN0ZWRcbiAgICAgICAgY2FzZSAnZGF0YS1yZWFjdHJvb3QnOlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBDb250cm9sbGVkIGF0dHJpYnV0ZXMgYXJlIG5vdCB2YWxpZGF0ZWRcbiAgICAgICAgLy8gVE9ETzogT25seSBpZ25vcmUgdGhlbSBvbiBjb250cm9sbGVkIHRhZ3MuXG4gICAgICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2hlY2tlZCc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NlbGVjdGVkJzpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBJbnRlbnRpb25hbGx5IHVzZSB0aGUgb3JpZ2luYWwgbmFtZS5cbiAgICAgICAgICAvLyBTZWUgZGlzY3Vzc2lvbiBpbiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8xMDY3Ni5cbiAgICAgICAgICBleHRyYUF0dHJpYnV0ZU5hbWVzLmFkZChhdHRyaWJ1dGVzW19pXS5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdXBkYXRlUGF5bG9hZCA9IG51bGw7XG4gIGZvciAodmFyIHByb3BLZXkgaW4gcmF3UHJvcHMpIHtcbiAgICBpZiAoIXJhd1Byb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIG5leHRQcm9wID0gcmF3UHJvcHNbcHJvcEtleV07XG4gICAgaWYgKHByb3BLZXkgPT09IENISUxEUkVOKSB7XG4gICAgICAvLyBGb3IgdGV4dCBjb250ZW50IGNoaWxkcmVuIHdlIGNvbXBhcmUgYWdhaW5zdCB0ZXh0Q29udGVudC4gVGhpc1xuICAgICAgLy8gbWlnaHQgbWF0Y2ggYWRkaXRpb25hbCBIVE1MIHRoYXQgaXMgaGlkZGVuIHdoZW4gd2UgcmVhZCBpdCB1c2luZ1xuICAgICAgLy8gdGV4dENvbnRlbnQuIEUuZy4gXCJmb29cIiB3aWxsIG1hdGNoIFwiZjxzcGFuPm9vPC9zcGFuPlwiIGJ1dCB0aGF0IHN0aWxsXG4gICAgICAvLyBzYXRpc2ZpZXMgb3VyIHJlcXVpcmVtZW50LiBPdXIgcmVxdWlyZW1lbnQgaXMgbm90IHRvIHByb2R1Y2UgcGVyZmVjdFxuICAgICAgLy8gSFRNTCBhbmQgYXR0cmlidXRlcy4gSWRlYWxseSB3ZSBzaG91bGQgcHJlc2VydmUgc3RydWN0dXJlIGJ1dCBpdCdzXG4gICAgICAvLyBvayBub3QgdG8gaWYgdGhlIHZpc2libGUgY29udGVudCBpcyBzdGlsbCBlbm91Z2ggdG8gaW5kaWNhdGUgd2hhdFxuICAgICAgLy8gZXZlbiBsaXN0ZW5lcnMgdGhlc2Ugbm9kZXMgbWlnaHQgYmUgd2lyZWQgdXAgdG8uXG4gICAgICAvLyBUT0RPOiBXYXJuIGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBhIHNpbmdsZSB0ZXh0Tm9kZSBhcyBhIGNoaWxkLlxuICAgICAgLy8gVE9ETzogU2hvdWxkIHdlIHVzZSBkb21FbGVtZW50LmZpcnN0Q2hpbGQubm9kZVZhbHVlIHRvIGNvbXBhcmU/XG4gICAgICBpZiAodHlwZW9mIG5leHRQcm9wID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoZG9tRWxlbWVudC50ZXh0Q29udGVudCAhPT0gbmV4dFByb3ApIHtcbiAgICAgICAgICBpZiAodHJ1ZSAmJiAhc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nKSB7XG4gICAgICAgICAgICB3YXJuRm9yVGV4dERpZmZlcmVuY2UoZG9tRWxlbWVudC50ZXh0Q29udGVudCwgbmV4dFByb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVQYXlsb2FkID0gW0NISUxEUkVOLCBuZXh0UHJvcF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRQcm9wID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZG9tRWxlbWVudC50ZXh0Q29udGVudCAhPT0gJycgKyBuZXh0UHJvcCkge1xuICAgICAgICAgIGlmICh0cnVlICYmICFzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcpIHtcbiAgICAgICAgICAgIHdhcm5Gb3JUZXh0RGlmZmVyZW5jZShkb21FbGVtZW50LnRleHRDb250ZW50LCBuZXh0UHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZVBheWxvYWQgPSBbQ0hJTERSRU4sICcnICsgbmV4dFByb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgaWYgKG5leHRQcm9wICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHRydWUgJiYgdHlwZW9mIG5leHRQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2FybkZvckludmFsaWRFdmVudExpc3RlbmVyKHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBlbnN1cmVMaXN0ZW5pbmdUbyhyb290Q29udGFpbmVyRWxlbWVudCwgcHJvcEtleSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0cnVlICYmXG4gICAgLy8gQ29udmluY2UgRmxvdyB3ZSd2ZSBjYWxjdWxhdGVkIGl0IChpdCdzIERFVi1vbmx5IGluIHRoaXMgbWV0aG9kLilcbiAgICB0eXBlb2YgaXNDdXN0b21Db21wb25lbnRUYWcgPT09ICdib29sZWFuJykge1xuICAgICAgLy8gVmFsaWRhdGUgdGhhdCB0aGUgcHJvcGVydGllcyBjb3JyZXNwb25kIHRvIHRoZWlyIGV4cGVjdGVkIHZhbHVlcy5cbiAgICAgIHZhciBzZXJ2ZXJWYWx1ZSA9IHZvaWQgMDtcbiAgICAgIHZhciBwcm9wZXJ0eUluZm8gPSBnZXRQcm9wZXJ0eUluZm8ocHJvcEtleSk7XG4gICAgICBpZiAoc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nKSB7XG4gICAgICAgIC8vIERvbid0IGJvdGhlciBjb21wYXJpbmcuIFdlJ3JlIGlnbm9yaW5nIGFsbCB0aGVzZSB3YXJuaW5ncy5cbiAgICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gU1VQUFJFU1NfQ09OVEVOVF9FRElUQUJMRV9XQVJOSU5HIHx8IHByb3BLZXkgPT09IFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDEgfHxcbiAgICAgIC8vIENvbnRyb2xsZWQgYXR0cmlidXRlcyBhcmUgbm90IHZhbGlkYXRlZFxuICAgICAgLy8gVE9ETzogT25seSBpZ25vcmUgdGhlbSBvbiBjb250cm9sbGVkIHRhZ3MuXG4gICAgICBwcm9wS2V5ID09PSAndmFsdWUnIHx8IHByb3BLZXkgPT09ICdjaGVja2VkJyB8fCBwcm9wS2V5ID09PSAnc2VsZWN0ZWQnKSB7XG4gICAgICAgIC8vIE5vb3BcbiAgICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwpIHtcbiAgICAgICAgdmFyIHNlcnZlckhUTUwgPSBkb21FbGVtZW50LmlubmVySFRNTDtcbiAgICAgICAgdmFyIG5leHRIdG1sID0gbmV4dFByb3AgPyBuZXh0UHJvcFtIVE1MXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGV4cGVjdGVkSFRNTCA9IG5vcm1hbGl6ZUhUTUwoZG9tRWxlbWVudCwgbmV4dEh0bWwgIT0gbnVsbCA/IG5leHRIdG1sIDogJycpO1xuICAgICAgICBpZiAoZXhwZWN0ZWRIVE1MICE9PSBzZXJ2ZXJIVE1MKSB7XG4gICAgICAgICAgd2FybkZvclByb3BEaWZmZXJlbmNlKHByb3BLZXksIHNlcnZlckhUTUwsIGV4cGVjdGVkSFRNTCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gU1RZTEUkMSkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXMuZGVsZXRlKHByb3BLZXkpO1xuXG4gICAgICAgIGlmIChjYW5EaWZmU3R5bGVGb3JIeWRyYXRpb25XYXJuaW5nKSB7XG4gICAgICAgICAgdmFyIGV4cGVjdGVkU3R5bGUgPSBjcmVhdGVEYW5nZXJvdXNTdHJpbmdGb3JTdHlsZXMobmV4dFByb3ApO1xuICAgICAgICAgIHNlcnZlclZhbHVlID0gZG9tRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgaWYgKGV4cGVjdGVkU3R5bGUgIT09IHNlcnZlclZhbHVlKSB7XG4gICAgICAgICAgICB3YXJuRm9yUHJvcERpZmZlcmVuY2UocHJvcEtleSwgc2VydmVyVmFsdWUsIGV4cGVjdGVkU3R5bGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXMuZGVsZXRlKHByb3BLZXkudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIHNlcnZlclZhbHVlID0gZ2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwgcHJvcEtleSwgbmV4dFByb3ApO1xuXG4gICAgICAgIGlmIChuZXh0UHJvcCAhPT0gc2VydmVyVmFsdWUpIHtcbiAgICAgICAgICB3YXJuRm9yUHJvcERpZmZlcmVuY2UocHJvcEtleSwgc2VydmVyVmFsdWUsIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghc2hvdWxkSWdub3JlQXR0cmlidXRlKHByb3BLZXksIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpICYmICFzaG91bGRSZW1vdmVBdHRyaWJ1dGUocHJvcEtleSwgbmV4dFByb3AsIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpKSB7XG4gICAgICAgIHZhciBpc01pc21hdGNoRHVlVG9CYWRDYXNpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHByb3BlcnR5SW5mbyAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICAgICAgICBleHRyYUF0dHJpYnV0ZU5hbWVzLmRlbGV0ZShwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgc2VydmVyVmFsdWUgPSBnZXRWYWx1ZUZvclByb3BlcnR5KGRvbUVsZW1lbnQsIHByb3BLZXksIG5leHRQcm9wLCBwcm9wZXJ0eUluZm8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBvd25OYW1lc3BhY2UgPSBwYXJlbnROYW1lc3BhY2U7XG4gICAgICAgICAgaWYgKG93bk5hbWVzcGFjZSA9PT0gSFRNTF9OQU1FU1BBQ0UpIHtcbiAgICAgICAgICAgIG93bk5hbWVzcGFjZSA9IGdldEludHJpbnNpY05hbWVzcGFjZSh0YWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3duTmFtZXNwYWNlID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lcy5kZWxldGUocHJvcEtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHN0YW5kYXJkTmFtZSA9IGdldFBvc3NpYmxlU3RhbmRhcmROYW1lKHByb3BLZXkpO1xuICAgICAgICAgICAgaWYgKHN0YW5kYXJkTmFtZSAhPT0gbnVsbCAmJiBzdGFuZGFyZE5hbWUgIT09IHByb3BLZXkpIHtcbiAgICAgICAgICAgICAgLy8gSWYgYW4gU1ZHIHByb3AgaXMgc3VwcGxpZWQgd2l0aCBiYWQgY2FzaW5nLCBpdCB3aWxsXG4gICAgICAgICAgICAgIC8vIGJlIHN1Y2Nlc3NmdWxseSBwYXJzZWQgZnJvbSBIVE1MLCBidXQgd2lsbCBwcm9kdWNlIGEgbWlzbWF0Y2hcbiAgICAgICAgICAgICAgLy8gKGFuZCB3b3VsZCBiZSBpbmNvcnJlY3RseSByZW5kZXJlZCBvbiB0aGUgY2xpZW50KS5cbiAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2UgYWxyZWFkeSB3YXJuIGFib3V0IGJhZCBjYXNpbmcgZWxzZXdoZXJlLlxuICAgICAgICAgICAgICAvLyBTbyB3ZSdsbCBza2lwIHRoZSBtaXNsZWFkaW5nIGV4dHJhIG1pc21hdGNoIHdhcm5pbmcgaW4gdGhpcyBjYXNlLlxuICAgICAgICAgICAgICBpc01pc21hdGNoRHVlVG9CYWRDYXNpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgICAgICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXMuZGVsZXRlKHN0YW5kYXJkTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgICAgICAgICBleHRyYUF0dHJpYnV0ZU5hbWVzLmRlbGV0ZShwcm9wS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VydmVyVmFsdWUgPSBnZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dFByb3AgIT09IHNlcnZlclZhbHVlICYmICFpc01pc21hdGNoRHVlVG9CYWRDYXNpbmcpIHtcbiAgICAgICAgICB3YXJuRm9yUHJvcERpZmZlcmVuY2UocHJvcEtleSwgc2VydmVyVmFsdWUsIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHtcbiAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgaWYgKGV4dHJhQXR0cmlidXRlTmFtZXMuc2l6ZSA+IDAgJiYgIXN1cHByZXNzSHlkcmF0aW9uV2FybmluZykge1xuICAgICAgLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgd2FybkZvckV4dHJhQXR0cmlidXRlcyhleHRyYUF0dHJpYnV0ZU5hbWVzKTtcbiAgICB9XG4gIH1cblxuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIC8vIFRPRE86IE1ha2Ugc3VyZSB3ZSBjaGVjayBpZiB0aGlzIGlzIHN0aWxsIHVubW91bnRlZCBvciBkbyBhbnkgY2xlYW5cbiAgICAgIC8vIHVwIG5lY2Vzc2FyeSBzaW5jZSB3ZSBuZXZlciBzdG9wIHRyYWNraW5nIGFueW1vcmUuXG4gICAgICB0cmFjayhkb21FbGVtZW50KTtcbiAgICAgIHBvc3RNb3VudFdyYXBwZXIoZG9tRWxlbWVudCwgcmF3UHJvcHMsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgLy8gVE9ETzogTWFrZSBzdXJlIHdlIGNoZWNrIGlmIHRoaXMgaXMgc3RpbGwgdW5tb3VudGVkIG9yIGRvIGFueSBjbGVhblxuICAgICAgLy8gdXAgbmVjZXNzYXJ5IHNpbmNlIHdlIG5ldmVyIHN0b3AgdHJhY2tpbmcgYW55bW9yZS5cbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcG9zdE1vdW50V3JhcHBlciQzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgIC8vIEZvciBpbnB1dCBhbmQgdGV4dGFyZWEgd2UgY3VycmVudCBhbHdheXMgc2V0IHRoZSB2YWx1ZSBwcm9wZXJ0eSBhdFxuICAgICAgLy8gcG9zdCBtb3VudCB0byBmb3JjZSBpdCB0byBkaXZlcmdlIGZyb20gYXR0cmlidXRlcy4gSG93ZXZlciwgZm9yXG4gICAgICAvLyBvcHRpb24gYW5kIHNlbGVjdCB3ZSBkb24ndCBxdWl0ZSBkbyB0aGUgc2FtZSB0aGluZyBhbmQgc2VsZWN0XG4gICAgICAvLyBpcyBub3QgcmVzaWxpZW50IHRvIHRoZSBET00gc3RhdGUgY2hhbmdpbmcgc28gd2UgZG9uJ3QgZG8gdGhhdCBoZXJlLlxuICAgICAgLy8gVE9ETzogQ29uc2lkZXIgbm90IGRvaW5nIHRoaXMgZm9yIGlucHV0IGFuZCB0ZXh0YXJlYS5cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAodHlwZW9mIHJhd1Byb3BzLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBjYXN0IG1heSBub3QgYmUgc291bmQgZm9yIFNWRywgTWF0aE1MIG9yIGN1c3RvbSBlbGVtZW50cy5cbiAgICAgICAgdHJhcENsaWNrT25Ob25JbnRlcmFjdGl2ZUVsZW1lbnQoZG9tRWxlbWVudCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiB1cGRhdGVQYXlsb2FkO1xufVxuXG5mdW5jdGlvbiBkaWZmSHlkcmF0ZWRUZXh0KHRleHROb2RlLCB0ZXh0KSB7XG4gIHZhciBpc0RpZmZlcmVudCA9IHRleHROb2RlLm5vZGVWYWx1ZSAhPT0gdGV4dDtcbiAgcmV0dXJuIGlzRGlmZmVyZW50O1xufVxuXG5mdW5jdGlvbiB3YXJuRm9yVW5tYXRjaGVkVGV4dCh0ZXh0Tm9kZSwgdGV4dCkge1xuICB7XG4gICAgd2FybkZvclRleHREaWZmZXJlbmNlKHRleHROb2RlLm5vZGVWYWx1ZSwgdGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudChwYXJlbnROb2RlLCBjaGlsZCkge1xuICB7XG4gICAgaWYgKGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdEaWQgbm90IGV4cGVjdCBzZXJ2ZXIgSFRNTCB0byBjb250YWluIGEgPCVzPiBpbiA8JXM+LicsIGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIHBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dChwYXJlbnROb2RlLCBjaGlsZCkge1xuICB7XG4gICAgaWYgKGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdEaWQgbm90IGV4cGVjdCBzZXJ2ZXIgSFRNTCB0byBjb250YWluIHRoZSB0ZXh0IG5vZGUgXCIlc1wiIGluIDwlcz4uJywgY2hpbGQubm9kZVZhbHVlLCBwYXJlbnROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudChwYXJlbnROb2RlLCB0YWcsIHByb3BzKSB7XG4gIHtcbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0V4cGVjdGVkIHNlcnZlciBIVE1MIHRvIGNvbnRhaW4gYSBtYXRjaGluZyA8JXM+IGluIDwlcz4uJywgdGFnLCBwYXJlbnROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dChwYXJlbnROb2RlLCB0ZXh0KSB7XG4gIHtcbiAgICBpZiAodGV4dCA9PT0gJycpIHtcbiAgICAgIC8vIFdlIGV4cGVjdCB0byBpbnNlcnQgZW1wdHkgdGV4dCBub2RlcyBzaW5jZSB0aGV5J3JlIG5vdCByZXByZXNlbnRlZCBpblxuICAgICAgLy8gdGhlIEhUTUwuXG4gICAgICAvLyBUT0RPOiBSZW1vdmUgdGhpcyBzcGVjaWFsIGNhc2UgaWYgd2UgY2FuIGp1c3QgYXZvaWQgaW5zZXJ0aW5nIGVtcHR5XG4gICAgICAvLyB0ZXh0IG5vZGVzLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0V4cGVjdGVkIHNlcnZlciBIVE1MIHRvIGNvbnRhaW4gYSBtYXRjaGluZyB0ZXh0IG5vZGUgZm9yIFwiJXNcIiBpbiA8JXM+LicsIHRleHQsIHBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQxKGRvbUVsZW1lbnQsIHRhZywgcHJvcHMpIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICByZXN0b3JlQ29udHJvbGxlZFN0YXRlKGRvbUVsZW1lbnQsIHByb3BzKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDMoZG9tRWxlbWVudCwgcHJvcHMpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDIoZG9tRWxlbWVudCwgcHJvcHMpO1xuICAgICAgcmV0dXJuO1xuICB9XG59XG5cbi8vIFRPRE86IGRpcmVjdCBpbXBvcnRzIGxpa2Ugc29tZS1wYWNrYWdlL3NyYy8qIGFyZSBiYWQuIEZpeCBtZS5cbnZhciB2YWxpZGF0ZURPTU5lc3RpbmcgPSBmdW5jdGlvbiAoKSB7fTtcbnZhciB1cGRhdGVkQW5jZXN0b3JJbmZvID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgLy8gVGhpcyB2YWxpZGF0aW9uIGNvZGUgd2FzIHdyaXR0ZW4gYmFzZWQgb24gdGhlIEhUTUw1IHBhcnNpbmcgc3BlYzpcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tc2NvcGVcbiAgLy9cbiAgLy8gTm90ZTogdGhpcyBkb2VzIG5vdCBjYXRjaCBhbGwgaW52YWxpZCBuZXN0aW5nLCBub3IgZG9lcyBpdCB0cnkgdG8gKGFzIGl0J3NcbiAgLy8gbm90IGNsZWFyIHdoYXQgcHJhY3RpY2FsIGJlbmVmaXQgZG9pbmcgc28gcHJvdmlkZXMpOyBpbnN0ZWFkLCB3ZSB3YXJuIG9ubHlcbiAgLy8gZm9yIGNhc2VzIHdoZXJlIHRoZSBwYXJzZXIgd2lsbCBnaXZlIGEgcGFyc2UgdHJlZSBkaWZmZXJpbmcgZnJvbSB3aGF0IFJlYWN0XG4gIC8vIGludGVuZGVkLiBGb3IgZXhhbXBsZSwgPGI+PGRpdj48L2Rpdj48L2I+IGlzIGludmFsaWQgYnV0IHdlIGRvbid0IHdhcm5cbiAgLy8gYmVjYXVzZSBpdCBzdGlsbCBwYXJzZXMgY29ycmVjdGx5OyB3ZSBkbyB3YXJuIGZvciBvdGhlciBjYXNlcyBsaWtlIG5lc3RlZFxuICAvLyA8cD4gdGFncyB3aGVyZSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBpbXBsaWNpdGx5IGNsb3NlcyB0aGVcbiAgLy8gZmlyc3QsIGNhdXNpbmcgYSBjb25mdXNpbmcgbWVzcy5cblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNzcGVjaWFsXG4gIHZhciBzcGVjaWFsVGFncyA9IFsnYWRkcmVzcycsICdhcHBsZXQnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2Jhc2UnLCAnYmFzZWZvbnQnLCAnYmdzb3VuZCcsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnY2VudGVyJywgJ2NvbCcsICdjb2xncm91cCcsICdkZCcsICdkZXRhaWxzJywgJ2RpcicsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnZnJhbWUnLCAnZnJhbWVzZXQnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpc2luZGV4JywgJ2xpJywgJ2xpbmsnLCAnbGlzdGluZycsICdtYWluJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ25hdicsICdub2VtYmVkJywgJ25vZnJhbWVzJywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdwJywgJ3BhcmFtJywgJ3BsYWludGV4dCcsICdwcmUnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NvdXJjZScsICdzdHlsZScsICdzdW1tYXJ5JywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RlbXBsYXRlJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3VsJywgJ3dicicsICd4bXAnXTtcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNoYXMtYW4tZWxlbWVudC1pbi1zY29wZVxuICB2YXIgaW5TY29wZVRhZ3MgPSBbJ2FwcGxldCcsICdjYXB0aW9uJywgJ2h0bWwnLCAndGFibGUnLCAndGQnLCAndGgnLCAnbWFycXVlZScsICdvYmplY3QnLCAndGVtcGxhdGUnLFxuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2h0bWwtaW50ZWdyYXRpb24tcG9pbnRcbiAgLy8gVE9ETzogRGlzdGluZ3Vpc2ggYnkgbmFtZXNwYWNlIGhlcmUgLS0gZm9yIDx0aXRsZT4sIGluY2x1ZGluZyBpdCBoZXJlXG4gIC8vIGVycnMgb24gdGhlIHNpZGUgb2YgZmV3ZXIgd2FybmluZ3NcbiAgJ2ZvcmVpZ25PYmplY3QnLCAnZGVzYycsICd0aXRsZSddO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLWJ1dHRvbi1zY29wZVxuICB2YXIgYnV0dG9uU2NvcGVUYWdzID0gaW5TY29wZVRhZ3MuY29uY2F0KFsnYnV0dG9uJ10pO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2dlbmVyYXRlLWltcGxpZWQtZW5kLXRhZ3NcbiAgdmFyIGltcGxpZWRFbmRUYWdzID0gWydkZCcsICdkdCcsICdsaScsICdvcHRpb24nLCAnb3B0Z3JvdXAnLCAncCcsICdycCcsICdydCddO1xuXG4gIHZhciBlbXB0eUFuY2VzdG9ySW5mbyA9IHtcbiAgICBjdXJyZW50OiBudWxsLFxuXG4gICAgZm9ybVRhZzogbnVsbCxcbiAgICBhVGFnSW5TY29wZTogbnVsbCxcbiAgICBidXR0b25UYWdJblNjb3BlOiBudWxsLFxuICAgIG5vYnJUYWdJblNjb3BlOiBudWxsLFxuICAgIHBUYWdJbkJ1dHRvblNjb3BlOiBudWxsLFxuXG4gICAgbGlzdEl0ZW1UYWdBdXRvY2xvc2luZzogbnVsbCxcbiAgICBkbEl0ZW1UYWdBdXRvY2xvc2luZzogbnVsbFxuICB9O1xuXG4gIHVwZGF0ZWRBbmNlc3RvckluZm8gPSBmdW5jdGlvbiAob2xkSW5mbywgdGFnKSB7XG4gICAgdmFyIGFuY2VzdG9ySW5mbyA9IF9hc3NpZ24oe30sIG9sZEluZm8gfHwgZW1wdHlBbmNlc3RvckluZm8pO1xuICAgIHZhciBpbmZvID0geyB0YWc6IHRhZyB9O1xuXG4gICAgaWYgKGluU2NvcGVUYWdzLmluZGV4T2YodGFnKSAhPT0gLTEpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZSA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZSA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGUgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoYnV0dG9uU2NvcGVUYWdzLmluZGV4T2YodGFnKSAhPT0gLTEpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VlIHJ1bGVzIGZvciAnbGknLCAnZGQnLCAnZHQnIHN0YXJ0IHRhZ3MgaW5cbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5ib2R5XG4gICAgaWYgKHNwZWNpYWxUYWdzLmluZGV4T2YodGFnKSAhPT0gLTEgJiYgdGFnICE9PSAnYWRkcmVzcycgJiYgdGFnICE9PSAnZGl2JyAmJiB0YWcgIT09ICdwJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmxpc3RJdGVtVGFnQXV0b2Nsb3NpbmcgPSBudWxsO1xuICAgICAgYW5jZXN0b3JJbmZvLmRsSXRlbVRhZ0F1dG9jbG9zaW5nID0gbnVsbDtcbiAgICB9XG5cbiAgICBhbmNlc3RvckluZm8uY3VycmVudCA9IGluZm87XG5cbiAgICBpZiAodGFnID09PSAnZm9ybScpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5mb3JtVGFnID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2EnKSB7XG4gICAgICBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnYnV0dG9uJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnbm9icicpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdwJykge1xuICAgICAgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2xpJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmxpc3RJdGVtVGFnQXV0b2Nsb3NpbmcgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnZGQnIHx8IHRhZyA9PT0gJ2R0Jykge1xuICAgICAgYW5jZXN0b3JJbmZvLmRsSXRlbVRhZ0F1dG9jbG9zaW5nID0gaW5mbztcbiAgICB9XG5cbiAgICByZXR1cm4gYW5jZXN0b3JJbmZvO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXJcbiAgICovXG4gIHZhciBpc1RhZ1ZhbGlkV2l0aFBhcmVudCA9IGZ1bmN0aW9uICh0YWcsIHBhcmVudFRhZykge1xuICAgIC8vIEZpcnN0LCBsZXQncyBjaGVjayBpZiB3ZSdyZSBpbiBhbiB1bnVzdWFsIHBhcnNpbmcgbW9kZS4uLlxuICAgIHN3aXRjaCAocGFyZW50VGFnKSB7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5zZWxlY3RcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdvcHRpb24nIHx8IHRhZyA9PT0gJ29wdGdyb3VwJyB8fCB0YWcgPT09ICcjdGV4dCc7XG4gICAgICBjYXNlICdvcHRncm91cCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdvcHRpb24nIHx8IHRhZyA9PT0gJyN0ZXh0JztcbiAgICAgIC8vIFN0cmljdGx5IHNwZWFraW5nLCBzZWVpbmcgYW4gPG9wdGlvbj4gZG9lc24ndCBtZWFuIHdlJ3JlIGluIGEgPHNlbGVjdD5cbiAgICAgIC8vIGJ1dFxuICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJyN0ZXh0JztcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRkXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5jYXB0aW9uXG4gICAgICAvLyBObyBzcGVjaWFsIGJlaGF2aW9yIHNpbmNlIHRoZXNlIHJ1bGVzIGZhbGwgYmFjayB0byBcImluIGJvZHlcIiBtb2RlIGZvclxuICAgICAgLy8gYWxsIGV4Y2VwdCBzcGVjaWFsIHRhYmxlIG5vZGVzIHdoaWNoIGNhdXNlIGJhZCBwYXJzaW5nIGJlaGF2aW9yIGFueXdheS5cblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludHJcbiAgICAgIGNhc2UgJ3RyJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ3RoJyB8fCB0YWcgPT09ICd0ZCcgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGJvZHlcbiAgICAgIGNhc2UgJ3Rib2R5JzpcbiAgICAgIGNhc2UgJ3RoZWFkJzpcbiAgICAgIGNhc2UgJ3Rmb290JzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ3RyJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5jb2xncm91cFxuICAgICAgY2FzZSAnY29sZ3JvdXAnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnY29sJyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50YWJsZVxuICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnY2FwdGlvbicgfHwgdGFnID09PSAnY29sZ3JvdXAnIHx8IHRhZyA9PT0gJ3Rib2R5JyB8fCB0YWcgPT09ICd0Zm9vdCcgfHwgdGFnID09PSAndGhlYWQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmhlYWRcbiAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnYmFzZScgfHwgdGFnID09PSAnYmFzZWZvbnQnIHx8IHRhZyA9PT0gJ2Jnc291bmQnIHx8IHRhZyA9PT0gJ2xpbmsnIHx8IHRhZyA9PT0gJ21ldGEnIHx8IHRhZyA9PT0gJ3RpdGxlJyB8fCB0YWcgPT09ICdub3NjcmlwdCcgfHwgdGFnID09PSAnbm9mcmFtZXMnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NlbWFudGljcy5odG1sI3RoZS1odG1sLWVsZW1lbnRcbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnaGVhZCcgfHwgdGFnID09PSAnYm9keSc7XG4gICAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnaHRtbCc7XG4gICAgfVxuXG4gICAgLy8gUHJvYmFibHkgaW4gdGhlIFwiaW4gYm9keVwiIHBhcnNpbmcgbW9kZSwgc28gd2Ugb3V0bGF3IG9ubHkgdGFnIGNvbWJvc1xuICAgIC8vIHdoZXJlIHRoZSBwYXJzaW5nIHJ1bGVzIGNhdXNlIGltcGxpY2l0IG9wZW5zIG9yIGNsb3NlcyB0byBiZSBhZGRlZC5cbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5ib2R5XG4gICAgc3dpdGNoICh0YWcpIHtcbiAgICAgIGNhc2UgJ2gxJzpcbiAgICAgIGNhc2UgJ2gyJzpcbiAgICAgIGNhc2UgJ2gzJzpcbiAgICAgIGNhc2UgJ2g0JzpcbiAgICAgIGNhc2UgJ2g1JzpcbiAgICAgIGNhc2UgJ2g2JzpcbiAgICAgICAgcmV0dXJuIHBhcmVudFRhZyAhPT0gJ2gxJyAmJiBwYXJlbnRUYWcgIT09ICdoMicgJiYgcGFyZW50VGFnICE9PSAnaDMnICYmIHBhcmVudFRhZyAhPT0gJ2g0JyAmJiBwYXJlbnRUYWcgIT09ICdoNScgJiYgcGFyZW50VGFnICE9PSAnaDYnO1xuXG4gICAgICBjYXNlICdycCc6XG4gICAgICBjYXNlICdydCc6XG4gICAgICAgIHJldHVybiBpbXBsaWVkRW5kVGFncy5pbmRleE9mKHBhcmVudFRhZykgPT09IC0xO1xuXG4gICAgICBjYXNlICdib2R5JzpcbiAgICAgIGNhc2UgJ2NhcHRpb24nOlxuICAgICAgY2FzZSAnY29sJzpcbiAgICAgIGNhc2UgJ2NvbGdyb3VwJzpcbiAgICAgIGNhc2UgJ2ZyYW1lJzpcbiAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICBjYXNlICd0Ym9keSc6XG4gICAgICBjYXNlICd0ZCc6XG4gICAgICBjYXNlICd0Zm9vdCc6XG4gICAgICBjYXNlICd0aCc6XG4gICAgICBjYXNlICd0aGVhZCc6XG4gICAgICBjYXNlICd0cic6XG4gICAgICAgIC8vIFRoZXNlIHRhZ3MgYXJlIG9ubHkgdmFsaWQgd2l0aCBhIGZldyBwYXJlbnRzIHRoYXQgaGF2ZSBzcGVjaWFsIGNoaWxkXG4gICAgICAgIC8vIHBhcnNpbmcgcnVsZXMgLS0gaWYgd2UncmUgZG93biBoZXJlLCB0aGVuIG5vbmUgb2YgdGhvc2UgbWF0Y2hlZCBhbmRcbiAgICAgICAgLy8gc28gd2UgYWxsb3cgaXQgb25seSBpZiB3ZSBkb24ndCBrbm93IHdoYXQgdGhlIHBhcmVudCBpcywgYXMgYWxsIG90aGVyXG4gICAgICAgIC8vIGNhc2VzIGFyZSBpbnZhbGlkLlxuICAgICAgICByZXR1cm4gcGFyZW50VGFnID09IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlclxuICAgKi9cbiAgdmFyIGZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcgPSBmdW5jdGlvbiAodGFnLCBhbmNlc3RvckluZm8pIHtcbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSAnYWRkcmVzcyc6XG4gICAgICBjYXNlICdhcnRpY2xlJzpcbiAgICAgIGNhc2UgJ2FzaWRlJzpcbiAgICAgIGNhc2UgJ2Jsb2NrcXVvdGUnOlxuICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIGNhc2UgJ2RldGFpbHMnOlxuICAgICAgY2FzZSAnZGlhbG9nJzpcbiAgICAgIGNhc2UgJ2Rpcic6XG4gICAgICBjYXNlICdkaXYnOlxuICAgICAgY2FzZSAnZGwnOlxuICAgICAgY2FzZSAnZmllbGRzZXQnOlxuICAgICAgY2FzZSAnZmlnY2FwdGlvbic6XG4gICAgICBjYXNlICdmaWd1cmUnOlxuICAgICAgY2FzZSAnZm9vdGVyJzpcbiAgICAgIGNhc2UgJ2hlYWRlcic6XG4gICAgICBjYXNlICdoZ3JvdXAnOlxuICAgICAgY2FzZSAnbWFpbic6XG4gICAgICBjYXNlICdtZW51JzpcbiAgICAgIGNhc2UgJ25hdic6XG4gICAgICBjYXNlICdvbCc6XG4gICAgICBjYXNlICdwJzpcbiAgICAgIGNhc2UgJ3NlY3Rpb24nOlxuICAgICAgY2FzZSAnc3VtbWFyeSc6XG4gICAgICBjYXNlICd1bCc6XG4gICAgICBjYXNlICdwcmUnOlxuICAgICAgY2FzZSAnbGlzdGluZyc6XG4gICAgICBjYXNlICd0YWJsZSc6XG4gICAgICBjYXNlICdocic6XG4gICAgICBjYXNlICd4bXAnOlxuICAgICAgY2FzZSAnaDEnOlxuICAgICAgY2FzZSAnaDInOlxuICAgICAgY2FzZSAnaDMnOlxuICAgICAgY2FzZSAnaDQnOlxuICAgICAgY2FzZSAnaDUnOlxuICAgICAgY2FzZSAnaDYnOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlO1xuXG4gICAgICBjYXNlICdmb3JtJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5mb3JtVGFnIHx8IGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcblxuICAgICAgY2FzZSAnbGknOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmxpc3RJdGVtVGFnQXV0b2Nsb3Npbmc7XG5cbiAgICAgIGNhc2UgJ2RkJzpcbiAgICAgIGNhc2UgJ2R0JzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZztcblxuICAgICAgY2FzZSAnYnV0dG9uJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlO1xuXG4gICAgICBjYXNlICdhJzpcbiAgICAgICAgLy8gU3BlYyBzYXlzIHNvbWV0aGluZyBhYm91dCBzdG9yaW5nIGEgbGlzdCBvZiBtYXJrZXJzLCBidXQgaXQgc291bmRzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gdGhpcyBjaGVjay5cbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZTtcblxuICAgICAgY2FzZSAnbm9icic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdmFyIGRpZFdhcm4gPSB7fTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcgPSBmdW5jdGlvbiAoY2hpbGRUYWcsIGNoaWxkVGV4dCwgYW5jZXN0b3JJbmZvKSB7XG4gICAgYW5jZXN0b3JJbmZvID0gYW5jZXN0b3JJbmZvIHx8IGVtcHR5QW5jZXN0b3JJbmZvO1xuICAgIHZhciBwYXJlbnRJbmZvID0gYW5jZXN0b3JJbmZvLmN1cnJlbnQ7XG4gICAgdmFyIHBhcmVudFRhZyA9IHBhcmVudEluZm8gJiYgcGFyZW50SW5mby50YWc7XG5cbiAgICBpZiAoY2hpbGRUZXh0ICE9IG51bGwpIHtcbiAgICAgICEoY2hpbGRUYWcgPT0gbnVsbCkgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3Rpbmc6IHdoZW4gY2hpbGRUZXh0IGlzIHBhc3NlZCwgY2hpbGRUYWcgc2hvdWxkIGJlIG51bGwnKSA6IHZvaWQgMDtcbiAgICAgIGNoaWxkVGFnID0gJyN0ZXh0JztcbiAgICB9XG5cbiAgICB2YXIgaW52YWxpZFBhcmVudCA9IGlzVGFnVmFsaWRXaXRoUGFyZW50KGNoaWxkVGFnLCBwYXJlbnRUYWcpID8gbnVsbCA6IHBhcmVudEluZm87XG4gICAgdmFyIGludmFsaWRBbmNlc3RvciA9IGludmFsaWRQYXJlbnQgPyBudWxsIDogZmluZEludmFsaWRBbmNlc3RvckZvclRhZyhjaGlsZFRhZywgYW5jZXN0b3JJbmZvKTtcbiAgICB2YXIgaW52YWxpZFBhcmVudE9yQW5jZXN0b3IgPSBpbnZhbGlkUGFyZW50IHx8IGludmFsaWRBbmNlc3RvcjtcbiAgICBpZiAoIWludmFsaWRQYXJlbnRPckFuY2VzdG9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGFuY2VzdG9yVGFnID0gaW52YWxpZFBhcmVudE9yQW5jZXN0b3IudGFnO1xuICAgIHZhciBhZGRlbmR1bSA9IGdldEN1cnJlbnRGaWJlclN0YWNrSW5EZXYoKTtcblxuICAgIHZhciB3YXJuS2V5ID0gISFpbnZhbGlkUGFyZW50ICsgJ3wnICsgY2hpbGRUYWcgKyAnfCcgKyBhbmNlc3RvclRhZyArICd8JyArIGFkZGVuZHVtO1xuICAgIGlmIChkaWRXYXJuW3dhcm5LZXldKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpZFdhcm5bd2FybktleV0gPSB0cnVlO1xuXG4gICAgdmFyIHRhZ0Rpc3BsYXlOYW1lID0gY2hpbGRUYWc7XG4gICAgdmFyIHdoaXRlc3BhY2VJbmZvID0gJyc7XG4gICAgaWYgKGNoaWxkVGFnID09PSAnI3RleHQnKSB7XG4gICAgICBpZiAoL1xcUy8udGVzdChjaGlsZFRleHQpKSB7XG4gICAgICAgIHRhZ0Rpc3BsYXlOYW1lID0gJ1RleHQgbm9kZXMnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFnRGlzcGxheU5hbWUgPSAnV2hpdGVzcGFjZSB0ZXh0IG5vZGVzJztcbiAgICAgICAgd2hpdGVzcGFjZUluZm8gPSBcIiBNYWtlIHN1cmUgeW91IGRvbid0IGhhdmUgYW55IGV4dHJhIHdoaXRlc3BhY2UgYmV0d2VlbiB0YWdzIG9uIFwiICsgJ2VhY2ggbGluZSBvZiB5b3VyIHNvdXJjZSBjb2RlLic7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZ0Rpc3BsYXlOYW1lID0gJzwnICsgY2hpbGRUYWcgKyAnPic7XG4gICAgfVxuXG4gICAgaWYgKGludmFsaWRQYXJlbnQpIHtcbiAgICAgIHZhciBpbmZvID0gJyc7XG4gICAgICBpZiAoYW5jZXN0b3JUYWcgPT09ICd0YWJsZScgJiYgY2hpbGRUYWcgPT09ICd0cicpIHtcbiAgICAgICAgaW5mbyArPSAnIEFkZCBhIDx0Ym9keT4gdG8geW91ciBjb2RlIHRvIG1hdGNoIHRoZSBET00gdHJlZSBnZW5lcmF0ZWQgYnkgJyArICd0aGUgYnJvd3Nlci4nO1xuICAgICAgfVxuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAndmFsaWRhdGVET01OZXN0aW5nKC4uLik6ICVzIGNhbm5vdCBhcHBlYXIgYXMgYSBjaGlsZCBvZiA8JXM+LiVzJXMlcycsIHRhZ0Rpc3BsYXlOYW1lLCBhbmNlc3RvclRhZywgd2hpdGVzcGFjZUluZm8sIGluZm8sIGFkZGVuZHVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAndmFsaWRhdGVET01OZXN0aW5nKC4uLik6ICVzIGNhbm5vdCBhcHBlYXIgYXMgYSBkZXNjZW5kYW50IG9mICcgKyAnPCVzPi4lcycsIHRhZ0Rpc3BsYXlOYW1lLCBhbmNlc3RvclRhZywgYWRkZW5kdW0pO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gUmVuZGVyZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBwZXJzaXN0ZW5jZVxuLy8gY2FuIHJlLWV4cG9ydCBldmVyeXRoaW5nIGZyb20gdGhpcyBtb2R1bGUuXG5cbmZ1bmN0aW9uIHNoaW0oKSB7XG4gIGludmFyaWFudChmYWxzZSwgJ1RoZSBjdXJyZW50IHJlbmRlcmVyIGRvZXMgbm90IHN1cHBvcnQgcGVyc2lzdGVuY2UuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG59XG5cbi8vIFBlcnNpc3RlbmNlICh3aGVuIHVuc3VwcG9ydGVkKVxudmFyIHN1cHBvcnRzUGVyc2lzdGVuY2UgPSBmYWxzZTtcbnZhciBjbG9uZUluc3RhbmNlID0gc2hpbTtcbnZhciBjcmVhdGVDb250YWluZXJDaGlsZFNldCA9IHNoaW07XG52YXIgYXBwZW5kQ2hpbGRUb0NvbnRhaW5lckNoaWxkU2V0ID0gc2hpbTtcbnZhciBmaW5hbGl6ZUNvbnRhaW5lckNoaWxkcmVuID0gc2hpbTtcbnZhciByZXBsYWNlQ29udGFpbmVyQ2hpbGRyZW4gPSBzaGltO1xudmFyIGNsb25lSGlkZGVuSW5zdGFuY2UgPSBzaGltO1xudmFyIGNsb25lVW5oaWRkZW5JbnN0YW5jZSA9IHNoaW07XG52YXIgY3JlYXRlSGlkZGVuVGV4dEluc3RhbmNlID0gc2hpbTtcblxudmFyIFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HID0gdm9pZCAwO1xue1xuICBTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyA9ICdzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcnO1xufVxuXG52YXIgU1VTUEVOU0VfU1RBUlRfREFUQSA9ICckJztcbnZhciBTVVNQRU5TRV9FTkRfREFUQSA9ICcvJCc7XG5cbnZhciBTVFlMRSA9ICdzdHlsZSc7XG5cbnZhciBldmVudHNFbmFibGVkID0gbnVsbDtcbnZhciBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IG51bGw7XG5cbmZ1bmN0aW9uIHNob3VsZEF1dG9Gb2N1c0hvc3RDb21wb25lbnQodHlwZSwgcHJvcHMpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYnV0dG9uJzpcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICByZXR1cm4gISFwcm9wcy5hdXRvRm9jdXM7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRSb290SG9zdENvbnRleHQocm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gIHZhciB0eXBlID0gdm9pZCAwO1xuICB2YXIgbmFtZXNwYWNlID0gdm9pZCAwO1xuICB2YXIgbm9kZVR5cGUgPSByb290Q29udGFpbmVySW5zdGFuY2Uubm9kZVR5cGU7XG4gIHN3aXRjaCAobm9kZVR5cGUpIHtcbiAgICBjYXNlIERPQ1VNRU5UX05PREU6XG4gICAgY2FzZSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuICAgICAge1xuICAgICAgICB0eXBlID0gbm9kZVR5cGUgPT09IERPQ1VNRU5UX05PREUgPyAnI2RvY3VtZW50JyA6ICcjZnJhZ21lbnQnO1xuICAgICAgICB2YXIgcm9vdCA9IHJvb3RDb250YWluZXJJbnN0YW5jZS5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIG5hbWVzcGFjZSA9IHJvb3QgPyByb290Lm5hbWVzcGFjZVVSSSA6IGdldENoaWxkTmFtZXNwYWNlKG51bGwsICcnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IG5vZGVUeXBlID09PSBDT01NRU5UX05PREUgPyByb290Q29udGFpbmVySW5zdGFuY2UucGFyZW50Tm9kZSA6IHJvb3RDb250YWluZXJJbnN0YW5jZTtcbiAgICAgICAgdmFyIG93bk5hbWVzcGFjZSA9IGNvbnRhaW5lci5uYW1lc3BhY2VVUkkgfHwgbnVsbDtcbiAgICAgICAgdHlwZSA9IGNvbnRhaW5lci50YWdOYW1lO1xuICAgICAgICBuYW1lc3BhY2UgPSBnZXRDaGlsZE5hbWVzcGFjZShvd25OYW1lc3BhY2UsIHR5cGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxuICB7XG4gICAgdmFyIHZhbGlkYXRlZFRhZyA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgX2FuY2VzdG9ySW5mbyA9IHVwZGF0ZWRBbmNlc3RvckluZm8obnVsbCwgdmFsaWRhdGVkVGFnKTtcbiAgICByZXR1cm4geyBuYW1lc3BhY2U6IG5hbWVzcGFjZSwgYW5jZXN0b3JJbmZvOiBfYW5jZXN0b3JJbmZvIH07XG4gIH1cbiAgcmV0dXJuIG5hbWVzcGFjZTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGRIb3N0Q29udGV4dChwYXJlbnRIb3N0Q29udGV4dCwgdHlwZSwgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gIHtcbiAgICB2YXIgcGFyZW50SG9zdENvbnRleHREZXYgPSBwYXJlbnRIb3N0Q29udGV4dDtcbiAgICB2YXIgX25hbWVzcGFjZSA9IGdldENoaWxkTmFtZXNwYWNlKHBhcmVudEhvc3RDb250ZXh0RGV2Lm5hbWVzcGFjZSwgdHlwZSk7XG4gICAgdmFyIF9hbmNlc3RvckluZm8yID0gdXBkYXRlZEFuY2VzdG9ySW5mbyhwYXJlbnRIb3N0Q29udGV4dERldi5hbmNlc3RvckluZm8sIHR5cGUpO1xuICAgIHJldHVybiB7IG5hbWVzcGFjZTogX25hbWVzcGFjZSwgYW5jZXN0b3JJbmZvOiBfYW5jZXN0b3JJbmZvMiB9O1xuICB9XG4gIHZhciBwYXJlbnROYW1lc3BhY2UgPSBwYXJlbnRIb3N0Q29udGV4dDtcbiAgcmV0dXJuIGdldENoaWxkTmFtZXNwYWNlKHBhcmVudE5hbWVzcGFjZSwgdHlwZSk7XG59XG5cbmZ1bmN0aW9uIGdldFB1YmxpY0luc3RhbmNlKGluc3RhbmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUZvckNvbW1pdChjb250YWluZXJJbmZvKSB7XG4gIGV2ZW50c0VuYWJsZWQgPSBpc0VuYWJsZWQoKTtcbiAgc2VsZWN0aW9uSW5mb3JtYXRpb24gPSBnZXRTZWxlY3Rpb25JbmZvcm1hdGlvbigpO1xuICBzZXRFbmFibGVkKGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gcmVzZXRBZnRlckNvbW1pdChjb250YWluZXJJbmZvKSB7XG4gIHJlc3RvcmVTZWxlY3Rpb24oc2VsZWN0aW9uSW5mb3JtYXRpb24pO1xuICBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IG51bGw7XG4gIHNldEVuYWJsZWQoZXZlbnRzRW5hYmxlZCk7XG4gIGV2ZW50c0VuYWJsZWQgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZSh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCwgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICB2YXIgcGFyZW50TmFtZXNwYWNlID0gdm9pZCAwO1xuICB7XG4gICAgLy8gVE9ETzogdGFrZSBuYW1lc3BhY2UgaW50byBhY2NvdW50IHdoZW4gdmFsaWRhdGluZy5cbiAgICB2YXIgaG9zdENvbnRleHREZXYgPSBob3N0Q29udGV4dDtcbiAgICB2YWxpZGF0ZURPTU5lc3RpbmcodHlwZSwgbnVsbCwgaG9zdENvbnRleHREZXYuYW5jZXN0b3JJbmZvKTtcbiAgICBpZiAodHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gPT09ICdudW1iZXInKSB7XG4gICAgICB2YXIgc3RyaW5nID0gJycgKyBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBvd25BbmNlc3RvckluZm8gPSB1cGRhdGVkQW5jZXN0b3JJbmZvKGhvc3RDb250ZXh0RGV2LmFuY2VzdG9ySW5mbywgdHlwZSk7XG4gICAgICB2YWxpZGF0ZURPTU5lc3RpbmcobnVsbCwgc3RyaW5nLCBvd25BbmNlc3RvckluZm8pO1xuICAgIH1cbiAgICBwYXJlbnROYW1lc3BhY2UgPSBob3N0Q29udGV4dERldi5uYW1lc3BhY2U7XG4gIH1cbiAgdmFyIGRvbUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIHBhcmVudE5hbWVzcGFjZSk7XG4gIHByZWNhY2hlRmliZXJOb2RlKGludGVybmFsSW5zdGFuY2VIYW5kbGUsIGRvbUVsZW1lbnQpO1xuICB1cGRhdGVGaWJlclByb3BzKGRvbUVsZW1lbnQsIHByb3BzKTtcbiAgcmV0dXJuIGRvbUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZEluaXRpYWxDaGlsZChwYXJlbnRJbnN0YW5jZSwgY2hpbGQpIHtcbiAgcGFyZW50SW5zdGFuY2UuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbihkb21FbGVtZW50LCB0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCkge1xuICBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKTtcbiAgcmV0dXJuIHNob3VsZEF1dG9Gb2N1c0hvc3RDb21wb25lbnQodHlwZSwgcHJvcHMpO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlVXBkYXRlKGRvbUVsZW1lbnQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCkge1xuICB7XG4gICAgdmFyIGhvc3RDb250ZXh0RGV2ID0gaG9zdENvbnRleHQ7XG4gICAgaWYgKHR5cGVvZiBuZXdQcm9wcy5jaGlsZHJlbiAhPT0gdHlwZW9mIG9sZFByb3BzLmNoaWxkcmVuICYmICh0eXBlb2YgbmV3UHJvcHMuY2hpbGRyZW4gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuZXdQcm9wcy5jaGlsZHJlbiA9PT0gJ251bWJlcicpKSB7XG4gICAgICB2YXIgc3RyaW5nID0gJycgKyBuZXdQcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBvd25BbmNlc3RvckluZm8gPSB1cGRhdGVkQW5jZXN0b3JJbmZvKGhvc3RDb250ZXh0RGV2LmFuY2VzdG9ySW5mbywgdHlwZSk7XG4gICAgICB2YWxpZGF0ZURPTU5lc3RpbmcobnVsbCwgc3RyaW5nLCBvd25BbmNlc3RvckluZm8pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGlmZlByb3BlcnRpZXMoZG9tRWxlbWVudCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRTZXRUZXh0Q29udGVudCh0eXBlLCBwcm9wcykge1xuICByZXR1cm4gdHlwZSA9PT0gJ3RleHRhcmVhJyB8fCB0eXBlID09PSAnb3B0aW9uJyB8fCB0eXBlID09PSAnbm9zY3JpcHQnIHx8IHR5cGVvZiBwcm9wcy5jaGlsZHJlbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT09ICdvYmplY3QnICYmIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICE9PSBudWxsICYmIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbCAhPSBudWxsO1xufVxuXG5mdW5jdGlvbiBzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlKHR5cGUsIHByb3BzKSB7XG4gIHJldHVybiAhIXByb3BzLmhpZGRlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dEluc3RhbmNlKHRleHQsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgaG9zdENvbnRleHQsIGludGVybmFsSW5zdGFuY2VIYW5kbGUpIHtcbiAge1xuICAgIHZhciBob3N0Q29udGV4dERldiA9IGhvc3RDb250ZXh0O1xuICAgIHZhbGlkYXRlRE9NTmVzdGluZyhudWxsLCB0ZXh0LCBob3N0Q29udGV4dERldi5hbmNlc3RvckluZm8pO1xuICB9XG4gIHZhciB0ZXh0Tm9kZSA9IGNyZWF0ZVRleHROb2RlKHRleHQsIHJvb3RDb250YWluZXJJbnN0YW5jZSk7XG4gIHByZWNhY2hlRmliZXJOb2RlKGludGVybmFsSW5zdGFuY2VIYW5kbGUsIHRleHROb2RlKTtcbiAgcmV0dXJuIHRleHROb2RlO1xufVxuXG52YXIgaXNQcmltYXJ5UmVuZGVyZXIgPSB0cnVlO1xuLy8gVGhpcyBpbml0aWFsaXphdGlvbiBjb2RlIG1heSBydW4gZXZlbiBvbiBzZXJ2ZXIgZW52aXJvbm1lbnRzXG4vLyBpZiBhIGNvbXBvbmVudCBqdXN0IGltcG9ydHMgUmVhY3RET00gKGUuZy4gZm9yIGZpbmRET01Ob2RlKS5cbi8vIFNvbWUgZW52aXJvbm1lbnRzIG1pZ2h0IG5vdCBoYXZlIHNldFRpbWVvdXQgb3IgY2xlYXJUaW1lb3V0LlxudmFyIHNjaGVkdWxlVGltZW91dCA9IHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nID8gc2V0VGltZW91dCA6IHVuZGVmaW5lZDtcbnZhciBjYW5jZWxUaW1lb3V0ID0gdHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJyA/IGNsZWFyVGltZW91dCA6IHVuZGVmaW5lZDtcbnZhciBub1RpbWVvdXQgPSAtMTtcbnZhciBzY2hlZHVsZVBhc3NpdmVFZmZlY3RzID0gc2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s7XG52YXIgY2FuY2VsUGFzc2l2ZUVmZmVjdHMgPSBzY2hlZHVsZXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vICAgICBNdXRhdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgc3VwcG9ydHNNdXRhdGlvbiA9IHRydWU7XG5cbmZ1bmN0aW9uIGNvbW1pdE1vdW50KGRvbUVsZW1lbnQsIHR5cGUsIG5ld1Byb3BzLCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gIC8vIERlc3BpdGUgdGhlIG5hbWluZyB0aGF0IG1pZ2h0IGltcGx5IG90aGVyd2lzZSwgdGhpcyBtZXRob2Qgb25seVxuICAvLyBmaXJlcyBpZiB0aGVyZSBpcyBhbiBgVXBkYXRlYCBlZmZlY3Qgc2NoZWR1bGVkIGR1cmluZyBtb3VudGluZy5cbiAgLy8gVGhpcyBoYXBwZW5zIGlmIGBmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbmAgcmV0dXJucyBgdHJ1ZWAgKHdoaWNoIGl0XG4gIC8vIGRvZXMgdG8gaW1wbGVtZW50IHRoZSBgYXV0b0ZvY3VzYCBhdHRyaWJ1dGUgb24gdGhlIGNsaWVudCkuIEJ1dFxuICAvLyB0aGVyZSBhcmUgYWxzbyBvdGhlciBjYXNlcyB3aGVuIHRoaXMgbWlnaHQgaGFwcGVuIChzdWNoIGFzIHBhdGNoaW5nXG4gIC8vIHVwIHRleHQgY29udGVudCBkdXJpbmcgaHlkcmF0aW9uIG1pc21hdGNoKS4gU28gd2UnbGwgY2hlY2sgdGhpcyBhZ2Fpbi5cbiAgaWYgKHNob3VsZEF1dG9Gb2N1c0hvc3RDb21wb25lbnQodHlwZSwgbmV3UHJvcHMpKSB7XG4gICAgZG9tRWxlbWVudC5mb2N1cygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFVwZGF0ZShkb21FbGVtZW50LCB1cGRhdGVQYXlsb2FkLCB0eXBlLCBvbGRQcm9wcywgbmV3UHJvcHMsIGludGVybmFsSW5zdGFuY2VIYW5kbGUpIHtcbiAgLy8gVXBkYXRlIHRoZSBwcm9wcyBoYW5kbGUgc28gdGhhdCB3ZSBrbm93IHdoaWNoIHByb3BzIGFyZSB0aGUgb25lcyB3aXRoXG4gIC8vIHdpdGggY3VycmVudCBldmVudCBoYW5kbGVycy5cbiAgdXBkYXRlRmliZXJQcm9wcyhkb21FbGVtZW50LCBuZXdQcm9wcyk7XG4gIC8vIEFwcGx5IHRoZSBkaWZmIHRvIHRoZSBET00gbm9kZS5cbiAgdXBkYXRlUHJvcGVydGllcyhkb21FbGVtZW50LCB1cGRhdGVQYXlsb2FkLCB0eXBlLCBvbGRQcm9wcywgbmV3UHJvcHMpO1xufVxuXG5mdW5jdGlvbiByZXNldFRleHRDb250ZW50KGRvbUVsZW1lbnQpIHtcbiAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgJycpO1xufVxuXG5mdW5jdGlvbiBjb21taXRUZXh0VXBkYXRlKHRleHRJbnN0YW5jZSwgb2xkVGV4dCwgbmV3VGV4dCkge1xuICB0ZXh0SW5zdGFuY2Uubm9kZVZhbHVlID0gbmV3VGV4dDtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQocGFyZW50SW5zdGFuY2UsIGNoaWxkKSB7XG4gIHBhcmVudEluc3RhbmNlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcihjb250YWluZXIsIGNoaWxkKSB7XG4gIHZhciBwYXJlbnROb2RlID0gdm9pZCAwO1xuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHtcbiAgICBwYXJlbnROb2RlID0gY29udGFpbmVyLnBhcmVudE5vZGU7XG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGQsIGNvbnRhaW5lcik7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50Tm9kZSA9IGNvbnRhaW5lcjtcbiAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgfVxuICAvLyBUaGlzIGNvbnRhaW5lciBtaWdodCBiZSB1c2VkIGZvciBhIHBvcnRhbC5cbiAgLy8gSWYgc29tZXRoaW5nIGluc2lkZSBhIHBvcnRhbCBpcyBjbGlja2VkLCB0aGF0IGNsaWNrIHNob3VsZCBidWJibGVcbiAgLy8gdGhyb3VnaCB0aGUgUmVhY3QgdHJlZS4gSG93ZXZlciwgb24gTW9iaWxlIFNhZmFyaSB0aGUgY2xpY2sgd291bGRcbiAgLy8gbmV2ZXIgYnViYmxlIHRocm91Z2ggdGhlICpET00qIHRyZWUgdW5sZXNzIGFuIGFuY2VzdG9yIHdpdGggb25jbGlja1xuICAvLyBldmVudCBleGlzdHMuIFNvIHdlIHdvdWxkbid0IHNlZSBpdCBhbmQgZGlzcGF0Y2ggaXQuXG4gIC8vIFRoaXMgaXMgd2h5IHdlIGVuc3VyZSB0aGF0IG5vbiBSZWFjdCByb290IGNvbnRhaW5lcnMgaGF2ZSBpbmxpbmUgb25jbGlja1xuICAvLyBkZWZpbmVkLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzExOTE4XG4gIHZhciByZWFjdFJvb3RDb250YWluZXIgPSBjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lcjtcbiAgaWYgKChyZWFjdFJvb3RDb250YWluZXIgPT09IG51bGwgfHwgcmVhY3RSb290Q29udGFpbmVyID09PSB1bmRlZmluZWQpICYmIHBhcmVudE5vZGUub25jbGljayA9PT0gbnVsbCkge1xuICAgIC8vIFRPRE86IFRoaXMgY2FzdCBtYXkgbm90IGJlIHNvdW5kIGZvciBTVkcsIE1hdGhNTCBvciBjdXN0b20gZWxlbWVudHMuXG4gICAgdHJhcENsaWNrT25Ob25JbnRlcmFjdGl2ZUVsZW1lbnQocGFyZW50Tm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKHBhcmVudEluc3RhbmNlLCBjaGlsZCwgYmVmb3JlQ2hpbGQpIHtcbiAgcGFyZW50SW5zdGFuY2UuaW5zZXJ0QmVmb3JlKGNoaWxkLCBiZWZvcmVDaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGluc2VydEluQ29udGFpbmVyQmVmb3JlKGNvbnRhaW5lciwgY2hpbGQsIGJlZm9yZUNoaWxkKSB7XG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkge1xuICAgIGNvbnRhaW5lci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjaGlsZCwgYmVmb3JlQ2hpbGQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoY2hpbGQsIGJlZm9yZUNoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZChwYXJlbnRJbnN0YW5jZSwgY2hpbGQpIHtcbiAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZEZyb21Db250YWluZXIoY29udGFpbmVyLCBjaGlsZCkge1xuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHtcbiAgICBjb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGVhclN1c3BlbnNlQm91bmRhcnkocGFyZW50SW5zdGFuY2UsIHN1c3BlbnNlSW5zdGFuY2UpIHtcbiAgdmFyIG5vZGUgPSBzdXNwZW5zZUluc3RhbmNlO1xuICAvLyBEZWxldGUgYWxsIG5vZGVzIHdpdGhpbiB0aGlzIHN1c3BlbnNlIGJvdW5kYXJ5LlxuICAvLyBUaGVyZSBtaWdodCBiZSBuZXN0ZWQgbm9kZXMgc28gd2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIGhvd1xuICAvLyBkZWVwIHdlIGFyZSBhbmQgb25seSBicmVhayBvdXQgd2hlbiB3ZSdyZSBiYWNrIG9uIHRvcC5cbiAgdmFyIGRlcHRoID0gMDtcbiAgZG8ge1xuICAgIHZhciBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgaWYgKG5leHROb2RlICYmIG5leHROb2RlLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHtcbiAgICAgIHZhciBkYXRhID0gbmV4dE5vZGUuZGF0YTtcbiAgICAgIGlmIChkYXRhID09PSBTVVNQRU5TRV9FTkRfREFUQSkge1xuICAgICAgICBpZiAoZGVwdGggPT09IDApIHtcbiAgICAgICAgICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChuZXh0Tm9kZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlcHRoLS07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gU1VTUEVOU0VfU1RBUlRfREFUQSkge1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgfVxuICAgIH1cbiAgICBub2RlID0gbmV4dE5vZGU7XG4gIH0gd2hpbGUgKG5vZGUpO1xuICAvLyBUT0RPOiBXYXJuLCB3ZSBkaWRuJ3QgZmluZCB0aGUgZW5kIGNvbW1lbnQgYm91bmRhcnkuXG59XG5cbmZ1bmN0aW9uIGNsZWFyU3VzcGVuc2VCb3VuZGFyeUZyb21Db250YWluZXIoY29udGFpbmVyLCBzdXNwZW5zZUluc3RhbmNlKSB7XG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkge1xuICAgIGNsZWFyU3VzcGVuc2VCb3VuZGFyeShjb250YWluZXIucGFyZW50Tm9kZSwgc3VzcGVuc2VJbnN0YW5jZSk7XG4gIH0gZWxzZSBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICBjbGVhclN1c3BlbnNlQm91bmRhcnkoY29udGFpbmVyLCBzdXNwZW5zZUluc3RhbmNlKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBEb2N1bWVudCBub2RlcyBzaG91bGQgbmV2ZXIgY29udGFpbiBzdXNwZW5zZSBib3VuZGFyaWVzLlxuICB9XG59XG5cbmZ1bmN0aW9uIGhpZGVJbnN0YW5jZShpbnN0YW5jZSkge1xuICAvLyBUT0RPOiBEb2VzIHRoaXMgd29yayBmb3IgYWxsIGVsZW1lbnQgdHlwZXM/IFdoYXQgYWJvdXQgTWF0aE1MPyBTaG91bGQgd2VcbiAgLy8gcGFzcyBob3N0IGNvbnRleHQgdG8gdGhpcyBtZXRob2Q/XG4gIGluc3RhbmNlID0gaW5zdGFuY2U7XG4gIGluc3RhbmNlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG59XG5cbmZ1bmN0aW9uIGhpZGVUZXh0SW5zdGFuY2UodGV4dEluc3RhbmNlKSB7XG4gIHRleHRJbnN0YW5jZS5ub2RlVmFsdWUgPSAnJztcbn1cblxuZnVuY3Rpb24gdW5oaWRlSW5zdGFuY2UoaW5zdGFuY2UsIHByb3BzKSB7XG4gIGluc3RhbmNlID0gaW5zdGFuY2U7XG4gIHZhciBzdHlsZVByb3AgPSBwcm9wc1tTVFlMRV07XG4gIHZhciBkaXNwbGF5ID0gc3R5bGVQcm9wICE9PSB1bmRlZmluZWQgJiYgc3R5bGVQcm9wICE9PSBudWxsICYmIHN0eWxlUHJvcC5oYXNPd25Qcm9wZXJ0eSgnZGlzcGxheScpID8gc3R5bGVQcm9wLmRpc3BsYXkgOiBudWxsO1xuICBpbnN0YW5jZS5zdHlsZS5kaXNwbGF5ID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZSgnZGlzcGxheScsIGRpc3BsYXkpO1xufVxuXG5mdW5jdGlvbiB1bmhpZGVUZXh0SW5zdGFuY2UodGV4dEluc3RhbmNlLCB0ZXh0KSB7XG4gIHRleHRJbnN0YW5jZS5ub2RlVmFsdWUgPSB0ZXh0O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgICAgSHlkcmF0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBzdXBwb3J0c0h5ZHJhdGlvbiA9IHRydWU7XG5cbmZ1bmN0aW9uIGNhbkh5ZHJhdGVJbnN0YW5jZShpbnN0YW5jZSwgdHlwZSwgcHJvcHMpIHtcbiAgaWYgKGluc3RhbmNlLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUgfHwgdHlwZS50b0xvd2VyQ2FzZSgpICE9PSBpbnN0YW5jZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gVGhpcyBoYXMgbm93IGJlZW4gcmVmaW5lZCB0byBhbiBlbGVtZW50IG5vZGUuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuZnVuY3Rpb24gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShpbnN0YW5jZSwgdGV4dCkge1xuICBpZiAodGV4dCA9PT0gJycgfHwgaW5zdGFuY2Uubm9kZVR5cGUgIT09IFRFWFRfTk9ERSkge1xuICAgIC8vIEVtcHR5IHN0cmluZ3MgYXJlIG5vdCBwYXJzZWQgYnkgSFRNTCBzbyB0aGVyZSB3b24ndCBiZSBhIGNvcnJlY3QgbWF0Y2ggaGVyZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBUaGlzIGhhcyBub3cgYmVlbiByZWZpbmVkIHRvIGEgdGV4dCBub2RlLlxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbmZ1bmN0aW9uIGNhbkh5ZHJhdGVTdXNwZW5zZUluc3RhbmNlKGluc3RhbmNlKSB7XG4gIGlmIChpbnN0YW5jZS5ub2RlVHlwZSAhPT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgLy8gRW1wdHkgc3RyaW5ncyBhcmUgbm90IHBhcnNlZCBieSBIVE1MIHNvIHRoZXJlIHdvbid0IGJlIGEgY29ycmVjdCBtYXRjaCBoZXJlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIFRoaXMgaGFzIG5vdyBiZWVuIHJlZmluZWQgdG8gYSBzdXNwZW5zZSBub2RlLlxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRIeWRyYXRhYmxlU2libGluZyhpbnN0YW5jZSkge1xuICB2YXIgbm9kZSA9IGluc3RhbmNlLm5leHRTaWJsaW5nO1xuICAvLyBTa2lwIG5vbi1oeWRyYXRhYmxlIG5vZGVzLlxuICB3aGlsZSAobm9kZSAmJiBub2RlLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUgJiYgbm9kZS5ub2RlVHlwZSAhPT0gVEVYVF9OT0RFICYmICghZW5hYmxlU3VzcGVuc2VTZXJ2ZXJSZW5kZXJlciB8fCBub2RlLm5vZGVUeXBlICE9PSBDT01NRU5UX05PREUgfHwgbm9kZS5kYXRhICE9PSBTVVNQRU5TRV9TVEFSVF9EQVRBKSkge1xuICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZChwYXJlbnRJbnN0YW5jZSkge1xuICB2YXIgbmV4dCA9IHBhcmVudEluc3RhbmNlLmZpcnN0Q2hpbGQ7XG4gIC8vIFNraXAgbm9uLWh5ZHJhdGFibGUgbm9kZXMuXG4gIHdoaWxlIChuZXh0ICYmIG5leHQubm9kZVR5cGUgIT09IEVMRU1FTlRfTk9ERSAmJiBuZXh0Lm5vZGVUeXBlICE9PSBURVhUX05PREUgJiYgKCFlbmFibGVTdXNwZW5zZVNlcnZlclJlbmRlcmVyIHx8IG5leHQubm9kZVR5cGUgIT09IENPTU1FTlRfTk9ERSB8fCBuZXh0LmRhdGEgIT09IFNVU1BFTlNFX1NUQVJUX0RBVEEpKSB7XG4gICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIGh5ZHJhdGVJbnN0YW5jZShpbnN0YW5jZSwgdHlwZSwgcHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgaG9zdENvbnRleHQsIGludGVybmFsSW5zdGFuY2VIYW5kbGUpIHtcbiAgcHJlY2FjaGVGaWJlck5vZGUoaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSwgaW5zdGFuY2UpO1xuICAvLyBUT0RPOiBQb3NzaWJseSBkZWZlciB0aGlzIHVudGlsIHRoZSBjb21taXQgcGhhc2Ugd2hlcmUgYWxsIHRoZSBldmVudHNcbiAgLy8gZ2V0IGF0dGFjaGVkLlxuICB1cGRhdGVGaWJlclByb3BzKGluc3RhbmNlLCBwcm9wcyk7XG4gIHZhciBwYXJlbnROYW1lc3BhY2UgPSB2b2lkIDA7XG4gIHtcbiAgICB2YXIgaG9zdENvbnRleHREZXYgPSBob3N0Q29udGV4dDtcbiAgICBwYXJlbnROYW1lc3BhY2UgPSBob3N0Q29udGV4dERldi5uYW1lc3BhY2U7XG4gIH1cbiAgcmV0dXJuIGRpZmZIeWRyYXRlZFByb3BlcnRpZXMoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCBwYXJlbnROYW1lc3BhY2UsIHJvb3RDb250YWluZXJJbnN0YW5jZSk7XG59XG5cbmZ1bmN0aW9uIGh5ZHJhdGVUZXh0SW5zdGFuY2UodGV4dEluc3RhbmNlLCB0ZXh0LCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gIHByZWNhY2hlRmliZXJOb2RlKGludGVybmFsSW5zdGFuY2VIYW5kbGUsIHRleHRJbnN0YW5jZSk7XG4gIHJldHVybiBkaWZmSHlkcmF0ZWRUZXh0KHRleHRJbnN0YW5jZSwgdGV4dCk7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRIeWRyYXRhYmxlSW5zdGFuY2VBZnRlclN1c3BlbnNlSW5zdGFuY2Uoc3VzcGVuc2VJbnN0YW5jZSkge1xuICB2YXIgbm9kZSA9IHN1c3BlbnNlSW5zdGFuY2UubmV4dFNpYmxpbmc7XG4gIC8vIFNraXAgcGFzdCBhbGwgbm9kZXMgd2l0aGluIHRoaXMgc3VzcGVuc2UgYm91bmRhcnkuXG4gIC8vIFRoZXJlIG1pZ2h0IGJlIG5lc3RlZCBub2RlcyBzbyB3ZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgaG93XG4gIC8vIGRlZXAgd2UgYXJlIGFuZCBvbmx5IGJyZWFrIG91dCB3aGVuIHdlJ3JlIGJhY2sgb24gdG9wLlxuICB2YXIgZGVwdGggPSAwO1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHtcbiAgICAgIHZhciBkYXRhID0gbm9kZS5kYXRhO1xuICAgICAgaWYgKGRhdGEgPT09IFNVU1BFTlNFX0VORF9EQVRBKSB7XG4gICAgICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcobm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkYXRhID09PSBTVVNQRU5TRV9TVEFSVF9EQVRBKSB7XG4gICAgICAgIGRlcHRoKys7XG4gICAgICB9XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICB9XG4gIC8vIFRPRE86IFdhcm4sIHdlIGRpZG4ndCBmaW5kIHRoZSBlbmQgY29tbWVudCBib3VuZGFyeS5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UocGFyZW50Q29udGFpbmVyLCB0ZXh0SW5zdGFuY2UsIHRleHQpIHtcbiAge1xuICAgIHdhcm5Gb3JVbm1hdGNoZWRUZXh0KHRleHRJbnN0YW5jZSwgdGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIHRleHRJbnN0YW5jZSwgdGV4dCkge1xuICBpZiAodHJ1ZSAmJiBwYXJlbnRQcm9wc1tTVVBQUkVTU19IWURSQVRJT05fV0FSTklOR10gIT09IHRydWUpIHtcbiAgICB3YXJuRm9yVW5tYXRjaGVkVGV4dCh0ZXh0SW5zdGFuY2UsIHRleHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZShwYXJlbnRDb250YWluZXIsIGluc3RhbmNlKSB7XG4gIHtcbiAgICBpZiAoaW5zdGFuY2Uubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudChwYXJlbnRDb250YWluZXIsIGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHtcbiAgICAgIC8vIFRPRE86IHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVN1c3BlbnNlQm91bmRhcnlcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dChwYXJlbnRDb250YWluZXIsIGluc3RhbmNlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlkTm90SHlkcmF0ZUluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgaW5zdGFuY2UpIHtcbiAgaWYgKHRydWUgJiYgcGFyZW50UHJvcHNbU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkddICE9PSB0cnVlKSB7XG4gICAgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQocGFyZW50SW5zdGFuY2UsIGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHtcbiAgICAgIC8vIFRPRE86IHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVN1c3BlbnNlQm91bmRhcnlcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dChwYXJlbnRJbnN0YW5jZSwgaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlKHBhcmVudENvbnRhaW5lciwgdHlwZSwgcHJvcHMpIHtcbiAge1xuICAgIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudChwYXJlbnRDb250YWluZXIsIHR5cGUsIHByb3BzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZShwYXJlbnRDb250YWluZXIsIHRleHQpIHtcbiAge1xuICAgIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dChwYXJlbnRDb250YWluZXIsIHRleHQpO1xuICB9XG59XG5cblxuXG5mdW5jdGlvbiBkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgdHlwZSwgcHJvcHMpIHtcbiAgaWYgKHRydWUgJiYgcGFyZW50UHJvcHNbU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkddICE9PSB0cnVlKSB7XG4gICAgd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50KHBhcmVudEluc3RhbmNlLCB0eXBlLCBwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UocGFyZW50VHlwZSwgcGFyZW50UHJvcHMsIHBhcmVudEluc3RhbmNlLCB0ZXh0KSB7XG4gIGlmICh0cnVlICYmIHBhcmVudFByb3BzW1NVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HXSAhPT0gdHJ1ZSkge1xuICAgIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dChwYXJlbnRJbnN0YW5jZSwgdGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlkTm90RmluZEh5ZHJhdGFibGVTdXNwZW5zZUluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSkge1xuICBpZiAodHJ1ZSAmJiBwYXJlbnRQcm9wc1tTVVBQUkVTU19IWURSQVRJT05fV0FSTklOR10gIT09IHRydWUpIHtcbiAgICAvLyBUT0RPOiB3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFN1c3BlbnNlKHBhcmVudEluc3RhbmNlKTtcbiAgfVxufVxuXG4vLyBQcmVmaXggbWVhc3VyZW1lbnRzIHNvIHRoYXQgaXQncyBwb3NzaWJsZSB0byBmaWx0ZXIgdGhlbS5cbi8vIExvbmdlciBwcmVmaXhlcyBhcmUgaGFyZCB0byByZWFkIGluIERldlRvb2xzLlxudmFyIHJlYWN0RW1vamkgPSAnXFx1MjY5Qic7XG52YXIgd2FybmluZ0Vtb2ppID0gJ1xcdTI2RDQnO1xudmFyIHN1cHBvcnRzVXNlclRpbWluZyA9IHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLm1hcmsgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLm1lYXN1cmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLmNsZWFyTWVhc3VyZXMgPT09ICdmdW5jdGlvbic7XG5cbi8vIEtlZXAgdHJhY2sgb2YgY3VycmVudCBmaWJlciBzbyB0aGF0IHdlIGtub3cgdGhlIHBhdGggdG8gdW53aW5kIG9uIHBhdXNlLlxuLy8gVE9ETzogdGhpcyBsb29rcyB0aGUgc2FtZSBhcyBuZXh0VW5pdE9mV29yayBpbiBzY2hlZHVsZXIuIENhbiB3ZSB1bmlmeSB0aGVtP1xudmFyIGN1cnJlbnRGaWJlciA9IG51bGw7XG4vLyBJZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIHVzZXIgY29kZSwgd2hpY2ggZmliZXIgYW5kIG1ldGhvZCBpcyBpdD9cbi8vIFJldXNpbmcgYGN1cnJlbnRGaWJlcmAgd291bGQgYmUgY29uZnVzaW5nIGZvciB0aGlzIGJlY2F1c2UgdXNlciBjb2RlIGZpYmVyXG4vLyBjYW4gY2hhbmdlIGR1cmluZyBjb21taXQgcGhhc2UgdG9vLCBidXQgd2UgZG9uJ3QgbmVlZCB0byB1bndpbmQgaXQgKHNpbmNlXG4vLyBsaWZlY3ljbGVzIGluIHRoZSBjb21taXQgcGhhc2UgZG9uJ3QgcmVzZW1ibGUgYSB0cmVlKS5cbnZhciBjdXJyZW50UGhhc2UgPSBudWxsO1xudmFyIGN1cnJlbnRQaGFzZUZpYmVyID0gbnVsbDtcbi8vIERpZCBsaWZlY3ljbGUgaG9vayBzY2hlZHVsZSBhbiB1cGRhdGU/IFRoaXMgaXMgb2Z0ZW4gYSBwZXJmb3JtYW5jZSBwcm9ibGVtLFxuLy8gc28gd2Ugd2lsbCBrZWVwIHRyYWNrIG9mIGl0LCBhbmQgaW5jbHVkZSBpdCBpbiB0aGUgcmVwb3J0LlxuLy8gVHJhY2sgY29tbWl0cyBjYXVzZWQgYnkgY2FzY2FkaW5nIHVwZGF0ZXMuXG52YXIgaXNDb21taXR0aW5nID0gZmFsc2U7XG52YXIgaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50Q29tbWl0ID0gZmFsc2U7XG52YXIgaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50UGhhc2UgPSBmYWxzZTtcbnZhciBjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wID0gMDtcbnZhciBlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCA9IDA7XG52YXIgaXNXYWl0aW5nRm9yQ2FsbGJhY2sgPSBmYWxzZTtcbi8vIER1cmluZyBjb21taXRzLCB3ZSBvbmx5IHNob3cgYSBtZWFzdXJlbWVudCBvbmNlIHBlciBtZXRob2QgbmFtZVxuLy8gdG8gYXZvaWQgc3RyZXRjaCB0aGUgY29tbWl0IHBoYXNlIHdpdGggbWVhc3VyZW1lbnQgb3ZlcmhlYWQuXG52YXIgbGFiZWxzSW5DdXJyZW50Q29tbWl0ID0gbmV3IFNldCgpO1xuXG52YXIgZm9ybWF0TWFya05hbWUgPSBmdW5jdGlvbiAobWFya05hbWUpIHtcbiAgcmV0dXJuIHJlYWN0RW1vamkgKyAnICcgKyBtYXJrTmFtZTtcbn07XG5cbnZhciBmb3JtYXRMYWJlbCA9IGZ1bmN0aW9uIChsYWJlbCwgd2FybmluZykge1xuICB2YXIgcHJlZml4ID0gd2FybmluZyA/IHdhcm5pbmdFbW9qaSArICcgJyA6IHJlYWN0RW1vamkgKyAnICc7XG4gIHZhciBzdWZmaXggPSB3YXJuaW5nID8gJyBXYXJuaW5nOiAnICsgd2FybmluZyA6ICcnO1xuICByZXR1cm4gJycgKyBwcmVmaXggKyBsYWJlbCArIHN1ZmZpeDtcbn07XG5cbnZhciBiZWdpbk1hcmsgPSBmdW5jdGlvbiAobWFya05hbWUpIHtcbiAgcGVyZm9ybWFuY2UubWFyayhmb3JtYXRNYXJrTmFtZShtYXJrTmFtZSkpO1xufTtcblxudmFyIGNsZWFyTWFyayA9IGZ1bmN0aW9uIChtYXJrTmFtZSkge1xuICBwZXJmb3JtYW5jZS5jbGVhck1hcmtzKGZvcm1hdE1hcmtOYW1lKG1hcmtOYW1lKSk7XG59O1xuXG52YXIgZW5kTWFyayA9IGZ1bmN0aW9uIChsYWJlbCwgbWFya05hbWUsIHdhcm5pbmcpIHtcbiAgdmFyIGZvcm1hdHRlZE1hcmtOYW1lID0gZm9ybWF0TWFya05hbWUobWFya05hbWUpO1xuICB2YXIgZm9ybWF0dGVkTGFiZWwgPSBmb3JtYXRMYWJlbChsYWJlbCwgd2FybmluZyk7XG4gIHRyeSB7XG4gICAgcGVyZm9ybWFuY2UubWVhc3VyZShmb3JtYXR0ZWRMYWJlbCwgZm9ybWF0dGVkTWFya05hbWUpO1xuICB9IGNhdGNoIChlcnIpIHt9XG4gIC8vIElmIHByZXZpb3VzIG1hcmsgd2FzIG1pc3NpbmcgZm9yIHNvbWUgcmVhc29uLCB0aGlzIHdpbGwgdGhyb3cuXG4gIC8vIFRoaXMgY291bGQgb25seSBoYXBwZW4gaWYgUmVhY3QgY3Jhc2hlZCBpbiBhbiB1bmV4cGVjdGVkIHBsYWNlIGVhcmxpZXIuXG4gIC8vIERvbid0IHBpbGUgb24gd2l0aCBtb3JlIGVycm9ycy5cblxuICAvLyBDbGVhciBtYXJrcyBpbW1lZGlhdGVseSB0byBhdm9pZCBncm93aW5nIGJ1ZmZlci5cbiAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhmb3JtYXR0ZWRNYXJrTmFtZSk7XG4gIHBlcmZvcm1hbmNlLmNsZWFyTWVhc3VyZXMoZm9ybWF0dGVkTGFiZWwpO1xufTtcblxudmFyIGdldEZpYmVyTWFya05hbWUgPSBmdW5jdGlvbiAobGFiZWwsIGRlYnVnSUQpIHtcbiAgcmV0dXJuIGxhYmVsICsgJyAoIycgKyBkZWJ1Z0lEICsgJyknO1xufTtcblxudmFyIGdldEZpYmVyTGFiZWwgPSBmdW5jdGlvbiAoY29tcG9uZW50TmFtZSwgaXNNb3VudGVkLCBwaGFzZSkge1xuICBpZiAocGhhc2UgPT09IG51bGwpIHtcbiAgICAvLyBUaGVzZSBhcmUgY29tcG9zaXRlIGNvbXBvbmVudCB0b3RhbCB0aW1lIG1lYXN1cmVtZW50cy5cbiAgICByZXR1cm4gY29tcG9uZW50TmFtZSArICcgWycgKyAoaXNNb3VudGVkID8gJ3VwZGF0ZScgOiAnbW91bnQnKSArICddJztcbiAgfSBlbHNlIHtcbiAgICAvLyBDb21wb3NpdGUgY29tcG9uZW50IG1ldGhvZHMuXG4gICAgcmV0dXJuIGNvbXBvbmVudE5hbWUgKyAnLicgKyBwaGFzZTtcbiAgfVxufTtcblxudmFyIGJlZ2luRmliZXJNYXJrID0gZnVuY3Rpb24gKGZpYmVyLCBwaGFzZSkge1xuICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ1Vua25vd24nO1xuICB2YXIgZGVidWdJRCA9IGZpYmVyLl9kZWJ1Z0lEO1xuICB2YXIgaXNNb3VudGVkID0gZmliZXIuYWx0ZXJuYXRlICE9PSBudWxsO1xuICB2YXIgbGFiZWwgPSBnZXRGaWJlckxhYmVsKGNvbXBvbmVudE5hbWUsIGlzTW91bnRlZCwgcGhhc2UpO1xuXG4gIGlmIChpc0NvbW1pdHRpbmcgJiYgbGFiZWxzSW5DdXJyZW50Q29tbWl0LmhhcyhsYWJlbCkpIHtcbiAgICAvLyBEdXJpbmcgdGhlIGNvbW1pdCBwaGFzZSwgd2UgZG9uJ3Qgc2hvdyBkdXBsaWNhdGUgbGFiZWxzIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBhIGZpeGVkIG92ZXJoZWFkIGZvciBldmVyeSBtZWFzdXJlbWVudCwgYW5kIHdlIGRvbid0XG4gICAgLy8gd2FudCB0byBzdHJldGNoIHRoZSBjb21taXQgcGhhc2UgYmV5b25kIG5lY2Vzc2FyeS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGFiZWxzSW5DdXJyZW50Q29tbWl0LmFkZChsYWJlbCk7XG5cbiAgdmFyIG1hcmtOYW1lID0gZ2V0RmliZXJNYXJrTmFtZShsYWJlbCwgZGVidWdJRCk7XG4gIGJlZ2luTWFyayhtYXJrTmFtZSk7XG4gIHJldHVybiB0cnVlO1xufTtcblxudmFyIGNsZWFyRmliZXJNYXJrID0gZnVuY3Rpb24gKGZpYmVyLCBwaGFzZSkge1xuICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ1Vua25vd24nO1xuICB2YXIgZGVidWdJRCA9IGZpYmVyLl9kZWJ1Z0lEO1xuICB2YXIgaXNNb3VudGVkID0gZmliZXIuYWx0ZXJuYXRlICE9PSBudWxsO1xuICB2YXIgbGFiZWwgPSBnZXRGaWJlckxhYmVsKGNvbXBvbmVudE5hbWUsIGlzTW91bnRlZCwgcGhhc2UpO1xuICB2YXIgbWFya05hbWUgPSBnZXRGaWJlck1hcmtOYW1lKGxhYmVsLCBkZWJ1Z0lEKTtcbiAgY2xlYXJNYXJrKG1hcmtOYW1lKTtcbn07XG5cbnZhciBlbmRGaWJlck1hcmsgPSBmdW5jdGlvbiAoZmliZXIsIHBoYXNlLCB3YXJuaW5nKSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShmaWJlci50eXBlKSB8fCAnVW5rbm93bic7XG4gIHZhciBkZWJ1Z0lEID0gZmliZXIuX2RlYnVnSUQ7XG4gIHZhciBpc01vdW50ZWQgPSBmaWJlci5hbHRlcm5hdGUgIT09IG51bGw7XG4gIHZhciBsYWJlbCA9IGdldEZpYmVyTGFiZWwoY29tcG9uZW50TmFtZSwgaXNNb3VudGVkLCBwaGFzZSk7XG4gIHZhciBtYXJrTmFtZSA9IGdldEZpYmVyTWFya05hbWUobGFiZWwsIGRlYnVnSUQpO1xuICBlbmRNYXJrKGxhYmVsLCBtYXJrTmFtZSwgd2FybmluZyk7XG59O1xuXG52YXIgc2hvdWxkSWdub3JlRmliZXIgPSBmdW5jdGlvbiAoZmliZXIpIHtcbiAgLy8gSG9zdCBjb21wb25lbnRzIHNob3VsZCBiZSBza2lwcGVkIGluIHRoZSB0aW1lbGluZS5cbiAgLy8gV2UgY291bGQgY2hlY2sgdHlwZW9mIGZpYmVyLnR5cGUsIGJ1dCBkb2VzIHRoaXMgd29yayB3aXRoIFJOP1xuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgY2FzZSBDb250ZXh0Q29uc3VtZXI6XG4gICAgY2FzZSBNb2RlOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGNsZWFyUGVuZGluZ1BoYXNlTWVhc3VyZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChjdXJyZW50UGhhc2UgIT09IG51bGwgJiYgY3VycmVudFBoYXNlRmliZXIgIT09IG51bGwpIHtcbiAgICBjbGVhckZpYmVyTWFyayhjdXJyZW50UGhhc2VGaWJlciwgY3VycmVudFBoYXNlKTtcbiAgfVxuICBjdXJyZW50UGhhc2VGaWJlciA9IG51bGw7XG4gIGN1cnJlbnRQaGFzZSA9IG51bGw7XG4gIGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudFBoYXNlID0gZmFsc2U7XG59O1xuXG52YXIgcGF1c2VUaW1lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFN0b3BzIGFsbCBjdXJyZW50bHkgYWN0aXZlIG1lYXN1cmVtZW50cyBzbyB0aGF0IHRoZXkgY2FuIGJlIHJlc3VtZWRcbiAgLy8gaWYgd2UgY29udGludWUgaW4gYSBsYXRlciBkZWZlcnJlZCBsb29wIGZyb20gdGhlIHNhbWUgdW5pdCBvZiB3b3JrLlxuICB2YXIgZmliZXIgPSBjdXJyZW50RmliZXI7XG4gIHdoaWxlIChmaWJlcikge1xuICAgIGlmIChmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZykge1xuICAgICAgZW5kRmliZXJNYXJrKGZpYmVyLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgZmliZXIgPSBmaWJlci5yZXR1cm47XG4gIH1cbn07XG5cbnZhciByZXN1bWVUaW1lcnNSZWN1cnNpdmVseSA9IGZ1bmN0aW9uIChmaWJlcikge1xuICBpZiAoZmliZXIucmV0dXJuICE9PSBudWxsKSB7XG4gICAgcmVzdW1lVGltZXJzUmVjdXJzaXZlbHkoZmliZXIucmV0dXJuKTtcbiAgfVxuICBpZiAoZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcpIHtcbiAgICBiZWdpbkZpYmVyTWFyayhmaWJlciwgbnVsbCk7XG4gIH1cbn07XG5cbnZhciByZXN1bWVUaW1lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFJlc3VtZXMgYWxsIG1lYXN1cmVtZW50cyB0aGF0IHdlcmUgYWN0aXZlIGR1cmluZyB0aGUgbGFzdCBkZWZlcnJlZCBsb29wLlxuICBpZiAoY3VycmVudEZpYmVyICE9PSBudWxsKSB7XG4gICAgcmVzdW1lVGltZXJzUmVjdXJzaXZlbHkoY3VycmVudEZpYmVyKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVjb3JkRWZmZWN0KCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0Kys7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkU2NoZWR1bGVVcGRhdGUoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKGlzQ29tbWl0dGluZykge1xuICAgICAgaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50Q29tbWl0ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRQaGFzZSAhPT0gbnVsbCAmJiBjdXJyZW50UGhhc2UgIT09ICdjb21wb25lbnRXaWxsTW91bnQnICYmIGN1cnJlbnRQaGFzZSAhPT0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnKSB7XG4gICAgICBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRQaGFzZSA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0UmVxdWVzdENhbGxiYWNrVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKHN1cHBvcnRzVXNlclRpbWluZyAmJiAhaXNXYWl0aW5nRm9yQ2FsbGJhY2spIHtcbiAgICAgIGlzV2FpdGluZ0ZvckNhbGxiYWNrID0gdHJ1ZTtcbiAgICAgIGJlZ2luTWFyaygnKFdhaXRpbmcgZm9yIGFzeW5jIGNhbGxiYWNrLi4uKScpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wUmVxdWVzdENhbGxiYWNrVGltZXIoZGlkRXhwaXJlLCBleHBpcmF0aW9uVGltZSkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmIChzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIGlzV2FpdGluZ0ZvckNhbGxiYWNrID0gZmFsc2U7XG4gICAgICB2YXIgd2FybmluZyA9IGRpZEV4cGlyZSA/ICdSZWFjdCB3YXMgYmxvY2tlZCBieSBtYWluIHRocmVhZCcgOiBudWxsO1xuICAgICAgZW5kTWFyaygnKFdhaXRpbmcgZm9yIGFzeW5jIGNhbGxiYWNrLi4uIHdpbGwgZm9yY2UgZmx1c2ggaW4gJyArIGV4cGlyYXRpb25UaW1lICsgJyBtcyknLCAnKFdhaXRpbmcgZm9yIGFzeW5jIGNhbGxiYWNrLi4uKScsIHdhcm5pbmcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydFdvcmtUaW1lcihmaWJlcikge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nIHx8IHNob3VsZElnbm9yZUZpYmVyKGZpYmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBwYXVzZSwgdGhpcyBpcyB0aGUgZmliZXIgdG8gdW53aW5kIGZyb20uXG4gICAgY3VycmVudEZpYmVyID0gZmliZXI7XG4gICAgaWYgKCFiZWdpbkZpYmVyTWFyayhmaWJlciwgbnVsbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbmNlbFdvcmtUaW1lcihmaWJlcikge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nIHx8IHNob3VsZElnbm9yZUZpYmVyKGZpYmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZW1lbWJlciB3ZSBzaG91bGRuJ3QgY29tcGxldGUgbWVhc3VyZW1lbnQgZm9yIHRoaXMgZmliZXIuXG4gICAgLy8gT3RoZXJ3aXNlIGZsYW1lY2hhcnQgd2lsbCBiZSBkZWVwIGV2ZW4gZm9yIHNtYWxsIHVwZGF0ZXMuXG4gICAgZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcgPSBmYWxzZTtcbiAgICBjbGVhckZpYmVyTWFyayhmaWJlciwgbnVsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcFdvcmtUaW1lcihmaWJlcikge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nIHx8IHNob3VsZElnbm9yZUZpYmVyKGZpYmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBwYXVzZSwgaXRzIHBhcmVudCBpcyB0aGUgZmliZXIgdG8gdW53aW5kIGZyb20uXG4gICAgY3VycmVudEZpYmVyID0gZmliZXIucmV0dXJuO1xuICAgIGlmICghZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcgPSBmYWxzZTtcbiAgICBlbmRGaWJlck1hcmsoZmliZXIsIG51bGwsIG51bGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3BGYWlsZWRXb3JrVGltZXIoZmliZXIpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZyB8fCBzaG91bGRJZ25vcmVGaWJlcihmaWJlcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgd2UgcGF1c2UsIGl0cyBwYXJlbnQgaXMgdGhlIGZpYmVyIHRvIHVud2luZCBmcm9tLlxuICAgIGN1cnJlbnRGaWJlciA9IGZpYmVyLnJldHVybjtcbiAgICBpZiAoIWZpYmVyLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZpYmVyLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nID0gZmFsc2U7XG4gICAgdmFyIHdhcm5pbmcgPSBmaWJlci50YWcgPT09IFN1c3BlbnNlQ29tcG9uZW50IHx8IGZpYmVyLnRhZyA9PT0gRGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50ID8gJ1JlbmRlcmluZyB3YXMgc3VzcGVuZGVkJyA6ICdBbiBlcnJvciB3YXMgdGhyb3duIGluc2lkZSB0aGlzIGVycm9yIGJvdW5kYXJ5JztcbiAgICBlbmRGaWJlck1hcmsoZmliZXIsIG51bGwsIHdhcm5pbmcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0UGhhc2VUaW1lcihmaWJlciwgcGhhc2UpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbGVhclBlbmRpbmdQaGFzZU1lYXN1cmVtZW50KCk7XG4gICAgaWYgKCFiZWdpbkZpYmVyTWFyayhmaWJlciwgcGhhc2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN1cnJlbnRQaGFzZUZpYmVyID0gZmliZXI7XG4gICAgY3VycmVudFBoYXNlID0gcGhhc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcFBoYXNlVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRQaGFzZSAhPT0gbnVsbCAmJiBjdXJyZW50UGhhc2VGaWJlciAhPT0gbnVsbCkge1xuICAgICAgdmFyIHdhcm5pbmcgPSBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRQaGFzZSA/ICdTY2hlZHVsZWQgYSBjYXNjYWRpbmcgdXBkYXRlJyA6IG51bGw7XG4gICAgICBlbmRGaWJlck1hcmsoY3VycmVudFBoYXNlRmliZXIsIGN1cnJlbnRQaGFzZSwgd2FybmluZyk7XG4gICAgfVxuICAgIGN1cnJlbnRQaGFzZSA9IG51bGw7XG4gICAgY3VycmVudFBoYXNlRmliZXIgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0V29ya0xvb3BUaW1lcihuZXh0VW5pdE9mV29yaykge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGN1cnJlbnRGaWJlciA9IG5leHRVbml0T2ZXb3JrO1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbW1pdENvdW50SW5DdXJyZW50V29ya0xvb3AgPSAwO1xuICAgIC8vIFRoaXMgaXMgdG9wIGxldmVsIGNhbGwuXG4gICAgLy8gQW55IG90aGVyIG1lYXN1cmVtZW50cyBhcmUgcGVyZm9ybWVkIHdpdGhpbi5cbiAgICBiZWdpbk1hcmsoJyhSZWFjdCBUcmVlIFJlY29uY2lsaWF0aW9uKScpO1xuICAgIC8vIFJlc3VtZSBhbnkgbWVhc3VyZW1lbnRzIHRoYXQgd2VyZSBpbiBwcm9ncmVzcyBkdXJpbmcgdGhlIGxhc3QgbG9vcC5cbiAgICByZXN1bWVUaW1lcnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wV29ya0xvb3BUaW1lcihpbnRlcnJ1cHRlZEJ5LCBkaWRDb21wbGV0ZVJvb3QpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgd2FybmluZyA9IG51bGw7XG4gICAgaWYgKGludGVycnVwdGVkQnkgIT09IG51bGwpIHtcbiAgICAgIGlmIChpbnRlcnJ1cHRlZEJ5LnRhZyA9PT0gSG9zdFJvb3QpIHtcbiAgICAgICAgd2FybmluZyA9ICdBIHRvcC1sZXZlbCB1cGRhdGUgaW50ZXJydXB0ZWQgdGhlIHByZXZpb3VzIHJlbmRlcic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoaW50ZXJydXB0ZWRCeS50eXBlKSB8fCAnVW5rbm93bic7XG4gICAgICAgIHdhcm5pbmcgPSAnQW4gdXBkYXRlIHRvICcgKyBjb21wb25lbnROYW1lICsgJyBpbnRlcnJ1cHRlZCB0aGUgcHJldmlvdXMgcmVuZGVyJztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbW1pdENvdW50SW5DdXJyZW50V29ya0xvb3AgPiAxKSB7XG4gICAgICB3YXJuaW5nID0gJ1RoZXJlIHdlcmUgY2FzY2FkaW5nIHVwZGF0ZXMnO1xuICAgIH1cbiAgICBjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wID0gMDtcbiAgICB2YXIgbGFiZWwgPSBkaWRDb21wbGV0ZVJvb3QgPyAnKFJlYWN0IFRyZWUgUmVjb25jaWxpYXRpb246IENvbXBsZXRlZCBSb290KScgOiAnKFJlYWN0IFRyZWUgUmVjb25jaWxpYXRpb246IFlpZWxkZWQpJztcbiAgICAvLyBQYXVzZSBhbnkgbWVhc3VyZW1lbnRzIHVudGlsIHRoZSBuZXh0IGxvb3AuXG4gICAgcGF1c2VUaW1lcnMoKTtcbiAgICBlbmRNYXJrKGxhYmVsLCAnKFJlYWN0IFRyZWUgUmVjb25jaWxpYXRpb24pJywgd2FybmluZyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRDb21taXRUaW1lcigpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpc0NvbW1pdHRpbmcgPSB0cnVlO1xuICAgIGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudENvbW1pdCA9IGZhbHNlO1xuICAgIGxhYmVsc0luQ3VycmVudENvbW1pdC5jbGVhcigpO1xuICAgIGJlZ2luTWFyaygnKENvbW1pdHRpbmcgQ2hhbmdlcyknKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wQ29tbWl0VGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgd2FybmluZyA9IG51bGw7XG4gICAgaWYgKGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudENvbW1pdCkge1xuICAgICAgd2FybmluZyA9ICdMaWZlY3ljbGUgaG9vayBzY2hlZHVsZWQgYSBjYXNjYWRpbmcgdXBkYXRlJztcbiAgICB9IGVsc2UgaWYgKGNvbW1pdENvdW50SW5DdXJyZW50V29ya0xvb3AgPiAwKSB7XG4gICAgICB3YXJuaW5nID0gJ0NhdXNlZCBieSBhIGNhc2NhZGluZyB1cGRhdGUgaW4gZWFybGllciBjb21taXQnO1xuICAgIH1cbiAgICBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQgPSBmYWxzZTtcbiAgICBjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wKys7XG4gICAgaXNDb21taXR0aW5nID0gZmFsc2U7XG4gICAgbGFiZWxzSW5DdXJyZW50Q29tbWl0LmNsZWFyKCk7XG5cbiAgICBlbmRNYXJrKCcoQ29tbWl0dGluZyBDaGFuZ2VzKScsICcoQ29tbWl0dGluZyBDaGFuZ2VzKScsIHdhcm5pbmcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0Q29tbWl0U25hcHNob3RFZmZlY3RzVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQgPSAwO1xuICAgIGJlZ2luTWFyaygnKENvbW1pdHRpbmcgU25hcHNob3QgRWZmZWN0cyknKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wQ29tbWl0U25hcHNob3RFZmZlY3RzVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNvdW50ID0gZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQ7XG4gICAgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQgPSAwO1xuICAgIGVuZE1hcmsoJyhDb21taXR0aW5nIFNuYXBzaG90IEVmZmVjdHM6ICcgKyBjb3VudCArICcgVG90YWwpJywgJyhDb21taXR0aW5nIFNuYXBzaG90IEVmZmVjdHMpJywgbnVsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRDb21taXRIb3N0RWZmZWN0c1RpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMDtcbiAgICBiZWdpbk1hcmsoJyhDb21taXR0aW5nIEhvc3QgRWZmZWN0cyknKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wQ29tbWl0SG9zdEVmZmVjdHNUaW1lcigpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgY291bnQgPSBlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdDtcbiAgICBlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCA9IDA7XG4gICAgZW5kTWFyaygnKENvbW1pdHRpbmcgSG9zdCBFZmZlY3RzOiAnICsgY291bnQgKyAnIFRvdGFsKScsICcoQ29tbWl0dGluZyBIb3N0IEVmZmVjdHMpJywgbnVsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRDb21taXRMaWZlQ3ljbGVzVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQgPSAwO1xuICAgIGJlZ2luTWFyaygnKENhbGxpbmcgTGlmZWN5Y2xlIE1ldGhvZHMpJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcENvbW1pdExpZmVDeWNsZXNUaW1lcigpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgY291bnQgPSBlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdDtcbiAgICBlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCA9IDA7XG4gICAgZW5kTWFyaygnKENhbGxpbmcgTGlmZWN5Y2xlIE1ldGhvZHM6ICcgKyBjb3VudCArICcgVG90YWwpJywgJyhDYWxsaW5nIExpZmVjeWNsZSBNZXRob2RzKScsIG51bGwpO1xuICB9XG59XG5cbnZhciB2YWx1ZVN0YWNrID0gW107XG5cbnZhciBmaWJlclN0YWNrID0gdm9pZCAwO1xuXG57XG4gIGZpYmVyU3RhY2sgPSBbXTtcbn1cblxudmFyIGluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNyZWF0ZUN1cnNvcihkZWZhdWx0VmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50OiBkZWZhdWx0VmFsdWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gcG9wKGN1cnNvciwgZmliZXIpIHtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1VuZXhwZWN0ZWQgcG9wLicpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICB7XG4gICAgaWYgKGZpYmVyICE9PSBmaWJlclN0YWNrW2luZGV4XSkge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnVW5leHBlY3RlZCBGaWJlciBwb3BwZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZVN0YWNrW2luZGV4XTtcblxuICB2YWx1ZVN0YWNrW2luZGV4XSA9IG51bGw7XG5cbiAge1xuICAgIGZpYmVyU3RhY2tbaW5kZXhdID0gbnVsbDtcbiAgfVxuXG4gIGluZGV4LS07XG59XG5cbmZ1bmN0aW9uIHB1c2goY3Vyc29yLCB2YWx1ZSwgZmliZXIpIHtcbiAgaW5kZXgrKztcblxuICB2YWx1ZVN0YWNrW2luZGV4XSA9IGN1cnNvci5jdXJyZW50O1xuXG4gIHtcbiAgICBmaWJlclN0YWNrW2luZGV4XSA9IGZpYmVyO1xuICB9XG5cbiAgY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY2hlY2tUaGF0U3RhY2tJc0VtcHR5KCkge1xuICB7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnRXhwZWN0ZWQgYW4gZW1wdHkgc3RhY2suIFNvbWV0aGluZyB3YXMgbm90IHJlc2V0IHByb3Blcmx5LicpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYoKSB7XG4gIHtcbiAgICBpbmRleCA9IC0xO1xuICAgIHZhbHVlU3RhY2subGVuZ3RoID0gMDtcbiAgICBmaWJlclN0YWNrLmxlbmd0aCA9IDA7XG4gIH1cbn1cblxudmFyIHdhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dCA9IHZvaWQgMDtcblxue1xuICB3YXJuZWRBYm91dE1pc3NpbmdHZXRDaGlsZENvbnRleHQgPSB7fTtcbn1cblxudmFyIGVtcHR5Q29udGV4dE9iamVjdCA9IHt9O1xue1xuICBPYmplY3QuZnJlZXplKGVtcHR5Q29udGV4dE9iamVjdCk7XG59XG5cbi8vIEEgY3Vyc29yIHRvIHRoZSBjdXJyZW50IG1lcmdlZCBjb250ZXh0IG9iamVjdCBvbiB0aGUgc3RhY2suXG52YXIgY29udGV4dFN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKGVtcHR5Q29udGV4dE9iamVjdCk7XG4vLyBBIGN1cnNvciB0byBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBjb250ZXh0IGhhcyBjaGFuZ2VkLlxudmFyIGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoZmFsc2UpO1xuLy8gS2VlcCB0cmFjayBvZiB0aGUgcHJldmlvdXMgY29udGV4dCBvYmplY3QgdGhhdCB3YXMgb24gdGhlIHN0YWNrLlxuLy8gV2UgdXNlIHRoaXMgdG8gZ2V0IGFjY2VzcyB0byB0aGUgcGFyZW50IGNvbnRleHQgYWZ0ZXIgd2UgaGF2ZSBhbHJlYWR5XG4vLyBwdXNoZWQgdGhlIG5leHQgY29udGV4dCBwcm92aWRlciwgYW5kIG5vdyBuZWVkIHRvIG1lcmdlIHRoZWlyIGNvbnRleHRzLlxudmFyIHByZXZpb3VzQ29udGV4dCA9IGVtcHR5Q29udGV4dE9iamVjdDtcblxuZnVuY3Rpb24gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIGRpZFB1c2hPd25Db250ZXh0SWZQcm92aWRlcikge1xuICBpZiAoZGlkUHVzaE93bkNvbnRleHRJZlByb3ZpZGVyICYmIGlzQ29udGV4dFByb3ZpZGVyKENvbXBvbmVudCkpIHtcbiAgICAvLyBJZiB0aGUgZmliZXIgaXMgYSBjb250ZXh0IHByb3ZpZGVyIGl0c2VsZiwgd2hlbiB3ZSByZWFkIGl0cyBjb250ZXh0XG4gICAgLy8gd2UgbWF5IGhhdmUgYWxyZWFkeSBwdXNoZWQgaXRzIG93biBjaGlsZCBjb250ZXh0IG9uIHRoZSBzdGFjay4gQSBjb250ZXh0XG4gICAgLy8gcHJvdmlkZXIgc2hvdWxkIG5vdCBcInNlZVwiIGl0cyBvd24gY2hpbGQgY29udGV4dC4gVGhlcmVmb3JlIHdlIHJlYWQgdGhlXG4gICAgLy8gcHJldmlvdXMgKHBhcmVudCkgY29udGV4dCBpbnN0ZWFkIGZvciBhIGNvbnRleHQgcHJvdmlkZXIuXG4gICAgcmV0dXJuIHByZXZpb3VzQ29udGV4dDtcbiAgfVxuICByZXR1cm4gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIGNhY2hlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0LCBtYXNrZWRDb250ZXh0KSB7XG4gIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCA9IHVubWFza2VkQ29udGV4dDtcbiAgaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQgPSBtYXNrZWRDb250ZXh0O1xufVxuXG5mdW5jdGlvbiBnZXRNYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQpIHtcbiAgdmFyIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICB2YXIgY29udGV4dFR5cGVzID0gdHlwZS5jb250ZXh0VHlwZXM7XG4gIGlmICghY29udGV4dFR5cGVzKSB7XG4gICAgcmV0dXJuIGVtcHR5Q29udGV4dE9iamVjdDtcbiAgfVxuXG4gIC8vIEF2b2lkIHJlY3JlYXRpbmcgbWFza2VkIGNvbnRleHQgdW5sZXNzIHVubWFza2VkIGNvbnRleHQgaGFzIGNoYW5nZWQuXG4gIC8vIEZhaWxpbmcgdG8gZG8gdGhpcyB3aWxsIHJlc3VsdCBpbiB1bm5lY2Vzc2FyeSBjYWxscyB0byBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLlxuICAvLyBUaGlzIG1heSB0cmlnZ2VyIGluZmluaXRlIGxvb3BzIGlmIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgY2FsbHMgc2V0U3RhdGUuXG4gIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQgPT09IHVubWFza2VkQ29udGV4dCkge1xuICAgIHJldHVybiBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDtcbiAgfVxuXG4gIHZhciBjb250ZXh0ID0ge307XG4gIGZvciAodmFyIGtleSBpbiBjb250ZXh0VHlwZXMpIHtcbiAgICBjb250ZXh0W2tleV0gPSB1bm1hc2tlZENvbnRleHRba2V5XTtcbiAgfVxuXG4gIHtcbiAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUodHlwZSkgfHwgJ1Vua25vd24nO1xuICAgIGNoZWNrUHJvcFR5cGVzKGNvbnRleHRUeXBlcywgY29udGV4dCwgJ2NvbnRleHQnLCBuYW1lLCBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KTtcbiAgfVxuXG4gIC8vIENhY2hlIHVubWFza2VkIGNvbnRleHQgc28gd2UgY2FuIGF2b2lkIHJlY3JlYXRpbmcgbWFza2VkIGNvbnRleHQgdW5sZXNzIG5lY2Vzc2FyeS5cbiAgLy8gQ29udGV4dCBpcyBjcmVhdGVkIGJlZm9yZSB0aGUgY2xhc3MgY29tcG9uZW50IGlzIGluc3RhbnRpYXRlZCBzbyBjaGVjayBmb3IgaW5zdGFuY2UuXG4gIGlmIChpbnN0YW5jZSkge1xuICAgIGNhY2hlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0LCBjb250ZXh0KTtcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0O1xufVxuXG5mdW5jdGlvbiBoYXNDb250ZXh0Q2hhbmdlZCgpIHtcbiAgcmV0dXJuIGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IuY3VycmVudDtcbn1cblxuZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIodHlwZSkge1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSB0eXBlLmNoaWxkQ29udGV4dFR5cGVzO1xuICByZXR1cm4gY2hpbGRDb250ZXh0VHlwZXMgIT09IG51bGwgJiYgY2hpbGRDb250ZXh0VHlwZXMgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcG9wQ29udGV4dChmaWJlcikge1xuICBwb3AoZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgZmliZXIpO1xuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yLCBmaWJlcik7XG59XG5cbmZ1bmN0aW9uIHBvcFRvcExldmVsQ29udGV4dE9iamVjdChmaWJlcikge1xuICBwb3AoZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgZmliZXIpO1xuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yLCBmaWJlcik7XG59XG5cbmZ1bmN0aW9uIHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QoZmliZXIsIGNvbnRleHQsIGRpZENoYW5nZSkge1xuICAhKGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50ID09PSBlbXB0eUNvbnRleHRPYmplY3QpID8gaW52YXJpYW50KGZhbHNlLCAnVW5leHBlY3RlZCBjb250ZXh0IGZvdW5kIG9uIHN0YWNrLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBjb250ZXh0LCBmaWJlcik7XG4gIHB1c2goZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgZGlkQ2hhbmdlLCBmaWJlcik7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDaGlsZENvbnRleHQoZmliZXIsIHR5cGUsIHBhcmVudENvbnRleHQpIHtcbiAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSB0eXBlLmNoaWxkQ29udGV4dFR5cGVzO1xuXG4gIC8vIFRPRE8gKGJ2YXVnaG4pIFJlcGxhY2UgdGhpcyBiZWhhdmlvciB3aXRoIGFuIGludmFyaWFudCgpIGluIHRoZSBmdXR1cmUuXG4gIC8vIEl0IGhhcyBvbmx5IGJlZW4gYWRkZWQgaW4gRmliZXIgdG8gbWF0Y2ggdGhlICh1bmludGVudGlvbmFsKSBiZWhhdmlvciBpbiBTdGFjay5cbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5nZXRDaGlsZENvbnRleHQgIT09ICdmdW5jdGlvbicpIHtcbiAgICB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUodHlwZSkgfHwgJ1Vua25vd24nO1xuXG4gICAgICBpZiAoIXdhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dFtjb21wb25lbnROYW1lXSkge1xuICAgICAgICB3YXJuZWRBYm91dE1pc3NpbmdHZXRDaGlsZENvbnRleHRbY29tcG9uZW50TmFtZV0gPSB0cnVlO1xuICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcy5jaGlsZENvbnRleHRUeXBlcyBpcyBzcGVjaWZpZWQgYnV0IHRoZXJlIGlzIG5vIGdldENoaWxkQ29udGV4dCgpIG1ldGhvZCAnICsgJ29uIHRoZSBpbnN0YW5jZS4gWW91IGNhbiBlaXRoZXIgZGVmaW5lIGdldENoaWxkQ29udGV4dCgpIG9uICVzIG9yIHJlbW92ZSAnICsgJ2NoaWxkQ29udGV4dFR5cGVzIGZyb20gaXQuJywgY29tcG9uZW50TmFtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRDb250ZXh0O1xuICB9XG5cbiAgdmFyIGNoaWxkQ29udGV4dCA9IHZvaWQgMDtcbiAge1xuICAgIHNldEN1cnJlbnRQaGFzZSgnZ2V0Q2hpbGRDb250ZXh0Jyk7XG4gIH1cbiAgc3RhcnRQaGFzZVRpbWVyKGZpYmVyLCAnZ2V0Q2hpbGRDb250ZXh0Jyk7XG4gIGNoaWxkQ29udGV4dCA9IGluc3RhbmNlLmdldENoaWxkQ29udGV4dCgpO1xuICBzdG9wUGhhc2VUaW1lcigpO1xuICB7XG4gICAgc2V0Q3VycmVudFBoYXNlKG51bGwpO1xuICB9XG4gIGZvciAodmFyIGNvbnRleHRLZXkgaW4gY2hpbGRDb250ZXh0KSB7XG4gICAgIShjb250ZXh0S2V5IGluIGNoaWxkQ29udGV4dFR5cGVzKSA/IGludmFyaWFudChmYWxzZSwgJyVzLmdldENoaWxkQ29udGV4dCgpOiBrZXkgXCIlc1wiIGlzIG5vdCBkZWZpbmVkIGluIGNoaWxkQ29udGV4dFR5cGVzLicsIGdldENvbXBvbmVudE5hbWUodHlwZSkgfHwgJ1Vua25vd24nLCBjb250ZXh0S2V5KSA6IHZvaWQgMDtcbiAgfVxuICB7XG4gICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHR5cGUpIHx8ICdVbmtub3duJztcbiAgICBjaGVja1Byb3BUeXBlcyhjaGlsZENvbnRleHRUeXBlcywgY2hpbGRDb250ZXh0LCAnY2hpbGQgY29udGV4dCcsIG5hbWUsXG4gICAgLy8gSW4gcHJhY3RpY2UsIHRoZXJlIGlzIG9uZSBjYXNlIGluIHdoaWNoIHdlIHdvbid0IGdldCBhIHN0YWNrLiBJdCdzIHdoZW5cbiAgICAvLyBzb21lYm9keSBjYWxscyB1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcigpIGFuZCB3ZSBwcm9jZXNzXG4gICAgLy8gY29udGV4dCBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50IGluc3RhbmNlLiBUaGUgc3RhY2sgd2lsbCBiZSBtaXNzaW5nXG4gICAgLy8gYmVjYXVzZSBpdCdzIG91dHNpZGUgb2YgdGhlIHJlY29uY2lsaWF0aW9uLCBhbmQgc28gdGhlIHBvaW50ZXIgaGFzIG5vdFxuICAgIC8vIGJlZW4gc2V0LiBUaGlzIGlzIHJhcmUgYW5kIGRvZXNuJ3QgbWF0dGVyLiBXZSdsbCBhbHNvIHJlbW92ZSB0aGF0IEFQSS5cbiAgICBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KTtcbiAgfVxuXG4gIHJldHVybiBfYXNzaWduKHt9LCBwYXJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBwdXNoQ29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKSB7XG4gIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgLy8gV2UgcHVzaCB0aGUgY29udGV4dCBhcyBlYXJseSBhcyBwb3NzaWJsZSB0byBlbnN1cmUgc3RhY2sgaW50ZWdyaXR5LlxuICAvLyBJZiB0aGUgaW5zdGFuY2UgZG9lcyBub3QgZXhpc3QgeWV0LCB3ZSB3aWxsIHB1c2ggbnVsbCBhdCBmaXJzdCxcbiAgLy8gYW5kIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIGxhdGVyIHdoZW4gaW52YWxpZGF0aW5nIHRoZSBjb250ZXh0LlxuICB2YXIgbWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCB8fCBlbXB0eUNvbnRleHRPYmplY3Q7XG5cbiAgLy8gUmVtZW1iZXIgdGhlIHBhcmVudCBjb250ZXh0IHNvIHdlIGNhbiBtZXJnZSB3aXRoIGl0IGxhdGVyLlxuICAvLyBJbmhlcml0IHRoZSBwYXJlbnQncyBkaWQtcGVyZm9ybS13b3JrIHZhbHVlIHRvIGF2b2lkIGluYWR2ZXJ0ZW50bHkgYmxvY2tpbmcgdXBkYXRlcy5cbiAgcHJldmlvdXNDb250ZXh0ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBtZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuICBwdXNoKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IuY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCB0eXBlLCBkaWRDaGFuZ2UpIHtcbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAhaW5zdGFuY2UgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCB0byBoYXZlIGFuIGluc3RhbmNlIGJ5IHRoaXMgcG9pbnQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG5cbiAgaWYgKGRpZENoYW5nZSkge1xuICAgIC8vIE1lcmdlIHBhcmVudCBhbmQgb3duIGNvbnRleHQuXG4gICAgLy8gU2tpcCB0aGlzIGlmIHdlJ3JlIG5vdCB1cGRhdGluZyBkdWUgdG8gc0NVLlxuICAgIC8vIFRoaXMgYXZvaWRzIHVubmVjZXNzYXJpbHkgcmVjb21wdXRpbmcgbWVtb2l6ZWQgdmFsdWVzLlxuICAgIHZhciBtZXJnZWRDb250ZXh0ID0gcHJvY2Vzc0NoaWxkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdHlwZSwgcHJldmlvdXNDb250ZXh0KTtcbiAgICBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCA9IG1lcmdlZENvbnRleHQ7XG5cbiAgICAvLyBSZXBsYWNlIHRoZSBvbGQgKG9yIGVtcHR5KSBjb250ZXh0IHdpdGggdGhlIG5ldyBvbmUuXG4gICAgLy8gSXQgaXMgaW1wb3J0YW50IHRvIHVud2luZCB0aGUgY29udGV4dCBpbiB0aGUgcmV2ZXJzZSBvcmRlci5cbiAgICBwb3AoZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIHBvcChjb250ZXh0U3RhY2tDdXJzb3IsIHdvcmtJblByb2dyZXNzKTtcbiAgICAvLyBOb3cgcHVzaCB0aGUgbmV3IGNvbnRleHQgYW5kIG1hcmsgdGhhdCBpdCBoYXMgY2hhbmdlZC5cbiAgICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbWVyZ2VkQ29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIHB1c2goZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgZGlkQ2hhbmdlLCB3b3JrSW5Qcm9ncmVzcyk7XG4gIH0gZWxzZSB7XG4gICAgcG9wKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIHdvcmtJblByb2dyZXNzKTtcbiAgICBwdXNoKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGRpZENoYW5nZSwgd29ya0luUHJvZ3Jlc3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0KGZpYmVyKSB7XG4gIC8vIEN1cnJlbnRseSB0aGlzIGlzIG9ubHkgdXNlZCB3aXRoIHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOyBub3Qgc3VyZSBpZiBpdFxuICAvLyBtYWtlcyBzZW5zZSBlbHNld2hlcmVcbiAgIShpc0ZpYmVyTW91bnRlZChmaWJlcikgJiYgZmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCkgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBzdWJ0cmVlIHBhcmVudCB0byBiZSBhIG1vdW50ZWQgY2xhc3MgY29tcG9uZW50LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gIHZhciBub2RlID0gZmliZXI7XG4gIGRvIHtcbiAgICBzd2l0Y2ggKG5vZGUudGFnKSB7XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICByZXR1cm4gbm9kZS5zdGF0ZU5vZGUuY29udGV4dDtcbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgQ29tcG9uZW50ID0gbm9kZS50eXBlO1xuICAgICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgfSB3aGlsZSAobm9kZSAhPT0gbnVsbCk7XG4gIGludmFyaWFudChmYWxzZSwgJ0ZvdW5kIHVuZXhwZWN0ZWQgZGV0YWNoZWQgc3VidHJlZSBwYXJlbnQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG59XG5cbnZhciBvbkNvbW1pdEZpYmVyUm9vdCA9IG51bGw7XG52YXIgb25Db21taXRGaWJlclVubW91bnQgPSBudWxsO1xudmFyIGhhc0xvZ2dlZEVycm9yID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGNhdGNoRXJyb3JzKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmbihhcmcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKHRydWUgJiYgIWhhc0xvZ2dlZEVycm9yKSB7XG4gICAgICAgIGhhc0xvZ2dlZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnUmVhY3QgRGV2VG9vbHMgZW5jb3VudGVyZWQgYW4gZXJyb3I6ICVzJywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbnZhciBpc0RldlRvb2xzUHJlc2VudCA9IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gIT09ICd1bmRlZmluZWQnO1xuXG5mdW5jdGlvbiBpbmplY3RJbnRlcm5hbHMoaW50ZXJuYWxzKSB7XG4gIGlmICh0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIE5vIERldlRvb2xzXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBob29rID0gX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuICBpZiAoaG9vay5pc0Rpc2FibGVkKSB7XG4gICAgLy8gVGhpcyBpc24ndCBhIHJlYWwgcHJvcGVydHkgb24gdGhlIGhvb2ssIGJ1dCBpdCBjYW4gYmUgc2V0IHRvIG9wdCBvdXRcbiAgICAvLyBvZiBEZXZUb29scyBpbnRlZ3JhdGlvbiBhbmQgYXNzb2NpYXRlZCB3YXJuaW5ncyBhbmQgbG9ncy5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzM4NzdcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIWhvb2suc3VwcG9ydHNGaWJlcikge1xuICAgIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1RoZSBpbnN0YWxsZWQgdmVyc2lvbiBvZiBSZWFjdCBEZXZUb29scyBpcyB0b28gb2xkIGFuZCB3aWxsIG5vdCB3b3JrICcgKyAnd2l0aCB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIFJlYWN0LiBQbGVhc2UgdXBkYXRlIFJlYWN0IERldlRvb2xzLiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtZGV2dG9vbHMnKTtcbiAgICB9XG4gICAgLy8gRGV2VG9vbHMgZXhpc3RzLCBldmVuIHRob3VnaCBpdCBkb2Vzbid0IHN1cHBvcnQgRmliZXIuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdHJ5IHtcbiAgICB2YXIgcmVuZGVyZXJJRCA9IGhvb2suaW5qZWN0KGludGVybmFscyk7XG4gICAgLy8gV2UgaGF2ZSBzdWNjZXNzZnVsbHkgaW5qZWN0ZWQsIHNvIG5vdyBpdCBpcyBzYWZlIHRvIHNldCB1cCBob29rcy5cbiAgICBvbkNvbW1pdEZpYmVyUm9vdCA9IGNhdGNoRXJyb3JzKGZ1bmN0aW9uIChyb290KSB7XG4gICAgICByZXR1cm4gaG9vay5vbkNvbW1pdEZpYmVyUm9vdChyZW5kZXJlcklELCByb290KTtcbiAgICB9KTtcbiAgICBvbkNvbW1pdEZpYmVyVW5tb3VudCA9IGNhdGNoRXJyb3JzKGZ1bmN0aW9uIChmaWJlcikge1xuICAgICAgcmV0dXJuIGhvb2sub25Db21taXRGaWJlclVubW91bnQocmVuZGVyZXJJRCwgZmliZXIpO1xuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBDYXRjaCBhbGwgZXJyb3JzIGJlY2F1c2UgaXQgaXMgdW5zYWZlIHRvIHRocm93IGR1cmluZyBpbml0aWFsaXphdGlvbi5cbiAgICB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdSZWFjdCBEZXZUb29scyBlbmNvdW50ZXJlZCBhbiBlcnJvcjogJXMuJywgZXJyKTtcbiAgICB9XG4gIH1cbiAgLy8gRGV2VG9vbHMgZXhpc3RzXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbW1pdFJvb3Qocm9vdCkge1xuICBpZiAodHlwZW9mIG9uQ29tbWl0RmliZXJSb290ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb25Db21taXRGaWJlclJvb3Qocm9vdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25Db21taXRVbm1vdW50KGZpYmVyKSB7XG4gIGlmICh0eXBlb2Ygb25Db21taXRGaWJlclVubW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvbkNvbW1pdEZpYmVyVW5tb3VudChmaWJlcik7XG4gIH1cbn1cblxuLy8gTWF4IDMxIGJpdCBpbnRlZ2VyLiBUaGUgbWF4IGludGVnZXIgc2l6ZSBpbiBWOCBmb3IgMzItYml0IHN5c3RlbXMuXG4vLyBNYXRoLnBvdygyLCAzMCkgLSAxXG4vLyAwYjExMTExMTExMTExMTExMTExMTExMTExMTExMTExMVxudmFyIG1heFNpZ25lZDMxQml0SW50ID0gMTA3Mzc0MTgyMztcblxudmFyIE5vV29yayA9IDA7XG52YXIgTmV2ZXIgPSAxO1xudmFyIFN5bmMgPSBtYXhTaWduZWQzMUJpdEludDtcblxudmFyIFVOSVRfU0laRSA9IDEwO1xudmFyIE1BR0lDX05VTUJFUl9PRkZTRVQgPSBtYXhTaWduZWQzMUJpdEludCAtIDE7XG5cbi8vIDEgdW5pdCBvZiBleHBpcmF0aW9uIHRpbWUgcmVwcmVzZW50cyAxMG1zLlxuZnVuY3Rpb24gbXNUb0V4cGlyYXRpb25UaW1lKG1zKSB7XG4gIC8vIEFsd2F5cyBhZGQgYW4gb2Zmc2V0IHNvIHRoYXQgd2UgZG9uJ3QgY2xhc2ggd2l0aCB0aGUgbWFnaWMgbnVtYmVyIGZvciBOb1dvcmsuXG4gIHJldHVybiBNQUdJQ19OVU1CRVJfT0ZGU0VUIC0gKG1zIC8gVU5JVF9TSVpFIHwgMCk7XG59XG5cbmZ1bmN0aW9uIGV4cGlyYXRpb25UaW1lVG9NcyhleHBpcmF0aW9uVGltZSkge1xuICByZXR1cm4gKE1BR0lDX05VTUJFUl9PRkZTRVQgLSBleHBpcmF0aW9uVGltZSkgKiBVTklUX1NJWkU7XG59XG5cbmZ1bmN0aW9uIGNlaWxpbmcobnVtLCBwcmVjaXNpb24pIHtcbiAgcmV0dXJuICgobnVtIC8gcHJlY2lzaW9uIHwgMCkgKyAxKSAqIHByZWNpc2lvbjtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUV4cGlyYXRpb25CdWNrZXQoY3VycmVudFRpbWUsIGV4cGlyYXRpb25Jbk1zLCBidWNrZXRTaXplTXMpIHtcbiAgcmV0dXJuIE1BR0lDX05VTUJFUl9PRkZTRVQgLSBjZWlsaW5nKE1BR0lDX05VTUJFUl9PRkZTRVQgLSBjdXJyZW50VGltZSArIGV4cGlyYXRpb25Jbk1zIC8gVU5JVF9TSVpFLCBidWNrZXRTaXplTXMgLyBVTklUX1NJWkUpO1xufVxuXG52YXIgTE9XX1BSSU9SSVRZX0VYUElSQVRJT04gPSA1MDAwO1xudmFyIExPV19QUklPUklUWV9CQVRDSF9TSVpFID0gMjUwO1xuXG5mdW5jdGlvbiBjb21wdXRlQXN5bmNFeHBpcmF0aW9uKGN1cnJlbnRUaW1lKSB7XG4gIHJldHVybiBjb21wdXRlRXhwaXJhdGlvbkJ1Y2tldChjdXJyZW50VGltZSwgTE9XX1BSSU9SSVRZX0VYUElSQVRJT04sIExPV19QUklPUklUWV9CQVRDSF9TSVpFKTtcbn1cblxuLy8gV2UgaW50ZW50aW9uYWxseSBzZXQgYSBoaWdoZXIgZXhwaXJhdGlvbiB0aW1lIGZvciBpbnRlcmFjdGl2ZSB1cGRhdGVzIGluXG4vLyBkZXYgdGhhbiBpbiBwcm9kdWN0aW9uLlxuLy9cbi8vIElmIHRoZSBtYWluIHRocmVhZCBpcyBiZWluZyBibG9ja2VkIHNvIGxvbmcgdGhhdCB5b3UgaGl0IHRoZSBleHBpcmF0aW9uLFxuLy8gaXQncyBhIHByb2JsZW0gdGhhdCBjb3VsZCBiZSBzb2x2ZWQgd2l0aCBiZXR0ZXIgc2NoZWR1bGluZy5cbi8vXG4vLyBQZW9wbGUgd2lsbCBiZSBtb3JlIGxpa2VseSB0byBub3RpY2UgdGhpcyBhbmQgZml4IGl0IHdpdGggdGhlIGxvbmdcbi8vIGV4cGlyYXRpb24gdGltZSBpbiBkZXZlbG9wbWVudC5cbi8vXG4vLyBJbiBwcm9kdWN0aW9uIHdlIG9wdCBmb3IgYmV0dGVyIFVYIGF0IHRoZSByaXNrIG9mIG1hc2tpbmcgc2NoZWR1bGluZ1xuLy8gcHJvYmxlbXMsIGJ5IGV4cGlyaW5nIGZhc3QuXG52YXIgSElHSF9QUklPUklUWV9FWFBJUkFUSU9OID0gNTAwO1xudmFyIEhJR0hfUFJJT1JJVFlfQkFUQ0hfU0laRSA9IDEwMDtcblxuZnVuY3Rpb24gY29tcHV0ZUludGVyYWN0aXZlRXhwaXJhdGlvbihjdXJyZW50VGltZSkge1xuICByZXR1cm4gY29tcHV0ZUV4cGlyYXRpb25CdWNrZXQoY3VycmVudFRpbWUsIEhJR0hfUFJJT1JJVFlfRVhQSVJBVElPTiwgSElHSF9QUklPUklUWV9CQVRDSF9TSVpFKTtcbn1cblxudmFyIE5vQ29udGV4dCA9IDA7XG52YXIgQ29uY3VycmVudE1vZGUgPSAxO1xudmFyIFN0cmljdE1vZGUgPSAyO1xudmFyIFByb2ZpbGVNb2RlID0gNDtcblxudmFyIGhhc0JhZE1hcFBvbHlmaWxsID0gdm9pZCAwO1xuXG57XG4gIGhhc0JhZE1hcFBvbHlmaWxsID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG5vbkV4dGVuc2libGVPYmplY3QgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pO1xuICAgIHZhciB0ZXN0TWFwID0gbmV3IE1hcChbW25vbkV4dGVuc2libGVPYmplY3QsIG51bGxdXSk7XG4gICAgdmFyIHRlc3RTZXQgPSBuZXcgU2V0KFtub25FeHRlbnNpYmxlT2JqZWN0XSk7XG4gICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgZm9yIFJvbGx1cCB0byBub3QgY29uc2lkZXIgdGhlc2UgdW51c2VkLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNzcxXG4gICAgLy8gVE9ETzogd2UgY2FuIHJlbW92ZSB0aGVzZSBpZiBSb2xsdXAgZml4ZXMgdGhlIGJ1Zy5cbiAgICB0ZXN0TWFwLnNldCgwLCAwKTtcbiAgICB0ZXN0U2V0LmFkZCgwKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFRPRE86IENvbnNpZGVyIHdhcm5pbmcgYWJvdXQgYmFkIHBvbHlmaWxsc1xuICAgIGhhc0JhZE1hcFBvbHlmaWxsID0gdHJ1ZTtcbiAgfVxufVxuXG4vLyBBIEZpYmVyIGlzIHdvcmsgb24gYSBDb21wb25lbnQgdGhhdCBuZWVkcyB0byBiZSBkb25lIG9yIHdhcyBkb25lLiBUaGVyZSBjYW5cbi8vIGJlIG1vcmUgdGhhbiBvbmUgcGVyIGNvbXBvbmVudC5cblxuXG52YXIgZGVidWdDb3VudGVyID0gdm9pZCAwO1xuXG57XG4gIGRlYnVnQ291bnRlciA9IDE7XG59XG5cbmZ1bmN0aW9uIEZpYmVyTm9kZSh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIC8vIEluc3RhbmNlXG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmtleSA9IGtleTtcbiAgdGhpcy5lbGVtZW50VHlwZSA9IG51bGw7XG4gIHRoaXMudHlwZSA9IG51bGw7XG4gIHRoaXMuc3RhdGVOb2RlID0gbnVsbDtcblxuICAvLyBGaWJlclxuICB0aGlzLnJldHVybiA9IG51bGw7XG4gIHRoaXMuY2hpbGQgPSBudWxsO1xuICB0aGlzLnNpYmxpbmcgPSBudWxsO1xuICB0aGlzLmluZGV4ID0gMDtcblxuICB0aGlzLnJlZiA9IG51bGw7XG5cbiAgdGhpcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHM7XG4gIHRoaXMubWVtb2l6ZWRQcm9wcyA9IG51bGw7XG4gIHRoaXMudXBkYXRlUXVldWUgPSBudWxsO1xuICB0aGlzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICB0aGlzLmNvbnRleHREZXBlbmRlbmNpZXMgPSBudWxsO1xuXG4gIHRoaXMubW9kZSA9IG1vZGU7XG5cbiAgLy8gRWZmZWN0c1xuICB0aGlzLmVmZmVjdFRhZyA9IE5vRWZmZWN0O1xuICB0aGlzLm5leHRFZmZlY3QgPSBudWxsO1xuXG4gIHRoaXMuZmlyc3RFZmZlY3QgPSBudWxsO1xuICB0aGlzLmxhc3RFZmZlY3QgPSBudWxsO1xuXG4gIHRoaXMuZXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gIHRoaXMuY2hpbGRFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcblxuICB0aGlzLmFsdGVybmF0ZSA9IG51bGw7XG5cbiAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICAvLyBOb3RlOiBUaGUgZm9sbG93aW5nIGlzIGRvbmUgdG8gYXZvaWQgYSB2OCBwZXJmb3JtYW5jZSBjbGlmZi5cbiAgICAvL1xuICAgIC8vIEluaXRpYWxpemluZyB0aGUgZmllbGRzIGJlbG93IHRvIHNtaXMgYW5kIGxhdGVyIHVwZGF0aW5nIHRoZW0gd2l0aFxuICAgIC8vIGRvdWJsZSB2YWx1ZXMgd2lsbCBjYXVzZSBGaWJlcnMgdG8gZW5kIHVwIGhhdmluZyBzZXBhcmF0ZSBzaGFwZXMuXG4gICAgLy8gVGhpcyBiZWhhdmlvci9idWcgaGFzIHNvbWV0aGluZyB0byBkbyB3aXRoIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9uKCkuXG4gICAgLy8gRm9ydHVuYXRlbHkgdGhpcyBvbmx5IGltcGFjdHMgREVWIGJ1aWxkcy5cbiAgICAvLyBVbmZvcnR1bmF0ZWx5IGl0IG1ha2VzIFJlYWN0IHVudXNhYmx5IHNsb3cgZm9yIHNvbWUgYXBwbGljYXRpb25zLlxuICAgIC8vIFRvIHdvcmsgYXJvdW5kIHRoaXMsIGluaXRpYWxpemUgdGhlIGZpZWxkcyBiZWxvdyB3aXRoIGRvdWJsZXMuXG4gICAgLy9cbiAgICAvLyBMZWFybiBtb3JlIGFib3V0IHRoaXMgaGVyZTpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MzY1XG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9ODUzOFxuICAgIHRoaXMuYWN0dWFsRHVyYXRpb24gPSBOdW1iZXIuTmFOO1xuICAgIHRoaXMuYWN0dWFsU3RhcnRUaW1lID0gTnVtYmVyLk5hTjtcbiAgICB0aGlzLnNlbGZCYXNlRHVyYXRpb24gPSBOdW1iZXIuTmFOO1xuICAgIHRoaXMudHJlZUJhc2VEdXJhdGlvbiA9IE51bWJlci5OYU47XG5cbiAgICAvLyBJdCdzIG9rYXkgdG8gcmVwbGFjZSB0aGUgaW5pdGlhbCBkb3VibGVzIHdpdGggc21pcyBhZnRlciBpbml0aWFsaXphdGlvbi5cbiAgICAvLyBUaGlzIHdvbid0IHRyaWdnZXIgdGhlIHBlcmZvcm1hbmNlIGNsaWZmIG1lbnRpb25lZCBhYm92ZSxcbiAgICAvLyBhbmQgaXQgc2ltcGxpZmllcyBvdGhlciBwcm9maWxlciBjb2RlIChpbmNsdWRpbmcgRGV2VG9vbHMpLlxuICAgIHRoaXMuYWN0dWFsRHVyYXRpb24gPSAwO1xuICAgIHRoaXMuYWN0dWFsU3RhcnRUaW1lID0gLTE7XG4gICAgdGhpcy5zZWxmQmFzZUR1cmF0aW9uID0gMDtcbiAgICB0aGlzLnRyZWVCYXNlRHVyYXRpb24gPSAwO1xuICB9XG5cbiAge1xuICAgIHRoaXMuX2RlYnVnSUQgPSBkZWJ1Z0NvdW50ZXIrKztcbiAgICB0aGlzLl9kZWJ1Z1NvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5fZGVidWdPd25lciA9IG51bGw7XG4gICAgdGhpcy5fZGVidWdJc0N1cnJlbnRseVRpbWluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2RlYnVnSG9va1R5cGVzID0gbnVsbDtcbiAgICBpZiAoIWhhc0JhZE1hcFBvbHlmaWxsICYmIHR5cGVvZiBPYmplY3QucHJldmVudEV4dGVuc2lvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0aGlzKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBpcyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLCByYXRoZXIgdGhhbiBhIFBPSk8gY29uc3RydWN0b3IsIHN0aWxsXG4vLyBwbGVhc2UgZW5zdXJlIHdlIGRvIHRoZSBmb2xsb3dpbmc6XG4vLyAxKSBOb2JvZHkgc2hvdWxkIGFkZCBhbnkgaW5zdGFuY2UgbWV0aG9kcyBvbiB0aGlzLiBJbnN0YW5jZSBtZXRob2RzIGNhbiBiZVxuLy8gICAgbW9yZSBkaWZmaWN1bHQgdG8gcHJlZGljdCB3aGVuIHRoZXkgZ2V0IG9wdGltaXplZCBhbmQgdGhleSBhcmUgYWxtb3N0XG4vLyAgICBuZXZlciBpbmxpbmVkIHByb3Blcmx5IGluIHN0YXRpYyBjb21waWxlcnMuXG4vLyAyKSBOb2JvZHkgc2hvdWxkIHJlbHkgb24gYGluc3RhbmNlb2YgRmliZXJgIGZvciB0eXBlIHRlc3RpbmcuIFdlIHNob3VsZFxuLy8gICAgYWx3YXlzIGtub3cgd2hlbiBpdCBpcyBhIGZpYmVyLlxuLy8gMykgV2UgbWlnaHQgd2FudCB0byBleHBlcmltZW50IHdpdGggdXNpbmcgbnVtZXJpYyBrZXlzIHNpbmNlIHRoZXkgYXJlIGVhc2llclxuLy8gICAgdG8gb3B0aW1pemUgaW4gYSBub24tSklUIGVudmlyb25tZW50LlxuLy8gNCkgV2UgY2FuIGVhc2lseSBnbyBmcm9tIGEgY29uc3RydWN0b3IgdG8gYSBjcmVhdGVGaWJlciBvYmplY3QgbGl0ZXJhbCBpZiB0aGF0XG4vLyAgICBpcyBmYXN0ZXIuXG4vLyA1KSBJdCBzaG91bGQgYmUgZWFzeSB0byBwb3J0IHRoaXMgdG8gYSBDIHN0cnVjdCBhbmQga2VlcCBhIEMgaW1wbGVtZW50YXRpb25cbi8vICAgIGNvbXBhdGlibGUuXG52YXIgY3JlYXRlRmliZXIgPSBmdW5jdGlvbiAodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkge1xuICAvLyAkRmxvd0ZpeE1lOiB0aGUgc2hhcGVzIGFyZSBleGFjdCBoZXJlIGJ1dCBGbG93IGRvZXNuJ3QgbGlrZSBjb25zdHJ1Y3RvcnNcbiAgcmV0dXJuIG5ldyBGaWJlck5vZGUodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG59O1xuXG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISEocHJvdG90eXBlICYmIHByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gaXNTaW1wbGVGdW5jdGlvbkNvbXBvbmVudCh0eXBlKSB7XG4gIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhc2hvdWxkQ29uc3RydWN0KHR5cGUpICYmIHR5cGUuZGVmYXVsdFByb3BzID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVMYXp5Q29tcG9uZW50VGFnKENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSA/IENsYXNzQ29tcG9uZW50IDogRnVuY3Rpb25Db21wb25lbnQ7XG4gIH0gZWxzZSBpZiAoQ29tcG9uZW50ICE9PSB1bmRlZmluZWQgJiYgQ29tcG9uZW50ICE9PSBudWxsKSB7XG4gICAgdmFyICQkdHlwZW9mID0gQ29tcG9uZW50LiQkdHlwZW9mO1xuICAgIGlmICgkJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSkge1xuICAgICAgcmV0dXJuIEZvcndhcmRSZWY7XG4gICAgfVxuICAgIGlmICgkJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFKSB7XG4gICAgICByZXR1cm4gTWVtb0NvbXBvbmVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEluZGV0ZXJtaW5hdGVDb21wb25lbnQ7XG59XG5cbi8vIFRoaXMgaXMgdXNlZCB0byBjcmVhdGUgYW4gYWx0ZXJuYXRlIGZpYmVyIHRvIGRvIHdvcmsgb24uXG5mdW5jdGlvbiBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBwZW5kaW5nUHJvcHMsIGV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciB3b3JrSW5Qcm9ncmVzcyA9IGN1cnJlbnQuYWx0ZXJuYXRlO1xuICBpZiAod29ya0luUHJvZ3Jlc3MgPT09IG51bGwpIHtcbiAgICAvLyBXZSB1c2UgYSBkb3VibGUgYnVmZmVyaW5nIHBvb2xpbmcgdGVjaG5pcXVlIGJlY2F1c2Ugd2Uga25vdyB0aGF0IHdlJ2xsXG4gICAgLy8gb25seSBldmVyIG5lZWQgYXQgbW9zdCB0d28gdmVyc2lvbnMgb2YgYSB0cmVlLiBXZSBwb29sIHRoZSBcIm90aGVyXCIgdW51c2VkXG4gICAgLy8gbm9kZSB0aGF0IHdlJ3JlIGZyZWUgdG8gcmV1c2UuIFRoaXMgaXMgbGF6aWx5IGNyZWF0ZWQgdG8gYXZvaWQgYWxsb2NhdGluZ1xuICAgIC8vIGV4dHJhIG9iamVjdHMgZm9yIHRoaW5ncyB0aGF0IGFyZSBuZXZlciB1cGRhdGVkLiBJdCBhbHNvIGFsbG93IHVzIHRvXG4gICAgLy8gcmVjbGFpbSB0aGUgZXh0cmEgbWVtb3J5IGlmIG5lZWRlZC5cbiAgICB3b3JrSW5Qcm9ncmVzcyA9IGNyZWF0ZUZpYmVyKGN1cnJlbnQudGFnLCBwZW5kaW5nUHJvcHMsIGN1cnJlbnQua2V5LCBjdXJyZW50Lm1vZGUpO1xuICAgIHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID0gY3VycmVudC5lbGVtZW50VHlwZTtcbiAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlO1xuICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuXG4gICAge1xuICAgICAgLy8gREVWLW9ubHkgZmllbGRzXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5fZGVidWdJRCA9IGN1cnJlbnQuX2RlYnVnSUQ7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5fZGVidWdTb3VyY2UgPSBjdXJyZW50Ll9kZWJ1Z1NvdXJjZTtcbiAgICAgIHdvcmtJblByb2dyZXNzLl9kZWJ1Z093bmVyID0gY3VycmVudC5fZGVidWdPd25lcjtcbiAgICAgIHdvcmtJblByb2dyZXNzLl9kZWJ1Z0hvb2tUeXBlcyA9IGN1cnJlbnQuX2RlYnVnSG9va1R5cGVzO1xuICAgIH1cblxuICAgIHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IGN1cnJlbnQ7XG4gICAgY3VycmVudC5hbHRlcm5hdGUgPSB3b3JrSW5Qcm9ncmVzcztcbiAgfSBlbHNlIHtcbiAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHM7XG5cbiAgICAvLyBXZSBhbHJlYWR5IGhhdmUgYW4gYWx0ZXJuYXRlLlxuICAgIC8vIFJlc2V0IHRoZSBlZmZlY3QgdGFnLlxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyA9IE5vRWZmZWN0O1xuXG4gICAgLy8gVGhlIGVmZmVjdCBsaXN0IGlzIG5vIGxvbmdlciB2YWxpZC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5uZXh0RWZmZWN0ID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy5maXJzdEVmZmVjdCA9IG51bGw7XG4gICAgd29ya0luUHJvZ3Jlc3MubGFzdEVmZmVjdCA9IG51bGw7XG5cbiAgICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgICAgLy8gV2UgaW50ZW50aW9uYWxseSByZXNldCwgcmF0aGVyIHRoYW4gY29weSwgYWN0dWFsRHVyYXRpb24gJiBhY3R1YWxTdGFydFRpbWUuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIHRpbWUgZnJvbSBlbmRsZXNzbHkgYWNjdW11bGF0aW5nIGluIG5ldyBjb21taXRzLlxuICAgICAgLy8gVGhpcyBoYXMgdGhlIGRvd25zaWRlIG9mIHJlc2V0dGluZyB2YWx1ZXMgZm9yIGRpZmZlcmVudCBwcmlvcml0eSByZW5kZXJzLFxuICAgICAgLy8gQnV0IHdvcmtzIGZvciB5aWVsZGluZyAodGhlIGNvbW1vbiBjYXNlKSBhbmQgc2hvdWxkIHN1cHBvcnQgcmVzdW1pbmcuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5hY3R1YWxEdXJhdGlvbiA9IDA7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5hY3R1YWxTdGFydFRpbWUgPSAtMTtcbiAgICB9XG4gIH1cblxuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZEV4cGlyYXRpb25UaW1lID0gY3VycmVudC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuICB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IGN1cnJlbnQuZXhwaXJhdGlvblRpbWU7XG5cbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLmNvbnRleHREZXBlbmRlbmNpZXMgPSBjdXJyZW50LmNvbnRleHREZXBlbmRlbmNpZXM7XG5cbiAgLy8gVGhlc2Ugd2lsbCBiZSBvdmVycmlkZGVuIGR1cmluZyB0aGUgcGFyZW50J3MgcmVjb25jaWxpYXRpb25cbiAgd29ya0luUHJvZ3Jlc3Muc2libGluZyA9IGN1cnJlbnQuc2libGluZztcbiAgd29ya0luUHJvZ3Jlc3MuaW5kZXggPSBjdXJyZW50LmluZGV4O1xuICB3b3JrSW5Qcm9ncmVzcy5yZWYgPSBjdXJyZW50LnJlZjtcblxuICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgIHdvcmtJblByb2dyZXNzLnNlbGZCYXNlRHVyYXRpb24gPSBjdXJyZW50LnNlbGZCYXNlRHVyYXRpb247XG4gICAgd29ya0luUHJvZ3Jlc3MudHJlZUJhc2VEdXJhdGlvbiA9IGN1cnJlbnQudHJlZUJhc2VEdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlSG9zdFJvb3RGaWJlcihpc0NvbmN1cnJlbnQpIHtcbiAgdmFyIG1vZGUgPSBpc0NvbmN1cnJlbnQgPyBDb25jdXJyZW50TW9kZSB8IFN0cmljdE1vZGUgOiBOb0NvbnRleHQ7XG5cbiAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIgJiYgaXNEZXZUb29sc1ByZXNlbnQpIHtcbiAgICAvLyBBbHdheXMgY29sbGVjdCBwcm9maWxlIHRpbWluZ3Mgd2hlbiBEZXZUb29scyBhcmUgcHJlc2VudC5cbiAgICAvLyBUaGlzIGVuYWJsZXMgRGV2VG9vbHMgdG8gc3RhcnQgY2FwdHVyaW5nIHRpbWluZyBhdCBhbnkgcG9pbnTigJNcbiAgICAvLyBXaXRob3V0IHNvbWUgbm9kZXMgaW4gdGhlIHRyZWUgaGF2aW5nIGVtcHR5IGJhc2UgdGltZXMuXG4gICAgbW9kZSB8PSBQcm9maWxlTW9kZTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVGaWJlcihIb3N0Um9vdCwgbnVsbCwgbnVsbCwgbW9kZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyh0eXBlLCAvLyBSZWFjdCRFbGVtZW50VHlwZVxua2V5LCBwZW5kaW5nUHJvcHMsIG93bmVyLCBtb2RlLCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgZmliZXIgPSB2b2lkIDA7XG5cbiAgdmFyIGZpYmVyVGFnID0gSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDtcbiAgLy8gVGhlIHJlc29sdmVkIHR5cGUgaXMgc2V0IGlmIHdlIGtub3cgd2hhdCB0aGUgZmluYWwgdHlwZSB3aWxsIGJlLiBJLmUuIGl0J3Mgbm90IGxhenkuXG4gIHZhciByZXNvbHZlZFR5cGUgPSB0eXBlO1xuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoc2hvdWxkQ29uc3RydWN0KHR5cGUpKSB7XG4gICAgICBmaWJlclRhZyA9IENsYXNzQ29tcG9uZW50O1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBmaWJlclRhZyA9IEhvc3RDb21wb25lbnQ7XG4gIH0gZWxzZSB7XG4gICAgZ2V0VGFnOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KHBlbmRpbmdQcm9wcy5jaGlsZHJlbiwgbW9kZSwgZXhwaXJhdGlvblRpbWUsIGtleSk7XG4gICAgICBjYXNlIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tTW9kZShwZW5kaW5nUHJvcHMsIG1vZGUgfCBDb25jdXJyZW50TW9kZSB8IFN0cmljdE1vZGUsIGV4cGlyYXRpb25UaW1lLCBrZXkpO1xuICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tTW9kZShwZW5kaW5nUHJvcHMsIG1vZGUgfCBTdHJpY3RNb2RlLCBleHBpcmF0aW9uVGltZSwga2V5KTtcbiAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbVByb2ZpbGVyKHBlbmRpbmdQcm9wcywgbW9kZSwgZXhwaXJhdGlvblRpbWUsIGtleSk7XG4gICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWJlckZyb21TdXNwZW5zZShwZW5kaW5nUHJvcHMsIG1vZGUsIGV4cGlyYXRpb25UaW1lLCBrZXkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgICAgICAgICBmaWJlclRhZyA9IENvbnRleHRQcm92aWRlcjtcbiAgICAgICAgICAgICAgICBicmVhayBnZXRUYWc7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBjb25zdW1lclxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gQ29udGV4dENvbnN1bWVyO1xuICAgICAgICAgICAgICAgIGJyZWFrIGdldFRhZztcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gRm9yd2FyZFJlZjtcbiAgICAgICAgICAgICAgICBicmVhayBnZXRUYWc7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gTWVtb0NvbXBvbmVudDtcbiAgICAgICAgICAgICAgICBicmVhayBnZXRUYWc7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gTGF6eUNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICByZXNvbHZlZFR5cGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGdldFRhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZm8gPSAnJztcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKHR5cGUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBpbmZvICs9ICcgWW91IGxpa2VseSBmb3Jnb3QgdG8gZXhwb3J0IHlvdXIgY29tcG9uZW50IGZyb20gdGhlIGZpbGUgJyArIFwiaXQncyBkZWZpbmVkIGluLCBvciB5b3UgbWlnaHQgaGF2ZSBtaXhlZCB1cCBkZWZhdWx0IGFuZCBcIiArICduYW1lZCBpbXBvcnRzLic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb3duZXJOYW1lID0gb3duZXIgPyBnZXRDb21wb25lbnROYW1lKG93bmVyLnR5cGUpIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChvd25lck5hbWUpIHtcbiAgICAgICAgICAgICAgaW5mbyArPSAnXFxuXFxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBvd25lck5hbWUgKyAnYC4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdFbGVtZW50IHR5cGUgaXMgaW52YWxpZDogZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciBidWlsdC1pbiBjb21wb25lbnRzKSBvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgdHlwZSA9PSBudWxsID8gdHlwZSA6IHR5cGVvZiB0eXBlLCBpbmZvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZpYmVyID0gY3JlYXRlRmliZXIoZmliZXJUYWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbiAgZmliZXIuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBmaWJlci50eXBlID0gcmVzb2x2ZWRUeXBlO1xuICBmaWJlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuXG4gIHJldHVybiBmaWJlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tRWxlbWVudChlbGVtZW50LCBtb2RlLCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgb3duZXIgPSBudWxsO1xuICB7XG4gICAgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgfVxuICB2YXIgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcGVuZGluZ1Byb3BzID0gZWxlbWVudC5wcm9wcztcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKHR5cGUsIGtleSwgcGVuZGluZ1Byb3BzLCBvd25lciwgbW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICB7XG4gICAgZmliZXIuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgIGZpYmVyLl9kZWJ1Z093bmVyID0gZWxlbWVudC5fb3duZXI7XG4gIH1cbiAgcmV0dXJuIGZpYmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21GcmFnbWVudChlbGVtZW50cywgbW9kZSwgZXhwaXJhdGlvblRpbWUsIGtleSkge1xuICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlcihGcmFnbWVudCwgZWxlbWVudHMsIGtleSwgbW9kZSk7XG4gIGZpYmVyLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIHJldHVybiBmaWJlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tUHJvZmlsZXIocGVuZGluZ1Byb3BzLCBtb2RlLCBleHBpcmF0aW9uVGltZSwga2V5KSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIHBlbmRpbmdQcm9wcy5pZCAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIHBlbmRpbmdQcm9wcy5vblJlbmRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnUHJvZmlsZXIgbXVzdCBzcGVjaWZ5IGFuIFwiaWRcIiBzdHJpbmcgYW5kIFwib25SZW5kZXJcIiBmdW5jdGlvbiBhcyBwcm9wcycpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKFByb2ZpbGVyLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSB8IFByb2ZpbGVNb2RlKTtcbiAgLy8gVE9ETzogVGhlIFByb2ZpbGVyIGZpYmVyIHNob3VsZG4ndCBoYXZlIGEgdHlwZS4gSXQgaGFzIGEgdGFnLlxuICBmaWJlci5lbGVtZW50VHlwZSA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG4gIGZpYmVyLnR5cGUgPSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xuICBmaWJlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuXG4gIHJldHVybiBmaWJlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tTW9kZShwZW5kaW5nUHJvcHMsIG1vZGUsIGV4cGlyYXRpb25UaW1lLCBrZXkpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoTW9kZSwgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xuXG4gIC8vIFRPRE86IFRoZSBNb2RlIGZpYmVyIHNob3VsZG4ndCBoYXZlIGEgdHlwZS4gSXQgaGFzIGEgdGFnLlxuICB2YXIgdHlwZSA9IChtb2RlICYgQ29uY3VycmVudE1vZGUpID09PSBOb0NvbnRleHQgPyBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIDogUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG4gIGZpYmVyLmVsZW1lbnRUeXBlID0gdHlwZTtcbiAgZmliZXIudHlwZSA9IHR5cGU7XG5cbiAgZmliZXIuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgcmV0dXJuIGZpYmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21TdXNwZW5zZShwZW5kaW5nUHJvcHMsIG1vZGUsIGV4cGlyYXRpb25UaW1lLCBrZXkpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoU3VzcGVuc2VDb21wb25lbnQsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcblxuICAvLyBUT0RPOiBUaGUgU3VzcGVuc2VDb21wb25lbnQgZmliZXIgc2hvdWxkbid0IGhhdmUgYSB0eXBlLiBJdCBoYXMgYSB0YWcuXG4gIHZhciB0eXBlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbiAgZmliZXIuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBmaWJlci50eXBlID0gdHlwZTtcblxuICBmaWJlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICByZXR1cm4gZmliZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVRleHQoY29udGVudCwgbW9kZSwgZXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoSG9zdFRleHQsIGNvbnRlbnQsIG51bGwsIG1vZGUpO1xuICBmaWJlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICByZXR1cm4gZmliZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbUhvc3RJbnN0YW5jZUZvckRlbGV0aW9uKCkge1xuICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlcihIb3N0Q29tcG9uZW50LCBudWxsLCBudWxsLCBOb0NvbnRleHQpO1xuICAvLyBUT0RPOiBUaGVzZSBzaG91bGQgbm90IG5lZWQgYSB0eXBlLlxuICBmaWJlci5lbGVtZW50VHlwZSA9ICdERUxFVEVEJztcbiAgZmliZXIudHlwZSA9ICdERUxFVEVEJztcbiAgcmV0dXJuIGZpYmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCBtb2RlLCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgcGVuZGluZ1Byb3BzID0gcG9ydGFsLmNoaWxkcmVuICE9PSBudWxsID8gcG9ydGFsLmNoaWxkcmVuIDogW107XG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKEhvc3RQb3J0YWwsIHBlbmRpbmdQcm9wcywgcG9ydGFsLmtleSwgbW9kZSk7XG4gIGZpYmVyLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IHtcbiAgICBjb250YWluZXJJbmZvOiBwb3J0YWwuY29udGFpbmVySW5mbyxcbiAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsIC8vIFVzZWQgYnkgcGVyc2lzdGVudCB1cGRhdGVzXG4gICAgaW1wbGVtZW50YXRpb246IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICB9O1xuICByZXR1cm4gZmliZXI7XG59XG5cbi8vIFVzZWQgZm9yIHN0YXNoaW5nIFdJUCBwcm9wZXJ0aWVzIHRvIHJlcGxheSBmYWlsZWQgd29yayBpbiBERVYuXG5mdW5jdGlvbiBhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFVih0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyBGaWJlcidzIGluaXRpYWwgcHJvcGVydGllcyB3aWxsIGFsd2F5cyBiZSBvdmVyd3JpdHRlbi5cbiAgICAvLyBXZSBvbmx5IHVzZSBhIEZpYmVyIHRvIGVuc3VyZSB0aGUgc2FtZSBoaWRkZW4gY2xhc3Mgc28gREVWIGlzbid0IHNsb3cuXG4gICAgdGFyZ2V0ID0gY3JlYXRlRmliZXIoSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCwgbnVsbCwgbnVsbCwgTm9Db250ZXh0KTtcbiAgfVxuXG4gIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSB3cml0dGVuIGFzIGEgbGlzdCBvZiBhbGwgcHJvcGVydGllcy5cbiAgLy8gV2UgdHJpZWQgdG8gdXNlIE9iamVjdC5hc3NpZ24oKSBpbnN0ZWFkIGJ1dCB0aGlzIGlzIGNhbGxlZCBpblxuICAvLyB0aGUgaG90dGVzdCBwYXRoLCBhbmQgT2JqZWN0LmFzc2lnbigpIHdhcyB0b28gc2xvdzpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMjUwMlxuICAvLyBUaGlzIGNvZGUgaXMgREVWLW9ubHkgc28gc2l6ZSBpcyBub3QgYSBjb25jZXJuLlxuXG4gIHRhcmdldC50YWcgPSBzb3VyY2UudGFnO1xuICB0YXJnZXQua2V5ID0gc291cmNlLmtleTtcbiAgdGFyZ2V0LmVsZW1lbnRUeXBlID0gc291cmNlLmVsZW1lbnRUeXBlO1xuICB0YXJnZXQudHlwZSA9IHNvdXJjZS50eXBlO1xuICB0YXJnZXQuc3RhdGVOb2RlID0gc291cmNlLnN0YXRlTm9kZTtcbiAgdGFyZ2V0LnJldHVybiA9IHNvdXJjZS5yZXR1cm47XG4gIHRhcmdldC5jaGlsZCA9IHNvdXJjZS5jaGlsZDtcbiAgdGFyZ2V0LnNpYmxpbmcgPSBzb3VyY2Uuc2libGluZztcbiAgdGFyZ2V0LmluZGV4ID0gc291cmNlLmluZGV4O1xuICB0YXJnZXQucmVmID0gc291cmNlLnJlZjtcbiAgdGFyZ2V0LnBlbmRpbmdQcm9wcyA9IHNvdXJjZS5wZW5kaW5nUHJvcHM7XG4gIHRhcmdldC5tZW1vaXplZFByb3BzID0gc291cmNlLm1lbW9pemVkUHJvcHM7XG4gIHRhcmdldC51cGRhdGVRdWV1ZSA9IHNvdXJjZS51cGRhdGVRdWV1ZTtcbiAgdGFyZ2V0Lm1lbW9pemVkU3RhdGUgPSBzb3VyY2UubWVtb2l6ZWRTdGF0ZTtcbiAgdGFyZ2V0LmNvbnRleHREZXBlbmRlbmNpZXMgPSBzb3VyY2UuY29udGV4dERlcGVuZGVuY2llcztcbiAgdGFyZ2V0Lm1vZGUgPSBzb3VyY2UubW9kZTtcbiAgdGFyZ2V0LmVmZmVjdFRhZyA9IHNvdXJjZS5lZmZlY3RUYWc7XG4gIHRhcmdldC5uZXh0RWZmZWN0ID0gc291cmNlLm5leHRFZmZlY3Q7XG4gIHRhcmdldC5maXJzdEVmZmVjdCA9IHNvdXJjZS5maXJzdEVmZmVjdDtcbiAgdGFyZ2V0Lmxhc3RFZmZlY3QgPSBzb3VyY2UubGFzdEVmZmVjdDtcbiAgdGFyZ2V0LmV4cGlyYXRpb25UaW1lID0gc291cmNlLmV4cGlyYXRpb25UaW1lO1xuICB0YXJnZXQuY2hpbGRFeHBpcmF0aW9uVGltZSA9IHNvdXJjZS5jaGlsZEV4cGlyYXRpb25UaW1lO1xuICB0YXJnZXQuYWx0ZXJuYXRlID0gc291cmNlLmFsdGVybmF0ZTtcbiAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICB0YXJnZXQuYWN0dWFsRHVyYXRpb24gPSBzb3VyY2UuYWN0dWFsRHVyYXRpb247XG4gICAgdGFyZ2V0LmFjdHVhbFN0YXJ0VGltZSA9IHNvdXJjZS5hY3R1YWxTdGFydFRpbWU7XG4gICAgdGFyZ2V0LnNlbGZCYXNlRHVyYXRpb24gPSBzb3VyY2Uuc2VsZkJhc2VEdXJhdGlvbjtcbiAgICB0YXJnZXQudHJlZUJhc2VEdXJhdGlvbiA9IHNvdXJjZS50cmVlQmFzZUR1cmF0aW9uO1xuICB9XG4gIHRhcmdldC5fZGVidWdJRCA9IHNvdXJjZS5fZGVidWdJRDtcbiAgdGFyZ2V0Ll9kZWJ1Z1NvdXJjZSA9IHNvdXJjZS5fZGVidWdTb3VyY2U7XG4gIHRhcmdldC5fZGVidWdPd25lciA9IHNvdXJjZS5fZGVidWdPd25lcjtcbiAgdGFyZ2V0Ll9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nID0gc291cmNlLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nO1xuICB0YXJnZXQuX2RlYnVnSG9va1R5cGVzID0gc291cmNlLl9kZWJ1Z0hvb2tUeXBlcztcbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgbGlmdGVkIGludG8gdGhlIHJlbmRlcmVyLlxuXG5cbi8vIFRoZSBmb2xsb3dpbmcgYXR0cmlidXRlcyBhcmUgb25seSB1c2VkIGJ5IGludGVyYWN0aW9uIHRyYWNpbmcgYnVpbGRzLlxuLy8gVGhleSBlbmFibGUgaW50ZXJhY3Rpb25zIHRvIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGVpciBhc3luYyB3b3JrLFxuLy8gQW5kIGV4cG9zZSBpbnRlcmFjdGlvbiBtZXRhZGF0YSB0byB0aGUgUmVhY3QgRGV2VG9vbHMgUHJvZmlsZXIgcGx1Z2luLlxuLy8gTm90ZSB0aGF0IHRoZXNlIGF0dHJpYnV0ZXMgYXJlIG9ubHkgZGVmaW5lZCB3aGVuIHRoZSBlbmFibGVTY2hlZHVsZXJUcmFjaW5nIGZsYWcgaXMgZW5hYmxlZC5cblxuXG4vLyBFeHBvcnRlZCBGaWJlclJvb3QgdHlwZSBpbmNsdWRlcyBhbGwgcHJvcGVydGllcyxcbi8vIFRvIGF2b2lkIHJlcXVpcmluZyBwb3RlbnRpYWxseSBlcnJvci1wcm9uZSA6YW55IGNhc3RzIHRocm91Z2hvdXQgdGhlIHByb2plY3QuXG4vLyBQcm9maWxpbmcgcHJvcGVydGllcyBhcmUgb25seSBzYWZlIHRvIGFjY2VzcyBpbiBwcm9maWxpbmcgYnVpbGRzICh3aGVuIGVuYWJsZVNjaGVkdWxlclRyYWNpbmcgaXMgdHJ1ZSkuXG4vLyBUaGUgdHlwZXMgYXJlIGRlZmluZWQgc2VwYXJhdGVseSB3aXRoaW4gdGhpcyBmaWxlIHRvIGVuc3VyZSB0aGV5IHN0YXkgaW4gc3luYy5cbi8vIChXZSBkb24ndCBoYXZlIHRvIHVzZSBhbiBpbmxpbmUgOmFueSBjYXN0IHdoZW4gZW5hYmxlU2NoZWR1bGVyVHJhY2luZyBpcyBkaXNhYmxlZC4pXG5cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJSb290KGNvbnRhaW5lckluZm8sIGlzQ29uY3VycmVudCwgaHlkcmF0ZSkge1xuICAvLyBDeWNsaWMgY29uc3RydWN0aW9uLiBUaGlzIGNoZWF0cyB0aGUgdHlwZSBzeXN0ZW0gcmlnaHQgbm93IGJlY2F1c2VcbiAgLy8gc3RhdGVOb2RlIGlzIGFueS5cbiAgdmFyIHVuaW5pdGlhbGl6ZWRGaWJlciA9IGNyZWF0ZUhvc3RSb290RmliZXIoaXNDb25jdXJyZW50KTtcblxuICB2YXIgcm9vdCA9IHZvaWQgMDtcbiAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICByb290ID0ge1xuICAgICAgY3VycmVudDogdW5pbml0aWFsaXplZEZpYmVyLFxuICAgICAgY29udGFpbmVySW5mbzogY29udGFpbmVySW5mbyxcbiAgICAgIHBlbmRpbmdDaGlsZHJlbjogbnVsbCxcblxuICAgICAgZWFybGllc3RQZW5kaW5nVGltZTogTm9Xb3JrLFxuICAgICAgbGF0ZXN0UGVuZGluZ1RpbWU6IE5vV29yayxcbiAgICAgIGVhcmxpZXN0U3VzcGVuZGVkVGltZTogTm9Xb3JrLFxuICAgICAgbGF0ZXN0U3VzcGVuZGVkVGltZTogTm9Xb3JrLFxuICAgICAgbGF0ZXN0UGluZ2VkVGltZTogTm9Xb3JrLFxuXG4gICAgICBwaW5nQ2FjaGU6IG51bGwsXG5cbiAgICAgIGRpZEVycm9yOiBmYWxzZSxcblxuICAgICAgcGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOiBOb1dvcmssXG4gICAgICBmaW5pc2hlZFdvcms6IG51bGwsXG4gICAgICB0aW1lb3V0SGFuZGxlOiBub1RpbWVvdXQsXG4gICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgcGVuZGluZ0NvbnRleHQ6IG51bGwsXG4gICAgICBoeWRyYXRlOiBoeWRyYXRlLFxuICAgICAgbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246IE5vV29yayxcbiAgICAgIGV4cGlyYXRpb25UaW1lOiBOb1dvcmssXG4gICAgICBmaXJzdEJhdGNoOiBudWxsLFxuICAgICAgbmV4dFNjaGVkdWxlZFJvb3Q6IG51bGwsXG5cbiAgICAgIGludGVyYWN0aW9uVGhyZWFkSUQ6IHRyYWNpbmcudW5zdGFibGVfZ2V0VGhyZWFkSUQoKSxcbiAgICAgIG1lbW9pemVkSW50ZXJhY3Rpb25zOiBuZXcgU2V0KCksXG4gICAgICBwZW5kaW5nSW50ZXJhY3Rpb25NYXA6IG5ldyBNYXAoKVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcm9vdCA9IHtcbiAgICAgIGN1cnJlbnQ6IHVuaW5pdGlhbGl6ZWRGaWJlcixcbiAgICAgIGNvbnRhaW5lckluZm86IGNvbnRhaW5lckluZm8sXG4gICAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsXG5cbiAgICAgIHBpbmdDYWNoZTogbnVsbCxcblxuICAgICAgZWFybGllc3RQZW5kaW5nVGltZTogTm9Xb3JrLFxuICAgICAgbGF0ZXN0UGVuZGluZ1RpbWU6IE5vV29yayxcbiAgICAgIGVhcmxpZXN0U3VzcGVuZGVkVGltZTogTm9Xb3JrLFxuICAgICAgbGF0ZXN0U3VzcGVuZGVkVGltZTogTm9Xb3JrLFxuICAgICAgbGF0ZXN0UGluZ2VkVGltZTogTm9Xb3JrLFxuXG4gICAgICBkaWRFcnJvcjogZmFsc2UsXG5cbiAgICAgIHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTogTm9Xb3JrLFxuICAgICAgZmluaXNoZWRXb3JrOiBudWxsLFxuICAgICAgdGltZW91dEhhbmRsZTogbm9UaW1lb3V0LFxuICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgIHBlbmRpbmdDb250ZXh0OiBudWxsLFxuICAgICAgaHlkcmF0ZTogaHlkcmF0ZSxcbiAgICAgIG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uOiBOb1dvcmssXG4gICAgICBleHBpcmF0aW9uVGltZTogTm9Xb3JrLFxuICAgICAgZmlyc3RCYXRjaDogbnVsbCxcbiAgICAgIG5leHRTY2hlZHVsZWRSb290OiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHVuaW5pdGlhbGl6ZWRGaWJlci5zdGF0ZU5vZGUgPSByb290O1xuXG4gIC8vIFRoZSByZWFzb24gZm9yIHRoZSB3YXkgdGhlIEZsb3cgdHlwZXMgYXJlIHN0cnVjdHVyZWQgaW4gdGhpcyBmaWxlLFxuICAvLyBJcyB0byBhdm9pZCBuZWVkaW5nIDphbnkgY2FzdHMgZXZlcnl3aGVyZSBpbnRlcmFjdGlvbiB0cmFjaW5nIGZpZWxkcyBhcmUgdXNlZC5cbiAgLy8gVW5mb3J0dW5hdGVseSB0aGF0IHJlcXVpcmVzIGFuIDphbnkgY2FzdCBmb3Igbm9uLWludGVyYWN0aW9uIHRyYWNpbmcgY2FwYWJsZSBidWlsZHMuXG4gIC8vICRGbG93Rml4TWUgUmVtb3ZlIHRoaXMgOmFueSBjYXN0IGFuZCByZXBsYWNlIGl0IHdpdGggc29tZXRoaW5nIGJldHRlci5cbiAgcmV0dXJuIHJvb3Q7XG59XG5cbi8qKlxuICogRm9ya2VkIGZyb20gZmJqcy93YXJuaW5nOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9lNjZiYTIwYWQ1YmU0MzNlYjU0NDIzZjJiMDk3ZDgyOTMyNGQ5ZGU2L3BhY2thZ2VzL2ZianMvc3JjL19fZm9ya3NfXy93YXJuaW5nLmpzXG4gKlxuICogT25seSBjaGFuZ2UgaXMgd2UgdXNlIGNvbnNvbGUud2FybiBpbnN0ZWFkIG9mIGNvbnNvbGUuZXJyb3IsXG4gKiBhbmQgZG8gbm90aGluZyB3aGVuICdjb25zb2xlJyBpcyBub3Qgc3VwcG9ydGVkLlxuICogVGhpcyByZWFsbHkgc2ltcGxpZmllcyB0aGUgY29kZS5cbiAqIC0tLVxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGxvd1ByaW9yaXR5V2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmckMSA9IGxvd1ByaW9yaXR5V2FybmluZztcblxudmFyIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzID0ge1xuICBkaXNjYXJkUGVuZGluZ1dhcm5pbmdzOiBmdW5jdGlvbiAoKSB7fSxcbiAgZmx1c2hQZW5kaW5nRGVwcmVjYXRpb25XYXJuaW5nczogZnVuY3Rpb24gKCkge30sXG4gIGZsdXNoUGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzOiBmdW5jdGlvbiAoKSB7fSxcbiAgcmVjb3JkRGVwcmVjYXRpb25XYXJuaW5nczogZnVuY3Rpb24gKGZpYmVyLCBpbnN0YW5jZSkge30sXG4gIHJlY29yZFVuc2FmZUxpZmVjeWNsZVdhcm5pbmdzOiBmdW5jdGlvbiAoZmliZXIsIGluc3RhbmNlKSB7fSxcbiAgcmVjb3JkTGVnYWN5Q29udGV4dFdhcm5pbmc6IGZ1bmN0aW9uIChmaWJlciwgaW5zdGFuY2UpIHt9LFxuICBmbHVzaExlZ2FjeUNvbnRleHRXYXJuaW5nOiBmdW5jdGlvbiAoKSB7fVxufTtcblxue1xuICB2YXIgTElGRUNZQ0xFX1NVR0dFU1RJT05TID0ge1xuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQ6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6ICdzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZTogJ2NvbXBvbmVudERpZFVwZGF0ZSdcbiAgfTtcblxuICB2YXIgcGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzID0gW107XG4gIHZhciBwZW5kaW5nQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzID0gW107XG4gIHZhciBwZW5kaW5nQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzID0gW107XG4gIHZhciBwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MgPSBuZXcgTWFwKCk7XG4gIHZhciBwZW5kaW5nTGVnYWN5Q29udGV4dFdhcm5pbmcgPSBuZXcgTWFwKCk7XG5cbiAgLy8gVHJhY2tzIGNvbXBvbmVudHMgd2UgaGF2ZSBhbHJlYWR5IHdhcm5lZCBhYm91dC5cbiAgdmFyIGRpZFdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzID0gbmV3IFNldCgpO1xuICB2YXIgZGlkV2FybkFib3V0VW5zYWZlTGlmZWN5Y2xlcyA9IG5ldyBTZXQoKTtcbiAgdmFyIGRpZFdhcm5BYm91dExlZ2FjeUNvbnRleHQgPSBuZXcgU2V0KCk7XG5cbiAgdmFyIHNldFRvU29ydGVkU3RyaW5nID0gZnVuY3Rpb24gKHNldCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgYXJyYXkucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycmF5LnNvcnQoKS5qb2luKCcsICcpO1xuICB9O1xuXG4gIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmRpc2NhcmRQZW5kaW5nV2FybmluZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgcGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzID0gW107XG4gICAgcGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncyA9IFtdO1xuICAgIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MgPSBbXTtcbiAgICBwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MgPSBuZXcgTWFwKCk7XG4gICAgcGVuZGluZ0xlZ2FjeUNvbnRleHRXYXJuaW5nID0gbmV3IE1hcCgpO1xuICB9O1xuXG4gIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmZsdXNoUGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzID0gZnVuY3Rpb24gKCkge1xuICAgIHBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChsaWZlY3ljbGVXYXJuaW5nc01hcCwgc3RyaWN0Um9vdCkge1xuICAgICAgdmFyIGxpZmVjeWNsZXNXYXJuaW5nTWVzc2FnZXMgPSBbXTtcblxuICAgICAgT2JqZWN0LmtleXMobGlmZWN5Y2xlV2FybmluZ3NNYXApLmZvckVhY2goZnVuY3Rpb24gKGxpZmVjeWNsZSkge1xuICAgICAgICB2YXIgbGlmZWN5Y2xlV2FybmluZ3MgPSBsaWZlY3ljbGVXYXJuaW5nc01hcFtsaWZlY3ljbGVdO1xuICAgICAgICBpZiAobGlmZWN5Y2xlV2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBjb21wb25lbnROYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICBsaWZlY3ljbGVXYXJuaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChmaWJlcikge1xuICAgICAgICAgICAgY29tcG9uZW50TmFtZXMuYWRkKGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ0NvbXBvbmVudCcpO1xuICAgICAgICAgICAgZGlkV2FybkFib3V0VW5zYWZlTGlmZWN5Y2xlcy5hZGQoZmliZXIudHlwZSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgZm9ybWF0dGVkID0gbGlmZWN5Y2xlLnJlcGxhY2UoJ1VOU0FGRV8nLCAnJyk7XG4gICAgICAgICAgdmFyIHN1Z2dlc3Rpb24gPSBMSUZFQ1lDTEVfU1VHR0VTVElPTlNbbGlmZWN5Y2xlXTtcbiAgICAgICAgICB2YXIgc29ydGVkQ29tcG9uZW50TmFtZXMgPSBzZXRUb1NvcnRlZFN0cmluZyhjb21wb25lbnROYW1lcyk7XG5cbiAgICAgICAgICBsaWZlY3ljbGVzV2FybmluZ01lc3NhZ2VzLnB1c2goZm9ybWF0dGVkICsgJzogUGxlYXNlIHVwZGF0ZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHMgdG8gdXNlICcgKyAoc3VnZ2VzdGlvbiArICcgaW5zdGVhZDogJyArIHNvcnRlZENvbXBvbmVudE5hbWVzKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAobGlmZWN5Y2xlc1dhcm5pbmdNZXNzYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBzdHJpY3RSb290Q29tcG9uZW50U3RhY2sgPSBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2Qoc3RyaWN0Um9vdCk7XG5cbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnVW5zYWZlIGxpZmVjeWNsZSBtZXRob2RzIHdlcmUgZm91bmQgd2l0aGluIGEgc3RyaWN0LW1vZGUgdHJlZTolcycgKyAnXFxuXFxuJXMnICsgJ1xcblxcbkxlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6JyArICdcXG5odHRwczovL2ZiLm1lL3JlYWN0LXN0cmljdC1tb2RlLXdhcm5pbmdzJywgc3RyaWN0Um9vdENvbXBvbmVudFN0YWNrLCBsaWZlY3ljbGVzV2FybmluZ01lc3NhZ2VzLmpvaW4oJ1xcblxcbicpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncyA9IG5ldyBNYXAoKTtcbiAgfTtcblxuICB2YXIgZmluZFN0cmljdFJvb3QgPSBmdW5jdGlvbiAoZmliZXIpIHtcbiAgICB2YXIgbWF5YmVTdHJpY3RSb290ID0gbnVsbDtcblxuICAgIHZhciBub2RlID0gZmliZXI7XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAgIG1heWJlU3RyaWN0Um9vdCA9IG5vZGU7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heWJlU3RyaWN0Um9vdDtcbiAgfTtcblxuICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5mbHVzaFBlbmRpbmdEZXByZWNhdGlvbldhcm5pbmdzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwZW5kaW5nQ29tcG9uZW50V2lsbE1vdW50V2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHVuaXF1ZU5hbWVzID0gbmV3IFNldCgpO1xuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzLmZvckVhY2goZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgICAgIHVuaXF1ZU5hbWVzLmFkZChnZXRDb21wb25lbnROYW1lKGZpYmVyLnR5cGUpIHx8ICdDb21wb25lbnQnKTtcbiAgICAgICAgZGlkV2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMuYWRkKGZpYmVyLnR5cGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBzb3J0ZWROYW1lcyA9IHNldFRvU29ydGVkU3RyaW5nKHVuaXF1ZU5hbWVzKTtcblxuICAgICAgbG93UHJpb3JpdHlXYXJuaW5nJDEoZmFsc2UsICdjb21wb25lbnRXaWxsTW91bnQgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uICcgKyAnVXNlIGNvbXBvbmVudERpZE1vdW50IGluc3RlYWQuIEFzIGEgdGVtcG9yYXJ5IHdvcmthcm91bmQsICcgKyAneW91IGNhbiByZW5hbWUgdG8gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudC4nICsgJ1xcblxcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycgKyAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTonICsgJ1xcbmh0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcycsIHNvcnRlZE5hbWVzKTtcblxuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzID0gW107XG4gICAgfVxuXG4gICAgaWYgKHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIF91bmlxdWVOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgX3VuaXF1ZU5hbWVzLmFkZChnZXRDb21wb25lbnROYW1lKGZpYmVyLnR5cGUpIHx8ICdDb21wb25lbnQnKTtcbiAgICAgICAgZGlkV2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMuYWRkKGZpYmVyLnR5cGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBfc29ydGVkTmFtZXMgPSBzZXRUb1NvcnRlZFN0cmluZyhfdW5pcXVlTmFtZXMpO1xuXG4gICAgICBsb3dQcmlvcml0eVdhcm5pbmckMShmYWxzZSwgJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uICcgKyAnVXNlIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgaW5zdGVhZC4nICsgJ1xcblxcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycgKyAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTonICsgJ1xcbmh0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcycsIF9zb3J0ZWROYW1lcyk7XG5cbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MgPSBbXTtcbiAgICB9XG5cbiAgICBpZiAocGVuZGluZ0NvbXBvbmVudFdpbGxVcGRhdGVXYXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgX3VuaXF1ZU5hbWVzMiA9IG5ldyBTZXQoKTtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgX3VuaXF1ZU5hbWVzMi5hZGQoZ2V0Q29tcG9uZW50TmFtZShmaWJlci50eXBlKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICAgIGRpZFdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzLmFkZChmaWJlci50eXBlKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3NvcnRlZE5hbWVzMiA9IHNldFRvU29ydGVkU3RyaW5nKF91bmlxdWVOYW1lczIpO1xuXG4gICAgICBsb3dQcmlvcml0eVdhcm5pbmckMShmYWxzZSwgJ2NvbXBvbmVudFdpbGxVcGRhdGUgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uICcgKyAnVXNlIGNvbXBvbmVudERpZFVwZGF0ZSBpbnN0ZWFkLiBBcyBhIHRlbXBvcmFyeSB3b3JrYXJvdW5kLCAnICsgJ3lvdSBjYW4gcmVuYW1lIHRvIFVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlLicgKyAnXFxuXFxuUGxlYXNlIHVwZGF0ZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6ICVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOicgKyAnXFxuaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJywgX3NvcnRlZE5hbWVzMik7XG5cbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MgPSBbXTtcbiAgICB9XG4gIH07XG5cbiAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZ1bmN0aW9uIChmaWJlciwgaW5zdGFuY2UpIHtcbiAgICAvLyBEZWR1cCBzdHJhdGVneTogV2FybiBvbmNlIHBlciBjb21wb25lbnQuXG4gICAgaWYgKGRpZFdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzLmhhcyhmaWJlci50eXBlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERvbid0IHdhcm4gYWJvdXQgcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQgcG9seWZpbGxlZCBjb21wb25lbnRzLlxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICBwZW5kaW5nQ29tcG9uZW50V2lsbE1vdW50V2FybmluZ3MucHVzaChmaWJlcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUpIHtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MucHVzaChmaWJlcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUpIHtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MucHVzaChmaWJlcik7XG4gICAgfVxuICB9O1xuXG4gIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLnJlY29yZFVuc2FmZUxpZmVjeWNsZVdhcm5pbmdzID0gZnVuY3Rpb24gKGZpYmVyLCBpbnN0YW5jZSkge1xuICAgIHZhciBzdHJpY3RSb290ID0gZmluZFN0cmljdFJvb3QoZmliZXIpO1xuICAgIGlmIChzdHJpY3RSb290ID09PSBudWxsKSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdFeHBlY3RlZCB0byBmaW5kIGEgU3RyaWN0TW9kZSBjb21wb25lbnQgaW4gYSBzdHJpY3QgbW9kZSB0cmVlLiAnICsgJ1RoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVkdXAgc3RyYXRlZ3k6IFdhcm4gb25jZSBwZXIgY29tcG9uZW50LlxuICAgIC8vIFRoaXMgaXMgZGlmZmljdWx0IHRvIHRyYWNrIGFueSBvdGhlciB3YXkgc2luY2UgY29tcG9uZW50IG5hbWVzXG4gICAgLy8gYXJlIG9mdGVuIHZhZ3VlIGFuZCBhcmUgbGlrZWx5IHRvIGNvbGxpZGUgYmV0d2VlbiAzcmQgcGFydHkgbGlicmFyaWVzLlxuICAgIC8vIEFuIGV4cGFuZCBwcm9wZXJ0eSBpcyBwcm9iYWJseSBva2F5IHRvIHVzZSBoZXJlIHNpbmNlIGl0J3MgREVWLW9ubHksXG4gICAgLy8gYW5kIHdpbGwgb25seSBiZSBzZXQgaW4gdGhlIGV2ZW50IG9mIHNlcmlvdXMgd2FybmluZ3MuXG4gICAgaWYgKGRpZFdhcm5BYm91dFVuc2FmZUxpZmVjeWNsZXMuaGFzKGZpYmVyLnR5cGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHdhcm5pbmdzRm9yUm9vdCA9IHZvaWQgMDtcbiAgICBpZiAoIXBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncy5oYXMoc3RyaWN0Um9vdCkpIHtcbiAgICAgIHdhcm5pbmdzRm9yUm9vdCA9IHtcbiAgICAgICAgVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudDogW10sXG4gICAgICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBbXSxcbiAgICAgICAgVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGU6IFtdXG4gICAgICB9O1xuXG4gICAgICBwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3Muc2V0KHN0cmljdFJvb3QsIHdhcm5pbmdzRm9yUm9vdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmdzRm9yUm9vdCA9IHBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncy5nZXQoc3RyaWN0Um9vdCk7XG4gICAgfVxuXG4gICAgdmFyIHVuc2FmZUxpZmVjeWNsZXMgPSBbXTtcbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyAhPT0gdHJ1ZSB8fCB0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdW5zYWZlTGlmZWN5Y2xlcy5wdXNoKCdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50Jyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUgfHwgdHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB1bnNhZmVMaWZlY3ljbGVzLnB1c2goJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUgfHwgdHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB1bnNhZmVMaWZlY3ljbGVzLnB1c2goJ1VOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJyk7XG4gICAgfVxuXG4gICAgaWYgKHVuc2FmZUxpZmVjeWNsZXMubGVuZ3RoID4gMCkge1xuICAgICAgdW5zYWZlTGlmZWN5Y2xlcy5mb3JFYWNoKGZ1bmN0aW9uIChsaWZlY3ljbGUpIHtcbiAgICAgICAgd2FybmluZ3NGb3JSb290W2xpZmVjeWNsZV0ucHVzaChmaWJlcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkTGVnYWN5Q29udGV4dFdhcm5pbmcgPSBmdW5jdGlvbiAoZmliZXIsIGluc3RhbmNlKSB7XG4gICAgdmFyIHN0cmljdFJvb3QgPSBmaW5kU3RyaWN0Um9vdChmaWJlcik7XG4gICAgaWYgKHN0cmljdFJvb3QgPT09IG51bGwpIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0V4cGVjdGVkIHRvIGZpbmQgYSBTdHJpY3RNb2RlIGNvbXBvbmVudCBpbiBhIHN0cmljdCBtb2RlIHRyZWUuICcgKyAnVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZWR1cCBzdHJhdGVneTogV2FybiBvbmNlIHBlciBjb21wb25lbnQuXG4gICAgaWYgKGRpZFdhcm5BYm91dExlZ2FjeUNvbnRleHQuaGFzKGZpYmVyLnR5cGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHdhcm5pbmdzRm9yUm9vdCA9IHBlbmRpbmdMZWdhY3lDb250ZXh0V2FybmluZy5nZXQoc3RyaWN0Um9vdCk7XG5cbiAgICBpZiAoZmliZXIudHlwZS5jb250ZXh0VHlwZXMgIT0gbnVsbCB8fCBmaWJlci50eXBlLmNoaWxkQ29udGV4dFR5cGVzICE9IG51bGwgfHwgaW5zdGFuY2UgIT09IG51bGwgJiYgdHlwZW9mIGluc3RhbmNlLmdldENoaWxkQ29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHdhcm5pbmdzRm9yUm9vdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHdhcm5pbmdzRm9yUm9vdCA9IFtdO1xuICAgICAgICBwZW5kaW5nTGVnYWN5Q29udGV4dFdhcm5pbmcuc2V0KHN0cmljdFJvb3QsIHdhcm5pbmdzRm9yUm9vdCk7XG4gICAgICB9XG4gICAgICB3YXJuaW5nc0ZvclJvb3QucHVzaChmaWJlcik7XG4gICAgfVxuICB9O1xuXG4gIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmZsdXNoTGVnYWN5Q29udGV4dFdhcm5pbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcGVuZGluZ0xlZ2FjeUNvbnRleHRXYXJuaW5nLmZvckVhY2goZnVuY3Rpb24gKGZpYmVyQXJyYXksIHN0cmljdFJvb3QpIHtcbiAgICAgIHZhciB1bmlxdWVOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgIGZpYmVyQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgdW5pcXVlTmFtZXMuYWRkKGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ0NvbXBvbmVudCcpO1xuICAgICAgICBkaWRXYXJuQWJvdXRMZWdhY3lDb250ZXh0LmFkZChmaWJlci50eXBlKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgc29ydGVkTmFtZXMgPSBzZXRUb1NvcnRlZFN0cmluZyh1bmlxdWVOYW1lcyk7XG4gICAgICB2YXIgc3RyaWN0Um9vdENvbXBvbmVudFN0YWNrID0gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHN0cmljdFJvb3QpO1xuXG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdMZWdhY3kgY29udGV4dCBBUEkgaGFzIGJlZW4gZGV0ZWN0ZWQgd2l0aGluIGEgc3RyaWN0LW1vZGUgdHJlZTogJXMnICsgJ1xcblxcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycgKyAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTonICsgJ1xcbmh0dHBzOi8vZmIubWUvcmVhY3Qtc3RyaWN0LW1vZGUtd2FybmluZ3MnLCBzdHJpY3RSb290Q29tcG9uZW50U3RhY2ssIHNvcnRlZE5hbWVzKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuLy8gVGhpcyBsZXRzIHVzIGhvb2sgaW50byBGaWJlciB0byBkZWJ1ZyB3aGF0IGl0J3MgZG9pbmcuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvODAzMy5cbi8vIFRoaXMgaXMgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEksIG5vdCBldmVuIGZvciBSZWFjdCBEZXZUb29scy5cbi8vIFlvdSBtYXkgb25seSBpbmplY3QgYSBkZWJ1Z1Rvb2wgaWYgeW91IHdvcmsgb24gUmVhY3QgRmliZXIgaXRzZWxmLlxudmFyIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24gPSB7XG4gIGRlYnVnVG9vbDogbnVsbFxufTtcblxudmFyIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMSA9IFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb247XG5cbi8vIFRPRE86IE9mZnNjcmVlbiB1cGRhdGVzIHNob3VsZCBuZXZlciBzdXNwZW5kLiBIb3dldmVyLCBhIHByb21pc2UgdGhhdFxuLy8gc3VzcGVuZGVkIGluc2lkZSBhbiBvZmZzY3JlZW4gc3VidHJlZSBzaG91bGQgYmUgYWJsZSB0byBwaW5nIGF0IHRoZSBwcmlvcml0eVxuLy8gb2YgdGhlIG91dGVyIHJlbmRlci5cblxuZnVuY3Rpb24gbWFya1BlbmRpbmdQcmlvcml0eUxldmVsKHJvb3QsIGV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIElmIHRoZXJlJ3MgYSBnYXAgYmV0d2VlbiBjb21wbGV0aW5nIGEgZmFpbGVkIHJvb3QgYW5kIHJldHJ5aW5nIGl0LFxuICAvLyBhZGRpdGlvbmFsIHVwZGF0ZXMgbWF5IGJlIHNjaGVkdWxlZC4gQ2xlYXIgYGRpZEVycm9yYCwgaW4gY2FzZSB0aGUgdXBkYXRlXG4gIC8vIGlzIHN1ZmZpY2llbnQgdG8gZml4IHRoZSBlcnJvci5cbiAgcm9vdC5kaWRFcnJvciA9IGZhbHNlO1xuXG4gIC8vIFVwZGF0ZSB0aGUgbGF0ZXN0IGFuZCBlYXJsaWVzdCBwZW5kaW5nIHRpbWVzXG4gIHZhciBlYXJsaWVzdFBlbmRpbmdUaW1lID0gcm9vdC5lYXJsaWVzdFBlbmRpbmdUaW1lO1xuICBpZiAoZWFybGllc3RQZW5kaW5nVGltZSA9PT0gTm9Xb3JrKSB7XG4gICAgLy8gTm8gb3RoZXIgcGVuZGluZyB1cGRhdGVzLlxuICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IHJvb3QubGF0ZXN0UGVuZGluZ1RpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZWFybGllc3RQZW5kaW5nVGltZSA8IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBlYXJsaWVzdCBwZW5kaW5nIHVwZGF0ZS5cbiAgICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGF0ZXN0UGVuZGluZ1RpbWUgPSByb290LmxhdGVzdFBlbmRpbmdUaW1lO1xuICAgICAgaWYgKGxhdGVzdFBlbmRpbmdUaW1lID4gZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgbGF0ZXN0IHBlbmRpbmcgdXBkYXRlXG4gICAgICAgIHJvb3QubGF0ZXN0UGVuZGluZ1RpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZmluZE5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uKGV4cGlyYXRpb25UaW1lLCByb290KTtcbn1cblxuZnVuY3Rpb24gbWFya0NvbW1pdHRlZFByaW9yaXR5TGV2ZWxzKHJvb3QsIGVhcmxpZXN0UmVtYWluaW5nVGltZSkge1xuICByb290LmRpZEVycm9yID0gZmFsc2U7XG5cbiAgaWYgKGVhcmxpZXN0UmVtYWluaW5nVGltZSA9PT0gTm9Xb3JrKSB7XG4gICAgLy8gRmFzdCBwYXRoLiBUaGVyZSdzIG5vIHJlbWFpbmluZyB3b3JrLiBDbGVhciBldmVyeXRoaW5nLlxuICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IE5vV29yaztcbiAgICByb290LmxhdGVzdFBlbmRpbmdUaW1lID0gTm9Xb3JrO1xuICAgIHJvb3QuZWFybGllc3RTdXNwZW5kZWRUaW1lID0gTm9Xb3JrO1xuICAgIHJvb3QubGF0ZXN0U3VzcGVuZGVkVGltZSA9IE5vV29yaztcbiAgICByb290LmxhdGVzdFBpbmdlZFRpbWUgPSBOb1dvcms7XG4gICAgZmluZE5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uKE5vV29yaywgcm9vdCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGVhcmxpZXN0UmVtYWluaW5nVGltZSA8IHJvb3QubGF0ZXN0UGluZ2VkVGltZSkge1xuICAgIHJvb3QubGF0ZXN0UGluZ2VkVGltZSA9IE5vV29yaztcbiAgfVxuXG4gIC8vIExldCdzIHNlZSBpZiB0aGUgcHJldmlvdXMgbGF0ZXN0IGtub3duIHBlbmRpbmcgbGV2ZWwgd2FzIGp1c3QgZmx1c2hlZC5cbiAgdmFyIGxhdGVzdFBlbmRpbmdUaW1lID0gcm9vdC5sYXRlc3RQZW5kaW5nVGltZTtcbiAgaWYgKGxhdGVzdFBlbmRpbmdUaW1lICE9PSBOb1dvcmspIHtcbiAgICBpZiAobGF0ZXN0UGVuZGluZ1RpbWUgPiBlYXJsaWVzdFJlbWFpbmluZ1RpbWUpIHtcbiAgICAgIC8vIFdlJ3ZlIGZsdXNoZWQgYWxsIHRoZSBrbm93biBwZW5kaW5nIGxldmVscy5cbiAgICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IHJvb3QubGF0ZXN0UGVuZGluZ1RpbWUgPSBOb1dvcms7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlYXJsaWVzdFBlbmRpbmdUaW1lID0gcm9vdC5lYXJsaWVzdFBlbmRpbmdUaW1lO1xuICAgICAgaWYgKGVhcmxpZXN0UGVuZGluZ1RpbWUgPiBlYXJsaWVzdFJlbWFpbmluZ1RpbWUpIHtcbiAgICAgICAgLy8gV2UndmUgZmx1c2hlZCB0aGUgZWFybGllc3Qga25vd24gcGVuZGluZyBsZXZlbC4gU2V0IHRoaXMgdG8gdGhlXG4gICAgICAgIC8vIGxhdGVzdCBwZW5kaW5nIHRpbWUuXG4gICAgICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IHJvb3QubGF0ZXN0UGVuZGluZ1RpbWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IGxldCdzIGhhbmRsZSB0aGUgZWFybGllc3QgcmVtYWluaW5nIGxldmVsIGluIHRoZSB3aG9sZSB0cmVlLiBXZSBuZWVkIHRvXG4gIC8vIGRlY2lkZSB3aGV0aGVyIHRvIHRyZWF0IGl0IGFzIGEgcGVuZGluZyBsZXZlbCBvciBhcyBzdXNwZW5kZWQuIENoZWNrXG4gIC8vIGl0IGZhbGxzIHdpdGhpbiB0aGUgcmFuZ2Ugb2Yga25vd24gc3VzcGVuZGVkIGxldmVscy5cblxuICB2YXIgZWFybGllc3RTdXNwZW5kZWRUaW1lID0gcm9vdC5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7XG4gIGlmIChlYXJsaWVzdFN1c3BlbmRlZFRpbWUgPT09IE5vV29yaykge1xuICAgIC8vIFRoZXJlJ3Mgbm8gc3VzcGVuZGVkIHdvcmsuIFRyZWF0IHRoZSBlYXJsaWVzdCByZW1haW5pbmcgbGV2ZWwgYXMgYVxuICAgIC8vIHBlbmRpbmcgbGV2ZWwuXG4gICAgbWFya1BlbmRpbmdQcmlvcml0eUxldmVsKHJvb3QsIGVhcmxpZXN0UmVtYWluaW5nVGltZSk7XG4gICAgZmluZE5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uKE5vV29yaywgcm9vdCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGxhdGVzdFN1c3BlbmRlZFRpbWUgPSByb290LmxhdGVzdFN1c3BlbmRlZFRpbWU7XG4gIGlmIChlYXJsaWVzdFJlbWFpbmluZ1RpbWUgPCBsYXRlc3RTdXNwZW5kZWRUaW1lKSB7XG4gICAgLy8gVGhlIGVhcmxpZXN0IHJlbWFpbmluZyBsZXZlbCBpcyBsYXRlciB0aGFuIGFsbCB0aGUgc3VzcGVuZGVkIHdvcmsuIFRoYXRcbiAgICAvLyBtZWFucyB3ZSd2ZSBmbHVzaGVkIGFsbCB0aGUgc3VzcGVuZGVkIHdvcmsuXG4gICAgcm9vdC5lYXJsaWVzdFN1c3BlbmRlZFRpbWUgPSBOb1dvcms7XG4gICAgcm9vdC5sYXRlc3RTdXNwZW5kZWRUaW1lID0gTm9Xb3JrO1xuICAgIHJvb3QubGF0ZXN0UGluZ2VkVGltZSA9IE5vV29yaztcblxuICAgIC8vIFRoZXJlJ3Mgbm8gc3VzcGVuZGVkIHdvcmsuIFRyZWF0IHRoZSBlYXJsaWVzdCByZW1haW5pbmcgbGV2ZWwgYXMgYVxuICAgIC8vIHBlbmRpbmcgbGV2ZWwuXG4gICAgbWFya1BlbmRpbmdQcmlvcml0eUxldmVsKHJvb3QsIGVhcmxpZXN0UmVtYWluaW5nVGltZSk7XG4gICAgZmluZE5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uKE5vV29yaywgcm9vdCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGVhcmxpZXN0UmVtYWluaW5nVGltZSA+IGVhcmxpZXN0U3VzcGVuZGVkVGltZSkge1xuICAgIC8vIFRoZSBlYXJsaWVzdCByZW1haW5pbmcgdGltZSBpcyBlYXJsaWVyIHRoYW4gYWxsIHRoZSBzdXNwZW5kZWQgd29yay5cbiAgICAvLyBUcmVhdCBpdCBhcyBhIHBlbmRpbmcgdXBkYXRlLlxuICAgIG1hcmtQZW5kaW5nUHJpb3JpdHlMZXZlbChyb290LCBlYXJsaWVzdFJlbWFpbmluZ1RpbWUpO1xuICAgIGZpbmROZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbihOb1dvcmssIHJvb3QpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRoZSBlYXJsaWVzdCByZW1haW5pbmcgdGltZSBmYWxscyB3aXRoaW4gdGhlIHJhbmdlIG9mIGtub3duIHN1c3BlbmRlZFxuICAvLyBsZXZlbHMuIFdlIHNob3VsZCB0cmVhdCB0aGlzIGFzIHN1c3BlbmRlZCB3b3JrLlxuICBmaW5kTmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24oTm9Xb3JrLCByb290KTtcbn1cblxuZnVuY3Rpb24gaGFzTG93ZXJQcmlvcml0eVdvcmsocm9vdCwgZXJyb3JlZEV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBsYXRlc3RQZW5kaW5nVGltZSA9IHJvb3QubGF0ZXN0UGVuZGluZ1RpbWU7XG4gIHZhciBsYXRlc3RTdXNwZW5kZWRUaW1lID0gcm9vdC5sYXRlc3RTdXNwZW5kZWRUaW1lO1xuICB2YXIgbGF0ZXN0UGluZ2VkVGltZSA9IHJvb3QubGF0ZXN0UGluZ2VkVGltZTtcbiAgcmV0dXJuIGxhdGVzdFBlbmRpbmdUaW1lICE9PSBOb1dvcmsgJiYgbGF0ZXN0UGVuZGluZ1RpbWUgPCBlcnJvcmVkRXhwaXJhdGlvblRpbWUgfHwgbGF0ZXN0U3VzcGVuZGVkVGltZSAhPT0gTm9Xb3JrICYmIGxhdGVzdFN1c3BlbmRlZFRpbWUgPCBlcnJvcmVkRXhwaXJhdGlvblRpbWUgfHwgbGF0ZXN0UGluZ2VkVGltZSAhPT0gTm9Xb3JrICYmIGxhdGVzdFBpbmdlZFRpbWUgPCBlcnJvcmVkRXhwaXJhdGlvblRpbWU7XG59XG5cbmZ1bmN0aW9uIGlzUHJpb3JpdHlMZXZlbFN1c3BlbmRlZChyb290LCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgZWFybGllc3RTdXNwZW5kZWRUaW1lID0gcm9vdC5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7XG4gIHZhciBsYXRlc3RTdXNwZW5kZWRUaW1lID0gcm9vdC5sYXRlc3RTdXNwZW5kZWRUaW1lO1xuICByZXR1cm4gZWFybGllc3RTdXNwZW5kZWRUaW1lICE9PSBOb1dvcmsgJiYgZXhwaXJhdGlvblRpbWUgPD0gZWFybGllc3RTdXNwZW5kZWRUaW1lICYmIGV4cGlyYXRpb25UaW1lID49IGxhdGVzdFN1c3BlbmRlZFRpbWU7XG59XG5cbmZ1bmN0aW9uIG1hcmtTdXNwZW5kZWRQcmlvcml0eUxldmVsKHJvb3QsIHN1c3BlbmRlZFRpbWUpIHtcbiAgcm9vdC5kaWRFcnJvciA9IGZhbHNlO1xuICBjbGVhclBpbmcocm9vdCwgc3VzcGVuZGVkVGltZSk7XG5cbiAgLy8gRmlyc3QsIGNoZWNrIHRoZSBrbm93biBwZW5kaW5nIGxldmVscyBhbmQgdXBkYXRlIHRoZW0gaWYgbmVlZGVkLlxuICB2YXIgZWFybGllc3RQZW5kaW5nVGltZSA9IHJvb3QuZWFybGllc3RQZW5kaW5nVGltZTtcbiAgdmFyIGxhdGVzdFBlbmRpbmdUaW1lID0gcm9vdC5sYXRlc3RQZW5kaW5nVGltZTtcbiAgaWYgKGVhcmxpZXN0UGVuZGluZ1RpbWUgPT09IHN1c3BlbmRlZFRpbWUpIHtcbiAgICBpZiAobGF0ZXN0UGVuZGluZ1RpbWUgPT09IHN1c3BlbmRlZFRpbWUpIHtcbiAgICAgIC8vIEJvdGgga25vd24gcGVuZGluZyBsZXZlbHMgd2VyZSBzdXNwZW5kZWQuIENsZWFyIHRoZW0uXG4gICAgICByb290LmVhcmxpZXN0UGVuZGluZ1RpbWUgPSByb290LmxhdGVzdFBlbmRpbmdUaW1lID0gTm9Xb3JrO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgZWFybGllc3QgcGVuZGluZyBsZXZlbCB3YXMgc3VzcGVuZGVkLiBDbGVhciBieSBzZXR0aW5nIGl0IHRvIHRoZVxuICAgICAgLy8gbGF0ZXN0IHBlbmRpbmcgbGV2ZWwuXG4gICAgICByb290LmVhcmxpZXN0UGVuZGluZ1RpbWUgPSBsYXRlc3RQZW5kaW5nVGltZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobGF0ZXN0UGVuZGluZ1RpbWUgPT09IHN1c3BlbmRlZFRpbWUpIHtcbiAgICAvLyBUaGUgbGF0ZXN0IHBlbmRpbmcgbGV2ZWwgd2FzIHN1c3BlbmRlZC4gQ2xlYXIgYnkgc2V0dGluZyBpdCB0byB0aGVcbiAgICAvLyBsYXRlc3QgcGVuZGluZyBsZXZlbC5cbiAgICByb290LmxhdGVzdFBlbmRpbmdUaW1lID0gZWFybGllc3RQZW5kaW5nVGltZTtcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHVwZGF0ZSB0aGUga25vd24gc3VzcGVuZGVkIGxldmVscy5cbiAgdmFyIGVhcmxpZXN0U3VzcGVuZGVkVGltZSA9IHJvb3QuZWFybGllc3RTdXNwZW5kZWRUaW1lO1xuICB2YXIgbGF0ZXN0U3VzcGVuZGVkVGltZSA9IHJvb3QubGF0ZXN0U3VzcGVuZGVkVGltZTtcbiAgaWYgKGVhcmxpZXN0U3VzcGVuZGVkVGltZSA9PT0gTm9Xb3JrKSB7XG4gICAgLy8gTm8gb3RoZXIgc3VzcGVuZGVkIGxldmVscy5cbiAgICByb290LmVhcmxpZXN0U3VzcGVuZGVkVGltZSA9IHJvb3QubGF0ZXN0U3VzcGVuZGVkVGltZSA9IHN1c3BlbmRlZFRpbWU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGVhcmxpZXN0U3VzcGVuZGVkVGltZSA8IHN1c3BlbmRlZFRpbWUpIHtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIGVhcmxpZXN0IHN1c3BlbmRlZCBsZXZlbC5cbiAgICAgIHJvb3QuZWFybGllc3RTdXNwZW5kZWRUaW1lID0gc3VzcGVuZGVkVGltZTtcbiAgICB9IGVsc2UgaWYgKGxhdGVzdFN1c3BlbmRlZFRpbWUgPiBzdXNwZW5kZWRUaW1lKSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBsYXRlc3Qgc3VzcGVuZGVkIGxldmVsXG4gICAgICByb290LmxhdGVzdFN1c3BlbmRlZFRpbWUgPSBzdXNwZW5kZWRUaW1lO1xuICAgIH1cbiAgfVxuXG4gIGZpbmROZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbihzdXNwZW5kZWRUaW1lLCByb290KTtcbn1cblxuZnVuY3Rpb24gbWFya1BpbmdlZFByaW9yaXR5TGV2ZWwocm9vdCwgcGluZ2VkVGltZSkge1xuICByb290LmRpZEVycm9yID0gZmFsc2U7XG5cbiAgLy8gVE9ETzogV2hlbiB3ZSBhZGQgYmFjayByZXN1bWluZywgd2UgbmVlZCB0byBlbnN1cmUgdGhlIHByb2dyZXNzZWQgd29ya1xuICAvLyBpcyB0aHJvd24gb3V0IGFuZCBub3QgcmV1c2VkIGR1cmluZyB0aGUgcmVzdGFydGVkIHJlbmRlci4gT25lIHdheSB0b1xuICAvLyBpbnZhbGlkYXRlIHRoZSBwcm9ncmVzc2VkIHdvcmsgaXMgdG8gcmVzdGFydCBhdCBleHBpcmF0aW9uVGltZSArIDEuXG4gIHZhciBsYXRlc3RQaW5nZWRUaW1lID0gcm9vdC5sYXRlc3RQaW5nZWRUaW1lO1xuICBpZiAobGF0ZXN0UGluZ2VkVGltZSA9PT0gTm9Xb3JrIHx8IGxhdGVzdFBpbmdlZFRpbWUgPiBwaW5nZWRUaW1lKSB7XG4gICAgcm9vdC5sYXRlc3RQaW5nZWRUaW1lID0gcGluZ2VkVGltZTtcbiAgfVxuICBmaW5kTmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24ocGluZ2VkVGltZSwgcm9vdCk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyUGluZyhyb290LCBjb21wbGV0ZWRUaW1lKSB7XG4gIHZhciBsYXRlc3RQaW5nZWRUaW1lID0gcm9vdC5sYXRlc3RQaW5nZWRUaW1lO1xuICBpZiAobGF0ZXN0UGluZ2VkVGltZSA+PSBjb21wbGV0ZWRUaW1lKSB7XG4gICAgcm9vdC5sYXRlc3RQaW5nZWRUaW1lID0gTm9Xb3JrO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRFYXJsaWVzdE91dHN0YW5kaW5nUHJpb3JpdHlMZXZlbChyb290LCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgZWFybGllc3RFeHBpcmF0aW9uVGltZSA9IHJlbmRlckV4cGlyYXRpb25UaW1lO1xuXG4gIHZhciBlYXJsaWVzdFBlbmRpbmdUaW1lID0gcm9vdC5lYXJsaWVzdFBlbmRpbmdUaW1lO1xuICB2YXIgZWFybGllc3RTdXNwZW5kZWRUaW1lID0gcm9vdC5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7XG4gIGlmIChlYXJsaWVzdFBlbmRpbmdUaW1lID4gZWFybGllc3RFeHBpcmF0aW9uVGltZSkge1xuICAgIGVhcmxpZXN0RXhwaXJhdGlvblRpbWUgPSBlYXJsaWVzdFBlbmRpbmdUaW1lO1xuICB9XG4gIGlmIChlYXJsaWVzdFN1c3BlbmRlZFRpbWUgPiBlYXJsaWVzdEV4cGlyYXRpb25UaW1lKSB7XG4gICAgZWFybGllc3RFeHBpcmF0aW9uVGltZSA9IGVhcmxpZXN0U3VzcGVuZGVkVGltZTtcbiAgfVxuICByZXR1cm4gZWFybGllc3RFeHBpcmF0aW9uVGltZTtcbn1cblxuZnVuY3Rpb24gZGlkRXhwaXJlQXRFeHBpcmF0aW9uVGltZShyb290LCBjdXJyZW50VGltZSkge1xuICB2YXIgZXhwaXJhdGlvblRpbWUgPSByb290LmV4cGlyYXRpb25UaW1lO1xuICBpZiAoZXhwaXJhdGlvblRpbWUgIT09IE5vV29yayAmJiBjdXJyZW50VGltZSA8PSBleHBpcmF0aW9uVGltZSkge1xuICAgIC8vIFRoZSByb290IGhhcyBleHBpcmVkLiBGbHVzaCBhbGwgd29yayB1cCB0byB0aGUgY3VycmVudCB0aW1lLlxuICAgIHJvb3QubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24gPSBjdXJyZW50VGltZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kTmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24oY29tcGxldGVkRXhwaXJhdGlvblRpbWUsIHJvb3QpIHtcbiAgdmFyIGVhcmxpZXN0U3VzcGVuZGVkVGltZSA9IHJvb3QuZWFybGllc3RTdXNwZW5kZWRUaW1lO1xuICB2YXIgbGF0ZXN0U3VzcGVuZGVkVGltZSA9IHJvb3QubGF0ZXN0U3VzcGVuZGVkVGltZTtcbiAgdmFyIGVhcmxpZXN0UGVuZGluZ1RpbWUgPSByb290LmVhcmxpZXN0UGVuZGluZ1RpbWU7XG4gIHZhciBsYXRlc3RQaW5nZWRUaW1lID0gcm9vdC5sYXRlc3RQaW5nZWRUaW1lO1xuXG4gIC8vIFdvcmsgb24gdGhlIGVhcmxpZXN0IHBlbmRpbmcgdGltZS4gRmFpbGluZyB0aGF0LCB3b3JrIG9uIHRoZSBsYXRlc3RcbiAgLy8gcGluZ2VkIHRpbWUuXG4gIHZhciBuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiA9IGVhcmxpZXN0UGVuZGluZ1RpbWUgIT09IE5vV29yayA/IGVhcmxpZXN0UGVuZGluZ1RpbWUgOiBsYXRlc3RQaW5nZWRUaW1lO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vIHBlbmRpbmcgb3IgcGluZ2VkIHdvcmssIGNoZWNrIGlmIHRoZXJlJ3Mgc3VzcGVuZGVkIHdvcmtcbiAgLy8gdGhhdCdzIGxvd2VyIHByaW9yaXR5IHRoYW4gd2hhdCB3ZSBqdXN0IGNvbXBsZXRlZC5cbiAgaWYgKG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uID09PSBOb1dvcmsgJiYgKGNvbXBsZXRlZEV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgbGF0ZXN0U3VzcGVuZGVkVGltZSA8IGNvbXBsZXRlZEV4cGlyYXRpb25UaW1lKSkge1xuICAgIC8vIFRoZSBsb3dlc3QgcHJpb3JpdHkgc3VzcGVuZGVkIHdvcmsgaXMgdGhlIHdvcmsgbW9zdCBsaWtlbHkgdG8gYmVcbiAgICAvLyBjb21taXR0ZWQgbmV4dC4gTGV0J3Mgc3RhcnQgcmVuZGVyaW5nIGl0IGFnYWluLCBzbyB0aGF0IGlmIGl0IHRpbWVzIG91dCxcbiAgICAvLyBpdCdzIHJlYWR5IHRvIGNvbW1pdC5cbiAgICBuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiA9IGxhdGVzdFN1c3BlbmRlZFRpbWU7XG4gIH1cblxuICB2YXIgZXhwaXJhdGlvblRpbWUgPSBuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtcbiAgaWYgKGV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmsgJiYgZWFybGllc3RTdXNwZW5kZWRUaW1lID4gZXhwaXJhdGlvblRpbWUpIHtcbiAgICAvLyBFeHBpcmUgdXNpbmcgdGhlIGVhcmxpZXN0IGtub3duIGV4cGlyYXRpb24gdGltZS5cbiAgICBleHBpcmF0aW9uVGltZSA9IGVhcmxpZXN0U3VzcGVuZGVkVGltZTtcbiAgfVxuXG4gIHJvb3QubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24gPSBuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtcbiAgcm9vdC5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRGVmYXVsdFByb3BzKENvbXBvbmVudCwgYmFzZVByb3BzKSB7XG4gIGlmIChDb21wb25lbnQgJiYgQ29tcG9uZW50LmRlZmF1bHRQcm9wcykge1xuICAgIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wcy4gVGFrZW4gZnJvbSBSZWFjdEVsZW1lbnRcbiAgICB2YXIgcHJvcHMgPSBfYXNzaWduKHt9LCBiYXNlUHJvcHMpO1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSBDb21wb25lbnQuZGVmYXVsdFByb3BzO1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wcztcbiAgfVxuICByZXR1cm4gYmFzZVByb3BzO1xufVxuXG5mdW5jdGlvbiByZWFkTGF6eUNvbXBvbmVudFR5cGUobGF6eUNvbXBvbmVudCkge1xuICB2YXIgc3RhdHVzID0gbGF6eUNvbXBvbmVudC5fc3RhdHVzO1xuICB2YXIgcmVzdWx0ID0gbGF6eUNvbXBvbmVudC5fcmVzdWx0O1xuICBzd2l0Y2ggKHN0YXR1cykge1xuICAgIGNhc2UgUmVzb2x2ZWQ6XG4gICAgICB7XG4gICAgICAgIHZhciBDb21wb25lbnQgPSByZXN1bHQ7XG4gICAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgICB9XG4gICAgY2FzZSBSZWplY3RlZDpcbiAgICAgIHtcbiAgICAgICAgdmFyIGVycm9yID0gcmVzdWx0O1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICBjYXNlIFBlbmRpbmc6XG4gICAgICB7XG4gICAgICAgIHZhciB0aGVuYWJsZSA9IHJlc3VsdDtcbiAgICAgICAgdGhyb3cgdGhlbmFibGU7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgbGF6eUNvbXBvbmVudC5fc3RhdHVzID0gUGVuZGluZztcbiAgICAgICAgdmFyIGN0b3IgPSBsYXp5Q29tcG9uZW50Ll9jdG9yO1xuICAgICAgICB2YXIgX3RoZW5hYmxlID0gY3RvcigpO1xuICAgICAgICBfdGhlbmFibGUudGhlbihmdW5jdGlvbiAobW9kdWxlT2JqZWN0KSB7XG4gICAgICAgICAgaWYgKGxhenlDb21wb25lbnQuX3N0YXR1cyA9PT0gUGVuZGluZykge1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRFeHBvcnQgPSBtb2R1bGVPYmplY3QuZGVmYXVsdDtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWYgKGRlZmF1bHRFeHBvcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ2xhenk6IEV4cGVjdGVkIHRoZSByZXN1bHQgb2YgYSBkeW5hbWljIGltcG9ydCgpIGNhbGwuICcgKyAnSW5zdGVhZCByZWNlaXZlZDogJXNcXG5cXG5Zb3VyIGNvZGUgc2hvdWxkIGxvb2sgbGlrZTogXFxuICAnICsgXCJjb25zdCBNeUNvbXBvbmVudCA9IGxhenkoKCkgPT4gaW1wb3J0KCcuL015Q29tcG9uZW50JykpXCIsIG1vZHVsZU9iamVjdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhenlDb21wb25lbnQuX3N0YXR1cyA9IFJlc29sdmVkO1xuICAgICAgICAgICAgbGF6eUNvbXBvbmVudC5fcmVzdWx0ID0gZGVmYXVsdEV4cG9ydDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIGlmIChsYXp5Q29tcG9uZW50Ll9zdGF0dXMgPT09IFBlbmRpbmcpIHtcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQuX3N0YXR1cyA9IFJlamVjdGVkO1xuICAgICAgICAgICAgbGF6eUNvbXBvbmVudC5fcmVzdWx0ID0gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gSGFuZGxlIHN5bmNocm9ub3VzIHRoZW5hYmxlcy5cbiAgICAgICAgc3dpdGNoIChsYXp5Q29tcG9uZW50Ll9zdGF0dXMpIHtcbiAgICAgICAgICBjYXNlIFJlc29sdmVkOlxuICAgICAgICAgICAgcmV0dXJuIGxhenlDb21wb25lbnQuX3Jlc3VsdDtcbiAgICAgICAgICBjYXNlIFJlamVjdGVkOlxuICAgICAgICAgICAgdGhyb3cgbGF6eUNvbXBvbmVudC5fcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxhenlDb21wb25lbnQuX3Jlc3VsdCA9IF90aGVuYWJsZTtcbiAgICAgICAgdGhyb3cgX3RoZW5hYmxlO1xuICAgICAgfVxuICB9XG59XG5cbnZhciBmYWtlSW50ZXJuYWxJbnN0YW5jZSA9IHt9O1xudmFyIGlzQXJyYXkkMSA9IEFycmF5LmlzQXJyYXk7XG5cbi8vIFJlYWN0LkNvbXBvbmVudCB1c2VzIGEgc2hhcmVkIGZyb3plbiBvYmplY3QgYnkgZGVmYXVsdC5cbi8vIFdlJ2xsIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hldGhlciB3ZSBuZWVkIHRvIGluaXRpYWxpemUgbGVnYWN5IHJlZnMuXG52YXIgZW1wdHlSZWZzT2JqZWN0ID0gbmV3IFJlYWN0LkNvbXBvbmVudCgpLnJlZnM7XG5cbnZhciBkaWRXYXJuQWJvdXRTdGF0ZUFzc2lnbm1lbnRGb3JDb21wb25lbnQgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0VW5pbml0aWFsaXplZFN0YXRlID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dEdldFNuYXBzaG90QmVmb3JlVXBkYXRlV2l0aG91dERpZFVwZGF0ZSA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRMZWdhY3lMaWZlY3ljbGVzQW5kRGVyaXZlZFN0YXRlID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZSA9IHZvaWQgMDtcbnZhciB3YXJuT25VbmRlZmluZWREZXJpdmVkU3RhdGUgPSB2b2lkIDA7XG52YXIgd2Fybk9uSW52YWxpZENhbGxiYWNrJDEgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0RGlyZWN0bHlBc3NpZ25pbmdQcm9wc1RvU3RhdGUgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0Q29udGV4dFR5cGVBbmRDb250ZXh0VHlwZXMgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0SW52YWxpZGF0ZUNvbnRleHRUeXBlID0gdm9pZCAwO1xuXG57XG4gIGRpZFdhcm5BYm91dFN0YXRlQXNzaWdubWVudEZvckNvbXBvbmVudCA9IG5ldyBTZXQoKTtcbiAgZGlkV2FybkFib3V0VW5pbml0aWFsaXplZFN0YXRlID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZVdpdGhvdXREaWRVcGRhdGUgPSBuZXcgU2V0KCk7XG4gIGRpZFdhcm5BYm91dExlZ2FjeUxpZmVjeWNsZXNBbmREZXJpdmVkU3RhdGUgPSBuZXcgU2V0KCk7XG4gIGRpZFdhcm5BYm91dERpcmVjdGx5QXNzaWduaW5nUHJvcHNUb1N0YXRlID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRVbmRlZmluZWREZXJpdmVkU3RhdGUgPSBuZXcgU2V0KCk7XG4gIGRpZFdhcm5BYm91dENvbnRleHRUeXBlQW5kQ29udGV4dFR5cGVzID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRJbnZhbGlkYXRlQ29udGV4dFR5cGUgPSBuZXcgU2V0KCk7XG5cbiAgdmFyIGRpZFdhcm5PbkludmFsaWRDYWxsYmFjayA9IG5ldyBTZXQoKTtcblxuICB3YXJuT25JbnZhbGlkQ2FsbGJhY2skMSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIGlmIChjYWxsYmFjayA9PT0gbnVsbCB8fCB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGtleSA9IGNhbGxlck5hbWUgKyAnXycgKyBjYWxsYmFjaztcbiAgICBpZiAoIWRpZFdhcm5PbkludmFsaWRDYWxsYmFjay5oYXMoa2V5KSkge1xuICAgICAgZGlkV2Fybk9uSW52YWxpZENhbGxiYWNrLmFkZChrZXkpO1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhICcgKyAnZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNhbGxlck5hbWUsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH07XG5cbiAgd2Fybk9uVW5kZWZpbmVkRGVyaXZlZFN0YXRlID0gZnVuY3Rpb24gKHR5cGUsIHBhcnRpYWxTdGF0ZSkge1xuICAgIGlmIChwYXJ0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKHR5cGUpIHx8ICdDb21wb25lbnQnO1xuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRVbmRlZmluZWREZXJpdmVkU3RhdGUuaGFzKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZS5hZGQoY29tcG9uZW50TmFtZSk7XG4gICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpOiBBIHZhbGlkIHN0YXRlIG9iamVjdCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gJyArICdZb3UgaGF2ZSByZXR1cm5lZCB1bmRlZmluZWQuJywgY29tcG9uZW50TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFRoaXMgaXMgc28gZ3Jvc3MgYnV0IGl0J3MgYXQgbGVhc3Qgbm9uLWNyaXRpY2FsIGFuZCBjYW4gYmUgcmVtb3ZlZCBpZlxuICAvLyBpdCBjYXVzZXMgcHJvYmxlbXMuIFRoaXMgaXMgbWVhbnQgdG8gZ2l2ZSBhIG5pY2VyIGVycm9yIG1lc3NhZ2UgZm9yXG4gIC8vIFJlYWN0RE9NMTUudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIocmVhY3RET00xNkNvbXBvbmVudCxcbiAgLy8gLi4uKSkgd2hpY2ggb3RoZXJ3aXNlIHRocm93cyBhIFwiX3Byb2Nlc3NDaGlsZENvbnRleHQgaXMgbm90IGEgZnVuY3Rpb25cIlxuICAvLyBleGNlcHRpb24uXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmYWtlSW50ZXJuYWxJbnN0YW5jZSwgJ19wcm9jZXNzQ2hpbGRDb250ZXh0Jywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsICdfcHJvY2Vzc0NoaWxkQ29udGV4dCBpcyBub3QgYXZhaWxhYmxlIGluIFJlYWN0IDE2Ky4gVGhpcyBsaWtlbHkgbWVhbnMgeW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGFuZCBhcmUgYXR0ZW1wdGluZyB0byBuZXN0IGEgUmVhY3QgMTUgdHJlZSBpbnNpZGUgYSBSZWFjdCAxNiB0cmVlIHVzaW5nIHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyLCB3aGljaCBpc25cXCd0IHN1cHBvcnRlZC4gVHJ5IHRvIG1ha2Ugc3VyZSB5b3UgaGF2ZSBvbmx5IG9uZSBjb3B5IG9mIFJlYWN0IChhbmQgaWRlYWxseSwgc3dpdGNoIHRvIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbCkuJyk7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmZyZWV6ZShmYWtlSW50ZXJuYWxJbnN0YW5jZSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKHdvcmtJblByb2dyZXNzLCBjdG9yLCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsIG5leHRQcm9wcykge1xuICB2YXIgcHJldlN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcblxuICB7XG4gICAgaWYgKGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0cyB8fCBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHNGb3JTdHJpY3RNb2RlICYmIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAvLyBJbnZva2UgdGhlIGZ1bmN0aW9uIGFuIGV4dHJhIHRpbWUgdG8gaGVscCBkZXRlY3Qgc2lkZS1lZmZlY3RzLlxuICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGFydGlhbFN0YXRlID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcblxuICB7XG4gICAgd2Fybk9uVW5kZWZpbmVkRGVyaXZlZFN0YXRlKGN0b3IsIHBhcnRpYWxTdGF0ZSk7XG4gIH1cbiAgLy8gTWVyZ2UgdGhlIHBhcnRpYWwgc3RhdGUgYW5kIHRoZSBwcmV2aW91cyBzdGF0ZS5cbiAgdmFyIG1lbW9pemVkU3RhdGUgPSBwYXJ0aWFsU3RhdGUgPT09IG51bGwgfHwgcGFydGlhbFN0YXRlID09PSB1bmRlZmluZWQgPyBwcmV2U3RhdGUgOiBfYXNzaWduKHt9LCBwcmV2U3RhdGUsIHBhcnRpYWxTdGF0ZSk7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBtZW1vaXplZFN0YXRlO1xuXG4gIC8vIE9uY2UgdGhlIHVwZGF0ZSBxdWV1ZSBpcyBlbXB0eSwgcGVyc2lzdCB0aGUgZGVyaXZlZCBzdGF0ZSBvbnRvIHRoZVxuICAvLyBiYXNlIHN0YXRlLlxuICB2YXIgdXBkYXRlUXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsICYmIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID09PSBOb1dvcmspIHtcbiAgICB1cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBtZW1vaXplZFN0YXRlO1xuICB9XG59XG5cbnZhciBjbGFzc0NvbXBvbmVudFVwZGF0ZXIgPSB7XG4gIGlzTW91bnRlZDogaXNNb3VudGVkLFxuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIHZhciBmaWJlciA9IGdldChpbnN0KTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSByZXF1ZXN0Q3VycmVudFRpbWUoKTtcbiAgICB2YXIgZXhwaXJhdGlvblRpbWUgPSBjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyKGN1cnJlbnRUaW1lLCBmaWJlcik7XG5cbiAgICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGV4cGlyYXRpb25UaW1lKTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQgJiYgY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHtcbiAgICAgICAgd2Fybk9uSW52YWxpZENhbGxiYWNrJDEoY2FsbGJhY2ssICdzZXRTdGF0ZScpO1xuICAgICAgfVxuICAgICAgdXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZmx1c2hQYXNzaXZlRWZmZWN0cygpO1xuICAgIGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSk7XG4gICAgc2NoZWR1bGVXb3JrKGZpYmVyLCBleHBpcmF0aW9uVGltZSk7XG4gIH0sXG4gIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIHZhciBmaWJlciA9IGdldChpbnN0KTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSByZXF1ZXN0Q3VycmVudFRpbWUoKTtcbiAgICB2YXIgZXhwaXJhdGlvblRpbWUgPSBjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyKGN1cnJlbnRUaW1lLCBmaWJlcik7XG5cbiAgICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGV4cGlyYXRpb25UaW1lKTtcbiAgICB1cGRhdGUudGFnID0gUmVwbGFjZVN0YXRlO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gcGF5bG9hZDtcblxuICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkICYmIGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB7XG4gICAgICAgIHdhcm5PbkludmFsaWRDYWxsYmFjayQxKGNhbGxiYWNrLCAncmVwbGFjZVN0YXRlJyk7XG4gICAgICB9XG4gICAgICB1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gICAgZW5xdWV1ZVVwZGF0ZShmaWJlciwgdXBkYXRlKTtcbiAgICBzY2hlZHVsZVdvcmsoZmliZXIsIGV4cGlyYXRpb25UaW1lKTtcbiAgfSxcbiAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiAoaW5zdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZmliZXIgPSBnZXQoaW5zdCk7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gcmVxdWVzdEN1cnJlbnRUaW1lKCk7XG4gICAgdmFyIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcihjdXJyZW50VGltZSwgZmliZXIpO1xuXG4gICAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShleHBpcmF0aW9uVGltZSk7XG4gICAgdXBkYXRlLnRhZyA9IEZvcmNlVXBkYXRlO1xuXG4gICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQgJiYgY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHtcbiAgICAgICAgd2Fybk9uSW52YWxpZENhbGxiYWNrJDEoY2FsbGJhY2ssICdmb3JjZVVwZGF0ZScpO1xuICAgICAgfVxuICAgICAgdXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZmx1c2hQYXNzaXZlRWZmZWN0cygpO1xuICAgIGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSk7XG4gICAgc2NoZWR1bGVXb3JrKGZpYmVyLCBleHBpcmF0aW9uVGltZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKHdvcmtJblByb2dyZXNzLCBjdG9yLCBvbGRQcm9wcywgbmV3UHJvcHMsIG9sZFN0YXRlLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICBpZiAodHlwZW9mIGluc3RhbmNlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHN0YXJ0UGhhc2VUaW1lcih3b3JrSW5Qcm9ncmVzcywgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSBpbnN0YW5jZS5zaG91bGRDb21wb25lbnRVcGRhdGUobmV3UHJvcHMsIG5ld1N0YXRlLCBuZXh0Q29udGV4dCk7XG4gICAgc3RvcFBoYXNlVGltZXIoKTtcblxuICAgIHtcbiAgICAgICEoc2hvdWxkVXBkYXRlICE9PSB1bmRlZmluZWQpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk6IFJldHVybmVkIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGEgJyArICdib29sZWFuIHZhbHVlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIHRydWUgb3IgZmFsc2UuJywgZ2V0Q29tcG9uZW50TmFtZShjdG9yKSB8fCAnQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNob3VsZFVwZGF0ZTtcbiAgfVxuXG4gIGlmIChjdG9yLnByb3RvdHlwZSAmJiBjdG9yLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCkge1xuICAgIHJldHVybiAhc2hhbGxvd0VxdWFsKG9sZFByb3BzLCBuZXdQcm9wcykgfHwgIXNoYWxsb3dFcXVhbChvbGRTdGF0ZSwgbmV3U3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQ2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3RvciwgbmV3UHJvcHMpIHtcbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICB7XG4gICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGN0b3IpIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciByZW5kZXJQcmVzZW50ID0gaW5zdGFuY2UucmVuZGVyO1xuXG4gICAgaWYgKCFyZW5kZXJQcmVzZW50KSB7XG4gICAgICBpZiAoY3Rvci5wcm90b3R5cGUgJiYgdHlwZW9mIGN0b3IucHJvdG90eXBlLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyguLi4pOiBObyBgcmVuZGVyYCBtZXRob2QgZm91bmQgb24gdGhlIHJldHVybmVkIGNvbXBvbmVudCAnICsgJ2luc3RhbmNlOiBkaWQgeW91IGFjY2lkZW50YWxseSByZXR1cm4gYW4gb2JqZWN0IGZyb20gdGhlIGNvbnN0cnVjdG9yPycsIG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMoLi4uKTogTm8gYHJlbmRlcmAgbWV0aG9kIGZvdW5kIG9uIHRoZSByZXR1cm5lZCBjb21wb25lbnQgJyArICdpbnN0YW5jZTogeW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBkZWZpbmUgYHJlbmRlcmAuJywgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5vR2V0SW5pdGlhbFN0YXRlT25FUzYgPSAhaW5zdGFuY2UuZ2V0SW5pdGlhbFN0YXRlIHx8IGluc3RhbmNlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCB8fCBpbnN0YW5jZS5zdGF0ZTtcbiAgICAhbm9HZXRJbml0aWFsU3RhdGVPbkVTNiA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2dldEluaXRpYWxTdGF0ZSB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICsgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArICdEaWQgeW91IG1lYW4gdG8gZGVmaW5lIGEgc3RhdGUgcHJvcGVydHkgaW5zdGVhZD8nLCBuYW1lKSA6IHZvaWQgMDtcbiAgICB2YXIgbm9HZXREZWZhdWx0UHJvcHNPbkVTNiA9ICFpbnN0YW5jZS5nZXREZWZhdWx0UHJvcHMgfHwgaW5zdGFuY2UuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkO1xuICAgICFub0dldERlZmF1bHRQcm9wc09uRVM2ID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnZ2V0RGVmYXVsdFByb3BzIHdhcyBkZWZpbmVkIG9uICVzLCBhIHBsYWluIEphdmFTY3JpcHQgY2xhc3MuICcgKyAnVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiAnICsgJ1VzZSBhIHN0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgZGVmYXVsdFByb3BzIGluc3RlYWQuJywgbmFtZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5vSW5zdGFuY2VQcm9wVHlwZXMgPSAhaW5zdGFuY2UucHJvcFR5cGVzO1xuICAgICFub0luc3RhbmNlUHJvcFR5cGVzID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAncHJvcFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSBzdGF0aWMgJyArICdwcm9wZXJ0eSB0byBkZWZpbmUgcHJvcFR5cGVzIGluc3RlYWQuJywgbmFtZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5vSW5zdGFuY2VDb250ZXh0VHlwZSA9ICFpbnN0YW5jZS5jb250ZXh0VHlwZTtcbiAgICAhbm9JbnN0YW5jZUNvbnRleHRUeXBlID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnY29udGV4dFR5cGUgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyAnICsgJ3Byb3BlcnR5IHRvIGRlZmluZSBjb250ZXh0VHlwZSBpbnN0ZWFkLicsIG5hbWUpIDogdm9pZCAwO1xuICAgIHZhciBub0luc3RhbmNlQ29udGV4dFR5cGVzID0gIWluc3RhbmNlLmNvbnRleHRUeXBlcztcbiAgICAhbm9JbnN0YW5jZUNvbnRleHRUeXBlcyA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2NvbnRleHRUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgc3RhdGljICcgKyAncHJvcGVydHkgdG8gZGVmaW5lIGNvbnRleHRUeXBlcyBpbnN0ZWFkLicsIG5hbWUpIDogdm9pZCAwO1xuXG4gICAgaWYgKGN0b3IuY29udGV4dFR5cGUgJiYgY3Rvci5jb250ZXh0VHlwZXMgJiYgIWRpZFdhcm5BYm91dENvbnRleHRUeXBlQW5kQ29udGV4dFR5cGVzLmhhcyhjdG9yKSkge1xuICAgICAgZGlkV2FybkFib3V0Q29udGV4dFR5cGVBbmRDb250ZXh0VHlwZXMuYWRkKGN0b3IpO1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMgZGVjbGFyZXMgYm90aCBjb250ZXh0VHlwZXMgYW5kIGNvbnRleHRUeXBlIHN0YXRpYyBwcm9wZXJ0aWVzLiAnICsgJ1RoZSBsZWdhY3kgY29udGV4dFR5cGVzIHByb3BlcnR5IHdpbGwgYmUgaWdub3JlZC4nLCBuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgbm9Db21wb25lbnRTaG91bGRVcGRhdGUgPSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50U2hvdWxkVXBkYXRlICE9PSAnZnVuY3Rpb24nO1xuICAgICFub0NvbXBvbmVudFNob3VsZFVwZGF0ZSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICsgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICsgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLicsIG5hbWUpIDogdm9pZCAwO1xuICAgIGlmIChjdG9yLnByb3RvdHlwZSAmJiBjdG9yLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCAmJiB0eXBlb2YgaW5zdGFuY2Uuc2hvdWxkQ29tcG9uZW50VXBkYXRlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCBzaG91bGRDb21wb25lbnRVcGRhdGUoKS4gJyArICdzaG91bGRDb21wb25lbnRVcGRhdGUgc2hvdWxkIG5vdCBiZSB1c2VkIHdoZW4gZXh0ZW5kaW5nIFJlYWN0LlB1cmVDb21wb25lbnQuICcgKyAnUGxlYXNlIGV4dGVuZCBSZWFjdC5Db21wb25lbnQgaWYgc2hvdWxkQ29tcG9uZW50VXBkYXRlIGlzIHVzZWQuJywgZ2V0Q29tcG9uZW50TmFtZShjdG9yKSB8fCAnQSBwdXJlIGNvbXBvbmVudCcpO1xuICAgIH1cbiAgICB2YXIgbm9Db21wb25lbnREaWRVbm1vdW50ID0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVubW91bnQgIT09ICdmdW5jdGlvbic7XG4gICAgIW5vQ29tcG9uZW50RGlkVW5tb3VudCA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnREaWRVbm1vdW50KCkuIEJ1dCB0aGVyZSBpcyBubyBzdWNoIGxpZmVjeWNsZSBtZXRob2QuICcgKyAnRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxVbm1vdW50KCk/JywgbmFtZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5vQ29tcG9uZW50RGlkUmVjZWl2ZVByb3BzID0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFJlY2VpdmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJztcbiAgICAhbm9Db21wb25lbnREaWRSZWNlaXZlUHJvcHMgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50RGlkUmVjZWl2ZVByb3BzKCkuIEJ1dCB0aGVyZSBpcyBubyBzdWNoIGxpZmVjeWNsZSBtZXRob2QuICcgKyAnSWYgeW91IG1lYW50IHRvIHVwZGF0ZSB0aGUgc3RhdGUgaW4gcmVzcG9uc2UgdG8gY2hhbmdpbmcgcHJvcHMsICcgKyAndXNlIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKS4gSWYgeW91IG1lYW50IHRvIGZldGNoIGRhdGEgb3IgJyArICdydW4gc2lkZS1lZmZlY3RzIG9yIG11dGF0aW9ucyBhZnRlciBSZWFjdCBoYXMgdXBkYXRlZCB0aGUgVUksIHVzZSBjb21wb25lbnREaWRVcGRhdGUoKS4nLCBuYW1lKSA6IHZvaWQgMDtcbiAgICB2YXIgbm9Db21wb25lbnRXaWxsUmVjaWV2ZVByb3BzID0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMgIT09ICdmdW5jdGlvbic7XG4gICAgIW5vQ29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/JywgbmFtZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5vVW5zYWZlQ29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyA9IHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJztcbiAgICAhbm9VbnNhZmVDb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsIG5hbWUpIDogdm9pZCAwO1xuICAgIHZhciBoYXNNdXRhdGVkUHJvcHMgPSBpbnN0YW5jZS5wcm9wcyAhPT0gbmV3UHJvcHM7XG4gICAgIShpbnN0YW5jZS5wcm9wcyA9PT0gdW5kZWZpbmVkIHx8ICFoYXNNdXRhdGVkUHJvcHMpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMoLi4uKTogV2hlbiBjYWxsaW5nIHN1cGVyKCkgaW4gYCVzYCwgbWFrZSBzdXJlIHRvIHBhc3MgJyArIFwidXAgdGhlIHNhbWUgcHJvcHMgdGhhdCB5b3VyIGNvbXBvbmVudCdzIGNvbnN0cnVjdG9yIHdhcyBwYXNzZWQuXCIsIG5hbWUsIG5hbWUpIDogdm9pZCAwO1xuICAgIHZhciBub0luc3RhbmNlRGVmYXVsdFByb3BzID0gIWluc3RhbmNlLmRlZmF1bHRQcm9wcztcbiAgICAhbm9JbnN0YW5jZURlZmF1bHRQcm9wcyA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1NldHRpbmcgZGVmYXVsdFByb3BzIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzIGlzIG5vdCBzdXBwb3J0ZWQgYW5kIHdpbGwgYmUgaWdub3JlZC4nICsgJyBJbnN0ZWFkLCBkZWZpbmUgZGVmYXVsdFByb3BzIGFzIGEgc3RhdGljIHByb3BlcnR5IG9uICVzLicsIG5hbWUsIG5hbWUpIDogdm9pZCAwO1xuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlICE9PSAnZnVuY3Rpb24nICYmICFkaWRXYXJuQWJvdXRHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZVdpdGhvdXREaWRVcGRhdGUuaGFzKGN0b3IpKSB7XG4gICAgICBkaWRXYXJuQWJvdXRHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZVdpdGhvdXREaWRVcGRhdGUuYWRkKGN0b3IpO1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXM6IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgc2hvdWxkIGJlIHVzZWQgd2l0aCBjb21wb25lbnREaWRVcGRhdGUoKS4gJyArICdUaGlzIGNvbXBvbmVudCBkZWZpbmVzIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgb25seS4nLCBnZXRDb21wb25lbnROYW1lKGN0b3IpKTtcbiAgICB9XG5cbiAgICB2YXIgbm9JbnN0YW5jZUdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IHR5cGVvZiBpbnN0YW5jZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbic7XG4gICAgIW5vSW5zdGFuY2VHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclczogZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKCkgaXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBtZXRob2QgJyArICdhbmQgd2lsbCBiZSBpZ25vcmVkLiBJbnN0ZWFkLCBkZWNsYXJlIGl0IGFzIGEgc3RhdGljIG1ldGhvZC4nLCBuYW1lKSA6IHZvaWQgMDtcbiAgICB2YXIgbm9JbnN0YW5jZUdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCA9IHR5cGVvZiBpbnN0YW5jZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgIT09ICdmdW5jdGlvbic7XG4gICAgIW5vSW5zdGFuY2VHZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2ggPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclczogZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKCkgaXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBtZXRob2QgJyArICdhbmQgd2lsbCBiZSBpZ25vcmVkLiBJbnN0ZWFkLCBkZWNsYXJlIGl0IGFzIGEgc3RhdGljIG1ldGhvZC4nLCBuYW1lKSA6IHZvaWQgMDtcbiAgICB2YXIgbm9TdGF0aWNHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IHR5cGVvZiBjdG9yLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nO1xuICAgICFub1N0YXRpY0dldFNuYXBzaG90QmVmb3JlVXBkYXRlID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXM6IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgaXMgZGVmaW5lZCBhcyBhIHN0YXRpYyBtZXRob2QgJyArICdhbmQgd2lsbCBiZSBpZ25vcmVkLiBJbnN0ZWFkLCBkZWNsYXJlIGl0IGFzIGFuIGluc3RhbmNlIG1ldGhvZC4nLCBuYW1lKSA6IHZvaWQgMDtcbiAgICB2YXIgX3N0YXRlID0gaW5zdGFuY2Uuc3RhdGU7XG4gICAgaWYgKF9zdGF0ZSAmJiAodHlwZW9mIF9zdGF0ZSAhPT0gJ29iamVjdCcgfHwgaXNBcnJheSQxKF9zdGF0ZSkpKSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcy5zdGF0ZTogbXVzdCBiZSBzZXQgdG8gYW4gb2JqZWN0IG9yIG51bGwnLCBuYW1lKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5nZXRDaGlsZENvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICEodHlwZW9mIGN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPT09ICdvYmplY3QnKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzLmdldENoaWxkQ29udGV4dCgpOiBjaGlsZENvbnRleHRUeXBlcyBtdXN0IGJlIGRlZmluZWQgaW4gb3JkZXIgdG8gJyArICd1c2UgZ2V0Q2hpbGRDb250ZXh0KCkuJywgbmFtZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkb3B0Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UudXBkYXRlciA9IGNsYXNzQ29tcG9uZW50VXBkYXRlcjtcbiAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gaW5zdGFuY2U7XG4gIC8vIFRoZSBpbnN0YW5jZSBuZWVkcyBhY2Nlc3MgdG8gdGhlIGZpYmVyIHNvIHRoYXQgaXQgY2FuIHNjaGVkdWxlIHVwZGF0ZXNcbiAgc2V0KGluc3RhbmNlLCB3b3JrSW5Qcm9ncmVzcyk7XG4gIHtcbiAgICBpbnN0YW5jZS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlID0gZmFrZUludGVybmFsSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uc3RydWN0Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3RvciwgcHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBpc0xlZ2FjeUNvbnRleHRDb25zdW1lciA9IGZhbHNlO1xuICB2YXIgdW5tYXNrZWRDb250ZXh0ID0gZW1wdHlDb250ZXh0T2JqZWN0O1xuICB2YXIgY29udGV4dCA9IG51bGw7XG4gIHZhciBjb250ZXh0VHlwZSA9IGN0b3IuY29udGV4dFR5cGU7XG5cbiAge1xuICAgIGlmICgnY29udGV4dFR5cGUnIGluIGN0b3IpIHtcbiAgICAgIHZhciBpc1ZhbGlkID1cbiAgICAgIC8vIEFsbG93IG51bGwgZm9yIGNvbmRpdGlvbmFsIGRlY2xhcmF0aW9uXG4gICAgICBjb250ZXh0VHlwZSA9PT0gbnVsbCB8fCBjb250ZXh0VHlwZSAhPT0gdW5kZWZpbmVkICYmIGNvbnRleHRUeXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgJiYgY29udGV4dFR5cGUuX2NvbnRleHQgPT09IHVuZGVmaW5lZDsgLy8gTm90IGEgPENvbnRleHQuQ29uc3VtZXI+XG5cbiAgICAgIGlmICghaXNWYWxpZCAmJiAhZGlkV2FybkFib3V0SW52YWxpZGF0ZUNvbnRleHRUeXBlLmhhcyhjdG9yKSkge1xuICAgICAgICBkaWRXYXJuQWJvdXRJbnZhbGlkYXRlQ29udGV4dFR5cGUuYWRkKGN0b3IpO1xuXG4gICAgICAgIHZhciBhZGRlbmR1bSA9ICcnO1xuICAgICAgICBpZiAoY29udGV4dFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFkZGVuZHVtID0gJyBIb3dldmVyLCBpdCBpcyBzZXQgdG8gdW5kZWZpbmVkLiAnICsgJ1RoaXMgY2FuIGJlIGNhdXNlZCBieSBhIHR5cG8gb3IgYnkgbWl4aW5nIHVwIG5hbWVkIGFuZCBkZWZhdWx0IGltcG9ydHMuICcgKyAnVGhpcyBjYW4gYWxzbyBoYXBwZW4gZHVlIHRvIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSwgc28gJyArICd0cnkgbW92aW5nIHRoZSBjcmVhdGVDb250ZXh0KCkgY2FsbCB0byBhIHNlcGFyYXRlIGZpbGUuJztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29udGV4dFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgYWRkZW5kdW0gPSAnIEhvd2V2ZXIsIGl0IGlzIHNldCB0byBhICcgKyB0eXBlb2YgY29udGV4dFR5cGUgKyAnLic7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dFR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgRGlkIHlvdSBhY2NpZGVudGFsbHkgcGFzcyB0aGUgQ29udGV4dC5Qcm92aWRlciBpbnN0ZWFkPyc7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dFR5cGUuX2NvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIDxDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICAgIGFkZGVuZHVtID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBwYXNzIHRoZSBDb250ZXh0LkNvbnN1bWVyIGluc3RlYWQ/JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgSG93ZXZlciwgaXQgaXMgc2V0IHRvIGFuIG9iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhjb250ZXh0VHlwZSkuam9pbignLCAnKSArICd9Lic7XG4gICAgICAgIH1cbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMgZGVmaW5lcyBhbiBpbnZhbGlkIGNvbnRleHRUeXBlLiAnICsgJ2NvbnRleHRUeXBlIHNob3VsZCBwb2ludCB0byB0aGUgQ29udGV4dCBvYmplY3QgcmV0dXJuZWQgYnkgUmVhY3QuY3JlYXRlQ29udGV4dCgpLiVzJywgZ2V0Q29tcG9uZW50TmFtZShjdG9yKSB8fCAnQ29tcG9uZW50JywgYWRkZW5kdW0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgY29udGV4dFR5cGUgPT09ICdvYmplY3QnICYmIGNvbnRleHRUeXBlICE9PSBudWxsKSB7XG4gICAgY29udGV4dCA9IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKTtcbiAgfSBlbHNlIHtcbiAgICB1bm1hc2tlZENvbnRleHQgPSBnZXRVbm1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIGN0b3IsIHRydWUpO1xuICAgIHZhciBjb250ZXh0VHlwZXMgPSBjdG9yLmNvbnRleHRUeXBlcztcbiAgICBpc0xlZ2FjeUNvbnRleHRDb25zdW1lciA9IGNvbnRleHRUeXBlcyAhPT0gbnVsbCAmJiBjb250ZXh0VHlwZXMgIT09IHVuZGVmaW5lZDtcbiAgICBjb250ZXh0ID0gaXNMZWdhY3lDb250ZXh0Q29uc3VtZXIgPyBnZXRNYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQpIDogZW1wdHlDb250ZXh0T2JqZWN0O1xuICB9XG5cbiAgLy8gSW5zdGFudGlhdGUgdHdpY2UgdG8gaGVscCBkZXRlY3Qgc2lkZS1lZmZlY3RzLlxuICB7XG4gICAgaWYgKGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0cyB8fCBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHNGb3JTdHJpY3RNb2RlICYmIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICBuZXcgY3Rvcihwcm9wcywgY29udGV4dCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc3RhbmNlID0gbmV3IGN0b3IocHJvcHMsIGNvbnRleHQpO1xuICB2YXIgc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gaW5zdGFuY2Uuc3RhdGUgIT09IG51bGwgJiYgaW5zdGFuY2Uuc3RhdGUgIT09IHVuZGVmaW5lZCA/IGluc3RhbmNlLnN0YXRlIDogbnVsbDtcbiAgYWRvcHRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSk7XG5cbiAge1xuICAgIGlmICh0eXBlb2YgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicgJiYgc3RhdGUgPT09IG51bGwpIHtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjdG9yKSB8fCAnQ29tcG9uZW50JztcbiAgICAgIGlmICghZGlkV2FybkFib3V0VW5pbml0aWFsaXplZFN0YXRlLmhhcyhjb21wb25lbnROYW1lKSkge1xuICAgICAgICBkaWRXYXJuQWJvdXRVbmluaXRpYWxpemVkU3RhdGUuYWRkKGNvbXBvbmVudE5hbWUpO1xuICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdgJXNgIHVzZXMgYGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc2AgYnV0IGl0cyBpbml0aWFsIHN0YXRlIGlzICcgKyAnJXMuIFRoaXMgaXMgbm90IHJlY29tbWVuZGVkLiBJbnN0ZWFkLCBkZWZpbmUgdGhlIGluaXRpYWwgc3RhdGUgYnkgJyArICdhc3NpZ25pbmcgYW4gb2JqZWN0IHRvIGB0aGlzLnN0YXRlYCBpbiB0aGUgY29uc3RydWN0b3Igb2YgYCVzYC4gJyArICdUaGlzIGVuc3VyZXMgdGhhdCBgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzYCBhcmd1bWVudHMgaGF2ZSBhIGNvbnNpc3RlbnQgc2hhcGUuJywgY29tcG9uZW50TmFtZSwgaW5zdGFuY2Uuc3RhdGUgPT09IG51bGwgPyAnbnVsbCcgOiAndW5kZWZpbmVkJywgY29tcG9uZW50TmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgbmV3IGNvbXBvbmVudCBBUElzIGFyZSBkZWZpbmVkLCBcInVuc2FmZVwiIGxpZmVjeWNsZXMgd29uJ3QgYmUgY2FsbGVkLlxuICAgIC8vIFdhcm4gYWJvdXQgdGhlc2UgbGlmZWN5Y2xlcyBpZiB0aGV5IGFyZSBwcmVzZW50LlxuICAgIC8vIERvbid0IHdhcm4gYWJvdXQgcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQgcG9seWZpbGxlZCBtZXRob2RzIHRob3VnaC5cbiAgICBpZiAodHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIGZvdW5kV2lsbE1vdW50TmFtZSA9IG51bGw7XG4gICAgICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gICAgICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyAhPT0gdHJ1ZSkge1xuICAgICAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnY29tcG9uZW50V2lsbE1vdW50JztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZm91bmRXaWxsTW91bnROYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQnO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyAhPT0gdHJ1ZSkge1xuICAgICAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicgJiYgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZS5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJztcbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHwgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbCB8fCBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBfY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoY3RvcikgfHwgJ0NvbXBvbmVudCc7XG4gICAgICAgIHZhciBuZXdBcGlOYW1lID0gdHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJyA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcbiAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRMZWdhY3lMaWZlY3ljbGVzQW5kRGVyaXZlZFN0YXRlLmhhcyhfY29tcG9uZW50TmFtZSkpIHtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRMZWdhY3lMaWZlY3ljbGVzQW5kRGVyaXZlZFN0YXRlLmFkZChfY29tcG9uZW50TmFtZSk7XG4gICAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnVW5zYWZlIGxlZ2FjeSBsaWZlY3ljbGVzIHdpbGwgbm90IGJlIGNhbGxlZCBmb3IgY29tcG9uZW50cyB1c2luZyBuZXcgY29tcG9uZW50IEFQSXMuXFxuXFxuJyArICclcyB1c2VzICVzIGJ1dCBhbHNvIGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbGVnYWN5IGxpZmVjeWNsZXM6JXMlcyVzXFxuXFxuJyArICdUaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcXG4nICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcycsIF9jb21wb25lbnROYW1lLCBuZXdBcGlOYW1lLCBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsTW91bnROYW1lIDogJycsIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA6ICcnLCBmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDYWNoZSB1bm1hc2tlZCBjb250ZXh0IHNvIHdlIGNhbiBhdm9pZCByZWNyZWF0aW5nIG1hc2tlZCBjb250ZXh0IHVubGVzcyBuZWNlc3NhcnkuXG4gIC8vIFJlYWN0RmliZXJDb250ZXh0IHVzdWFsbHkgdXBkYXRlcyB0aGlzIGNhY2hlIGJ1dCBjYW4ndCBmb3IgbmV3bHktY3JlYXRlZCBpbnN0YW5jZXMuXG4gIGlmIChpc0xlZ2FjeUNvbnRleHRDb25zdW1lcikge1xuICAgIGNhY2hlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0LCBjb250ZXh0KTtcbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuZnVuY3Rpb24gY2FsbENvbXBvbmVudFdpbGxNb3VudCh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UpIHtcbiAgc3RhcnRQaGFzZVRpbWVyKHdvcmtJblByb2dyZXNzLCAnY29tcG9uZW50V2lsbE1vdW50Jyk7XG4gIHZhciBvbGRTdGF0ZSA9IGluc3RhbmNlLnN0YXRlO1xuXG4gIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50KCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpO1xuICB9XG5cbiAgc3RvcFBoYXNlVGltZXIoKTtcblxuICBpZiAob2xkU3RhdGUgIT09IGluc3RhbmNlLnN0YXRlKSB7XG4gICAge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMuY29tcG9uZW50V2lsbE1vdW50KCk6IEFzc2lnbmluZyBkaXJlY3RseSB0byB0aGlzLnN0YXRlIGlzICcgKyBcImRlcHJlY2F0ZWQgKGV4Y2VwdCBpbnNpZGUgYSBjb21wb25lbnQncyBcIiArICdjb25zdHJ1Y3RvcikuIFVzZSBzZXRTdGF0ZSBpbnN0ZWFkLicsIGdldENvbXBvbmVudE5hbWUod29ya0luUHJvZ3Jlc3MudHlwZSkgfHwgJ0NvbXBvbmVudCcpO1xuICAgIH1cbiAgICBjbGFzc0NvbXBvbmVudFVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShpbnN0YW5jZSwgaW5zdGFuY2Uuc3RhdGUsIG51bGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSwgbmV3UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gIHZhciBvbGRTdGF0ZSA9IGluc3RhbmNlLnN0YXRlO1xuICBzdGFydFBoYXNlVGltZXIod29ya0luUHJvZ3Jlc3MsICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyk7XG4gIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgfVxuICBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgfVxuICBzdG9wUGhhc2VUaW1lcigpO1xuXG4gIGlmIChpbnN0YW5jZS5zdGF0ZSAhPT0gb2xkU3RhdGUpIHtcbiAgICB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUod29ya0luUHJvZ3Jlc3MudHlwZSkgfHwgJ0NvbXBvbmVudCc7XG4gICAgICBpZiAoIWRpZFdhcm5BYm91dFN0YXRlQXNzaWdubWVudEZvckNvbXBvbmVudC5oYXMoY29tcG9uZW50TmFtZSkpIHtcbiAgICAgICAgZGlkV2FybkFib3V0U3RhdGVBc3NpZ25tZW50Rm9yQ29tcG9uZW50LmFkZChjb21wb25lbnROYW1lKTtcbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpOiBBc3NpZ25pbmcgZGlyZWN0bHkgdG8gJyArIFwidGhpcy5zdGF0ZSBpcyBkZXByZWNhdGVkIChleGNlcHQgaW5zaWRlIGEgY29tcG9uZW50J3MgXCIgKyAnY29uc3RydWN0b3IpLiBVc2Ugc2V0U3RhdGUgaW5zdGVhZC4nLCBjb21wb25lbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2xhc3NDb21wb25lbnRVcGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoaW5zdGFuY2UsIGluc3RhbmNlLnN0YXRlLCBudWxsKTtcbiAgfVxufVxuXG4vLyBJbnZva2VzIHRoZSBtb3VudCBsaWZlLWN5Y2xlcyBvbiBhIHByZXZpb3VzbHkgbmV2ZXIgcmVuZGVyZWQgaW5zdGFuY2UuXG5mdW5jdGlvbiBtb3VudENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN0b3IsIG5ld1Byb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB7XG4gICAgY2hlY2tDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBjdG9yLCBuZXdQcm9wcyk7XG4gIH1cblxuICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIGluc3RhbmNlLnByb3BzID0gbmV3UHJvcHM7XG4gIGluc3RhbmNlLnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgaW5zdGFuY2UucmVmcyA9IGVtcHR5UmVmc09iamVjdDtcblxuICB2YXIgY29udGV4dFR5cGUgPSBjdG9yLmNvbnRleHRUeXBlO1xuICBpZiAodHlwZW9mIGNvbnRleHRUeXBlID09PSAnb2JqZWN0JyAmJiBjb250ZXh0VHlwZSAhPT0gbnVsbCkge1xuICAgIGluc3RhbmNlLmNvbnRleHQgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgY3RvciwgdHJ1ZSk7XG4gICAgaW5zdGFuY2UuY29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCk7XG4gIH1cblxuICB7XG4gICAgaWYgKGluc3RhbmNlLnN0YXRlID09PSBuZXdQcm9wcykge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKGN0b3IpIHx8ICdDb21wb25lbnQnO1xuICAgICAgaWYgKCFkaWRXYXJuQWJvdXREaXJlY3RseUFzc2lnbmluZ1Byb3BzVG9TdGF0ZS5oYXMoY29tcG9uZW50TmFtZSkpIHtcbiAgICAgICAgZGlkV2FybkFib3V0RGlyZWN0bHlBc3NpZ25pbmdQcm9wc1RvU3RhdGUuYWRkKGNvbXBvbmVudE5hbWUpO1xuICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclczogSXQgaXMgbm90IHJlY29tbWVuZGVkIHRvIGFzc2lnbiBwcm9wcyBkaXJlY3RseSB0byBzdGF0ZSAnICsgXCJiZWNhdXNlIHVwZGF0ZXMgdG8gcHJvcHMgd29uJ3QgYmUgcmVmbGVjdGVkIGluIHN0YXRlLiBcIiArICdJbiBtb3N0IGNhc2VzLCBpdCBpcyBiZXR0ZXIgdG8gdXNlIHByb3BzIGRpcmVjdGx5LicsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TW9kZSkge1xuICAgICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3Mod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKTtcblxuICAgICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkTGVnYWN5Q29udGV4dFdhcm5pbmcod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKTtcbiAgICB9XG5cbiAgICBpZiAod2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMpIHtcbiAgICAgIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLnJlY29yZERlcHJlY2F0aW9uV2FybmluZ3Mod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdXBkYXRlUXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsKSB7XG4gICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCB1cGRhdGVRdWV1ZSwgbmV3UHJvcHMsIGluc3RhbmNlLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgaW5zdGFuY2Uuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICB9XG5cbiAgdmFyIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICBpZiAodHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKHdvcmtJblByb2dyZXNzLCBjdG9yLCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsIG5ld1Byb3BzKTtcbiAgICBpbnN0YW5jZS5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIH1cblxuICAvLyBJbiBvcmRlciB0byBzdXBwb3J0IHJlYWN0LWxpZmVjeWNsZXMtY29tcGF0IHBvbHlmaWxsZWQgY29tcG9uZW50cyxcbiAgLy8gVW5zYWZlIGxpZmVjeWNsZXMgc2hvdWxkIG5vdCBiZSBpbnZva2VkIGZvciBjb21wb25lbnRzIHVzaW5nIHRoZSBuZXcgQVBJcy5cbiAgaWYgKHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbicgJiYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgY2FsbENvbXBvbmVudFdpbGxNb3VudCh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UpO1xuICAgIC8vIElmIHdlIGhhZCBhZGRpdGlvbmFsIHN0YXRlIHVwZGF0ZXMgZHVyaW5nIHRoaXMgbGlmZS1jeWNsZSwgbGV0J3NcbiAgICAvLyBwcm9jZXNzIHRoZW0gbm93LlxuICAgIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVF1ZXVlLCBuZXdQcm9wcywgaW5zdGFuY2UsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGluc3RhbmNlLnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVNb3VudENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN0b3IsIG5ld1Byb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG5cbiAgdmFyIG9sZFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgaW5zdGFuY2UucHJvcHMgPSBvbGRQcm9wcztcblxuICB2YXIgb2xkQ29udGV4dCA9IGluc3RhbmNlLmNvbnRleHQ7XG4gIHZhciBjb250ZXh0VHlwZSA9IGN0b3IuY29udGV4dFR5cGU7XG4gIHZhciBuZXh0Q29udGV4dCA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBjb250ZXh0VHlwZSA9PT0gJ29iamVjdCcgJiYgY29udGV4dFR5cGUgIT09IG51bGwpIHtcbiAgICBuZXh0Q29udGV4dCA9IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmV4dExlZ2FjeVVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgY3RvciwgdHJ1ZSk7XG4gICAgbmV4dENvbnRleHQgPSBnZXRNYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCBuZXh0TGVnYWN5VW5tYXNrZWRDb250ZXh0KTtcbiAgfVxuXG4gIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgdmFyIGhhc05ld0xpZmVjeWNsZXMgPSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJztcblxuICAvLyBOb3RlOiBEdXJpbmcgdGhlc2UgbGlmZS1jeWNsZXMsIGluc3RhbmNlLnByb3BzL2luc3RhbmNlLnN0YXRlIGFyZSB3aGF0XG4gIC8vIGV2ZXIgdGhlIHByZXZpb3VzbHkgYXR0ZW1wdGVkIHRvIHJlbmRlciAtIG5vdCB0aGUgXCJjdXJyZW50XCIuIEhvd2V2ZXIsXG4gIC8vIGR1cmluZyBjb21wb25lbnREaWRVcGRhdGUgd2UgcGFzcyB0aGUgXCJjdXJyZW50XCIgcHJvcHMuXG5cbiAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgY29tcG9uZW50cyB1c2luZyB0aGUgbmV3IEFQSXMuXG4gIGlmICghaGFzTmV3TGlmZWN5Y2xlcyAmJiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSkge1xuICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMgfHwgb2xkQ29udGV4dCAhPT0gbmV4dENvbnRleHQpIHtcbiAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSwgbmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICByZXNldEhhc0ZvcmNlVXBkYXRlQmVmb3JlUHJvY2Vzc2luZygpO1xuXG4gIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIHZhciBuZXdTdGF0ZSA9IGluc3RhbmNlLnN0YXRlID0gb2xkU3RhdGU7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVF1ZXVlLCBuZXdQcm9wcywgaW5zdGFuY2UsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIH1cbiAgaWYgKG9sZFByb3BzID09PSBuZXdQcm9wcyAmJiBvbGRTdGF0ZSA9PT0gbmV3U3RhdGUgJiYgIWhhc0NvbnRleHRDaGFuZ2VkKCkgJiYgIWNoZWNrSGFzRm9yY2VVcGRhdGVBZnRlclByb2Nlc3NpbmcoKSkge1xuICAgIC8vIElmIGFuIHVwZGF0ZSB3YXMgYWxyZWFkeSBpbiBwcm9ncmVzcywgd2Ugc2hvdWxkIHNjaGVkdWxlIGFuIFVwZGF0ZVxuICAgIC8vIGVmZmVjdCBldmVuIHRob3VnaCB3ZSdyZSBiYWlsaW5nIG91dCwgc28gdGhhdCBjV1UvY0RVIGFyZSBjYWxsZWQuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgY3RvciwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLCBuZXdQcm9wcyk7XG4gICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICB9XG5cbiAgdmFyIHNob3VsZFVwZGF0ZSA9IGNoZWNrSGFzRm9yY2VVcGRhdGVBZnRlclByb2Nlc3NpbmcoKSB8fCBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY3Rvciwgb2xkUHJvcHMsIG5ld1Byb3BzLCBvbGRTdGF0ZSwgbmV3U3RhdGUsIG5leHRDb250ZXh0KTtcblxuICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gICAgLy8gVW5zYWZlIGxpZmVjeWNsZXMgc2hvdWxkIG5vdCBiZSBpbnZva2VkIGZvciBjb21wb25lbnRzIHVzaW5nIHRoZSBuZXcgQVBJcy5cbiAgICBpZiAoIWhhc05ld0xpZmVjeWNsZXMgJiYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICBzdGFydFBoYXNlVGltZXIod29ya0luUHJvZ3Jlc3MsICdjb21wb25lbnRXaWxsTW91bnQnKTtcbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgICAgIH1cbiAgICAgIHN0b3BQaGFzZVRpbWVyKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElmIGFuIHVwZGF0ZSB3YXMgYWxyZWFkeSBpbiBwcm9ncmVzcywgd2Ugc2hvdWxkIHNjaGVkdWxlIGFuIFVwZGF0ZVxuICAgIC8vIGVmZmVjdCBldmVuIHRob3VnaCB3ZSdyZSBiYWlsaW5nIG91dCwgc28gdGhhdCBjV1UvY0RVIGFyZSBjYWxsZWQuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBJZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJuZWQgZmFsc2UsIHdlIHNob3VsZCBzdGlsbCB1cGRhdGUgdGhlXG4gICAgLy8gbWVtb2l6ZWQgc3RhdGUgdG8gaW5kaWNhdGUgdGhhdCB0aGlzIHdvcmsgY2FuIGJlIHJldXNlZC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV3UHJvcHM7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICB9XG5cbiAgLy8gVXBkYXRlIHRoZSBleGlzdGluZyBpbnN0YW5jZSdzIHN0YXRlLCBwcm9wcywgYW5kIGNvbnRleHQgcG9pbnRlcnMgZXZlblxuICAvLyBpZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJucyBmYWxzZS5cbiAgaW5zdGFuY2UucHJvcHMgPSBuZXdQcm9wcztcbiAgaW5zdGFuY2Uuc3RhdGUgPSBuZXdTdGF0ZTtcbiAgaW5zdGFuY2UuY29udGV4dCA9IG5leHRDb250ZXh0O1xuXG4gIHJldHVybiBzaG91bGRVcGRhdGU7XG59XG5cbi8vIEludm9rZXMgdGhlIHVwZGF0ZSBsaWZlLWN5Y2xlcyBhbmQgcmV0dXJucyBmYWxzZSBpZiBpdCBzaG91bGRuJ3QgcmVyZW5kZXIuXG5mdW5jdGlvbiB1cGRhdGVDbGFzc0luc3RhbmNlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBjdG9yLCBuZXdQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuXG4gIHZhciBvbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gIGluc3RhbmNlLnByb3BzID0gd29ya0luUHJvZ3Jlc3MudHlwZSA9PT0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUgPyBvbGRQcm9wcyA6IHJlc29sdmVEZWZhdWx0UHJvcHMod29ya0luUHJvZ3Jlc3MudHlwZSwgb2xkUHJvcHMpO1xuXG4gIHZhciBvbGRDb250ZXh0ID0gaW5zdGFuY2UuY29udGV4dDtcbiAgdmFyIGNvbnRleHRUeXBlID0gY3Rvci5jb250ZXh0VHlwZTtcbiAgdmFyIG5leHRDb250ZXh0ID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIGNvbnRleHRUeXBlID09PSAnb2JqZWN0JyAmJiBjb250ZXh0VHlwZSAhPT0gbnVsbCkge1xuICAgIG5leHRDb250ZXh0ID0gcmVhZENvbnRleHQoY29udGV4dFR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBuZXh0VW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCBjdG9yLCB0cnVlKTtcbiAgICBuZXh0Q29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIG5leHRVbm1hc2tlZENvbnRleHQpO1xuICB9XG5cbiAgdmFyIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICB2YXIgaGFzTmV3TGlmZWN5Y2xlcyA9IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nO1xuXG4gIC8vIE5vdGU6IER1cmluZyB0aGVzZSBsaWZlLWN5Y2xlcywgaW5zdGFuY2UucHJvcHMvaW5zdGFuY2Uuc3RhdGUgYXJlIHdoYXRcbiAgLy8gZXZlciB0aGUgcHJldmlvdXNseSBhdHRlbXB0ZWQgdG8gcmVuZGVyIC0gbm90IHRoZSBcImN1cnJlbnRcIi4gSG93ZXZlcixcbiAgLy8gZHVyaW5nIGNvbXBvbmVudERpZFVwZGF0ZSB3ZSBwYXNzIHRoZSBcImN1cnJlbnRcIiBwcm9wcy5cblxuICAvLyBJbiBvcmRlciB0byBzdXBwb3J0IHJlYWN0LWxpZmVjeWNsZXMtY29tcGF0IHBvbHlmaWxsZWQgY29tcG9uZW50cyxcbiAgLy8gVW5zYWZlIGxpZmVjeWNsZXMgc2hvdWxkIG5vdCBiZSBpbnZva2VkIGZvciBjb21wb25lbnRzIHVzaW5nIHRoZSBuZXcgQVBJcy5cbiAgaWYgKCFoYXNOZXdMaWZlY3ljbGVzICYmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgaWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcyB8fCBvbGRDb250ZXh0ICE9PSBuZXh0Q29udGV4dCkge1xuICAgICAgY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlLCBuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0SGFzRm9yY2VVcGRhdGVCZWZvcmVQcm9jZXNzaW5nKCk7XG5cbiAgdmFyIG9sZFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgdmFyIG5ld1N0YXRlID0gaW5zdGFuY2Uuc3RhdGUgPSBvbGRTdGF0ZTtcbiAgdmFyIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gIGlmICh1cGRhdGVRdWV1ZSAhPT0gbnVsbCkge1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgdXBkYXRlUXVldWUsIG5ld1Byb3BzLCBpbnN0YW5jZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgfVxuXG4gIGlmIChvbGRQcm9wcyA9PT0gbmV3UHJvcHMgJiYgb2xkU3RhdGUgPT09IG5ld1N0YXRlICYmICFoYXNDb250ZXh0Q2hhbmdlZCgpICYmICFjaGVja0hhc0ZvcmNlVXBkYXRlQWZ0ZXJQcm9jZXNzaW5nKCkpIHtcbiAgICAvLyBJZiBhbiB1cGRhdGUgd2FzIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHdlIHNob3VsZCBzY2hlZHVsZSBhbiBVcGRhdGVcbiAgICAvLyBlZmZlY3QgZXZlbiB0aG91Z2ggd2UncmUgYmFpbGluZyBvdXQsIHNvIHRoYXQgY1dVL2NEVSBhcmUgY2FsbGVkLlxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAob2xkUHJvcHMgIT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChvbGRQcm9wcyAhPT0gY3VycmVudC5tZW1vaXplZFByb3BzIHx8IG9sZFN0YXRlICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFNuYXBzaG90O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKHdvcmtJblByb2dyZXNzLCBjdG9yLCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsIG5ld1Byb3BzKTtcbiAgICBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIH1cblxuICB2YXIgc2hvdWxkVXBkYXRlID0gY2hlY2tIYXNGb3JjZVVwZGF0ZUFmdGVyUHJvY2Vzc2luZygpIHx8IGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKHdvcmtJblByb2dyZXNzLCBjdG9yLCBvbGRQcm9wcywgbmV3UHJvcHMsIG9sZFN0YXRlLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpO1xuXG4gIGlmIChzaG91bGRVcGRhdGUpIHtcbiAgICAvLyBJbiBvcmRlciB0byBzdXBwb3J0IHJlYWN0LWxpZmVjeWNsZXMtY29tcGF0IHBvbHlmaWxsZWQgY29tcG9uZW50cyxcbiAgICAvLyBVbnNhZmUgbGlmZWN5Y2xlcyBzaG91bGQgbm90IGJlIGludm9rZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgdGhlIG5ldyBBUElzLlxuICAgIGlmICghaGFzTmV3TGlmZWN5Y2xlcyAmJiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgc3RhcnRQaGFzZVRpbWVyKHdvcmtJblByb2dyZXNzLCAnY29tcG9uZW50V2lsbFVwZGF0ZScpO1xuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVcGRhdGUobmV3UHJvcHMsIG5ld1N0YXRlLCBuZXh0Q29udGV4dCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgfVxuICAgICAgc3RvcFBoYXNlVGltZXIoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBTbmFwc2hvdDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgYW4gdXBkYXRlIHdhcyBhbHJlYWR5IGluIHByb2dyZXNzLCB3ZSBzaG91bGQgc2NoZWR1bGUgYW4gVXBkYXRlXG4gICAgLy8gZWZmZWN0IGV2ZW4gdGhvdWdoIHdlJ3JlIGJhaWxpbmcgb3V0LCBzbyB0aGF0IGNXVS9jRFUgYXJlIGNhbGxlZC5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKG9sZFByb3BzICE9PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgfHwgb2xkU3RhdGUgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkge1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAob2xkUHJvcHMgIT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBTbmFwc2hvdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJuZWQgZmFsc2UsIHdlIHNob3VsZCBzdGlsbCB1cGRhdGUgdGhlXG4gICAgLy8gbWVtb2l6ZWQgcHJvcHMvc3RhdGUgdG8gaW5kaWNhdGUgdGhhdCB0aGlzIHdvcmsgY2FuIGJlIHJldXNlZC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV3UHJvcHM7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICB9XG5cbiAgLy8gVXBkYXRlIHRoZSBleGlzdGluZyBpbnN0YW5jZSdzIHN0YXRlLCBwcm9wcywgYW5kIGNvbnRleHQgcG9pbnRlcnMgZXZlblxuICAvLyBpZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJucyBmYWxzZS5cbiAgaW5zdGFuY2UucHJvcHMgPSBuZXdQcm9wcztcbiAgaW5zdGFuY2Uuc3RhdGUgPSBuZXdTdGF0ZTtcbiAgaW5zdGFuY2UuY29udGV4dCA9IG5leHRDb250ZXh0O1xuXG4gIHJldHVybiBzaG91bGRVcGRhdGU7XG59XG5cbnZhciBkaWRXYXJuQWJvdXRNYXBzID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dEdlbmVyYXRvcnMgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0U3RyaW5nUmVmSW5TdHJpY3RNb2RlID0gdm9pZCAwO1xudmFyIG93bmVySGFzS2V5VXNlV2FybmluZyA9IHZvaWQgMDtcbnZhciBvd25lckhhc0Z1bmN0aW9uVHlwZVdhcm5pbmcgPSB2b2lkIDA7XG52YXIgd2FybkZvck1pc3NpbmdLZXkgPSBmdW5jdGlvbiAoY2hpbGQpIHt9O1xuXG57XG4gIGRpZFdhcm5BYm91dE1hcHMgPSBmYWxzZTtcbiAgZGlkV2FybkFib3V0R2VuZXJhdG9ycyA9IGZhbHNlO1xuICBkaWRXYXJuQWJvdXRTdHJpbmdSZWZJblN0cmljdE1vZGUgPSB7fTtcblxuICAvKipcbiAgICogV2FybiBpZiB0aGVyZSdzIG5vIGtleSBleHBsaWNpdGx5IHNldCBvbiBkeW5hbWljIGFycmF5cyBvZiBjaGlsZHJlbiBvclxuICAgKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAgICogdXBkYXRlcy5cbiAgICovXG4gIG93bmVySGFzS2V5VXNlV2FybmluZyA9IHt9O1xuICBvd25lckhhc0Z1bmN0aW9uVHlwZVdhcm5pbmcgPSB7fTtcblxuICB3YXJuRm9yTWlzc2luZ0tleSA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCA9PT0gbnVsbCB8fCB0eXBlb2YgY2hpbGQgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghY2hpbGQuX3N0b3JlIHx8IGNoaWxkLl9zdG9yZS52YWxpZGF0ZWQgfHwgY2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgISh0eXBlb2YgY2hpbGQuX3N0b3JlID09PSAnb2JqZWN0JykgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdCBDb21wb25lbnQgaW4gd2FybkZvck1pc3NpbmdLZXkgc2hvdWxkIGhhdmUgYSBfc3RvcmUuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgY2hpbGQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG5cbiAgICB2YXIgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9ICdFYWNoIGNoaWxkIGluIGEgbGlzdCBzaG91bGQgaGF2ZSBhIHVuaXF1ZSAnICsgJ1wia2V5XCIgcHJvcC4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciAnICsgJ21vcmUgaW5mb3JtYXRpb24uJyArIGdldEN1cnJlbnRGaWJlclN0YWNrSW5EZXYoKTtcbiAgICBpZiAob3duZXJIYXNLZXlVc2VXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7XG5cbiAgICB3YXJuaW5nJDEoZmFsc2UsICdFYWNoIGNoaWxkIGluIGEgbGlzdCBzaG91bGQgaGF2ZSBhIHVuaXF1ZSAnICsgJ1wia2V5XCIgcHJvcC4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciAnICsgJ21vcmUgaW5mb3JtYXRpb24uJyk7XG4gIH07XG59XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZnVuY3Rpb24gY29lcmNlUmVmKHJldHVybkZpYmVyLCBjdXJyZW50JCQxLCBlbGVtZW50KSB7XG4gIHZhciBtaXhlZFJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAobWl4ZWRSZWYgIT09IG51bGwgJiYgdHlwZW9mIG1peGVkUmVmICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBtaXhlZFJlZiAhPT0gJ29iamVjdCcpIHtcbiAgICB7XG4gICAgICBpZiAocmV0dXJuRmliZXIubW9kZSAmIFN0cmljdE1vZGUpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKHJldHVybkZpYmVyLnR5cGUpIHx8ICdDb21wb25lbnQnO1xuICAgICAgICBpZiAoIWRpZFdhcm5BYm91dFN0cmluZ1JlZkluU3RyaWN0TW9kZVtjb21wb25lbnROYW1lXSkge1xuICAgICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0Egc3RyaW5nIHJlZiwgXCIlc1wiLCBoYXMgYmVlbiBmb3VuZCB3aXRoaW4gYSBzdHJpY3QgbW9kZSB0cmVlLiAnICsgJ1N0cmluZyByZWZzIGFyZSBhIHNvdXJjZSBvZiBwb3RlbnRpYWwgYnVncyBhbmQgc2hvdWxkIGJlIGF2b2lkZWQuICcgKyAnV2UgcmVjb21tZW5kIHVzaW5nIGNyZWF0ZVJlZigpIGluc3RlYWQuJyArICdcXG4lcycgKyAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB1c2luZyByZWZzIHNhZmVseSBoZXJlOicgKyAnXFxuaHR0cHM6Ly9mYi5tZS9yZWFjdC1zdHJpY3QtbW9kZS1zdHJpbmctcmVmJywgbWl4ZWRSZWYsIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChyZXR1cm5GaWJlcikpO1xuICAgICAgICAgIGRpZFdhcm5BYm91dFN0cmluZ1JlZkluU3RyaWN0TW9kZVtjb21wb25lbnROYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5fb3duZXIpIHtcbiAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgICAgdmFyIGluc3QgPSB2b2lkIDA7XG4gICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgdmFyIG93bmVyRmliZXIgPSBvd25lcjtcbiAgICAgICAgIShvd25lckZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpID8gaW52YXJpYW50KGZhbHNlLCAnRnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgaGF2ZSByZWZzLiBEaWQgeW91IG1lYW4gdG8gdXNlIFJlYWN0LmZvcndhcmRSZWYoKT8nKSA6IHZvaWQgMDtcbiAgICAgICAgaW5zdCA9IG93bmVyRmliZXIuc3RhdGVOb2RlO1xuICAgICAgfVxuICAgICAgIWluc3QgPyBpbnZhcmlhbnQoZmFsc2UsICdNaXNzaW5nIG93bmVyIGZvciBzdHJpbmcgcmVmICVzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicsIG1peGVkUmVmKSA6IHZvaWQgMDtcbiAgICAgIHZhciBzdHJpbmdSZWYgPSAnJyArIG1peGVkUmVmO1xuICAgICAgLy8gQ2hlY2sgaWYgcHJldmlvdXMgc3RyaW5nIHJlZiBtYXRjaGVzIG5ldyBzdHJpbmcgcmVmXG4gICAgICBpZiAoY3VycmVudCQkMSAhPT0gbnVsbCAmJiBjdXJyZW50JCQxLnJlZiAhPT0gbnVsbCAmJiB0eXBlb2YgY3VycmVudCQkMS5yZWYgPT09ICdmdW5jdGlvbicgJiYgY3VycmVudCQkMS5yZWYuX3N0cmluZ1JlZiA9PT0gc3RyaW5nUmVmKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50JCQxLnJlZjtcbiAgICAgIH1cbiAgICAgIHZhciByZWYgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlZnMgPSBpbnN0LnJlZnM7XG4gICAgICAgIGlmIChyZWZzID09PSBlbXB0eVJlZnNPYmplY3QpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGEgbGF6eSBwb29sZWQgZnJvemVuIG9iamVjdCwgc28gd2UgbmVlZCB0byBpbml0aWFsaXplLlxuICAgICAgICAgIHJlZnMgPSBpbnN0LnJlZnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgcmVmc1tzdHJpbmdSZWZdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnNbc3RyaW5nUmVmXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmVmLl9zdHJpbmdSZWYgPSBzdHJpbmdSZWY7XG4gICAgICByZXR1cm4gcmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICAhKHR5cGVvZiBtaXhlZFJlZiA9PT0gJ3N0cmluZycpID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgcmVmIHRvIGJlIGEgZnVuY3Rpb24sIGEgc3RyaW5nLCBhbiBvYmplY3QgcmV0dXJuZWQgYnkgUmVhY3QuY3JlYXRlUmVmKCksIG9yIG51bGwuJykgOiB2b2lkIDA7XG4gICAgICAhZWxlbWVudC5fb3duZXIgPyBpbnZhcmlhbnQoZmFsc2UsICdFbGVtZW50IHJlZiB3YXMgc3BlY2lmaWVkIGFzIGEgc3RyaW5nICglcykgYnV0IG5vIG93bmVyIHdhcyBzZXQuIFRoaXMgY291bGQgaGFwcGVuIGZvciBvbmUgb2YgdGhlIGZvbGxvd2luZyByZWFzb25zOlxcbjEuIFlvdSBtYXkgYmUgYWRkaW5nIGEgcmVmIHRvIGEgZnVuY3Rpb24gY29tcG9uZW50XFxuMi4gWW91IG1heSBiZSBhZGRpbmcgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIGEgY29tcG9uZW50XFwncyByZW5kZXIgbWV0aG9kXFxuMy4gWW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZFxcblNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXJlZnMtbXVzdC1oYXZlLW93bmVyIGZvciBtb3JlIGluZm9ybWF0aW9uLicsIG1peGVkUmVmKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1peGVkUmVmO1xufVxuXG5mdW5jdGlvbiB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKSB7XG4gIGlmIChyZXR1cm5GaWJlci50eXBlICE9PSAndGV4dGFyZWEnKSB7XG4gICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAge1xuICAgICAgYWRkZW5kdW0gPSAnIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgJyArICdpbnN0ZWFkLicgKyBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KCk7XG4gICAgfVxuICAgIGludmFyaWFudChmYWxzZSwgJ09iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogJXMpLiVzJywgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0NoaWxkKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKG5ld0NoaWxkKS5qb2luKCcsICcpICsgJ30nIDogbmV3Q2hpbGQsIGFkZGVuZHVtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXJuT25GdW5jdGlvblR5cGUoKSB7XG4gIHZhciBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvID0gJ0Z1bmN0aW9ucyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQuIFRoaXMgbWF5IGhhcHBlbiBpZiAnICsgJ3lvdSByZXR1cm4gYSBDb21wb25lbnQgaW5zdGVhZCBvZiA8Q29tcG9uZW50IC8+IGZyb20gcmVuZGVyLiAnICsgJ09yIG1heWJlIHlvdSBtZWFudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmF0aGVyIHRoYW4gcmV0dXJuIGl0LicgKyBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KCk7XG5cbiAgaWYgKG93bmVySGFzRnVuY3Rpb25UeXBlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgIHJldHVybjtcbiAgfVxuICBvd25lckhhc0Z1bmN0aW9uVHlwZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10gPSB0cnVlO1xuXG4gIHdhcm5pbmckMShmYWxzZSwgJ0Z1bmN0aW9ucyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQuIFRoaXMgbWF5IGhhcHBlbiBpZiAnICsgJ3lvdSByZXR1cm4gYSBDb21wb25lbnQgaW5zdGVhZCBvZiA8Q29tcG9uZW50IC8+IGZyb20gcmVuZGVyLiAnICsgJ09yIG1heWJlIHlvdSBtZWFudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmF0aGVyIHRoYW4gcmV0dXJuIGl0LicpO1xufVxuXG4vLyBUaGlzIHdyYXBwZXIgZnVuY3Rpb24gZXhpc3RzIGJlY2F1c2UgSSBleHBlY3QgdG8gY2xvbmUgdGhlIGNvZGUgaW4gZWFjaCBwYXRoXG4vLyB0byBiZSBhYmxlIHRvIG9wdGltaXplIGVhY2ggcGF0aCBpbmRpdmlkdWFsbHkgYnkgYnJhbmNoaW5nIGVhcmx5LiBUaGlzIG5lZWRzXG4vLyBhIGNvbXBpbGVyIG9yIHdlIGNhbiBkbyBpdCBtYW51YWxseS4gSGVscGVycyB0aGF0IGRvbid0IG5lZWQgdGhpcyBicmFuY2hpbmdcbi8vIGxpdmUgb3V0c2lkZSBvZiB0aGlzIGZ1bmN0aW9uLlxuZnVuY3Rpb24gQ2hpbGRSZWNvbmNpbGVyKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgZnVuY3Rpb24gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpIHtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIE5vb3AuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIERlbGV0aW9ucyBhcmUgYWRkZWQgaW4gcmV2ZXJzZWQgb3JkZXIgc28gd2UgYWRkIGl0IHRvIHRoZSBmcm9udC5cbiAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgcmV0dXJuIGZpYmVyJ3MgZWZmZWN0IGxpc3QgaXMgZW1wdHkgZXhjZXB0IGZvclxuICAgIC8vIGRlbGV0aW9ucywgc28gd2UgY2FuIGp1c3QgYXBwZW5kIHRoZSBkZWxldGlvbiB0byB0aGUgbGlzdC4gVGhlIHJlbWFpbmluZ1xuICAgIC8vIGVmZmVjdHMgYXJlbid0IGFkZGVkIHVudGlsIHRoZSBjb21wbGV0ZSBwaGFzZS4gT25jZSB3ZSBpbXBsZW1lbnRcbiAgICAvLyByZXN1bWluZywgdGhpcyBtYXkgbm90IGJlIHRydWUuXG4gICAgdmFyIGxhc3QgPSByZXR1cm5GaWJlci5sYXN0RWZmZWN0O1xuICAgIGlmIChsYXN0ICE9PSBudWxsKSB7XG4gICAgICBsYXN0Lm5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgfVxuICAgIGNoaWxkVG9EZWxldGUubmV4dEVmZmVjdCA9IG51bGw7XG4gICAgY2hpbGRUb0RlbGV0ZS5lZmZlY3RUYWcgPSBEZWxldGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCkge1xuICAgIGlmICghc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gTm9vcC5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIFRPRE86IEZvciB0aGUgc2hvdWxkQ2xvbmUgY2FzZSwgdGhpcyBjb3VsZCBiZSBtaWNyby1vcHRpbWl6ZWQgYSBiaXQgYnlcbiAgICAvLyBhc3N1bWluZyB0aGF0IGFmdGVyIHRoZSBmaXJzdCBjaGlsZCB3ZSd2ZSBhbHJlYWR5IGFkZGVkIGV2ZXJ5dGhpbmcuXG4gICAgdmFyIGNoaWxkVG9EZWxldGUgPSBjdXJyZW50Rmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoY2hpbGRUb0RlbGV0ZSAhPT0gbnVsbCkge1xuICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpO1xuICAgICAgY2hpbGRUb0RlbGV0ZSA9IGNoaWxkVG9EZWxldGUuc2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBtYXBSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpIHtcbiAgICAvLyBBZGQgdGhlIHJlbWFpbmluZyBjaGlsZHJlbiB0byBhIHRlbXBvcmFyeSBtYXAgc28gdGhhdCB3ZSBjYW4gZmluZCB0aGVtIGJ5XG4gICAgLy8ga2V5cyBxdWlja2x5LiBJbXBsaWNpdCAobnVsbCkga2V5cyBnZXQgYWRkZWQgdG8gdGhpcyBzZXQgd2l0aCB0aGVpciBpbmRleFxuICAgIHZhciBleGlzdGluZ0NoaWxkcmVuID0gbmV3IE1hcCgpO1xuXG4gICAgdmFyIGV4aXN0aW5nQ2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoZXhpc3RpbmdDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGV4aXN0aW5nQ2hpbGQua2V5ICE9PSBudWxsKSB7XG4gICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGV4aXN0aW5nQ2hpbGQua2V5LCBleGlzdGluZ0NoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGV4aXN0aW5nQ2hpbGQuaW5kZXgsIGV4aXN0aW5nQ2hpbGQpO1xuICAgICAgfVxuICAgICAgZXhpc3RpbmdDaGlsZCA9IGV4aXN0aW5nQ2hpbGQuc2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gIH1cblxuICBmdW5jdGlvbiB1c2VGaWJlcihmaWJlciwgcGVuZGluZ1Byb3BzLCBleHBpcmF0aW9uVGltZSkge1xuICAgIC8vIFdlIGN1cnJlbnRseSBzZXQgc2libGluZyB0byBudWxsIGFuZCBpbmRleCB0byAwIGhlcmUgYmVjYXVzZSBpdCBpcyBlYXN5XG4gICAgLy8gdG8gZm9yZ2V0IHRvIGRvIGJlZm9yZSByZXR1cm5pbmcgaXQuIEUuZy4gZm9yIHRoZSBzaW5nbGUgY2hpbGQgY2FzZS5cbiAgICB2YXIgY2xvbmUgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhmaWJlciwgcGVuZGluZ1Byb3BzLCBleHBpcmF0aW9uVGltZSk7XG4gICAgY2xvbmUuaW5kZXggPSAwO1xuICAgIGNsb25lLnNpYmxpbmcgPSBudWxsO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlQ2hpbGQobmV3RmliZXIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SW5kZXgpIHtcbiAgICBuZXdGaWJlci5pbmRleCA9IG5ld0luZGV4O1xuICAgIGlmICghc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gTm9vcC5cbiAgICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gICAgfVxuICAgIHZhciBjdXJyZW50JCQxID0gbmV3RmliZXIuYWx0ZXJuYXRlO1xuICAgIGlmIChjdXJyZW50JCQxICE9PSBudWxsKSB7XG4gICAgICB2YXIgb2xkSW5kZXggPSBjdXJyZW50JCQxLmluZGV4O1xuICAgICAgaWYgKG9sZEluZGV4IDwgbGFzdFBsYWNlZEluZGV4KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBtb3ZlLlxuICAgICAgICBuZXdGaWJlci5lZmZlY3RUYWcgPSBQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGlzIGl0ZW0gY2FuIHN0YXkgaW4gcGxhY2UuXG4gICAgICAgIHJldHVybiBvbGRJbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBpcyBhbiBpbnNlcnRpb24uXG4gICAgICBuZXdGaWJlci5lZmZlY3RUYWcgPSBQbGFjZW1lbnQ7XG4gICAgICByZXR1cm4gbGFzdFBsYWNlZEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlU2luZ2xlQ2hpbGQobmV3RmliZXIpIHtcbiAgICAvLyBUaGlzIGlzIHNpbXBsZXIgZm9yIHRoZSBzaW5nbGUgY2hpbGQgY2FzZS4gV2Ugb25seSBuZWVkIHRvIGRvIGFcbiAgICAvLyBwbGFjZW1lbnQgZm9yIGluc2VydGluZyBuZXcgY2hpbGRyZW4uXG4gICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiYgbmV3RmliZXIuYWx0ZXJuYXRlID09PSBudWxsKSB7XG4gICAgICBuZXdGaWJlci5lZmZlY3RUYWcgPSBQbGFjZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBuZXdGaWJlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50JCQxLCB0ZXh0Q29udGVudCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICBpZiAoY3VycmVudCQkMSA9PT0gbnVsbCB8fCBjdXJyZW50JCQxLnRhZyAhPT0gSG9zdFRleHQpIHtcbiAgICAgIC8vIEluc2VydFxuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21UZXh0KHRleHRDb250ZW50LCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVwZGF0ZVxuICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCQkMSwgdGV4dENvbnRlbnQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGV4aXN0aW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQkJDEsIGVsZW1lbnQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgaWYgKGN1cnJlbnQkJDEgIT09IG51bGwgJiYgY3VycmVudCQkMS5lbGVtZW50VHlwZSA9PT0gZWxlbWVudC50eXBlKSB7XG4gICAgICAvLyBNb3ZlIGJhc2VkIG9uIGluZGV4XG4gICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjdXJyZW50JCQxLCBlbGVtZW50LnByb3BzLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBleGlzdGluZy5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnQkJDEsIGVsZW1lbnQpO1xuICAgICAgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICB7XG4gICAgICAgIGV4aXN0aW5nLl9kZWJ1Z1NvdXJjZSA9IGVsZW1lbnQuX3NvdXJjZTtcbiAgICAgICAgZXhpc3RpbmcuX2RlYnVnT3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBleGlzdGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW5zZXJ0XG4gICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUVsZW1lbnQoZWxlbWVudCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgY3JlYXRlZC5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnQkJDEsIGVsZW1lbnQpO1xuICAgICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBjcmVhdGVkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudCQkMSwgcG9ydGFsLCBleHBpcmF0aW9uVGltZSkge1xuICAgIGlmIChjdXJyZW50JCQxID09PSBudWxsIHx8IGN1cnJlbnQkJDEudGFnICE9PSBIb3N0UG9ydGFsIHx8IGN1cnJlbnQkJDEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gIT09IHBvcnRhbC5jb250YWluZXJJbmZvIHx8IGN1cnJlbnQkJDEuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uICE9PSBwb3J0YWwuaW1wbGVtZW50YXRpb24pIHtcbiAgICAgIC8vIEluc2VydFxuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVwZGF0ZVxuICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCQkMSwgcG9ydGFsLmNoaWxkcmVuIHx8IFtdLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBleGlzdGluZztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgY3VycmVudCQkMSwgZnJhZ21lbnQsIGV4cGlyYXRpb25UaW1lLCBrZXkpIHtcbiAgICBpZiAoY3VycmVudCQkMSA9PT0gbnVsbCB8fCBjdXJyZW50JCQxLnRhZyAhPT0gRnJhZ21lbnQpIHtcbiAgICAgIC8vIEluc2VydFxuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChmcmFnbWVudCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUsIGtleSk7XG4gICAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVwZGF0ZVxuICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCQkMSwgZnJhZ21lbnQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGV4aXN0aW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbmV3Q2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICAvLyBUZXh0IG5vZGVzIGRvbid0IGhhdmUga2V5cy4gSWYgdGhlIHByZXZpb3VzIG5vZGUgaXMgaW1wbGljaXRseSBrZXllZFxuICAgICAgLy8gd2UgY2FuIGNvbnRpbnVlIHRvIHJlcGxhY2UgaXQgd2l0aG91dCBhYm9ydGluZyBldmVuIGlmIGl0IGlzIG5vdCBhIHRleHRcbiAgICAgIC8vIG5vZGUuXG4gICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVRleHQoJycgKyBuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBjcmVhdGVkO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmIG5ld0NoaWxkICE9PSBudWxsKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBfY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUVsZW1lbnQobmV3Q2hpbGQsIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICAgIF9jcmVhdGVkLnJlZiA9IGNvZXJjZVJlZihyZXR1cm5GaWJlciwgbnVsbCwgbmV3Q2hpbGQpO1xuICAgICAgICAgICAgX2NyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgICByZXR1cm4gX2NyZWF0ZWQ7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBfY3JlYXRlZDIgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwobmV3Q2hpbGQsIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICAgIF9jcmVhdGVkMi5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgIHJldHVybiBfY3JlYXRlZDI7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNBcnJheShuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHtcbiAgICAgICAgdmFyIF9jcmVhdGVkMyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSwgbnVsbCk7XG4gICAgICAgIF9jcmVhdGVkMy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVkMztcbiAgICAgIH1cblxuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuXG4gICAge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuT25GdW5jdGlvblR5cGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAvLyBVcGRhdGUgdGhlIGZpYmVyIGlmIHRoZSBrZXlzIG1hdGNoLCBvdGhlcndpc2UgcmV0dXJuIG51bGwuXG5cbiAgICB2YXIga2V5ID0gb2xkRmliZXIgIT09IG51bGwgPyBvbGRGaWJlci5rZXkgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5ld0NoaWxkID09PSAnbnVtYmVyJykge1xuICAgICAgLy8gVGV4dCBub2RlcyBkb24ndCBoYXZlIGtleXMuIElmIHRoZSBwcmV2aW91cyBub2RlIGlzIGltcGxpY2l0bHkga2V5ZWRcbiAgICAgIC8vIHdlIGNhbiBjb250aW51ZSB0byByZXBsYWNlIGl0IHdpdGhvdXQgYWJvcnRpbmcgZXZlbiBpZiBpdCBpcyBub3QgYSB0ZXh0XG4gICAgICAvLyBub2RlLlxuICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgb2xkRmliZXIsICcnICsgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnb2JqZWN0JyAmJiBuZXdDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgaWYgKG5ld0NoaWxkLnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlbiwgZXhwaXJhdGlvblRpbWUsIGtleSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChuZXdDaGlsZC5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlUG9ydGFsKHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzQXJyYXkobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIGlmIChrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSwgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVGcm9tTWFwKGV4aXN0aW5nQ2hpbGRyZW4sIHJldHVybkZpYmVyLCBuZXdJZHgsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSkge1xuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBrZXlzLCBzbyB3ZSBuZWl0aGVyIGhhdmUgdG8gY2hlY2sgdGhlIG9sZCBub3JcbiAgICAgIC8vIG5ldyBub2RlIGZvciB0aGUga2V5LiBJZiBib3RoIGFyZSB0ZXh0IG5vZGVzLCB0aGV5IG1hdGNoLlxuICAgICAgdmFyIG1hdGNoZWRGaWJlciA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbDtcbiAgICAgIHJldHVybiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgbWF0Y2hlZEZpYmVyLCAnJyArIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF9tYXRjaGVkRmliZXIgPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdDaGlsZC5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXkpIHx8IG51bGw7XG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIF9tYXRjaGVkRmliZXIsIG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuLCBleHBpcmF0aW9uVGltZSwgbmV3Q2hpbGQua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBfbWF0Y2hlZEZpYmVyLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgX21hdGNoZWRGaWJlcjIgPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdDaGlsZC5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXkpIHx8IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlUG9ydGFsKHJldHVybkZpYmVyLCBfbWF0Y2hlZEZpYmVyMiwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5KG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSkge1xuICAgICAgICB2YXIgX21hdGNoZWRGaWJlcjMgPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdJZHgpIHx8IG51bGw7XG4gICAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgX21hdGNoZWRGaWJlcjMsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSwgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogV2FybnMgaWYgdGhlcmUgaXMgYSBkdXBsaWNhdGUgb3IgbWlzc2luZyBrZXlcbiAgICovXG4gIGZ1bmN0aW9uIHdhcm5PbkludmFsaWRLZXkoY2hpbGQsIGtub3duS2V5cykge1xuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgY2hpbGQgIT09ICdvYmplY3QnIHx8IGNoaWxkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBrbm93bktleXM7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGNoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHdhcm5Gb3JNaXNzaW5nS2V5KGNoaWxkKTtcbiAgICAgICAgICB2YXIga2V5ID0gY2hpbGQua2V5O1xuICAgICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrbm93bktleXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGtub3duS2V5cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIGtub3duS2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWtub3duS2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAga25vd25LZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ0VuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgYCVzYC4gJyArICdLZXlzIHNob3VsZCBiZSB1bmlxdWUgc28gdGhhdCBjb21wb25lbnRzIG1haW50YWluIHRoZWlyIGlkZW50aXR5ICcgKyAnYWNyb3NzIHVwZGF0ZXMuIE5vbi11bmlxdWUga2V5cyBtYXkgY2F1c2UgY2hpbGRyZW4gdG8gYmUgJyArICdkdXBsaWNhdGVkIGFuZC9vciBvbWl0dGVkIOKAlCB0aGUgYmVoYXZpb3IgaXMgdW5zdXBwb3J0ZWQgYW5kICcgKyAnY291bGQgY2hhbmdlIGluIGEgZnV0dXJlIHZlcnNpb24uJywga2V5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtub3duS2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZHJlbiwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAvLyBUaGlzIGFsZ29yaXRobSBjYW4ndCBvcHRpbWl6ZSBieSBzZWFyY2hpbmcgZnJvbSBib3RoIGVuZHMgc2luY2Ugd2VcbiAgICAvLyBkb24ndCBoYXZlIGJhY2twb2ludGVycyBvbiBmaWJlcnMuIEknbSB0cnlpbmcgdG8gc2VlIGhvdyBmYXIgd2UgY2FuIGdldFxuICAgIC8vIHdpdGggdGhhdCBtb2RlbC4gSWYgaXQgZW5kcyB1cCBub3QgYmVpbmcgd29ydGggdGhlIHRyYWRlb2Zmcywgd2UgY2FuXG4gICAgLy8gYWRkIGl0IGxhdGVyLlxuXG4gICAgLy8gRXZlbiB3aXRoIGEgdHdvIGVuZGVkIG9wdGltaXphdGlvbiwgd2UnZCB3YW50IHRvIG9wdGltaXplIGZvciB0aGUgY2FzZVxuICAgIC8vIHdoZXJlIHRoZXJlIGFyZSBmZXcgY2hhbmdlcyBhbmQgYnJ1dGUgZm9yY2UgdGhlIGNvbXBhcmlzb24gaW5zdGVhZCBvZlxuICAgIC8vIGdvaW5nIGZvciB0aGUgTWFwLiBJdCdkIGxpa2UgdG8gZXhwbG9yZSBoaXR0aW5nIHRoYXQgcGF0aCBmaXJzdCBpblxuICAgIC8vIGZvcndhcmQtb25seSBtb2RlIGFuZCBvbmx5IGdvIGZvciB0aGUgTWFwIG9uY2Ugd2Ugbm90aWNlIHRoYXQgd2UgbmVlZFxuICAgIC8vIGxvdHMgb2YgbG9vayBhaGVhZC4gVGhpcyBkb2Vzbid0IGhhbmRsZSByZXZlcnNhbCBhcyB3ZWxsIGFzIHR3byBlbmRlZFxuICAgIC8vIHNlYXJjaCBidXQgdGhhdCdzIHVudXN1YWwuIEJlc2lkZXMsIGZvciB0aGUgdHdvIGVuZGVkIG9wdGltaXphdGlvbiB0b1xuICAgIC8vIHdvcmsgb24gSXRlcmFibGVzLCB3ZSdkIG5lZWQgdG8gY29weSB0aGUgd2hvbGUgc2V0LlxuXG4gICAgLy8gSW4gdGhpcyBmaXJzdCBpdGVyYXRpb24sIHdlJ2xsIGp1c3QgbGl2ZSB3aXRoIGhpdHRpbmcgdGhlIGJhZCBjYXNlXG4gICAgLy8gKGFkZGluZyBldmVyeXRoaW5nIHRvIGEgTWFwKSBpbiBmb3IgZXZlcnkgaW5zZXJ0L21vdmUuXG5cbiAgICAvLyBJZiB5b3UgY2hhbmdlIHRoaXMgY29kZSwgYWxzbyB1cGRhdGUgcmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvcigpIHdoaWNoXG4gICAgLy8gdXNlcyB0aGUgc2FtZSBhbGdvcml0aG0uXG5cbiAgICB7XG4gICAgICAvLyBGaXJzdCwgdmFsaWRhdGUga2V5cy5cbiAgICAgIHZhciBrbm93bktleXMgPSBudWxsO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBuZXdDaGlsZHJlbltpXTtcbiAgICAgICAga25vd25LZXlzID0gd2Fybk9uSW52YWxpZEtleShjaGlsZCwga25vd25LZXlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGw7XG4gICAgdmFyIHByZXZpb3VzTmV3RmliZXIgPSBudWxsO1xuXG4gICAgdmFyIG9sZEZpYmVyID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgdmFyIGxhc3RQbGFjZWRJbmRleCA9IDA7XG4gICAgdmFyIG5ld0lkeCA9IDA7XG4gICAgdmFyIG5leHRPbGRGaWJlciA9IG51bGw7XG4gICAgZm9yICg7IG9sZEZpYmVyICE9PSBudWxsICYmIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspIHtcbiAgICAgIGlmIChvbGRGaWJlci5pbmRleCA+IG5ld0lkeCkge1xuICAgICAgICBuZXh0T2xkRmliZXIgPSBvbGRGaWJlcjtcbiAgICAgICAgb2xkRmliZXIgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdGaWJlciA9IHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZHJlbltuZXdJZHhdLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBpZiAobmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBicmVha3Mgb24gZW1wdHkgc2xvdHMgbGlrZSBudWxsIGNoaWxkcmVuLiBUaGF0J3NcbiAgICAgICAgLy8gdW5mb3J0dW5hdGUgYmVjYXVzZSBpdCB0cmlnZ2VycyB0aGUgc2xvdyBwYXRoIGFsbCB0aGUgdGltZS4gV2UgbmVlZFxuICAgICAgICAvLyBhIGJldHRlciB3YXkgdG8gY29tbXVuaWNhdGUgd2hldGhlciB0aGlzIHdhcyBhIG1pc3Mgb3IgbnVsbCxcbiAgICAgICAgLy8gYm9vbGVhbiwgdW5kZWZpbmVkLCBldGMuXG4gICAgICAgIGlmIChvbGRGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgICAgaWYgKG9sZEZpYmVyICYmIG5ld0ZpYmVyLmFsdGVybmF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIFdlIG1hdGNoZWQgdGhlIHNsb3QsIGJ1dCB3ZSBkaWRuJ3QgcmV1c2UgdGhlIGV4aXN0aW5nIGZpYmVyLCBzbyB3ZVxuICAgICAgICAgIC8vIG5lZWQgdG8gZGVsZXRlIHRoZSBleGlzdGluZyBjaGlsZC5cbiAgICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCk7XG4gICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIG91dCBvZiB0aGUgbG9vcC4gVGhpcyBvbmx5IGhhcHBlbnMgZm9yIHRoZSBmaXJzdCBydW4uXG4gICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IERlZmVyIHNpYmxpbmdzIGlmIHdlJ3JlIG5vdCBhdCB0aGUgcmlnaHQgaW5kZXggZm9yIHRoaXMgc2xvdC5cbiAgICAgICAgLy8gSS5lLiBpZiB3ZSBoYWQgbnVsbCB2YWx1ZXMgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gZGVmZXIgdGhpc1xuICAgICAgICAvLyBmb3IgZWFjaCBudWxsIHZhbHVlLiBIb3dldmVyLCB3ZSBhbHNvIGRvbid0IHdhbnQgdG8gY2FsbCB1cGRhdGVTbG90XG4gICAgICAgIC8vIHdpdGggdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXI7XG4gICAgICB9XG4gICAgICBwcmV2aW91c05ld0ZpYmVyID0gbmV3RmliZXI7XG4gICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICB9XG5cbiAgICBpZiAobmV3SWR4ID09PSBuZXdDaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIC8vIFdlJ3ZlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgbmV3IGNoaWxkcmVuLiBXZSBjYW4gZGVsZXRlIHRoZSByZXN0LlxuICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICAgIH1cblxuICAgIGlmIChvbGRGaWJlciA9PT0gbnVsbCkge1xuICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbnkgbW9yZSBleGlzdGluZyBjaGlsZHJlbiB3ZSBjYW4gY2hvb3NlIGEgZmFzdCBwYXRoXG4gICAgICAvLyBzaW5jZSB0aGUgcmVzdCB3aWxsIGFsbCBiZSBpbnNlcnRpb25zLlxuICAgICAgZm9yICg7IG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspIHtcbiAgICAgICAgdmFyIF9uZXdGaWJlciA9IGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZHJlbltuZXdJZHhdLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgIGlmICghX25ld0ZpYmVyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChfbmV3RmliZXIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KTtcbiAgICAgICAgaWYgKHByZXZpb3VzTmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUT0RPOiBNb3ZlIG91dCBvZiB0aGUgbG9vcC4gVGhpcyBvbmx5IGhhcHBlbnMgZm9yIHRoZSBmaXJzdCBydW4uXG4gICAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IF9uZXdGaWJlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBfbmV3RmliZXI7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IF9uZXdGaWJlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICAgIH1cblxuICAgIC8vIEFkZCBhbGwgY2hpbGRyZW4gdG8gYSBrZXkgbWFwIGZvciBxdWljayBsb29rdXBzLlxuICAgIHZhciBleGlzdGluZ0NoaWxkcmVuID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcblxuICAgIC8vIEtlZXAgc2Nhbm5pbmcgYW5kIHVzZSB0aGUgbWFwIHRvIHJlc3RvcmUgZGVsZXRlZCBpdGVtcyBhcyBtb3Zlcy5cbiAgICBmb3IgKDsgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBuZXdJZHgrKykge1xuICAgICAgdmFyIF9uZXdGaWJlcjIgPSB1cGRhdGVGcm9tTWFwKGV4aXN0aW5nQ2hpbGRyZW4sIHJldHVybkZpYmVyLCBuZXdJZHgsIG5ld0NoaWxkcmVuW25ld0lkeF0sIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGlmIChfbmV3RmliZXIyKSB7XG4gICAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgICAgaWYgKF9uZXdGaWJlcjIuYWx0ZXJuYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmV3IGZpYmVyIGlzIGEgd29yayBpbiBwcm9ncmVzcywgYnV0IGlmIHRoZXJlIGV4aXN0cyBhXG4gICAgICAgICAgICAvLyBjdXJyZW50LCB0aGF0IG1lYW5zIHRoYXQgd2UgcmV1c2VkIHRoZSBmaWJlci4gV2UgbmVlZCB0byBkZWxldGVcbiAgICAgICAgICAgIC8vIGl0IGZyb20gdGhlIGNoaWxkIGxpc3Qgc28gdGhhdCB3ZSBkb24ndCBhZGQgaXQgdG8gdGhlIGRlbGV0aW9uXG4gICAgICAgICAgICAvLyBsaXN0LlxuICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5kZWxldGUoX25ld0ZpYmVyMi5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBfbmV3RmliZXIyLmtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQoX25ld0ZpYmVyMiwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBfbmV3RmliZXIyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IF9uZXdGaWJlcjI7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IF9uZXdGaWJlcjI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIEFueSBleGlzdGluZyBjaGlsZHJlbiB0aGF0IHdlcmVuJ3QgY29uc3VtZWQgYWJvdmUgd2VyZSBkZWxldGVkLiBXZSBuZWVkXG4gICAgICAvLyB0byBhZGQgdGhlbSB0byB0aGUgZGVsZXRpb24gbGlzdC5cbiAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuSXRlcmF0b3IocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZHJlbkl0ZXJhYmxlLCBleHBpcmF0aW9uVGltZSkge1xuICAgIC8vIFRoaXMgaXMgdGhlIHNhbWUgaW1wbGVtZW50YXRpb24gYXMgcmVjb25jaWxlQ2hpbGRyZW5BcnJheSgpLFxuICAgIC8vIGJ1dCB1c2luZyB0aGUgaXRlcmF0b3IgaW5zdGVhZC5cblxuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihuZXdDaGlsZHJlbkl0ZXJhYmxlKTtcbiAgICAhKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSA/IGludmFyaWFudChmYWxzZSwgJ0FuIG9iamVjdCBpcyBub3QgYW4gaXRlcmFibGUuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG5cbiAgICB7XG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IHJlbmRlcmluZyBHZW5lcmF0b3JzIGJlY2F1c2UgaXQncyBhIG11dGF0aW9uLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTI5OTVcbiAgICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAvLyAkRmxvd0ZpeE1lIEZsb3cgZG9lc24ndCBrbm93IGFib3V0IHRvU3RyaW5nVGFnXG4gICAgICBuZXdDaGlsZHJlbkl0ZXJhYmxlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdHZW5lcmF0b3InKSB7XG4gICAgICAgICFkaWRXYXJuQWJvdXRHZW5lcmF0b3JzID8gd2FybmluZyQxKGZhbHNlLCAnVXNpbmcgR2VuZXJhdG9ycyBhcyBjaGlsZHJlbiBpcyB1bnN1cHBvcnRlZCBhbmQgd2lsbCBsaWtlbHkgeWllbGQgJyArICd1bmV4cGVjdGVkIHJlc3VsdHMgYmVjYXVzZSBlbnVtZXJhdGluZyBhIGdlbmVyYXRvciBtdXRhdGVzIGl0LiAnICsgJ1lvdSBtYXkgY29udmVydCBpdCB0byBhbiBhcnJheSB3aXRoIGBBcnJheS5mcm9tKClgIG9yIHRoZSAnICsgJ2BbLi4uc3ByZWFkXWAgb3BlcmF0b3IgYmVmb3JlIHJlbmRlcmluZy4gS2VlcCBpbiBtaW5kICcgKyAneW91IG1pZ2h0IG5lZWQgdG8gcG9seWZpbGwgdGhlc2UgZmVhdHVyZXMgZm9yIG9sZGVyIGJyb3dzZXJzLicpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuQWJvdXRHZW5lcmF0b3JzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gV2FybiBhYm91dCB1c2luZyBNYXBzIGFzIGNoaWxkcmVuXG4gICAgICBpZiAobmV3Q2hpbGRyZW5JdGVyYWJsZS5lbnRyaWVzID09PSBpdGVyYXRvckZuKSB7XG4gICAgICAgICFkaWRXYXJuQWJvdXRNYXBzID8gd2FybmluZyQxKGZhbHNlLCAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyB1bnN1cHBvcnRlZCBhbmQgd2lsbCBsaWtlbHkgeWllbGQgJyArICd1bmV4cGVjdGVkIHJlc3VsdHMuIENvbnZlcnQgaXQgdG8gYSBzZXF1ZW5jZS9pdGVyYWJsZSBvZiBrZXllZCAnICsgJ1JlYWN0RWxlbWVudHMgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FybkFib3V0TWFwcyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpcnN0LCB2YWxpZGF0ZSBrZXlzLlxuICAgICAgLy8gV2UnbGwgZ2V0IGEgZGlmZmVyZW50IGl0ZXJhdG9yIGxhdGVyIGZvciB0aGUgbWFpbiBwYXNzLlxuICAgICAgdmFyIF9uZXdDaGlsZHJlbiA9IGl0ZXJhdG9yRm4uY2FsbChuZXdDaGlsZHJlbkl0ZXJhYmxlKTtcbiAgICAgIGlmIChfbmV3Q2hpbGRyZW4pIHtcbiAgICAgICAgdmFyIGtub3duS2V5cyA9IG51bGw7XG4gICAgICAgIHZhciBfc3RlcCA9IF9uZXdDaGlsZHJlbi5uZXh0KCk7XG4gICAgICAgIGZvciAoOyAhX3N0ZXAuZG9uZTsgX3N0ZXAgPSBfbmV3Q2hpbGRyZW4ubmV4dCgpKSB7XG4gICAgICAgICAgdmFyIGNoaWxkID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAga25vd25LZXlzID0gd2Fybk9uSW52YWxpZEtleShjaGlsZCwga25vd25LZXlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBuZXdDaGlsZHJlbiA9IGl0ZXJhdG9yRm4uY2FsbChuZXdDaGlsZHJlbkl0ZXJhYmxlKTtcbiAgICAhKG5ld0NoaWxkcmVuICE9IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnQW4gaXRlcmFibGUgb2JqZWN0IHByb3ZpZGVkIG5vIGl0ZXJhdG9yLicpIDogdm9pZCAwO1xuXG4gICAgdmFyIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91c05ld0ZpYmVyID0gbnVsbDtcblxuICAgIHZhciBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkO1xuICAgIHZhciBsYXN0UGxhY2VkSW5kZXggPSAwO1xuICAgIHZhciBuZXdJZHggPSAwO1xuICAgIHZhciBuZXh0T2xkRmliZXIgPSBudWxsO1xuXG4gICAgdmFyIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCk7XG4gICAgZm9yICg7IG9sZEZpYmVyICE9PSBudWxsICYmICFzdGVwLmRvbmU7IG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpKSB7XG4gICAgICBpZiAob2xkRmliZXIuaW5kZXggPiBuZXdJZHgpIHtcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gb2xkRmliZXI7XG4gICAgICAgIG9sZEZpYmVyID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RmliZXIgPSB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgc3RlcC52YWx1ZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgaWYgKG5ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgYnJlYWtzIG9uIGVtcHR5IHNsb3RzIGxpa2UgbnVsbCBjaGlsZHJlbi4gVGhhdCdzXG4gICAgICAgIC8vIHVuZm9ydHVuYXRlIGJlY2F1c2UgaXQgdHJpZ2dlcnMgdGhlIHNsb3cgcGF0aCBhbGwgdGhlIHRpbWUuIFdlIG5lZWRcbiAgICAgICAgLy8gYSBiZXR0ZXIgd2F5IHRvIGNvbW11bmljYXRlIHdoZXRoZXIgdGhpcyB3YXMgYSBtaXNzIG9yIG51bGwsXG4gICAgICAgIC8vIGJvb2xlYW4sIHVuZGVmaW5lZCwgZXRjLlxuICAgICAgICBpZiAoIW9sZEZpYmVyKSB7XG4gICAgICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgICBpZiAob2xkRmliZXIgJiYgbmV3RmliZXIuYWx0ZXJuYXRlID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gV2UgbWF0Y2hlZCB0aGUgc2xvdCwgYnV0IHdlIGRpZG4ndCByZXVzZSB0aGUgZXhpc3RpbmcgZmliZXIsIHNvIHdlXG4gICAgICAgICAgLy8gbmVlZCB0byBkZWxldGUgdGhlIGV4aXN0aW5nIGNoaWxkLlxuICAgICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KTtcbiAgICAgIGlmIChwcmV2aW91c05ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgb3V0IG9mIHRoZSBsb29wLiBUaGlzIG9ubHkgaGFwcGVucyBmb3IgdGhlIGZpcnN0IHJ1bi5cbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5ld0ZpYmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVE9ETzogRGVmZXIgc2libGluZ3MgaWYgd2UncmUgbm90IGF0IHRoZSByaWdodCBpbmRleCBmb3IgdGhpcyBzbG90LlxuICAgICAgICAvLyBJLmUuIGlmIHdlIGhhZCBudWxsIHZhbHVlcyBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byBkZWZlciB0aGlzXG4gICAgICAgIC8vIGZvciBlYWNoIG51bGwgdmFsdWUuIEhvd2V2ZXIsIHdlIGFsc28gZG9uJ3Qgd2FudCB0byBjYWxsIHVwZGF0ZVNsb3RcbiAgICAgICAgLy8gd2l0aCB0aGUgcHJldmlvdXMgb25lLlxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXdGaWJlcjtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cblxuICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgIC8vIFdlJ3ZlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgbmV3IGNoaWxkcmVuLiBXZSBjYW4gZGVsZXRlIHRoZSByZXN0LlxuICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICAgIH1cblxuICAgIGlmIChvbGRGaWJlciA9PT0gbnVsbCkge1xuICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbnkgbW9yZSBleGlzdGluZyBjaGlsZHJlbiB3ZSBjYW4gY2hvb3NlIGEgZmFzdCBwYXRoXG4gICAgICAvLyBzaW5jZSB0aGUgcmVzdCB3aWxsIGFsbCBiZSBpbnNlcnRpb25zLlxuICAgICAgZm9yICg7ICFzdGVwLmRvbmU7IG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpKSB7XG4gICAgICAgIHZhciBfbmV3RmliZXIzID0gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIHN0ZXAudmFsdWUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgaWYgKF9uZXdGaWJlcjMgPT09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKF9uZXdGaWJlcjMsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KTtcbiAgICAgICAgaWYgKHByZXZpb3VzTmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUT0RPOiBNb3ZlIG91dCBvZiB0aGUgbG9vcC4gVGhpcyBvbmx5IGhhcHBlbnMgZm9yIHRoZSBmaXJzdCBydW4uXG4gICAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IF9uZXdGaWJlcjM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gX25ld0ZpYmVyMztcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gX25ld0ZpYmVyMztcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICAgIH1cblxuICAgIC8vIEFkZCBhbGwgY2hpbGRyZW4gdG8gYSBrZXkgbWFwIGZvciBxdWljayBsb29rdXBzLlxuICAgIHZhciBleGlzdGluZ0NoaWxkcmVuID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcblxuICAgIC8vIEtlZXAgc2Nhbm5pbmcgYW5kIHVzZSB0aGUgbWFwIHRvIHJlc3RvcmUgZGVsZXRlZCBpdGVtcyBhcyBtb3Zlcy5cbiAgICBmb3IgKDsgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgIHZhciBfbmV3RmliZXI0ID0gdXBkYXRlRnJvbU1hcChleGlzdGluZ0NoaWxkcmVuLCByZXR1cm5GaWJlciwgbmV3SWR4LCBzdGVwLnZhbHVlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBpZiAoX25ld0ZpYmVyNCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgICAgIGlmIChfbmV3RmliZXI0LmFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVGhlIG5ldyBmaWJlciBpcyBhIHdvcmsgaW4gcHJvZ3Jlc3MsIGJ1dCBpZiB0aGVyZSBleGlzdHMgYVxuICAgICAgICAgICAgLy8gY3VycmVudCwgdGhhdCBtZWFucyB0aGF0IHdlIHJldXNlZCB0aGUgZmliZXIuIFdlIG5lZWQgdG8gZGVsZXRlXG4gICAgICAgICAgICAvLyBpdCBmcm9tIHRoZSBjaGlsZCBsaXN0IHNvIHRoYXQgd2UgZG9uJ3QgYWRkIGl0IHRvIHRoZSBkZWxldGlvblxuICAgICAgICAgICAgLy8gbGlzdC5cbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZGVsZXRlKF9uZXdGaWJlcjQua2V5ID09PSBudWxsID8gbmV3SWR4IDogX25ld0ZpYmVyNC5rZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKF9uZXdGaWJlcjQsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KTtcbiAgICAgICAgaWYgKHByZXZpb3VzTmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gX25ld0ZpYmVyNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBfbmV3RmliZXI0O1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBfbmV3RmliZXI0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAvLyBBbnkgZXhpc3RpbmcgY2hpbGRyZW4gdGhhdCB3ZXJlbid0IGNvbnN1bWVkIGFib3ZlIHdlcmUgZGVsZXRlZC4gV2UgbmVlZFxuICAgICAgLy8gdG8gYWRkIHRoZW0gdG8gdGhlIGRlbGV0aW9uIGxpc3QuXG4gICAgICBleGlzdGluZ0NoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWNvbmNpbGVTaW5nbGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIHRleHRDb250ZW50LCBleHBpcmF0aW9uVGltZSkge1xuICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBjaGVjayBmb3Iga2V5cyBvbiB0ZXh0IG5vZGVzIHNpbmNlIHdlIGRvbid0IGhhdmUgYVxuICAgIC8vIHdheSB0byBkZWZpbmUgdGhlbS5cbiAgICBpZiAoY3VycmVudEZpcnN0Q2hpbGQgIT09IG51bGwgJiYgY3VycmVudEZpcnN0Q2hpbGQudGFnID09PSBIb3N0VGV4dCkge1xuICAgICAgLy8gV2UgYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG5vZGUgc28gbGV0J3MganVzdCB1cGRhdGUgaXQgYW5kIGRlbGV0ZVxuICAgICAgLy8gdGhlIHJlc3QuXG4gICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyk7XG4gICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjdXJyZW50Rmlyc3RDaGlsZCwgdGV4dENvbnRlbnQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGV4aXN0aW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cbiAgICAvLyBUaGUgZXhpc3RpbmcgZmlyc3QgY2hpbGQgaXMgbm90IGEgdGV4dCBub2RlIHNvIHdlIG5lZWQgdG8gY3JlYXRlIG9uZVxuICAgIC8vIGFuZCBkZWxldGUgdGhlIGV4aXN0aW5nIG9uZXMuXG4gICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVRleHQodGV4dENvbnRlbnQsIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjcmVhdGVkO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlU2luZ2xlRWxlbWVudChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIGVsZW1lbnQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICAgIHZhciBjaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkO1xuICAgIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgLy8gVE9ETzogSWYga2V5ID09PSBudWxsIGFuZCBjaGlsZC5rZXkgPT09IG51bGwsIHRoZW4gdGhpcyBvbmx5IGFwcGxpZXMgdG9cbiAgICAgIC8vIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0LlxuICAgICAgaWYgKGNoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgIGlmIChjaGlsZC50YWcgPT09IEZyYWdtZW50ID8gZWxlbWVudC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIDogY2hpbGQuZWxlbWVudFR5cGUgPT09IGVsZW1lbnQudHlwZSkge1xuICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZC5zaWJsaW5nKTtcbiAgICAgICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjaGlsZCwgZWxlbWVudC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFID8gZWxlbWVudC5wcm9wcy5jaGlsZHJlbiA6IGVsZW1lbnQucHJvcHMsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICBleGlzdGluZy5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGNoaWxkLCBlbGVtZW50KTtcbiAgICAgICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBleGlzdGluZy5fZGVidWdTb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG4gICAgICAgICAgICBleGlzdGluZy5fZGVidWdPd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lLCBlbGVtZW50LmtleSk7XG4gICAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfY3JlYXRlZDQgPSBjcmVhdGVGaWJlckZyb21FbGVtZW50KGVsZW1lbnQsIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIF9jcmVhdGVkNC5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBlbGVtZW50KTtcbiAgICAgIF9jcmVhdGVkNC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBfY3JlYXRlZDQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlU2luZ2xlUG9ydGFsKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgcG9ydGFsLCBleHBpcmF0aW9uVGltZSkge1xuICAgIHZhciBrZXkgPSBwb3J0YWwua2V5O1xuICAgIHZhciBjaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkO1xuICAgIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgLy8gVE9ETzogSWYga2V5ID09PSBudWxsIGFuZCBjaGlsZC5rZXkgPT09IG51bGwsIHRoZW4gdGhpcyBvbmx5IGFwcGxpZXMgdG9cbiAgICAgIC8vIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0LlxuICAgICAgaWYgKGNoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgIGlmIChjaGlsZC50YWcgPT09IEhvc3RQb3J0YWwgJiYgY2hpbGQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gPT09IHBvcnRhbC5jb250YWluZXJJbmZvICYmIGNoaWxkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiA9PT0gcG9ydGFsLmltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGNoaWxkLnNpYmxpbmcpO1xuICAgICAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGNoaWxkLCBwb3J0YWwuY2hpbGRyZW4gfHwgW10sIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgICB9XG5cbiAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChwb3J0YWwsIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjcmVhdGVkO1xuICB9XG5cbiAgLy8gVGhpcyBBUEkgd2lsbCB0YWcgdGhlIGNoaWxkcmVuIHdpdGggdGhlIHNpZGUtZWZmZWN0IG9mIHRoZSByZWNvbmNpbGlhdGlvblxuICAvLyBpdHNlbGYuIFRoZXkgd2lsbCBiZSBhZGRlZCB0byB0aGUgc2lkZS1lZmZlY3QgbGlzdCBhcyB3ZSBwYXNzIHRocm91Z2ggdGhlXG4gIC8vIGNoaWxkcmVuIGFuZCB0aGUgcGFyZW50LlxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZEZpYmVycyhyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSkge1xuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgbm90IHJlY3Vyc2l2ZS5cbiAgICAvLyBJZiB0aGUgdG9wIGxldmVsIGl0ZW0gaXMgYW4gYXJyYXksIHdlIHRyZWF0IGl0IGFzIGEgc2V0IG9mIGNoaWxkcmVuLFxuICAgIC8vIG5vdCBhcyBhIGZyYWdtZW50LiBOZXN0ZWQgYXJyYXlzIG9uIHRoZSBvdGhlciBoYW5kIHdpbGwgYmUgdHJlYXRlZCBhc1xuICAgIC8vIGZyYWdtZW50IG5vZGVzLiBSZWN1cnNpb24gaGFwcGVucyBhdCB0aGUgbm9ybWFsIGZsb3cuXG5cbiAgICAvLyBIYW5kbGUgdG9wIGxldmVsIHVua2V5ZWQgZnJhZ21lbnRzIGFzIGlmIHRoZXkgd2VyZSBhcnJheXMuXG4gICAgLy8gVGhpcyBsZWFkcyB0byBhbiBhbWJpZ3VpdHkgYmV0d2VlbiA8PntbLi4uXX08Lz4gYW5kIDw+Li4uPC8+LlxuICAgIC8vIFdlIHRyZWF0IHRoZSBhbWJpZ3VvdXMgY2FzZXMgYWJvdmUgdGhlIHNhbWUuXG4gICAgdmFyIGlzVW5rZXllZFRvcExldmVsRnJhZ21lbnQgPSB0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmIG5ld0NoaWxkICE9PSBudWxsICYmIG5ld0NoaWxkLnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgJiYgbmV3Q2hpbGQua2V5ID09PSBudWxsO1xuICAgIGlmIChpc1Vua2V5ZWRUb3BMZXZlbEZyYWdtZW50KSB7XG4gICAgICBuZXdDaGlsZCA9IG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBvYmplY3QgdHlwZXNcbiAgICB2YXIgaXNPYmplY3QgPSB0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmIG5ld0NoaWxkICE9PSBudWxsO1xuXG4gICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJlY29uY2lsZVNpbmdsZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChyZWNvbmNpbGVTaW5nbGVQb3J0YWwocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbmV3Q2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChyZWNvbmNpbGVTaW5nbGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsICcnICsgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkobmV3Q2hpbGQpKSB7XG4gICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRyZW5BcnJheShyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSk7XG4gICAgfVxuXG4gICAgaWYgKGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvcihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm5PbkZ1bmN0aW9uVHlwZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAndW5kZWZpbmVkJyAmJiAhaXNVbmtleWVkVG9wTGV2ZWxGcmFnbWVudCkge1xuICAgICAgLy8gSWYgdGhlIG5ldyBjaGlsZCBpcyB1bmRlZmluZWQsIGFuZCB0aGUgcmV0dXJuIGZpYmVyIGlzIGEgY29tcG9zaXRlXG4gICAgICAvLyBjb21wb25lbnQsIHRocm93IGFuIGVycm9yLiBJZiBGaWJlciByZXR1cm4gdHlwZXMgYXJlIGRpc2FibGVkLFxuICAgICAgLy8gd2UgYWxyZWFkeSB0aHJldyBhYm92ZS5cbiAgICAgIHN3aXRjaCAocmV0dXJuRmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSByZXR1cm5GaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5yZW5kZXIuX2lzTW9ja0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgYWxsb3cgYXV0by1tb2NrcyB0byBwcm9jZWVkIGFzIGlmIHRoZXkncmUgcmV0dXJuaW5nIG51bGwuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIC8vIEludGVudGlvbmFsbHkgZmFsbCB0aHJvdWdoIHRvIHRoZSBuZXh0IGNhc2UsIHdoaWNoIGhhbmRsZXMgYm90aFxuICAgICAgICAvLyBmdW5jdGlvbnMgYW5kIGNsYXNzZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lZCBuby1mYWxsdGhyb3VnaFxuICAgICAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBDb21wb25lbnQgPSByZXR1cm5GaWJlci50eXBlO1xuICAgICAgICAgICAgaW52YXJpYW50KGZhbHNlLCAnJXMoLi4uKTogTm90aGluZyB3YXMgcmV0dXJuZWQgZnJvbSByZW5kZXIuIFRoaXMgdXN1YWxseSBtZWFucyBhIHJldHVybiBzdGF0ZW1lbnQgaXMgbWlzc2luZy4gT3IsIHRvIHJlbmRlciBub3RoaW5nLCByZXR1cm4gbnVsbC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1haW5pbmcgY2FzZXMgYXJlIGFsbCB0cmVhdGVkIGFzIGVtcHR5LlxuICAgIHJldHVybiBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICB9XG5cbiAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzO1xufVxuXG52YXIgcmVjb25jaWxlQ2hpbGRGaWJlcnMgPSBDaGlsZFJlY29uY2lsZXIodHJ1ZSk7XG52YXIgbW91bnRDaGlsZEZpYmVycyA9IENoaWxkUmVjb25jaWxlcihmYWxzZSk7XG5cbmZ1bmN0aW9uIGNsb25lQ2hpbGRGaWJlcnMoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgIShjdXJyZW50JCQxID09PSBudWxsIHx8IHdvcmtJblByb2dyZXNzLmNoaWxkID09PSBjdXJyZW50JCQxLmNoaWxkKSA/IGludmFyaWFudChmYWxzZSwgJ1Jlc3VtaW5nIHdvcmsgbm90IHlldCBpbXBsZW1lbnRlZC4nKSA6IHZvaWQgMDtcblxuICBpZiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3VycmVudENoaWxkID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIHZhciBuZXdDaGlsZCA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnRDaGlsZCwgY3VycmVudENoaWxkLnBlbmRpbmdQcm9wcywgY3VycmVudENoaWxkLmV4cGlyYXRpb25UaW1lKTtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXdDaGlsZDtcblxuICBuZXdDaGlsZC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgd2hpbGUgKGN1cnJlbnRDaGlsZC5zaWJsaW5nICE9PSBudWxsKSB7XG4gICAgY3VycmVudENoaWxkID0gY3VycmVudENoaWxkLnNpYmxpbmc7XG4gICAgbmV3Q2hpbGQgPSBuZXdDaGlsZC5zaWJsaW5nID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudENoaWxkLCBjdXJyZW50Q2hpbGQucGVuZGluZ1Byb3BzLCBjdXJyZW50Q2hpbGQuZXhwaXJhdGlvblRpbWUpO1xuICAgIG5ld0NoaWxkLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICB9XG4gIG5ld0NoaWxkLnNpYmxpbmcgPSBudWxsO1xufVxuXG52YXIgTk9fQ09OVEVYVCA9IHt9O1xuXG52YXIgY29udGV4dFN0YWNrQ3Vyc29yJDEgPSBjcmVhdGVDdXJzb3IoTk9fQ09OVEVYVCk7XG52YXIgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoTk9fQ09OVEVYVCk7XG52YXIgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoTk9fQ09OVEVYVCk7XG5cbmZ1bmN0aW9uIHJlcXVpcmVkQ29udGV4dChjKSB7XG4gICEoYyAhPT0gTk9fQ09OVEVYVCkgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBob3N0IGNvbnRleHQgdG8gZXhpc3QuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiBnZXRSb290SG9zdENvbnRhaW5lcigpIHtcbiAgdmFyIHJvb3RJbnN0YW5jZSA9IHJlcXVpcmVkQ29udGV4dChyb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgcmV0dXJuIHJvb3RJbnN0YW5jZTtcbn1cblxuZnVuY3Rpb24gcHVzaEhvc3RDb250YWluZXIoZmliZXIsIG5leHRSb290SW5zdGFuY2UpIHtcbiAgLy8gUHVzaCBjdXJyZW50IHJvb3QgaW5zdGFuY2Ugb250byB0aGUgc3RhY2s7XG4gIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHJlc2V0IHJvb3Qgd2hlbiBwb3J0YWxzIGFyZSBwb3BwZWQuXG4gIHB1c2gocm9vdEluc3RhbmNlU3RhY2tDdXJzb3IsIG5leHRSb290SW5zdGFuY2UsIGZpYmVyKTtcbiAgLy8gVHJhY2sgdGhlIGNvbnRleHQgYW5kIHRoZSBGaWJlciB0aGF0IHByb3ZpZGVkIGl0LlxuICAvLyBUaGlzIGVuYWJsZXMgdXMgdG8gcG9wIG9ubHkgRmliZXJzIHRoYXQgcHJvdmlkZSB1bmlxdWUgY29udGV4dHMuXG4gIHB1c2goY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyLCBmaWJlcik7XG5cbiAgLy8gRmluYWxseSwgd2UgbmVlZCB0byBwdXNoIHRoZSBob3N0IGNvbnRleHQgdG8gdGhlIHN0YWNrLlxuICAvLyBIb3dldmVyLCB3ZSBjYW4ndCBqdXN0IGNhbGwgZ2V0Um9vdEhvc3RDb250ZXh0KCkgYW5kIHB1c2ggaXQgYmVjYXVzZVxuICAvLyB3ZSdkIGhhdmUgYSBkaWZmZXJlbnQgbnVtYmVyIG9mIGVudHJpZXMgb24gdGhlIHN0YWNrIGRlcGVuZGluZyBvblxuICAvLyB3aGV0aGVyIGdldFJvb3RIb3N0Q29udGV4dCgpIHRocm93cyBzb21ld2hlcmUgaW4gcmVuZGVyZXIgY29kZSBvciBub3QuXG4gIC8vIFNvIHdlIHB1c2ggYW4gZW1wdHkgdmFsdWUgZmlyc3QuIFRoaXMgbGV0cyB1cyBzYWZlbHkgdW53aW5kIG9uIGVycm9ycy5cbiAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IkMSwgTk9fQ09OVEVYVCwgZmliZXIpO1xuICB2YXIgbmV4dFJvb3RDb250ZXh0ID0gZ2V0Um9vdEhvc3RDb250ZXh0KG5leHRSb290SW5zdGFuY2UpO1xuICAvLyBOb3cgdGhhdCB3ZSBrbm93IHRoaXMgZnVuY3Rpb24gZG9lc24ndCB0aHJvdywgcmVwbGFjZSBpdC5cbiAgcG9wKGNvbnRleHRTdGFja0N1cnNvciQxLCBmaWJlcik7XG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yJDEsIG5leHRSb290Q29udGV4dCwgZmliZXIpO1xufVxuXG5mdW5jdGlvbiBwb3BIb3N0Q29udGFpbmVyKGZpYmVyKSB7XG4gIHBvcChjb250ZXh0U3RhY2tDdXJzb3IkMSwgZmliZXIpO1xuICBwb3AoY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyKTtcbiAgcG9wKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLCBmaWJlcik7XG59XG5cbmZ1bmN0aW9uIGdldEhvc3RDb250ZXh0KCkge1xuICB2YXIgY29udGV4dCA9IHJlcXVpcmVkQ29udGV4dChjb250ZXh0U3RhY2tDdXJzb3IkMS5jdXJyZW50KTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGV4dChmaWJlcikge1xuICB2YXIgcm9vdEluc3RhbmNlID0gcmVxdWlyZWRDb250ZXh0KHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICB2YXIgY29udGV4dCA9IHJlcXVpcmVkQ29udGV4dChjb250ZXh0U3RhY2tDdXJzb3IkMS5jdXJyZW50KTtcbiAgdmFyIG5leHRDb250ZXh0ID0gZ2V0Q2hpbGRIb3N0Q29udGV4dChjb250ZXh0LCBmaWJlci50eXBlLCByb290SW5zdGFuY2UpO1xuXG4gIC8vIERvbid0IHB1c2ggdGhpcyBGaWJlcidzIGNvbnRleHQgdW5sZXNzIGl0J3MgdW5pcXVlLlxuICBpZiAoY29udGV4dCA9PT0gbmV4dENvbnRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUcmFjayB0aGUgY29udGV4dCBhbmQgdGhlIEZpYmVyIHRoYXQgcHJvdmlkZWQgaXQuXG4gIC8vIFRoaXMgZW5hYmxlcyB1cyB0byBwb3Agb25seSBGaWJlcnMgdGhhdCBwcm92aWRlIHVuaXF1ZSBjb250ZXh0cy5cbiAgcHVzaChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIsIGZpYmVyKTtcbiAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IkMSwgbmV4dENvbnRleHQsIGZpYmVyKTtcbn1cblxuZnVuY3Rpb24gcG9wSG9zdENvbnRleHQoZmliZXIpIHtcbiAgLy8gRG8gbm90IHBvcCB1bmxlc3MgdGhpcyBGaWJlciBwcm92aWRlZCB0aGUgY3VycmVudCBjb250ZXh0LlxuICAvLyBwdXNoSG9zdENvbnRleHQoKSBvbmx5IHB1c2hlcyBGaWJlcnMgdGhhdCBwcm92aWRlIHVuaXF1ZSBjb250ZXh0cy5cbiAgaWYgKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLmN1cnJlbnQgIT09IGZpYmVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcG9wKGNvbnRleHRTdGFja0N1cnNvciQxLCBmaWJlcik7XG4gIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIpO1xufVxuXG52YXIgTm9FZmZlY3QkMSA9IC8qICAgICAgICAgICAgICovMDtcbnZhciBVbm1vdW50U25hcHNob3QgPSAvKiAgICAgICovMjtcbnZhciBVbm1vdW50TXV0YXRpb24gPSAvKiAgICAgICovNDtcbnZhciBNb3VudE11dGF0aW9uID0gLyogICAgICAgICovODtcbnZhciBVbm1vdW50TGF5b3V0ID0gLyogICAgICAgICovMTY7XG52YXIgTW91bnRMYXlvdXQgPSAvKiAgICAgICAgICAqLzMyO1xudmFyIE1vdW50UGFzc2l2ZSA9IC8qICAgICAgICAgKi82NDtcbnZhciBVbm1vdW50UGFzc2l2ZSA9IC8qICAgICAgICovMTI4O1xuXG52YXIgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcblxuXG52YXIgZGlkV2FybkFib3V0TWlzbWF0Y2hlZEhvb2tzRm9yQ29tcG9uZW50ID0gdm9pZCAwO1xue1xuICBkaWRXYXJuQWJvdXRNaXNtYXRjaGVkSG9va3NGb3JDb21wb25lbnQgPSBuZXcgU2V0KCk7XG59XG5cbi8vIFRoZXNlIGFyZSBzZXQgcmlnaHQgYmVmb3JlIGNhbGxpbmcgdGhlIGNvbXBvbmVudC5cbnZhciByZW5kZXJFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbi8vIFRoZSB3b3JrLWluLXByb2dyZXNzIGZpYmVyLiBJJ3ZlIG5hbWVkIGl0IGRpZmZlcmVudGx5IHRvIGRpc3Rpbmd1aXNoIGl0IGZyb21cbi8vIHRoZSB3b3JrLWluLXByb2dyZXNzIGhvb2suXG52YXIgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSA9IG51bGw7XG5cbi8vIEhvb2tzIGFyZSBzdG9yZWQgYXMgYSBsaW5rZWQgbGlzdCBvbiB0aGUgZmliZXIncyBtZW1vaXplZFN0YXRlIGZpZWxkLiBUaGVcbi8vIGN1cnJlbnQgaG9vayBsaXN0IGlzIHRoZSBsaXN0IHRoYXQgYmVsb25ncyB0byB0aGUgY3VycmVudCBmaWJlci4gVGhlXG4vLyB3b3JrLWluLXByb2dyZXNzIGhvb2sgbGlzdCBpcyBhIG5ldyBsaXN0IHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGVcbi8vIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIuXG52YXIgY3VycmVudEhvb2sgPSBudWxsO1xudmFyIG5leHRDdXJyZW50SG9vayA9IG51bGw7XG52YXIgZmlyc3RXb3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsO1xudmFyIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGw7XG52YXIgbmV4dFdvcmtJblByb2dyZXNzSG9vayA9IG51bGw7XG5cbnZhciByZW1haW5pbmdFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbnZhciBjb21wb25lbnRVcGRhdGVRdWV1ZSA9IG51bGw7XG52YXIgc2lkZUVmZmVjdFRhZyA9IDA7XG5cbi8vIFVwZGF0ZXMgc2NoZWR1bGVkIGR1cmluZyByZW5kZXIgd2lsbCB0cmlnZ2VyIGFuIGltbWVkaWF0ZSByZS1yZW5kZXIgYXQgdGhlXG4vLyBlbmQgb2YgdGhlIGN1cnJlbnQgcGFzcy4gV2UgY2FuJ3Qgc3RvcmUgdGhlc2UgdXBkYXRlcyBvbiB0aGUgbm9ybWFsIHF1ZXVlLFxuLy8gYmVjYXVzZSBpZiB0aGUgd29yayBpcyBhYm9ydGVkLCB0aGV5IHNob3VsZCBiZSBkaXNjYXJkZWQuIEJlY2F1c2UgdGhpcyBpc1xuLy8gYSByZWxhdGl2ZWx5IHJhcmUgY2FzZSwgd2UgYWxzbyBkb24ndCB3YW50IHRvIGFkZCBhbiBhZGRpdGlvbmFsIGZpZWxkIHRvXG4vLyBlaXRoZXIgdGhlIGhvb2sgb3IgcXVldWUgb2JqZWN0IHR5cGVzLiBTbyB3ZSBzdG9yZSB0aGVtIGluIGEgbGF6aWx5IGNyZWF0ZVxuLy8gbWFwIG9mIHF1ZXVlIC0+IHJlbmRlci1waGFzZSB1cGRhdGVzLCB3aGljaCBhcmUgZGlzY2FyZGVkIG9uY2UgdGhlIGNvbXBvbmVudFxuLy8gY29tcGxldGVzIHdpdGhvdXQgcmUtcmVuZGVyaW5nLlxuXG4vLyBXaGV0aGVyIGFuIHVwZGF0ZSB3YXMgc2NoZWR1bGVkIGR1cmluZyB0aGUgY3VycmVudGx5IGV4ZWN1dGluZyByZW5kZXIgcGFzcy5cbnZhciBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gZmFsc2U7XG4vLyBMYXppbHkgY3JlYXRlZCBtYXAgb2YgcmVuZGVyLXBoYXNlIHVwZGF0ZXNcbnZhciByZW5kZXJQaGFzZVVwZGF0ZXMgPSBudWxsO1xuLy8gQ291bnRlciB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzLlxudmFyIG51bWJlck9mUmVSZW5kZXJzID0gMDtcbnZhciBSRV9SRU5ERVJfTElNSVQgPSAyNTtcblxuLy8gSW4gREVWLCB0aGlzIGlzIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50bHkgZXhlY3V0aW5nIHByaW1pdGl2ZSBob29rXG52YXIgY3VycmVudEhvb2tOYW1lSW5EZXYgPSBudWxsO1xuXG4vLyBJbiBERVYsIHRoaXMgbGlzdCBlbnN1cmVzIHRoYXQgaG9va3MgYXJlIGNhbGxlZCBpbiB0aGUgc2FtZSBvcmRlciBiZXR3ZWVuIHJlbmRlcnMuXG4vLyBUaGUgbGlzdCBzdG9yZXMgdGhlIG9yZGVyIG9mIGhvb2tzIHVzZWQgZHVyaW5nIHRoZSBpbml0aWFsIHJlbmRlciAobW91bnQpLlxuLy8gU3Vic2VxdWVudCByZW5kZXJzICh1cGRhdGVzKSByZWZlcmVuY2UgdGhpcyBsaXN0LlxudmFyIGhvb2tUeXBlc0RldiA9IG51bGw7XG52YXIgaG9va1R5cGVzVXBkYXRlSW5kZXhEZXYgPSAtMTtcblxuZnVuY3Rpb24gbW91bnRIb29rVHlwZXNEZXYoKSB7XG4gIHtcbiAgICB2YXIgaG9va05hbWUgPSBjdXJyZW50SG9va05hbWVJbkRldjtcblxuICAgIGlmIChob29rVHlwZXNEZXYgPT09IG51bGwpIHtcbiAgICAgIGhvb2tUeXBlc0RldiA9IFtob29rTmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGhvb2tUeXBlc0Rldi5wdXNoKGhvb2tOYW1lKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlSG9va1R5cGVzRGV2KCkge1xuICB7XG4gICAgdmFyIGhvb2tOYW1lID0gY3VycmVudEhvb2tOYW1lSW5EZXY7XG5cbiAgICBpZiAoaG9va1R5cGVzRGV2ICE9PSBudWxsKSB7XG4gICAgICBob29rVHlwZXNVcGRhdGVJbmRleERldisrO1xuICAgICAgaWYgKGhvb2tUeXBlc0Rldltob29rVHlwZXNVcGRhdGVJbmRleERldl0gIT09IGhvb2tOYW1lKSB7XG4gICAgICAgIHdhcm5Pbkhvb2tNaXNtYXRjaEluRGV2KGhvb2tOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gd2Fybk9uSG9va01pc21hdGNoSW5EZXYoY3VycmVudEhvb2tOYW1lKSB7XG4gIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS50eXBlKTtcbiAgICBpZiAoIWRpZFdhcm5BYm91dE1pc21hdGNoZWRIb29rc0ZvckNvbXBvbmVudC5oYXMoY29tcG9uZW50TmFtZSkpIHtcbiAgICAgIGRpZFdhcm5BYm91dE1pc21hdGNoZWRIb29rc0ZvckNvbXBvbmVudC5hZGQoY29tcG9uZW50TmFtZSk7XG5cbiAgICAgIGlmIChob29rVHlwZXNEZXYgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHRhYmxlID0gJyc7XG5cbiAgICAgICAgdmFyIHNlY29uZENvbHVtblN0YXJ0ID0gMzA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gaG9va1R5cGVzVXBkYXRlSW5kZXhEZXY7IGkrKykge1xuICAgICAgICAgIHZhciBvbGRIb29rTmFtZSA9IGhvb2tUeXBlc0RldltpXTtcbiAgICAgICAgICB2YXIgbmV3SG9va05hbWUgPSBpID09PSBob29rVHlwZXNVcGRhdGVJbmRleERldiA/IGN1cnJlbnRIb29rTmFtZSA6IG9sZEhvb2tOYW1lO1xuXG4gICAgICAgICAgdmFyIHJvdyA9IGkgKyAxICsgJy4gJyArIG9sZEhvb2tOYW1lO1xuXG4gICAgICAgICAgLy8gRXh0cmEgc3BhY2Ugc28gc2Vjb25kIGNvbHVtbiBsaW5lcyB1cFxuICAgICAgICAgIC8vIGxvbCBAIElFIG5vdCBzdXBwb3J0aW5nIFN0cmluZyNyZXBlYXRcbiAgICAgICAgICB3aGlsZSAocm93Lmxlbmd0aCA8IHNlY29uZENvbHVtblN0YXJ0KSB7XG4gICAgICAgICAgICByb3cgKz0gJyAnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJvdyArPSBuZXdIb29rTmFtZSArICdcXG4nO1xuXG4gICAgICAgICAgdGFibGUgKz0gcm93O1xuICAgICAgICB9XG5cbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVhY3QgaGFzIGRldGVjdGVkIGEgY2hhbmdlIGluIHRoZSBvcmRlciBvZiBIb29rcyBjYWxsZWQgYnkgJXMuICcgKyAnVGhpcyB3aWxsIGxlYWQgdG8gYnVncyBhbmQgZXJyb3JzIGlmIG5vdCBmaXhlZC4gJyArICdGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcmVhZCB0aGUgUnVsZXMgb2YgSG9va3M6IGh0dHBzOi8vZmIubWUvcnVsZXMtb2YtaG9va3NcXG5cXG4nICsgJyAgIFByZXZpb3VzIHJlbmRlciAgICAgICAgICAgIE5leHQgcmVuZGVyXFxuJyArICcgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nICsgJyVzJyArICcgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cXG4nLCBjb21wb25lbnROYW1lLCB0YWJsZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRocm93SW52YWxpZEhvb2tFcnJvcigpIHtcbiAgaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCBob29rIGNhbGwuIEhvb2tzIGNhbiBvbmx5IGJlIGNhbGxlZCBpbnNpZGUgb2YgdGhlIGJvZHkgb2YgYSBmdW5jdGlvbiBjb21wb25lbnQuIFRoaXMgY291bGQgaGFwcGVuIGZvciBvbmUgb2YgdGhlIGZvbGxvd2luZyByZWFzb25zOlxcbjEuIFlvdSBtaWdodCBoYXZlIG1pc21hdGNoaW5nIHZlcnNpb25zIG9mIFJlYWN0IGFuZCB0aGUgcmVuZGVyZXIgKHN1Y2ggYXMgUmVhY3QgRE9NKVxcbjIuIFlvdSBtaWdodCBiZSBicmVha2luZyB0aGUgUnVsZXMgb2YgSG9va3NcXG4zLiBZb3UgbWlnaHQgaGF2ZSBtb3JlIHRoYW4gb25lIGNvcHkgb2YgUmVhY3QgaW4gdGhlIHNhbWUgYXBwXFxuU2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtaW52YWxpZC1ob29rLWNhbGwgZm9yIHRpcHMgYWJvdXQgaG93IHRvIGRlYnVnIGFuZCBmaXggdGhpcyBwcm9ibGVtLicpO1xufVxuXG5mdW5jdGlvbiBhcmVIb29rSW5wdXRzRXF1YWwobmV4dERlcHMsIHByZXZEZXBzKSB7XG4gIGlmIChwcmV2RGVwcyA9PT0gbnVsbCkge1xuICAgIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJyVzIHJlY2VpdmVkIGEgZmluYWwgYXJndW1lbnQgZHVyaW5nIHRoaXMgcmVuZGVyLCBidXQgbm90IGR1cmluZyAnICsgJ3RoZSBwcmV2aW91cyByZW5kZXIuIEV2ZW4gdGhvdWdoIHRoZSBmaW5hbCBhcmd1bWVudCBpcyBvcHRpb25hbCwgJyArICdpdHMgdHlwZSBjYW5ub3QgY2hhbmdlIGJldHdlZW4gcmVuZGVycy4nLCBjdXJyZW50SG9va05hbWVJbkRldik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHtcbiAgICAvLyBEb24ndCBib3RoZXIgY29tcGFyaW5nIGxlbmd0aHMgaW4gcHJvZCBiZWNhdXNlIHRoZXNlIGFycmF5cyBzaG91bGQgYmVcbiAgICAvLyBwYXNzZWQgaW5saW5lLlxuICAgIGlmIChuZXh0RGVwcy5sZW5ndGggIT09IHByZXZEZXBzLmxlbmd0aCkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnVGhlIGZpbmFsIGFyZ3VtZW50IHBhc3NlZCB0byAlcyBjaGFuZ2VkIHNpemUgYmV0d2VlbiByZW5kZXJzLiBUaGUgJyArICdvcmRlciBhbmQgc2l6ZSBvZiB0aGlzIGFycmF5IG11c3QgcmVtYWluIGNvbnN0YW50LlxcblxcbicgKyAnUHJldmlvdXM6ICVzXFxuJyArICdJbmNvbWluZzogJXMnLCBjdXJyZW50SG9va05hbWVJbkRldiwgJ1snICsgbmV4dERlcHMuam9pbignLCAnKSArICddJywgJ1snICsgcHJldkRlcHMuam9pbignLCAnKSArICddJyk7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJldkRlcHMubGVuZ3RoICYmIGkgPCBuZXh0RGVwcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpcyhuZXh0RGVwc1tpXSwgcHJldkRlcHNbaV0pKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZW5kZXJXaXRoSG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcHJvcHMsIHJlZk9yQ29udGV4dCwgbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHJlbmRlckV4cGlyYXRpb25UaW1lID0gbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gd29ya0luUHJvZ3Jlc3M7XG4gIG5leHRDdXJyZW50SG9vayA9IGN1cnJlbnQgIT09IG51bGwgPyBjdXJyZW50Lm1lbW9pemVkU3RhdGUgOiBudWxsO1xuXG4gIHtcbiAgICBob29rVHlwZXNEZXYgPSBjdXJyZW50ICE9PSBudWxsID8gY3VycmVudC5fZGVidWdIb29rVHlwZXMgOiBudWxsO1xuICAgIGhvb2tUeXBlc1VwZGF0ZUluZGV4RGV2ID0gLTE7XG4gIH1cblxuICAvLyBUaGUgZm9sbG93aW5nIHNob3VsZCBoYXZlIGFscmVhZHkgYmVlbiByZXNldFxuICAvLyBjdXJyZW50SG9vayA9IG51bGw7XG4gIC8vIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGw7XG5cbiAgLy8gcmVtYWluaW5nRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gIC8vIGNvbXBvbmVudFVwZGF0ZVF1ZXVlID0gbnVsbDtcblxuICAvLyBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gZmFsc2U7XG4gIC8vIHJlbmRlclBoYXNlVXBkYXRlcyA9IG51bGw7XG4gIC8vIG51bWJlck9mUmVSZW5kZXJzID0gMDtcbiAgLy8gc2lkZUVmZmVjdFRhZyA9IDA7XG5cbiAgLy8gVE9ETyBXYXJuIGlmIG5vIGhvb2tzIGFyZSB1c2VkIGF0IGFsbCBkdXJpbmcgbW91bnQsIHRoZW4gc29tZSBhcmUgdXNlZCBkdXJpbmcgdXBkYXRlLlxuICAvLyBDdXJyZW50bHkgd2Ugd2lsbCBpZGVudGlmeSB0aGUgdXBkYXRlIHJlbmRlciBhcyBhIG1vdW50IGJlY2F1c2UgbmV4dEN1cnJlbnRIb29rID09PSBudWxsLlxuICAvLyBUaGlzIGlzIHRyaWNreSBiZWNhdXNlIGl0J3MgdmFsaWQgZm9yIGNlcnRhaW4gdHlwZXMgb2YgY29tcG9uZW50cyAoZS5nLiBSZWFjdC5sYXp5KVxuXG4gIC8vIFVzaW5nIG5leHRDdXJyZW50SG9vayB0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gbW91bnQvdXBkYXRlIG9ubHkgd29ya3MgaWYgYXQgbGVhc3Qgb25lIHN0YXRlZnVsIGhvb2sgaXMgdXNlZC5cbiAgLy8gTm9uLXN0YXRlZnVsIGhvb2tzIChlLmcuIGNvbnRleHQpIGRvbid0IGdldCBhZGRlZCB0byBtZW1vaXplZFN0YXRlLFxuICAvLyBzbyBuZXh0Q3VycmVudEhvb2sgd291bGQgYmUgbnVsbCBkdXJpbmcgdXBkYXRlcyBhbmQgbW91bnRzLlxuICB7XG4gICAgaWYgKG5leHRDdXJyZW50SG9vayAhPT0gbnVsbCkge1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuICAgIH0gZWxzZSBpZiAoaG9va1R5cGVzRGV2ICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIGRpc3BhdGNoZXIgaGFuZGxlcyBhbiBlZGdlIGNhc2Ugd2hlcmUgYSBjb21wb25lbnQgaXMgdXBkYXRpbmcsXG4gICAgICAvLyBidXQgbm8gc3RhdGVmdWwgaG9va3MgaGF2ZSBiZWVuIHVzZWQuXG4gICAgICAvLyBXZSB3YW50IHRvIG1hdGNoIHRoZSBwcm9kdWN0aW9uIGNvZGUgYmVoYXZpb3IgKHdoaWNoIHdpbGwgdXNlIEhvb2tzRGlzcGF0Y2hlck9uTW91bnQpLFxuICAgICAgLy8gYnV0IHdpdGggdGhlIGV4dHJhIERFViB2YWxpZGF0aW9uIHRvIGVuc3VyZSBob29rcyBvcmRlcmluZyBoYXNuJ3QgY2hhbmdlZC5cbiAgICAgIC8vIFRoaXMgZGlzcGF0Y2hlciBkb2VzIHRoYXQuXG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEhvb2tzRGlzcGF0Y2hlck9uTW91bnRXaXRoSG9va1R5cGVzSW5ERVY7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjaGlsZHJlbiA9IENvbXBvbmVudChwcm9wcywgcmVmT3JDb250ZXh0KTtcblxuICBpZiAoZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSkge1xuICAgIGRvIHtcbiAgICAgIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSBmYWxzZTtcbiAgICAgIG51bWJlck9mUmVSZW5kZXJzICs9IDE7XG5cbiAgICAgIC8vIFN0YXJ0IG92ZXIgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0XG4gICAgICBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50ICE9PSBudWxsID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgICAgIG5leHRXb3JrSW5Qcm9ncmVzc0hvb2sgPSBmaXJzdFdvcmtJblByb2dyZXNzSG9vaztcblxuICAgICAgY3VycmVudEhvb2sgPSBudWxsO1xuICAgICAgd29ya0luUHJvZ3Jlc3NIb29rID0gbnVsbDtcbiAgICAgIGNvbXBvbmVudFVwZGF0ZVF1ZXVlID0gbnVsbDtcblxuICAgICAge1xuICAgICAgICAvLyBBbHNvIHZhbGlkYXRlIGhvb2sgb3JkZXIgZm9yIGNhc2NhZGluZyB1cGRhdGVzLlxuICAgICAgICBob29rVHlwZXNVcGRhdGVJbmRleERldiA9IC0xO1xuICAgICAgfVxuXG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVY7XG5cbiAgICAgIGNoaWxkcmVuID0gQ29tcG9uZW50KHByb3BzLCByZWZPckNvbnRleHQpO1xuICAgIH0gd2hpbGUgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUpO1xuXG4gICAgcmVuZGVyUGhhc2VVcGRhdGVzID0gbnVsbDtcbiAgICBudW1iZXJPZlJlUmVuZGVycyA9IDA7XG4gIH1cblxuICAvLyBXZSBjYW4gYXNzdW1lIHRoZSBwcmV2aW91cyBkaXNwYXRjaGVyIGlzIGFsd2F5cyB0aGlzIG9uZSwgc2luY2Ugd2Ugc2V0IGl0XG4gIC8vIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHJlbmRlciBwaGFzZSBhbmQgdGhlcmUncyBubyByZS1lbnRyYW5jeS5cbiAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG5cbiAgdmFyIHJlbmRlcmVkV29yayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDE7XG5cbiAgcmVuZGVyZWRXb3JrLm1lbW9pemVkU3RhdGUgPSBmaXJzdFdvcmtJblByb2dyZXNzSG9vaztcbiAgcmVuZGVyZWRXb3JrLmV4cGlyYXRpb25UaW1lID0gcmVtYWluaW5nRXhwaXJhdGlvblRpbWU7XG4gIHJlbmRlcmVkV29yay51cGRhdGVRdWV1ZSA9IGNvbXBvbmVudFVwZGF0ZVF1ZXVlO1xuICByZW5kZXJlZFdvcmsuZWZmZWN0VGFnIHw9IHNpZGVFZmZlY3RUYWc7XG5cbiAge1xuICAgIHJlbmRlcmVkV29yay5fZGVidWdIb29rVHlwZXMgPSBob29rVHlwZXNEZXY7XG4gIH1cblxuICAvLyBUaGlzIGNoZWNrIHVzZXMgY3VycmVudEhvb2sgc28gdGhhdCBpdCB3b3JrcyB0aGUgc2FtZSBpbiBERVYgYW5kIHByb2QgYnVuZGxlcy5cbiAgLy8gaG9va1R5cGVzRGV2IGNvdWxkIGNhdGNoIG1vcmUgY2FzZXMgKGUuZy4gY29udGV4dCkgYnV0IG9ubHkgaW4gREVWIGJ1bmRsZXMuXG4gIHZhciBkaWRSZW5kZXJUb29GZXdIb29rcyA9IGN1cnJlbnRIb29rICE9PSBudWxsICYmIGN1cnJlbnRIb29rLm5leHQgIT09IG51bGw7XG5cbiAgcmVuZGVyRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuXG4gIGN1cnJlbnRIb29rID0gbnVsbDtcbiAgbmV4dEN1cnJlbnRIb29rID0gbnVsbDtcbiAgZmlyc3RXb3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsO1xuICBuZXh0V29ya0luUHJvZ3Jlc3NIb29rID0gbnVsbDtcblxuICB7XG4gICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSBudWxsO1xuICAgIGhvb2tUeXBlc0RldiA9IG51bGw7XG4gICAgaG9va1R5cGVzVXBkYXRlSW5kZXhEZXYgPSAtMTtcbiAgfVxuXG4gIHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuICBjb21wb25lbnRVcGRhdGVRdWV1ZSA9IG51bGw7XG4gIHNpZGVFZmZlY3RUYWcgPSAwO1xuXG4gIC8vIFRoZXNlIHdlcmUgcmVzZXQgYWJvdmVcbiAgLy8gZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9IGZhbHNlO1xuICAvLyByZW5kZXJQaGFzZVVwZGF0ZXMgPSBudWxsO1xuICAvLyBudW1iZXJPZlJlUmVuZGVycyA9IDA7XG5cbiAgISFkaWRSZW5kZXJUb29GZXdIb29rcyA/IGludmFyaWFudChmYWxzZSwgJ1JlbmRlcmVkIGZld2VyIGhvb2tzIHRoYW4gZXhwZWN0ZWQuIFRoaXMgbWF5IGJlIGNhdXNlZCBieSBhbiBhY2NpZGVudGFsIGVhcmx5IHJldHVybiBzdGF0ZW1lbnQuJykgOiB2b2lkIDA7XG5cbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGV4cGlyYXRpb25UaW1lKSB7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnICY9IH4oUGFzc2l2ZSB8IFVwZGF0ZSk7XG4gIGlmIChjdXJyZW50LmV4cGlyYXRpb25UaW1lIDw9IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgY3VycmVudC5leHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldEhvb2tzKCkge1xuICAvLyBXZSBjYW4gYXNzdW1lIHRoZSBwcmV2aW91cyBkaXNwYXRjaGVyIGlzIGFsd2F5cyB0aGlzIG9uZSwgc2luY2Ugd2Ugc2V0IGl0XG4gIC8vIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHJlbmRlciBwaGFzZSBhbmQgdGhlcmUncyBubyByZS1lbnRyYW5jeS5cbiAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG5cbiAgLy8gVGhpcyBpcyB1c2VkIHRvIHJlc2V0IHRoZSBzdGF0ZSBvZiB0aGlzIG1vZHVsZSB3aGVuIGEgY29tcG9uZW50IHRocm93cy5cbiAgLy8gSXQncyBhbHNvIGNhbGxlZCBpbnNpZGUgbW91bnRJbmRldGVybWluYXRlQ29tcG9uZW50IGlmIHdlIGRldGVybWluZSB0aGVcbiAgLy8gY29tcG9uZW50IGlzIGEgbW9kdWxlLXN0eWxlIGNvbXBvbmVudC5cbiAgcmVuZGVyRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuXG4gIGN1cnJlbnRIb29rID0gbnVsbDtcbiAgbmV4dEN1cnJlbnRIb29rID0gbnVsbDtcbiAgZmlyc3RXb3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsO1xuICBuZXh0V29ya0luUHJvZ3Jlc3NIb29rID0gbnVsbDtcblxuICB7XG4gICAgaG9va1R5cGVzRGV2ID0gbnVsbDtcbiAgICBob29rVHlwZXNVcGRhdGVJbmRleERldiA9IC0xO1xuXG4gICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSBudWxsO1xuICB9XG5cbiAgcmVtYWluaW5nRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gIGNvbXBvbmVudFVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgc2lkZUVmZmVjdFRhZyA9IDA7XG5cbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9IGZhbHNlO1xuICByZW5kZXJQaGFzZVVwZGF0ZXMgPSBudWxsO1xuICBudW1iZXJPZlJlUmVuZGVycyA9IDA7XG59XG5cbmZ1bmN0aW9uIG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkge1xuICB2YXIgaG9vayA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBudWxsLFxuXG4gICAgYmFzZVN0YXRlOiBudWxsLFxuICAgIHF1ZXVlOiBudWxsLFxuICAgIGJhc2VVcGRhdGU6IG51bGwsXG5cbiAgICBuZXh0OiBudWxsXG4gIH07XG5cbiAgaWYgKHdvcmtJblByb2dyZXNzSG9vayA9PT0gbnVsbCkge1xuICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGhvb2sgaW4gdGhlIGxpc3RcbiAgICBmaXJzdFdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vayA9IGhvb2s7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXBwZW5kIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RcbiAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSB3b3JrSW5Qcm9ncmVzc0hvb2submV4dCA9IGhvb2s7XG4gIH1cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzSG9vaztcbn1cblxuZnVuY3Rpb24gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCkge1xuICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYm90aCBmb3IgdXBkYXRlcyBhbmQgZm9yIHJlLXJlbmRlcnMgdHJpZ2dlcmVkIGJ5IGFcbiAgLy8gcmVuZGVyIHBoYXNlIHVwZGF0ZS4gSXQgYXNzdW1lcyB0aGVyZSBpcyBlaXRoZXIgYSBjdXJyZW50IGhvb2sgd2UgY2FuXG4gIC8vIGNsb25lLCBvciBhIHdvcmstaW4tcHJvZ3Jlc3MgaG9vayBmcm9tIGEgcHJldmlvdXMgcmVuZGVyIHBhc3MgdGhhdCB3ZSBjYW5cbiAgLy8gdXNlIGFzIGEgYmFzZS4gV2hlbiB3ZSByZWFjaCB0aGUgZW5kIG9mIHRoZSBiYXNlIGxpc3QsIHdlIG11c3Qgc3dpdGNoIHRvXG4gIC8vIHRoZSBkaXNwYXRjaGVyIHVzZWQgZm9yIG1vdW50cy5cbiAgaWYgKG5leHRXb3JrSW5Qcm9ncmVzc0hvb2sgIT09IG51bGwpIHtcbiAgICAvLyBUaGVyZSdzIGFscmVhZHkgYSB3b3JrLWluLXByb2dyZXNzLiBSZXVzZSBpdC5cbiAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBuZXh0V29ya0luUHJvZ3Jlc3NIb29rO1xuICAgIG5leHRXb3JrSW5Qcm9ncmVzc0hvb2sgPSB3b3JrSW5Qcm9ncmVzc0hvb2submV4dDtcblxuICAgIGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rO1xuICAgIG5leHRDdXJyZW50SG9vayA9IGN1cnJlbnRIb29rICE9PSBudWxsID8gY3VycmVudEhvb2submV4dCA6IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2xvbmUgZnJvbSB0aGUgY3VycmVudCBob29rLlxuICAgICEobmV4dEN1cnJlbnRIb29rICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ1JlbmRlcmVkIG1vcmUgaG9va3MgdGhhbiBkdXJpbmcgdGhlIHByZXZpb3VzIHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBjdXJyZW50SG9vayA9IG5leHRDdXJyZW50SG9vaztcblxuICAgIHZhciBuZXdIb29rID0ge1xuICAgICAgbWVtb2l6ZWRTdGF0ZTogY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcblxuICAgICAgYmFzZVN0YXRlOiBjdXJyZW50SG9vay5iYXNlU3RhdGUsXG4gICAgICBxdWV1ZTogY3VycmVudEhvb2sucXVldWUsXG4gICAgICBiYXNlVXBkYXRlOiBjdXJyZW50SG9vay5iYXNlVXBkYXRlLFxuXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcblxuICAgIGlmICh3b3JrSW5Qcm9ncmVzc0hvb2sgPT09IG51bGwpIHtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGhvb2sgaW4gdGhlIGxpc3QuXG4gICAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBmaXJzdFdvcmtJblByb2dyZXNzSG9vayA9IG5ld0hvb2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFwcGVuZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuICAgICAgd29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQgPSBuZXdIb29rO1xuICAgIH1cbiAgICBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50SG9vay5uZXh0O1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0hvb2s7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSB7XG4gIHJldHVybiB7XG4gICAgbGFzdEVmZmVjdDogbnVsbFxuICB9O1xufVxuXG5mdW5jdGlvbiBiYXNpY1N0YXRlUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nID8gYWN0aW9uKHN0YXRlKSA6IGFjdGlvbjtcbn1cblxuZnVuY3Rpb24gbW91bnRSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgaW5pdGlhbFN0YXRlID0gdm9pZCAwO1xuICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaW5pdGlhbFN0YXRlID0gaW5pdChpbml0aWFsQXJnKTtcbiAgfSBlbHNlIHtcbiAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsQXJnO1xuICB9XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IGhvb2suYmFzZVN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICB2YXIgcXVldWUgPSBob29rLnF1ZXVlID0ge1xuICAgIGxhc3Q6IG51bGwsXG4gICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogcmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gIH07XG4gIHZhciBkaXNwYXRjaCA9IHF1ZXVlLmRpc3BhdGNoID0gZGlzcGF0Y2hBY3Rpb24uYmluZChudWxsLFxuICAvLyBGbG93IGRvZXNuJ3Qga25vdyB0aGlzIGlzIG5vbi1udWxsLCBidXQgd2UgZG8uXG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsIHF1ZXVlKTtcbiAgcmV0dXJuIFtob29rLm1lbW9pemVkU3RhdGUsIGRpc3BhdGNoXTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBxdWV1ZSA9IGhvb2sucXVldWU7XG4gICEocXVldWUgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIGhhdmUgYSBxdWV1ZS4gVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuXG4gIGlmIChudW1iZXJPZlJlUmVuZGVycyA+IDApIHtcbiAgICAvLyBUaGlzIGlzIGEgcmUtcmVuZGVyLiBBcHBseSB0aGUgbmV3IHJlbmRlciBwaGFzZSB1cGRhdGVzIHRvIHRoZSBwcmV2aW91c1xuICAgIHZhciBfZGlzcGF0Y2ggPSBxdWV1ZS5kaXNwYXRjaDtcbiAgICBpZiAocmVuZGVyUGhhc2VVcGRhdGVzICE9PSBudWxsKSB7XG4gICAgICAvLyBSZW5kZXIgcGhhc2UgdXBkYXRlcyBhcmUgc3RvcmVkIGluIGEgbWFwIG9mIHF1ZXVlIC0+IGxpbmtlZCBsaXN0XG4gICAgICB2YXIgZmlyc3RSZW5kZXJQaGFzZVVwZGF0ZSA9IHJlbmRlclBoYXNlVXBkYXRlcy5nZXQocXVldWUpO1xuICAgICAgaWYgKGZpcnN0UmVuZGVyUGhhc2VVcGRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZW5kZXJQaGFzZVVwZGF0ZXMuZGVsZXRlKHF1ZXVlKTtcbiAgICAgICAgdmFyIG5ld1N0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICAgICAgICB2YXIgdXBkYXRlID0gZmlyc3RSZW5kZXJQaGFzZVVwZGF0ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8vIFByb2Nlc3MgdGhpcyByZW5kZXIgcGhhc2UgdXBkYXRlLiBXZSBkb24ndCBoYXZlIHRvIGNoZWNrIHRoZVxuICAgICAgICAgIC8vIHByaW9yaXR5IGJlY2F1c2UgaXQgd2lsbCBhbHdheXMgYmUgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnRcbiAgICAgICAgICAvLyByZW5kZXIncy5cbiAgICAgICAgICB2YXIgX2FjdGlvbiA9IHVwZGF0ZS5hY3Rpb247XG4gICAgICAgICAgbmV3U3RhdGUgPSByZWR1Y2VyKG5ld1N0YXRlLCBfYWN0aW9uKTtcbiAgICAgICAgICB1cGRhdGUgPSB1cGRhdGUubmV4dDtcbiAgICAgICAgfSB3aGlsZSAodXBkYXRlICE9PSBudWxsKTtcblxuICAgICAgICAvLyBNYXJrIHRoYXQgdGhlIGZpYmVyIHBlcmZvcm1lZCB3b3JrLCBidXQgb25seSBpZiB0aGUgbmV3IHN0YXRlIGlzXG4gICAgICAgIC8vIGRpZmZlcmVudCBmcm9tIHRoZSBjdXJyZW50IHN0YXRlLlxuICAgICAgICBpZiAoIWlzKG5ld1N0YXRlLCBob29rLm1lbW9pemVkU3RhdGUpKSB7XG4gICAgICAgICAgbWFya1dvcmtJblByb2dyZXNzUmVjZWl2ZWRVcGRhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgICAvLyBEb24ndCBwZXJzaXN0IHRoZSBzdGF0ZSBhY2N1bWxhdGVkIGZyb20gdGhlIHJlbmRlciBwaGFzZSB1cGRhdGVzIHRvXG4gICAgICAgIC8vIHRoZSBiYXNlIHN0YXRlIHVubGVzcyB0aGUgcXVldWUgaXMgZW1wdHkuXG4gICAgICAgIC8vIFRPRE86IE5vdCBzdXJlIGlmIHRoaXMgaXMgdGhlIGRlc2lyZWQgc2VtYW50aWNzLCBidXQgaXQncyB3aGF0IHdlXG4gICAgICAgIC8vIGRvIGZvciBnRFNGUC4gSSBjYW4ndCByZW1lbWJlciB3aHkuXG4gICAgICAgIGlmIChob29rLmJhc2VVcGRhdGUgPT09IHF1ZXVlLmxhc3QpIHtcbiAgICAgICAgICBob29rLmJhc2VTdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVldWUubGFzdFJlbmRlcmVkU3RhdGUgPSBuZXdTdGF0ZTtcblxuICAgICAgICByZXR1cm4gW25ld1N0YXRlLCBfZGlzcGF0Y2hdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW2hvb2subWVtb2l6ZWRTdGF0ZSwgX2Rpc3BhdGNoXTtcbiAgfVxuXG4gIC8vIFRoZSBsYXN0IHVwZGF0ZSBpbiB0aGUgZW50aXJlIHF1ZXVlXG4gIHZhciBsYXN0ID0gcXVldWUubGFzdDtcbiAgLy8gVGhlIGxhc3QgdXBkYXRlIHRoYXQgaXMgcGFydCBvZiB0aGUgYmFzZSBzdGF0ZS5cbiAgdmFyIGJhc2VVcGRhdGUgPSBob29rLmJhc2VVcGRhdGU7XG4gIHZhciBiYXNlU3RhdGUgPSBob29rLmJhc2VTdGF0ZTtcblxuICAvLyBGaW5kIHRoZSBmaXJzdCB1bnByb2Nlc3NlZCB1cGRhdGUuXG4gIHZhciBmaXJzdCA9IHZvaWQgMDtcbiAgaWYgKGJhc2VVcGRhdGUgIT09IG51bGwpIHtcbiAgICBpZiAobGFzdCAhPT0gbnVsbCkge1xuICAgICAgLy8gRm9yIHRoZSBmaXJzdCB1cGRhdGUsIHRoZSBxdWV1ZSBpcyBhIGNpcmN1bGFyIGxpbmtlZCBsaXN0IHdoZXJlXG4gICAgICAvLyBgcXVldWUubGFzdC5uZXh0ID0gcXVldWUuZmlyc3RgLiBPbmNlIHRoZSBmaXJzdCB1cGRhdGUgY29tbWl0cywgYW5kXG4gICAgICAvLyB0aGUgYGJhc2VVcGRhdGVgIGlzIG5vIGxvbmdlciBlbXB0eSwgd2UgY2FuIHVucmF2ZWwgdGhlIGxpc3QuXG4gICAgICBsYXN0Lm5leHQgPSBudWxsO1xuICAgIH1cbiAgICBmaXJzdCA9IGJhc2VVcGRhdGUubmV4dDtcbiAgfSBlbHNlIHtcbiAgICBmaXJzdCA9IGxhc3QgIT09IG51bGwgPyBsYXN0Lm5leHQgOiBudWxsO1xuICB9XG4gIGlmIChmaXJzdCAhPT0gbnVsbCkge1xuICAgIHZhciBfbmV3U3RhdGUgPSBiYXNlU3RhdGU7XG4gICAgdmFyIG5ld0Jhc2VTdGF0ZSA9IG51bGw7XG4gICAgdmFyIG5ld0Jhc2VVcGRhdGUgPSBudWxsO1xuICAgIHZhciBwcmV2VXBkYXRlID0gYmFzZVVwZGF0ZTtcbiAgICB2YXIgX3VwZGF0ZSA9IGZpcnN0O1xuICAgIHZhciBkaWRTa2lwID0gZmFsc2U7XG4gICAgZG8ge1xuICAgICAgdmFyIHVwZGF0ZUV4cGlyYXRpb25UaW1lID0gX3VwZGF0ZS5leHBpcmF0aW9uVGltZTtcbiAgICAgIGlmICh1cGRhdGVFeHBpcmF0aW9uVGltZSA8IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIC8vIFByaW9yaXR5IGlzIGluc3VmZmljaWVudC4gU2tpcCB0aGlzIHVwZGF0ZS4gSWYgdGhpcyBpcyB0aGUgZmlyc3RcbiAgICAgICAgLy8gc2tpcHBlZCB1cGRhdGUsIHRoZSBwcmV2aW91cyB1cGRhdGUvc3RhdGUgaXMgdGhlIG5ldyBiYXNlXG4gICAgICAgIC8vIHVwZGF0ZS9zdGF0ZS5cbiAgICAgICAgaWYgKCFkaWRTa2lwKSB7XG4gICAgICAgICAgZGlkU2tpcCA9IHRydWU7XG4gICAgICAgICAgbmV3QmFzZVVwZGF0ZSA9IHByZXZVcGRhdGU7XG4gICAgICAgICAgbmV3QmFzZVN0YXRlID0gX25ld1N0YXRlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVtYWluaW5nIHByaW9yaXR5IGluIHRoZSBxdWV1ZS5cbiAgICAgICAgaWYgKHVwZGF0ZUV4cGlyYXRpb25UaW1lID4gcmVtYWluaW5nRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgICByZW1haW5pbmdFeHBpcmF0aW9uVGltZSA9IHVwZGF0ZUV4cGlyYXRpb25UaW1lO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBQcm9jZXNzIHRoaXMgdXBkYXRlLlxuICAgICAgICBpZiAoX3VwZGF0ZS5lYWdlclJlZHVjZXIgPT09IHJlZHVjZXIpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIHVwZGF0ZSB3YXMgcHJvY2Vzc2VkIGVhZ2VybHksIGFuZCBpdHMgcmVkdWNlciBtYXRjaGVzIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgcmVkdWNlciwgd2UgY2FuIHVzZSB0aGUgZWFnZXJseSBjb21wdXRlZCBzdGF0ZS5cbiAgICAgICAgICBfbmV3U3RhdGUgPSBfdXBkYXRlLmVhZ2VyU3RhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9hY3Rpb24yID0gX3VwZGF0ZS5hY3Rpb247XG4gICAgICAgICAgX25ld1N0YXRlID0gcmVkdWNlcihfbmV3U3RhdGUsIF9hY3Rpb24yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcHJldlVwZGF0ZSA9IF91cGRhdGU7XG4gICAgICBfdXBkYXRlID0gX3VwZGF0ZS5uZXh0O1xuICAgIH0gd2hpbGUgKF91cGRhdGUgIT09IG51bGwgJiYgX3VwZGF0ZSAhPT0gZmlyc3QpO1xuXG4gICAgaWYgKCFkaWRTa2lwKSB7XG4gICAgICBuZXdCYXNlVXBkYXRlID0gcHJldlVwZGF0ZTtcbiAgICAgIG5ld0Jhc2VTdGF0ZSA9IF9uZXdTdGF0ZTtcbiAgICB9XG5cbiAgICAvLyBNYXJrIHRoYXQgdGhlIGZpYmVyIHBlcmZvcm1lZCB3b3JrLCBidXQgb25seSBpZiB0aGUgbmV3IHN0YXRlIGlzXG4gICAgLy8gZGlmZmVyZW50IGZyb20gdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAgaWYgKCFpcyhfbmV3U3RhdGUsIGhvb2subWVtb2l6ZWRTdGF0ZSkpIHtcbiAgICAgIG1hcmtXb3JrSW5Qcm9ncmVzc1JlY2VpdmVkVXBkYXRlKCk7XG4gICAgfVxuXG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gX25ld1N0YXRlO1xuICAgIGhvb2suYmFzZVVwZGF0ZSA9IG5ld0Jhc2VVcGRhdGU7XG4gICAgaG9vay5iYXNlU3RhdGUgPSBuZXdCYXNlU3RhdGU7XG5cbiAgICBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSA9IF9uZXdTdGF0ZTtcbiAgfVxuXG4gIHZhciBkaXNwYXRjaCA9IHF1ZXVlLmRpc3BhdGNoO1xuICByZXR1cm4gW2hvb2subWVtb2l6ZWRTdGF0ZSwgZGlzcGF0Y2hdO1xufVxuXG5mdW5jdGlvbiBtb3VudFN0YXRlKGluaXRpYWxTdGF0ZSkge1xuICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlKCk7XG4gIH1cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIHZhciBxdWV1ZSA9IGhvb2sucXVldWUgPSB7XG4gICAgbGFzdDogbnVsbCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gIH07XG4gIHZhciBkaXNwYXRjaCA9IHF1ZXVlLmRpc3BhdGNoID0gZGlzcGF0Y2hBY3Rpb24uYmluZChudWxsLFxuICAvLyBGbG93IGRvZXNuJ3Qga25vdyB0aGlzIGlzIG5vbi1udWxsLCBidXQgd2UgZG8uXG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsIHF1ZXVlKTtcbiAgcmV0dXJuIFtob29rLm1lbW9pemVkU3RhdGUsIGRpc3BhdGNoXTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU3RhdGUoaW5pdGlhbFN0YXRlKSB7XG4gIHJldHVybiB1cGRhdGVSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyLCBpbml0aWFsU3RhdGUpO1xufVxuXG5mdW5jdGlvbiBwdXNoRWZmZWN0KHRhZywgY3JlYXRlLCBkZXN0cm95LCBkZXBzKSB7XG4gIHZhciBlZmZlY3QgPSB7XG4gICAgdGFnOiB0YWcsXG4gICAgY3JlYXRlOiBjcmVhdGUsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICBkZXBzOiBkZXBzLFxuICAgIC8vIENpcmN1bGFyXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBpZiAoY29tcG9uZW50VXBkYXRlUXVldWUgPT09IG51bGwpIHtcbiAgICBjb21wb25lbnRVcGRhdGVRdWV1ZSA9IGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKTtcbiAgICBjb21wb25lbnRVcGRhdGVRdWV1ZS5sYXN0RWZmZWN0ID0gZWZmZWN0Lm5leHQgPSBlZmZlY3Q7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9sYXN0RWZmZWN0ID0gY29tcG9uZW50VXBkYXRlUXVldWUubGFzdEVmZmVjdDtcbiAgICBpZiAoX2xhc3RFZmZlY3QgPT09IG51bGwpIHtcbiAgICAgIGNvbXBvbmVudFVwZGF0ZVF1ZXVlLmxhc3RFZmZlY3QgPSBlZmZlY3QubmV4dCA9IGVmZmVjdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGZpcnN0RWZmZWN0ID0gX2xhc3RFZmZlY3QubmV4dDtcbiAgICAgIF9sYXN0RWZmZWN0Lm5leHQgPSBlZmZlY3Q7XG4gICAgICBlZmZlY3QubmV4dCA9IGZpcnN0RWZmZWN0O1xuICAgICAgY29tcG9uZW50VXBkYXRlUXVldWUubGFzdEVmZmVjdCA9IGVmZmVjdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVmZmVjdDtcbn1cblxuZnVuY3Rpb24gbW91bnRSZWYoaW5pdGlhbFZhbHVlKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIHJlZiA9IHsgY3VycmVudDogaW5pdGlhbFZhbHVlIH07XG4gIHtcbiAgICBPYmplY3Quc2VhbChyZWYpO1xuICB9XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHJlZjtcbiAgcmV0dXJuIHJlZjtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUmVmKGluaXRpYWxWYWx1ZSkge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICByZXR1cm4gaG9vay5tZW1vaXplZFN0YXRlO1xufVxuXG5mdW5jdGlvbiBtb3VudEVmZmVjdEltcGwoZmliZXJFZmZlY3RUYWcsIGhvb2tFZmZlY3RUYWcsIGNyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBuZXh0RGVwcyA9IGRlcHMgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZXBzO1xuICBzaWRlRWZmZWN0VGFnIHw9IGZpYmVyRWZmZWN0VGFnO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KGhvb2tFZmZlY3RUYWcsIGNyZWF0ZSwgdW5kZWZpbmVkLCBuZXh0RGVwcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUVmZmVjdEltcGwoZmliZXJFZmZlY3RUYWcsIGhvb2tFZmZlY3RUYWcsIGNyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgbmV4dERlcHMgPSBkZXBzID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVwcztcbiAgdmFyIGRlc3Ryb3kgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKGN1cnJlbnRIb29rICE9PSBudWxsKSB7XG4gICAgdmFyIHByZXZFZmZlY3QgPSBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlO1xuICAgIGRlc3Ryb3kgPSBwcmV2RWZmZWN0LmRlc3Ryb3k7XG4gICAgaWYgKG5leHREZXBzICE9PSBudWxsKSB7XG4gICAgICB2YXIgcHJldkRlcHMgPSBwcmV2RWZmZWN0LmRlcHM7XG4gICAgICBpZiAoYXJlSG9va0lucHV0c0VxdWFsKG5leHREZXBzLCBwcmV2RGVwcykpIHtcbiAgICAgICAgcHVzaEVmZmVjdChOb0VmZmVjdCQxLCBjcmVhdGUsIGRlc3Ryb3ksIG5leHREZXBzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNpZGVFZmZlY3RUYWcgfD0gZmliZXJFZmZlY3RUYWc7XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHB1c2hFZmZlY3QoaG9va0VmZmVjdFRhZywgY3JlYXRlLCBkZXN0cm95LCBuZXh0RGVwcyk7XG59XG5cbmZ1bmN0aW9uIG1vdW50RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gbW91bnRFZmZlY3RJbXBsKFVwZGF0ZSB8IFBhc3NpdmUsIFVubW91bnRQYXNzaXZlIHwgTW91bnRQYXNzaXZlLCBjcmVhdGUsIGRlcHMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVFZmZlY3QoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiB1cGRhdGVFZmZlY3RJbXBsKFVwZGF0ZSB8IFBhc3NpdmUsIFVubW91bnRQYXNzaXZlIHwgTW91bnRQYXNzaXZlLCBjcmVhdGUsIGRlcHMpO1xufVxuXG5mdW5jdGlvbiBtb3VudExheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIG1vdW50RWZmZWN0SW1wbChVcGRhdGUsIFVubW91bnRNdXRhdGlvbiB8IE1vdW50TGF5b3V0LCBjcmVhdGUsIGRlcHMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiB1cGRhdGVFZmZlY3RJbXBsKFVwZGF0ZSwgVW5tb3VudE11dGF0aW9uIHwgTW91bnRMYXlvdXQsIGNyZWF0ZSwgZGVwcyk7XG59XG5cbmZ1bmN0aW9uIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QoY3JlYXRlLCByZWYpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVmQ2FsbGJhY2sgPSByZWY7XG4gICAgdmFyIF9pbnN0ID0gY3JlYXRlKCk7XG4gICAgcmVmQ2FsbGJhY2soX2luc3QpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZWZDYWxsYmFjayhudWxsKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHJlZiAhPT0gbnVsbCAmJiByZWYgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciByZWZPYmplY3QgPSByZWY7XG4gICAge1xuICAgICAgIXJlZk9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnY3VycmVudCcpID8gd2FybmluZyQxKGZhbHNlLCAnRXhwZWN0ZWQgdXNlSW1wZXJhdGl2ZUhhbmRsZSgpIGZpcnN0IGFyZ3VtZW50IHRvIGVpdGhlciBiZSBhICcgKyAncmVmIGNhbGxiYWNrIG9yIFJlYWN0LmNyZWF0ZVJlZigpIG9iamVjdC4gSW5zdGVhZCByZWNlaXZlZDogJXMuJywgJ2FuIG9iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhyZWZPYmplY3QpLmpvaW4oJywgJykgKyAnfScpIDogdm9pZCAwO1xuICAgIH1cbiAgICB2YXIgX2luc3QyID0gY3JlYXRlKCk7XG4gICAgcmVmT2JqZWN0LmN1cnJlbnQgPSBfaW5zdDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlZk9iamVjdC5jdXJyZW50ID0gbnVsbDtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vdW50SW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcykge1xuICB7XG4gICAgISh0eXBlb2YgY3JlYXRlID09PSAnZnVuY3Rpb24nKSA/IHdhcm5pbmckMShmYWxzZSwgJ0V4cGVjdGVkIHVzZUltcGVyYXRpdmVIYW5kbGUoKSBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYSBmdW5jdGlvbiAnICsgJ3RoYXQgY3JlYXRlcyBhIGhhbmRsZS4gSW5zdGVhZCByZWNlaXZlZDogJXMuJywgY3JlYXRlICE9PSBudWxsID8gdHlwZW9mIGNyZWF0ZSA6ICdudWxsJykgOiB2b2lkIDA7XG4gIH1cblxuICAvLyBUT0RPOiBJZiBkZXBzIGFyZSBwcm92aWRlZCwgc2hvdWxkIHdlIHNraXAgY29tcGFyaW5nIHRoZSByZWYgaXRzZWxmP1xuICB2YXIgZWZmZWN0RGVwcyA9IGRlcHMgIT09IG51bGwgJiYgZGVwcyAhPT0gdW5kZWZpbmVkID8gZGVwcy5jb25jYXQoW3JlZl0pIDogbnVsbDtcblxuICByZXR1cm4gbW91bnRFZmZlY3RJbXBsKFVwZGF0ZSwgVW5tb3VudE11dGF0aW9uIHwgTW91bnRMYXlvdXQsIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QuYmluZChudWxsLCBjcmVhdGUsIHJlZiksIGVmZmVjdERlcHMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gIHtcbiAgICAhKHR5cGVvZiBjcmVhdGUgPT09ICdmdW5jdGlvbicpID8gd2FybmluZyQxKGZhbHNlLCAnRXhwZWN0ZWQgdXNlSW1wZXJhdGl2ZUhhbmRsZSgpIHNlY29uZCBhcmd1bWVudCB0byBiZSBhIGZ1bmN0aW9uICcgKyAndGhhdCBjcmVhdGVzIGEgaGFuZGxlLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcy4nLCBjcmVhdGUgIT09IG51bGwgPyB0eXBlb2YgY3JlYXRlIDogJ251bGwnKSA6IHZvaWQgMDtcbiAgfVxuXG4gIC8vIFRPRE86IElmIGRlcHMgYXJlIHByb3ZpZGVkLCBzaG91bGQgd2Ugc2tpcCBjb21wYXJpbmcgdGhlIHJlZiBpdHNlbGY/XG4gIHZhciBlZmZlY3REZXBzID0gZGVwcyAhPT0gbnVsbCAmJiBkZXBzICE9PSB1bmRlZmluZWQgPyBkZXBzLmNvbmNhdChbcmVmXSkgOiBudWxsO1xuXG4gIHJldHVybiB1cGRhdGVFZmZlY3RJbXBsKFVwZGF0ZSwgVW5tb3VudE11dGF0aW9uIHwgTW91bnRMYXlvdXQsIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QuYmluZChudWxsLCBjcmVhdGUsIHJlZiksIGVmZmVjdERlcHMpO1xufVxuXG5mdW5jdGlvbiBtb3VudERlYnVnVmFsdWUodmFsdWUsIGZvcm1hdHRlckZuKSB7XG4gIC8vIFRoaXMgaG9vayBpcyBub3JtYWxseSBhIG5vLW9wLlxuICAvLyBUaGUgcmVhY3QtZGVidWctaG9va3MgcGFja2FnZSBpbmplY3RzIGl0cyBvd24gaW1wbGVtZW50YXRpb25cbiAgLy8gc28gdGhhdCBlLmcuIERldlRvb2xzIGNhbiBkaXNwbGF5IGN1c3RvbSBob29rIHZhbHVlcy5cbn1cblxudmFyIHVwZGF0ZURlYnVnVmFsdWUgPSBtb3VudERlYnVnVmFsdWU7XG5cbmZ1bmN0aW9uIG1vdW50Q2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgbmV4dERlcHMgPSBkZXBzID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVwcztcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gW2NhbGxiYWNrLCBuZXh0RGVwc107XG4gIHJldHVybiBjYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIG5leHREZXBzID0gZGVwcyA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChwcmV2U3RhdGUgIT09IG51bGwpIHtcbiAgICBpZiAobmV4dERlcHMgIT09IG51bGwpIHtcbiAgICAgIHZhciBwcmV2RGVwcyA9IHByZXZTdGF0ZVsxXTtcbiAgICAgIGlmIChhcmVIb29rSW5wdXRzRXF1YWwobmV4dERlcHMsIHByZXZEZXBzKSkge1xuICAgICAgICByZXR1cm4gcHJldlN0YXRlWzBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBob29rLm1lbW9pemVkU3RhdGUgPSBbY2FsbGJhY2ssIG5leHREZXBzXTtcbiAgcmV0dXJuIGNhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBtb3VudE1lbW8obmV4dENyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBuZXh0RGVwcyA9IGRlcHMgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZXBzO1xuICB2YXIgbmV4dFZhbHVlID0gbmV4dENyZWF0ZSgpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBbbmV4dFZhbHVlLCBuZXh0RGVwc107XG4gIHJldHVybiBuZXh0VmFsdWU7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU1lbW8obmV4dENyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgbmV4dERlcHMgPSBkZXBzID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVwcztcbiAgdmFyIHByZXZTdGF0ZSA9IGhvb2subWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKHByZXZTdGF0ZSAhPT0gbnVsbCkge1xuICAgIC8vIEFzc3VtZSB0aGVzZSBhcmUgZGVmaW5lZC4gSWYgdGhleSdyZSBub3QsIGFyZUhvb2tJbnB1dHNFcXVhbCB3aWxsIHdhcm4uXG4gICAgaWYgKG5leHREZXBzICE9PSBudWxsKSB7XG4gICAgICB2YXIgcHJldkRlcHMgPSBwcmV2U3RhdGVbMV07XG4gICAgICBpZiAoYXJlSG9va0lucHV0c0VxdWFsKG5leHREZXBzLCBwcmV2RGVwcykpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZVswXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIG5leHRWYWx1ZSA9IG5leHRDcmVhdGUoKTtcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gW25leHRWYWx1ZSwgbmV4dERlcHNdO1xuICByZXR1cm4gbmV4dFZhbHVlO1xufVxuXG4vLyBpbiBhIHRlc3QtbGlrZSBlbnZpcm9ubWVudCwgd2Ugd2FudCB0byB3YXJuIGlmIGRpc3BhdGNoQWN0aW9uKClcbi8vIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgYmF0Y2hlZFVwZGF0ZXMvVGVzdFV0aWxzLmFjdCguLi4pIGNhbGwuXG52YXIgc2hvdWxkV2FybkZvclVuYmF0Y2hlZFNldFN0YXRlID0gZmFsc2U7XG5cbntcbiAgLy8gamVzdCBpc24ndCBhICdnbG9iYWwnLCBpdCdzIGp1c3QgZXhwb3NlZCB0byB0ZXN0cyB2aWEgYSB3cmFwcGVkIGZ1bmN0aW9uXG4gIC8vIGZ1cnRoZXIsIHRoaXMgaXNuJ3QgYSB0ZXN0IGZpbGUsIHNvIGZsb3cgZG9lc24ndCByZWNvZ25pemUgdGhlIHN5bWJvbC4gU28uLi5cbiAgLy8gJEZsb3dFeHBlY3RlZEVycm9yIC0gYmVjYXVzZSByZXF1aXJlbWVudHMgZG9uJ3QgZ2l2ZSBhIGRhbW4gYWJvdXQgeW91ciB0eXBlIHNpZ3MuXG4gIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGplc3QpIHtcbiAgICBzaG91bGRXYXJuRm9yVW5iYXRjaGVkU2V0U3RhdGUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQWN0aW9uKGZpYmVyLCBxdWV1ZSwgYWN0aW9uKSB7XG4gICEobnVtYmVyT2ZSZVJlbmRlcnMgPCBSRV9SRU5ERVJfTElNSVQpID8gaW52YXJpYW50KGZhbHNlLCAnVG9vIG1hbnkgcmUtcmVuZGVycy4gUmVhY3QgbGltaXRzIHRoZSBudW1iZXIgb2YgcmVuZGVycyB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AuJykgOiB2b2lkIDA7XG5cbiAge1xuICAgICEoYXJndW1lbnRzLmxlbmd0aCA8PSAzKSA/IHdhcm5pbmckMShmYWxzZSwgXCJTdGF0ZSB1cGRhdGVzIGZyb20gdGhlIHVzZVN0YXRlKCkgYW5kIHVzZVJlZHVjZXIoKSBIb29rcyBkb24ndCBzdXBwb3J0IHRoZSBcIiArICdzZWNvbmQgY2FsbGJhY2sgYXJndW1lbnQuIFRvIGV4ZWN1dGUgYSBzaWRlIGVmZmVjdCBhZnRlciAnICsgJ3JlbmRlcmluZywgZGVjbGFyZSBpdCBpbiB0aGUgY29tcG9uZW50IGJvZHkgd2l0aCB1c2VFZmZlY3QoKS4nKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIGlmIChmaWJlciA9PT0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSB8fCBhbHRlcm5hdGUgIT09IG51bGwgJiYgYWx0ZXJuYXRlID09PSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxKSB7XG4gICAgLy8gVGhpcyBpcyBhIHJlbmRlciBwaGFzZSB1cGRhdGUuIFN0YXNoIGl0IGluIGEgbGF6aWx5LWNyZWF0ZWQgbWFwIG9mXG4gICAgLy8gcXVldWUgLT4gbGlua2VkIGxpc3Qgb2YgdXBkYXRlcy4gQWZ0ZXIgdGhpcyByZW5kZXIgcGFzcywgd2UnbGwgcmVzdGFydFxuICAgIC8vIGFuZCBhcHBseSB0aGUgc3Rhc2hlZCB1cGRhdGVzIG9uIHRvcCBvZiB0aGUgd29yay1pbi1wcm9ncmVzcyBob29rLlxuICAgIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSB0cnVlO1xuICAgIHZhciB1cGRhdGUgPSB7XG4gICAgICBleHBpcmF0aW9uVGltZTogcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGVhZ2VyUmVkdWNlcjogbnVsbCxcbiAgICAgIGVhZ2VyU3RhdGU6IG51bGwsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAocmVuZGVyUGhhc2VVcGRhdGVzID09PSBudWxsKSB7XG4gICAgICByZW5kZXJQaGFzZVVwZGF0ZXMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHZhciBmaXJzdFJlbmRlclBoYXNlVXBkYXRlID0gcmVuZGVyUGhhc2VVcGRhdGVzLmdldChxdWV1ZSk7XG4gICAgaWYgKGZpcnN0UmVuZGVyUGhhc2VVcGRhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVuZGVyUGhhc2VVcGRhdGVzLnNldChxdWV1ZSwgdXBkYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXBwZW5kIHRoZSB1cGRhdGUgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdC5cbiAgICAgIHZhciBsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBmaXJzdFJlbmRlclBoYXNlVXBkYXRlO1xuICAgICAgd2hpbGUgKGxhc3RSZW5kZXJQaGFzZVVwZGF0ZS5uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgIGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSA9IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZS5uZXh0O1xuICAgICAgfVxuICAgICAgbGFzdFJlbmRlclBoYXNlVXBkYXRlLm5leHQgPSB1cGRhdGU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZsdXNoUGFzc2l2ZUVmZmVjdHMoKTtcblxuICAgIHZhciBjdXJyZW50VGltZSA9IHJlcXVlc3RDdXJyZW50VGltZSgpO1xuICAgIHZhciBfZXhwaXJhdGlvblRpbWUgPSBjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyKGN1cnJlbnRUaW1lLCBmaWJlcik7XG5cbiAgICB2YXIgX3VwZGF0ZTIgPSB7XG4gICAgICBleHBpcmF0aW9uVGltZTogX2V4cGlyYXRpb25UaW1lLFxuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBlYWdlclJlZHVjZXI6IG51bGwsXG4gICAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG5cbiAgICAvLyBBcHBlbmQgdGhlIHVwZGF0ZSB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuICAgIHZhciBfbGFzdCA9IHF1ZXVlLmxhc3Q7XG4gICAgaWYgKF9sYXN0ID09PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCB1cGRhdGUuIENyZWF0ZSBhIGNpcmN1bGFyIGxpc3QuXG4gICAgICBfdXBkYXRlMi5uZXh0ID0gX3VwZGF0ZTI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBmaXJzdCA9IF9sYXN0Lm5leHQ7XG4gICAgICBpZiAoZmlyc3QgIT09IG51bGwpIHtcbiAgICAgICAgLy8gU3RpbGwgY2lyY3VsYXIuXG4gICAgICAgIF91cGRhdGUyLm5leHQgPSBmaXJzdDtcbiAgICAgIH1cbiAgICAgIF9sYXN0Lm5leHQgPSBfdXBkYXRlMjtcbiAgICB9XG4gICAgcXVldWUubGFzdCA9IF91cGRhdGUyO1xuXG4gICAgaWYgKGZpYmVyLmV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgJiYgKGFsdGVybmF0ZSA9PT0gbnVsbCB8fCBhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPT09IE5vV29yaykpIHtcbiAgICAgIC8vIFRoZSBxdWV1ZSBpcyBjdXJyZW50bHkgZW1wdHksIHdoaWNoIG1lYW5zIHdlIGNhbiBlYWdlcmx5IGNvbXB1dGUgdGhlXG4gICAgICAvLyBuZXh0IHN0YXRlIGJlZm9yZSBlbnRlcmluZyB0aGUgcmVuZGVyIHBoYXNlLiBJZiB0aGUgbmV3IHN0YXRlIGlzIHRoZVxuICAgICAgLy8gc2FtZSBhcyB0aGUgY3VycmVudCBzdGF0ZSwgd2UgbWF5IGJlIGFibGUgdG8gYmFpbCBvdXQgZW50aXJlbHkuXG4gICAgICB2YXIgX2xhc3RSZW5kZXJlZFJlZHVjZXIgPSBxdWV1ZS5sYXN0UmVuZGVyZWRSZWR1Y2VyO1xuICAgICAgaWYgKF9sYXN0UmVuZGVyZWRSZWR1Y2VyICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBwcmV2RGlzcGF0Y2hlciA9IHZvaWQgMDtcbiAgICAgICAge1xuICAgICAgICAgIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25VcGRhdGVJbkRFVjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZTtcbiAgICAgICAgICB2YXIgX2VhZ2VyU3RhdGUgPSBfbGFzdFJlbmRlcmVkUmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgICAgICAgLy8gU3Rhc2ggdGhlIGVhZ2VybHkgY29tcHV0ZWQgc3RhdGUsIGFuZCB0aGUgcmVkdWNlciB1c2VkIHRvIGNvbXB1dGVcbiAgICAgICAgICAvLyBpdCwgb24gdGhlIHVwZGF0ZSBvYmplY3QuIElmIHRoZSByZWR1Y2VyIGhhc24ndCBjaGFuZ2VkIGJ5IHRoZVxuICAgICAgICAgIC8vIHRpbWUgd2UgZW50ZXIgdGhlIHJlbmRlciBwaGFzZSwgdGhlbiB0aGUgZWFnZXIgc3RhdGUgY2FuIGJlIHVzZWRcbiAgICAgICAgICAvLyB3aXRob3V0IGNhbGxpbmcgdGhlIHJlZHVjZXIgYWdhaW4uXG4gICAgICAgICAgX3VwZGF0ZTIuZWFnZXJSZWR1Y2VyID0gX2xhc3RSZW5kZXJlZFJlZHVjZXI7XG4gICAgICAgICAgX3VwZGF0ZTIuZWFnZXJTdGF0ZSA9IF9lYWdlclN0YXRlO1xuICAgICAgICAgIGlmIChpcyhfZWFnZXJTdGF0ZSwgY3VycmVudFN0YXRlKSkge1xuICAgICAgICAgICAgLy8gRmFzdCBwYXRoLiBXZSBjYW4gYmFpbCBvdXQgd2l0aG91dCBzY2hlZHVsaW5nIFJlYWN0IHRvIHJlLXJlbmRlci5cbiAgICAgICAgICAgIC8vIEl0J3Mgc3RpbGwgcG9zc2libGUgdGhhdCB3ZSdsbCBuZWVkIHRvIHJlYmFzZSB0aGlzIHVwZGF0ZSBsYXRlcixcbiAgICAgICAgICAgIC8vIGlmIHRoZSBjb21wb25lbnQgcmUtcmVuZGVycyBmb3IgYSBkaWZmZXJlbnQgcmVhc29uIGFuZCBieSB0aGF0XG4gICAgICAgICAgICAvLyB0aW1lIHRoZSByZWR1Y2VyIGhhcyBjaGFuZ2VkLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLyBTdXBwcmVzcyB0aGUgZXJyb3IuIEl0IHdpbGwgdGhyb3cgYWdhaW4gaW4gdGhlIHJlbmRlciBwaGFzZS5cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB7XG4gICAgICBpZiAoc2hvdWxkV2FybkZvclVuYmF0Y2hlZFNldFN0YXRlID09PSB0cnVlKSB7XG4gICAgICAgIHdhcm5JZk5vdEN1cnJlbnRseUJhdGNoaW5nSW5EZXYoZmliZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBzY2hlZHVsZVdvcmsoZmliZXIsIF9leHBpcmF0aW9uVGltZSk7XG4gIH1cbn1cblxudmFyIENvbnRleHRPbmx5RGlzcGF0Y2hlciA9IHtcbiAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuXG4gIHVzZUNhbGxiYWNrOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUNvbnRleHQ6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlRWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUltcGVyYXRpdmVIYW5kbGU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlTGF5b3V0RWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZU1lbW86IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlUmVkdWNlcjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VSZWY6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlU3RhdGU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlRGVidWdWYWx1ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yXG59O1xuXG52YXIgSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWID0gbnVsbDtcbnZhciBIb29rc0Rpc3BhdGNoZXJPbk1vdW50V2l0aEhvb2tUeXBlc0luREVWID0gbnVsbDtcbnZhciBIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWID0gbnVsbDtcbnZhciBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWID0gbnVsbDtcbnZhciBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25VcGRhdGVJbkRFViA9IG51bGw7XG5cbntcbiAgdmFyIHdhcm5JbnZhbGlkQ29udGV4dEFjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB3YXJuaW5nJDEoZmFsc2UsICdDb250ZXh0IGNhbiBvbmx5IGJlIHJlYWQgd2hpbGUgUmVhY3QgaXMgcmVuZGVyaW5nLiAnICsgJ0luIGNsYXNzZXMsIHlvdSBjYW4gcmVhZCBpdCBpbiB0aGUgcmVuZGVyIG1ldGhvZCBvciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuICcgKyAnSW4gZnVuY3Rpb24gY29tcG9uZW50cywgeW91IGNhbiByZWFkIGl0IGRpcmVjdGx5IGluIHRoZSBmdW5jdGlvbiBib2R5LCBidXQgbm90ICcgKyAnaW5zaWRlIEhvb2tzIGxpa2UgdXNlUmVkdWNlcigpIG9yIHVzZU1lbW8oKS4nKTtcbiAgfTtcblxuICB2YXIgd2FybkludmFsaWRIb29rQWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ0RvIG5vdCBjYWxsIEhvb2tzIGluc2lkZSB1c2VFZmZlY3QoLi4uKSwgdXNlTWVtbyguLi4pLCBvciBvdGhlciBidWlsdC1pbiBIb29rcy4gJyArICdZb3UgY2FuIG9ubHkgY2FsbCBIb29rcyBhdCB0aGUgdG9wIGxldmVsIG9mIHlvdXIgUmVhY3QgZnVuY3Rpb24uICcgKyAnRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcnVsZXMtb2YtaG9va3MnKTtcbiAgfTtcblxuICBIb29rc0Rpc3BhdGNoZXJPbk1vdW50SW5ERVYgPSB7XG4gICAgcmVhZENvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0LCBvYnNlcnZlZEJpdHMpIHtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0LCBvYnNlcnZlZEJpdHMpO1xuICAgIH0sXG4gICAgdXNlQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaywgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlQ2FsbGJhY2snO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudENhbGxiYWNrKGNhbGxiYWNrLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUNvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0LCBvYnNlcnZlZEJpdHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNvbnRleHQnO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0LCBvYnNlcnZlZEJpdHMpO1xuICAgIH0sXG4gICAgdXNlRWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VFZmZlY3QnO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudEVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogZnVuY3Rpb24gKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJbXBlcmF0aXZlSGFuZGxlJztcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUxheW91dEVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTGF5b3V0RWZmZWN0JztcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZU1lbW86IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZU1lbW8nO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50O1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG1vdW50TWVtbyhjcmVhdGUsIGRlcHMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZVJlZHVjZXI6IGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWR1Y2VyJztcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFVjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBtb3VudFJlZHVjZXIocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlUmVmOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWYnO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudFJlZihpbml0aWFsVmFsdWUpO1xuICAgIH0sXG4gICAgdXNlU3RhdGU6IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVN0YXRlJztcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFVjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBtb3VudFN0YXRlKGluaXRpYWxTdGF0ZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlRGVidWdWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBmb3JtYXR0ZXJGbikge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlRGVidWdWYWx1ZSc7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50RGVidWdWYWx1ZSh2YWx1ZSwgZm9ybWF0dGVyRm4pO1xuICAgIH1cbiAgfTtcblxuICBIb29rc0Rpc3BhdGNoZXJPbk1vdW50V2l0aEhvb2tUeXBlc0luREVWID0ge1xuICAgIHJlYWRDb250ZXh0OiBmdW5jdGlvbiAoY29udGV4dCwgb2JzZXJ2ZWRCaXRzKSB7XG4gICAgICByZXR1cm4gcmVhZENvbnRleHQoY29udGV4dCwgb2JzZXJ2ZWRCaXRzKTtcbiAgICB9LFxuICAgIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNhbGxiYWNrJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50Q2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQsIG9ic2VydmVkQml0cykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlQ29udGV4dCc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0LCBvYnNlcnZlZEJpdHMpO1xuICAgIH0sXG4gICAgdXNlRWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VFZmZlY3QnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUltcGVyYXRpdmVIYW5kbGU6IGZ1bmN0aW9uIChyZWYsIGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlSW1wZXJhdGl2ZUhhbmRsZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudEltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlTGF5b3V0RWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VMYXlvdXRFZmZlY3QnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZU1lbW86IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZU1lbW8nO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFVjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBtb3VudE1lbW8oY3JlYXRlLCBkZXBzKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VSZWR1Y2VyOiBmdW5jdGlvbiAocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlUmVkdWNlcic7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50O1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG1vdW50UmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VSZWY6IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVJlZic7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudFJlZihpbml0aWFsVmFsdWUpO1xuICAgIH0sXG4gICAgdXNlU3RhdGU6IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVN0YXRlJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPbk1vdW50SW5ERVY7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gbW91bnRTdGF0ZShpbml0aWFsU3RhdGUpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgZm9ybWF0dGVyRm4pIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZURlYnVnVmFsdWUnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnREZWJ1Z1ZhbHVlKHZhbHVlLCBmb3JtYXR0ZXJGbik7XG4gICAgfVxuICB9O1xuXG4gIEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVYgPSB7XG4gICAgcmVhZENvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0LCBvYnNlcnZlZEJpdHMpIHtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0LCBvYnNlcnZlZEJpdHMpO1xuICAgIH0sXG4gICAgdXNlQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaywgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlQ2FsbGJhY2snO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQsIG9ic2VydmVkQml0cykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlQ29udGV4dCc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0LCBvYnNlcnZlZEJpdHMpO1xuICAgIH0sXG4gICAgdXNlRWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VFZmZlY3QnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUltcGVyYXRpdmVIYW5kbGUnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUxheW91dEVmZmVjdCc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZU1lbW86IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZU1lbW8nO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVY7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdXBkYXRlTWVtbyhjcmVhdGUsIGRlcHMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZVJlZHVjZXI6IGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWR1Y2VyJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVJlZHVjZXIocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlUmVmOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWYnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlUmVmKGluaXRpYWxWYWx1ZSk7XG4gICAgfSxcbiAgICB1c2VTdGF0ZTogZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlU3RhdGUnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVY7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdXBkYXRlU3RhdGUoaW5pdGlhbFN0YXRlKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VEZWJ1Z1ZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGZvcm1hdHRlckZuKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VEZWJ1Z1ZhbHVlJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZURlYnVnVmFsdWUodmFsdWUsIGZvcm1hdHRlckZuKTtcbiAgICB9XG4gIH07XG5cbiAgSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFViA9IHtcbiAgICByZWFkQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQsIG9ic2VydmVkQml0cykge1xuICAgICAgd2FybkludmFsaWRDb250ZXh0QWNjZXNzKCk7XG4gICAgICByZXR1cm4gcmVhZENvbnRleHQoY29udGV4dCwgb2JzZXJ2ZWRCaXRzKTtcbiAgICB9LFxuICAgIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNhbGxiYWNrJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudENhbGxiYWNrKGNhbGxiYWNrLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUNvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0LCBvYnNlcnZlZEJpdHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNvbnRleHQnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHJlYWRDb250ZXh0KGNvbnRleHQsIG9ic2VydmVkQml0cyk7XG4gICAgfSxcbiAgICB1c2VFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUVmZmVjdCc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUltcGVyYXRpdmVIYW5kbGU6IGZ1bmN0aW9uIChyZWYsIGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlSW1wZXJhdGl2ZUhhbmRsZSc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUxheW91dEVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTGF5b3V0RWZmZWN0JztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudExheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlTWVtbzogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTWVtbyc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFVjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBtb3VudE1lbW8oY3JlYXRlLCBkZXBzKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VSZWR1Y2VyOiBmdW5jdGlvbiAocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlUmVkdWNlcic7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFVjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBtb3VudFJlZHVjZXIocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlUmVmOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWYnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50UmVmKGluaXRpYWxWYWx1ZSk7XG4gICAgfSxcbiAgICB1c2VTdGF0ZTogZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlU3RhdGUnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPbk1vdW50SW5ERVY7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gbW91bnRTdGF0ZShpbml0aWFsU3RhdGUpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgZm9ybWF0dGVyRm4pIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZURlYnVnVmFsdWUnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50RGVidWdWYWx1ZSh2YWx1ZSwgZm9ybWF0dGVyRm4pO1xuICAgIH1cbiAgfTtcblxuICBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25VcGRhdGVJbkRFViA9IHtcbiAgICByZWFkQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQsIG9ic2VydmVkQml0cykge1xuICAgICAgd2FybkludmFsaWRDb250ZXh0QWNjZXNzKCk7XG4gICAgICByZXR1cm4gcmVhZENvbnRleHQoY29udGV4dCwgb2JzZXJ2ZWRCaXRzKTtcbiAgICB9LFxuICAgIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNhbGxiYWNrJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQsIG9ic2VydmVkQml0cykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlQ29udGV4dCc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHJlYWRDb250ZXh0KGNvbnRleHQsIG9ic2VydmVkQml0cyk7XG4gICAgfSxcbiAgICB1c2VFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUVmZmVjdCc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZUVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogZnVuY3Rpb24gKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJbXBlcmF0aXZlSGFuZGxlJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUxheW91dEVmZmVjdCc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlTWVtbzogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTWVtbyc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1lbW8oY3JlYXRlLCBkZXBzKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VSZWR1Y2VyOiBmdW5jdGlvbiAocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlUmVkdWNlcic7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVJlZHVjZXIocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlUmVmOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWYnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVSZWYoaW5pdGlhbFZhbHVlKTtcbiAgICB9LFxuICAgIHVzZVN0YXRlOiBmdW5jdGlvbiAoaW5pdGlhbFN0YXRlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VTdGF0ZSc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVN0YXRlKGluaXRpYWxTdGF0ZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlRGVidWdWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBmb3JtYXR0ZXJGbikge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlRGVidWdWYWx1ZSc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZURlYnVnVmFsdWUodmFsdWUsIGZvcm1hdHRlckZuKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBjb21taXRUaW1lID0gMDtcbnZhciBwcm9maWxlclN0YXJ0VGltZSA9IC0xO1xuXG5mdW5jdGlvbiBnZXRDb21taXRUaW1lKCkge1xuICByZXR1cm4gY29tbWl0VGltZTtcbn1cblxuZnVuY3Rpb24gcmVjb3JkQ29tbWl0VGltZSgpIHtcbiAgaWYgKCFlbmFibGVQcm9maWxlclRpbWVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbW1pdFRpbWUgPSBzY2hlZHVsZXIudW5zdGFibGVfbm93KCk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0UHJvZmlsZXJUaW1lcihmaWJlcikge1xuICBpZiAoIWVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9maWxlclN0YXJ0VGltZSA9IHNjaGVkdWxlci51bnN0YWJsZV9ub3coKTtcblxuICBpZiAoZmliZXIuYWN0dWFsU3RhcnRUaW1lIDwgMCkge1xuICAgIGZpYmVyLmFjdHVhbFN0YXJ0VGltZSA9IHNjaGVkdWxlci51bnN0YWJsZV9ub3coKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZyhmaWJlcikge1xuICBpZiAoIWVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvZmlsZXJTdGFydFRpbWUgPSAtMTtcbn1cblxuZnVuY3Rpb24gc3RvcFByb2ZpbGVyVGltZXJJZlJ1bm5pbmdBbmRSZWNvcmREZWx0YShmaWJlciwgb3ZlcnJpZGVCYXNlVGltZSkge1xuICBpZiAoIWVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocHJvZmlsZXJTdGFydFRpbWUgPj0gMCkge1xuICAgIHZhciBlbGFwc2VkVGltZSA9IHNjaGVkdWxlci51bnN0YWJsZV9ub3coKSAtIHByb2ZpbGVyU3RhcnRUaW1lO1xuICAgIGZpYmVyLmFjdHVhbER1cmF0aW9uICs9IGVsYXBzZWRUaW1lO1xuICAgIGlmIChvdmVycmlkZUJhc2VUaW1lKSB7XG4gICAgICBmaWJlci5zZWxmQmFzZUR1cmF0aW9uID0gZWxhcHNlZFRpbWU7XG4gICAgfVxuICAgIHByb2ZpbGVyU3RhcnRUaW1lID0gLTE7XG4gIH1cbn1cblxuLy8gVGhlIGRlZXBlc3QgRmliZXIgb24gdGhlIHN0YWNrIGludm9sdmVkIGluIGEgaHlkcmF0aW9uIGNvbnRleHQuXG4vLyBUaGlzIG1heSBoYXZlIGJlZW4gYW4gaW5zZXJ0aW9uIG9yIGEgaHlkcmF0aW9uLlxudmFyIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbDtcbnZhciBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc0h5ZHJhdGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBlbnRlckh5ZHJhdGlvblN0YXRlKGZpYmVyKSB7XG4gIGlmICghc3VwcG9ydHNIeWRyYXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcGFyZW50SW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkKHBhcmVudEluc3RhbmNlKTtcbiAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBmaWJlcjtcbiAgaXNIeWRyYXRpbmcgPSB0cnVlO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVlbnRlckh5ZHJhdGlvblN0YXRlRnJvbURlaHlkcmF0ZWRTdXNwZW5zZUluc3RhbmNlKGZpYmVyKSB7XG4gIGlmICghc3VwcG9ydHNIeWRyYXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgc3VzcGVuc2VJbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlU2libGluZyhzdXNwZW5zZUluc3RhbmNlKTtcbiAgcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcik7XG4gIGlzSHlkcmF0aW5nID0gdHJ1ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZShyZXR1cm5GaWJlciwgaW5zdGFuY2UpIHtcbiAge1xuICAgIHN3aXRjaCAocmV0dXJuRmliZXIudGFnKSB7XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICBkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UocmV0dXJuRmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8sIGluc3RhbmNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgIGRpZE5vdEh5ZHJhdGVJbnN0YW5jZShyZXR1cm5GaWJlci50eXBlLCByZXR1cm5GaWJlci5tZW1vaXplZFByb3BzLCByZXR1cm5GaWJlci5zdGF0ZU5vZGUsIGluc3RhbmNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNoaWxkVG9EZWxldGUgPSBjcmVhdGVGaWJlckZyb21Ib3N0SW5zdGFuY2VGb3JEZWxldGlvbigpO1xuICBjaGlsZFRvRGVsZXRlLnN0YXRlTm9kZSA9IGluc3RhbmNlO1xuICBjaGlsZFRvRGVsZXRlLnJldHVybiA9IHJldHVybkZpYmVyO1xuICBjaGlsZFRvRGVsZXRlLmVmZmVjdFRhZyA9IERlbGV0aW9uO1xuXG4gIC8vIFRoaXMgbWlnaHQgc2VlbSBsaWtlIGl0IGJlbG9uZ3Mgb24gcHJvZ3Jlc3NlZEZpcnN0RGVsZXRpb24uIEhvd2V2ZXIsXG4gIC8vIHRoZXNlIGNoaWxkcmVuIGFyZSBub3QgcGFydCBvZiB0aGUgcmVjb25jaWxpYXRpb24gbGlzdCBvZiBjaGlsZHJlbi5cbiAgLy8gRXZlbiBpZiB3ZSBhYm9ydCBhbmQgcmVyZWNvbmNpbGUgdGhlIGNoaWxkcmVuLCB0aGF0IHdpbGwgdHJ5IHRvIGh5ZHJhdGVcbiAgLy8gYWdhaW4gYW5kIHRoZSBub2RlcyBhcmUgc3RpbGwgaW4gdGhlIGhvc3QgdHJlZSBzbyB0aGVzZSB3aWxsIGJlXG4gIC8vIHJlY3JlYXRlZC5cbiAgaWYgKHJldHVybkZpYmVyLmxhc3RFZmZlY3QgIT09IG51bGwpIHtcbiAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0Lm5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0Tm9uSHlkcmF0ZWRJbnN0YW5jZShyZXR1cm5GaWJlciwgZmliZXIpIHtcbiAgZmliZXIuZWZmZWN0VGFnIHw9IFBsYWNlbWVudDtcbiAge1xuICAgIHN3aXRjaCAocmV0dXJuRmliZXIudGFnKSB7XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHBhcmVudENvbnRhaW5lciA9IHJldHVybkZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgICAgIHZhciB0eXBlID0gZmliZXIudHlwZTtcbiAgICAgICAgICAgICAgdmFyIHByb3BzID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlKHBhcmVudENvbnRhaW5lciwgdHlwZSwgcHJvcHMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICAgICAgICAgIHZhciB0ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZShwYXJlbnRDb250YWluZXIsIHRleHQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3VzcGVuc2VDb21wb25lbnQ6XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBwYXJlbnRUeXBlID0gcmV0dXJuRmliZXIudHlwZTtcbiAgICAgICAgICB2YXIgcGFyZW50UHJvcHMgPSByZXR1cm5GaWJlci5tZW1vaXplZFByb3BzO1xuICAgICAgICAgIHZhciBwYXJlbnRJbnN0YW5jZSA9IHJldHVybkZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgICAgICB2YXIgX3R5cGUgPSBmaWJlci50eXBlO1xuICAgICAgICAgICAgICB2YXIgX3Byb3BzID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgX3R5cGUsIF9wcm9wcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgICAgICAgICAgdmFyIF90ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIF90ZXh0KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZVN1c3BlbnNlSW5zdGFuY2UocGFyZW50VHlwZSwgcGFyZW50UHJvcHMsIHBhcmVudEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyeUh5ZHJhdGUoZmliZXIsIG5leHRJbnN0YW5jZSkge1xuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIHR5cGUgPSBmaWJlci50eXBlO1xuICAgICAgICB2YXIgcHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGNhbkh5ZHJhdGVJbnN0YW5jZShuZXh0SW5zdGFuY2UsIHR5cGUsIHByb3BzKTtcbiAgICAgICAgaWYgKGluc3RhbmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgZmliZXIuc3RhdGVOb2RlID0gaW5zdGFuY2U7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICB7XG4gICAgICAgIHZhciB0ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICB2YXIgdGV4dEluc3RhbmNlID0gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShuZXh0SW5zdGFuY2UsIHRleHQpO1xuICAgICAgICBpZiAodGV4dEluc3RhbmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgZmliZXIuc3RhdGVOb2RlID0gdGV4dEluc3RhbmNlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBpZiAoZW5hYmxlU3VzcGVuc2VTZXJ2ZXJSZW5kZXJlcikge1xuICAgICAgICAgIHZhciBzdXNwZW5zZUluc3RhbmNlID0gY2FuSHlkcmF0ZVN1c3BlbnNlSW5zdGFuY2UobmV4dEluc3RhbmNlKTtcbiAgICAgICAgICBpZiAoc3VzcGVuc2VJbnN0YW5jZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRG93bmdyYWRlIHRoZSB0YWcgdG8gYSBkZWh5ZHJhdGVkIGNvbXBvbmVudCB1bnRpbCB3ZSd2ZSBoeWRyYXRlZCBpdC5cbiAgICAgICAgICAgIGZpYmVyLnRhZyA9IERlaHlkcmF0ZWRTdXNwZW5zZUNvbXBvbmVudDtcbiAgICAgICAgICAgIGZpYmVyLnN0YXRlTm9kZSA9IHN1c3BlbnNlSW5zdGFuY2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UoZmliZXIpIHtcbiAgaWYgKCFpc0h5ZHJhdGluZykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV4dEluc3RhbmNlID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbiAgaWYgKCFuZXh0SW5zdGFuY2UpIHtcbiAgICAvLyBOb3RoaW5nIHRvIGh5ZHJhdGUuIE1ha2UgaXQgYW4gaW5zZXJ0aW9uLlxuICAgIGluc2VydE5vbkh5ZHJhdGVkSW5zdGFuY2UoaHlkcmF0aW9uUGFyZW50RmliZXIsIGZpYmVyKTtcbiAgICBpc0h5ZHJhdGluZyA9IGZhbHNlO1xuICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXI7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBmaXJzdEF0dGVtcHRlZEluc3RhbmNlID0gbmV4dEluc3RhbmNlO1xuICBpZiAoIXRyeUh5ZHJhdGUoZmliZXIsIG5leHRJbnN0YW5jZSkpIHtcbiAgICAvLyBJZiB3ZSBjYW4ndCBoeWRyYXRlIHRoaXMgaW5zdGFuY2UgbGV0J3MgdHJ5IHRoZSBuZXh0IG9uZS5cbiAgICAvLyBXZSB1c2UgdGhpcyBhcyBhIGhldXJpc3RpYy4gSXQncyBiYXNlZCBvbiBpbnR1aXRpb24gYW5kIG5vdCBkYXRhIHNvIGl0XG4gICAgLy8gbWlnaHQgYmUgZmxhd2VkIG9yIHVubmVjZXNzYXJ5LlxuICAgIG5leHRJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlU2libGluZyhmaXJzdEF0dGVtcHRlZEluc3RhbmNlKTtcbiAgICBpZiAoIW5leHRJbnN0YW5jZSB8fCAhdHJ5SHlkcmF0ZShmaWJlciwgbmV4dEluc3RhbmNlKSkge1xuICAgICAgLy8gTm90aGluZyB0byBoeWRyYXRlLiBNYWtlIGl0IGFuIGluc2VydGlvbi5cbiAgICAgIGluc2VydE5vbkh5ZHJhdGVkSW5zdGFuY2UoaHlkcmF0aW9uUGFyZW50RmliZXIsIGZpYmVyKTtcbiAgICAgIGlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBXZSBtYXRjaGVkIHRoZSBuZXh0IG9uZSwgd2UnbGwgbm93IGFzc3VtZSB0aGF0IHRoZSBmaXJzdCBvbmUgd2FzXG4gICAgLy8gc3VwZXJmbHVvdXMgYW5kIHdlJ2xsIGRlbGV0ZSBpdC4gU2luY2Ugd2UgY2FuJ3QgZWFnZXJseSBkZWxldGUgaXRcbiAgICAvLyB3ZSdsbCBoYXZlIHRvIHNjaGVkdWxlIGEgZGVsZXRpb24uIFRvIGRvIHRoYXQsIHRoaXMgbm9kZSBuZWVkcyBhIGR1bW15XG4gICAgLy8gZmliZXIgYXNzb2NpYXRlZCB3aXRoIGl0LlxuICAgIGRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZShoeWRyYXRpb25QYXJlbnRGaWJlciwgZmlyc3RBdHRlbXB0ZWRJbnN0YW5jZSk7XG4gIH1cbiAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBmaWJlcjtcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkKG5leHRJbnN0YW5jZSk7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UoZmliZXIsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgaG9zdENvbnRleHQpIHtcbiAgaWYgKCFzdXBwb3J0c0h5ZHJhdGlvbikge1xuICAgIGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UoKSB0byBuZXZlciBiZSBjYWxsZWQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cblxuICB2YXIgaW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGU7XG4gIHZhciB1cGRhdGVQYXlsb2FkID0gaHlkcmF0ZUluc3RhbmNlKGluc3RhbmNlLCBmaWJlci50eXBlLCBmaWJlci5tZW1vaXplZFByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0LCBmaWJlcik7XG4gIC8vIFRPRE86IFR5cGUgdGhpcyBzcGVjaWZpYyB0byB0aGlzIHR5cGUgb2YgY29tcG9uZW50LlxuICBmaWJlci51cGRhdGVRdWV1ZSA9IHVwZGF0ZVBheWxvYWQ7XG4gIC8vIElmIHRoZSB1cGRhdGUgcGF5bG9hZCBpbmRpY2F0ZXMgdGhhdCB0aGVyZSBpcyBhIGNoYW5nZSBvciBpZiB0aGVyZVxuICAvLyBpcyBhIG5ldyByZWYgd2UgbWFyayB0aGlzIGFzIGFuIHVwZGF0ZS5cbiAgaWYgKHVwZGF0ZVBheWxvYWQgIT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlKGZpYmVyKSB7XG4gIGlmICghc3VwcG9ydHNIeWRyYXRpb24pIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSgpIHRvIG5ldmVyIGJlIGNhbGxlZC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgfVxuXG4gIHZhciB0ZXh0SW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGU7XG4gIHZhciB0ZXh0Q29udGVudCA9IGZpYmVyLm1lbW9pemVkUHJvcHM7XG4gIHZhciBzaG91bGRVcGRhdGUgPSBoeWRyYXRlVGV4dEluc3RhbmNlKHRleHRJbnN0YW5jZSwgdGV4dENvbnRlbnQsIGZpYmVyKTtcbiAge1xuICAgIGlmIChzaG91bGRVcGRhdGUpIHtcbiAgICAgIC8vIFdlIGFzc3VtZSB0aGF0IHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIGlzIGNhbGxlZCBpbiBhIGNvbnRleHQgd2hlcmUgdGhlXG4gICAgICAvLyBoeWRyYXRpb24gcGFyZW50IGlzIHRoZSBwYXJlbnQgaG9zdCBjb21wb25lbnQgb2YgdGhpcyBob3N0IHRleHQuXG4gICAgICB2YXIgcmV0dXJuRmliZXIgPSBoeWRyYXRpb25QYXJlbnRGaWJlcjtcbiAgICAgIGlmIChyZXR1cm5GaWJlciAhPT0gbnVsbCkge1xuICAgICAgICBzd2l0Y2ggKHJldHVybkZpYmVyLnRhZykge1xuICAgICAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnRDb250YWluZXIgPSByZXR1cm5GaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgICAgZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZShwYXJlbnRDb250YWluZXIsIHRleHRJbnN0YW5jZSwgdGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnRUeXBlID0gcmV0dXJuRmliZXIudHlwZTtcbiAgICAgICAgICAgICAgdmFyIHBhcmVudFByb3BzID0gcmV0dXJuRmliZXIubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgdmFyIHBhcmVudEluc3RhbmNlID0gcmV0dXJuRmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgdGV4dEluc3RhbmNlLCB0ZXh0Q29udGVudCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBzaG91bGRVcGRhdGU7XG59XG5cbmZ1bmN0aW9uIHNraXBQYXN0RGVoeWRyYXRlZFN1c3BlbnNlSW5zdGFuY2UoZmliZXIpIHtcbiAgaWYgKCFzdXBwb3J0c0h5ZHJhdGlvbikge1xuICAgIGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHNraXBQYXN0RGVoeWRyYXRlZFN1c3BlbnNlSW5zdGFuY2UoKSB0byBuZXZlciBiZSBjYWxsZWQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cbiAgdmFyIHN1c3BlbnNlSW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGU7XG4gICFzdXNwZW5zZUluc3RhbmNlID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdG8gaGF2ZSBhIGh5ZHJhdGVkIHN1c3BlbnNlIGluc3RhbmNlLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGVJbnN0YW5jZUFmdGVyU3VzcGVuc2VJbnN0YW5jZShzdXNwZW5zZUluc3RhbmNlKTtcbn1cblxuZnVuY3Rpb24gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcikge1xuICB2YXIgcGFyZW50ID0gZmliZXIucmV0dXJuO1xuICB3aGlsZSAocGFyZW50ICE9PSBudWxsICYmIHBhcmVudC50YWcgIT09IEhvc3RDb21wb25lbnQgJiYgcGFyZW50LnRhZyAhPT0gSG9zdFJvb3QgJiYgcGFyZW50LnRhZyAhPT0gRGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50KSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgfVxuICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IHBhcmVudDtcbn1cblxuZnVuY3Rpb24gcG9wSHlkcmF0aW9uU3RhdGUoZmliZXIpIHtcbiAgaWYgKCFzdXBwb3J0c0h5ZHJhdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZmliZXIgIT09IGh5ZHJhdGlvblBhcmVudEZpYmVyKSB7XG4gICAgLy8gV2UncmUgZGVlcGVyIHRoYW4gdGhlIGN1cnJlbnQgaHlkcmF0aW9uIGNvbnRleHQsIGluc2lkZSBhbiBpbnNlcnRlZFxuICAgIC8vIHRyZWUuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghaXNIeWRyYXRpbmcpIHtcbiAgICAvLyBJZiB3ZSdyZSBub3QgY3VycmVudGx5IGh5ZHJhdGluZyBidXQgd2UncmUgaW4gYSBoeWRyYXRpb24gY29udGV4dCwgdGhlblxuICAgIC8vIHdlIHdlcmUgYW4gaW5zZXJ0aW9uIGFuZCBub3cgbmVlZCB0byBwb3AgdXAgcmVlbnRlciBoeWRyYXRpb24gb2Ygb3VyXG4gICAgLy8gc2libGluZ3MuXG4gICAgcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcik7XG4gICAgaXNIeWRyYXRpbmcgPSB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciB0eXBlID0gZmliZXIudHlwZTtcblxuICAvLyBJZiB3ZSBoYXZlIGFueSByZW1haW5pbmcgaHlkcmF0YWJsZSBub2Rlcywgd2UgbmVlZCB0byBkZWxldGUgdGhlbSBub3cuXG4gIC8vIFdlIG9ubHkgZG8gdGhpcyBkZWVwZXIgdGhhbiBoZWFkIGFuZCBib2R5IHNpbmNlIHRoZXkgdGVuZCB0byBoYXZlIHJhbmRvbVxuICAvLyBvdGhlciBub2RlcyBpbiB0aGVtLiBXZSBhbHNvIGlnbm9yZSBjb21wb25lbnRzIHdpdGggcHVyZSB0ZXh0IGNvbnRlbnQgaW5cbiAgLy8gc2lkZSBvZiB0aGVtLlxuICAvLyBUT0RPOiBCZXR0ZXIgaGV1cmlzdGljLlxuICBpZiAoZmliZXIudGFnICE9PSBIb3N0Q29tcG9uZW50IHx8IHR5cGUgIT09ICdoZWFkJyAmJiB0eXBlICE9PSAnYm9keScgJiYgIXNob3VsZFNldFRleHRDb250ZW50KHR5cGUsIGZpYmVyLm1lbW9pemVkUHJvcHMpKSB7XG4gICAgdmFyIG5leHRJbnN0YW5jZSA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2U7XG4gICAgd2hpbGUgKG5leHRJbnN0YW5jZSkge1xuICAgICAgZGVsZXRlSHlkcmF0YWJsZUluc3RhbmNlKGZpYmVyLCBuZXh0SW5zdGFuY2UpO1xuICAgICAgbmV4dEluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nKG5leHRJbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcik7XG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlciA/IGdldE5leHRIeWRyYXRhYmxlU2libGluZyhmaWJlci5zdGF0ZU5vZGUpIDogbnVsbDtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSB7XG4gIGlmICghc3VwcG9ydHNIeWRyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGw7XG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsO1xuICBpc0h5ZHJhdGluZyA9IGZhbHNlO1xufVxuXG52YXIgUmVhY3RDdXJyZW50T3duZXIkMyA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudE93bmVyO1xuXG52YXIgZGlkUmVjZWl2ZVVwZGF0ZSA9IGZhbHNlO1xuXG52YXIgZGlkV2FybkFib3V0QmFkQ2xhc3MgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0Q29udGV4dFR5cGVPbkZ1bmN0aW9uQ29tcG9uZW50ID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25Db21wb25lbnQgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0RnVuY3Rpb25SZWZzID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dFJlYXNzaWduaW5nUHJvcHMgPSB2b2lkIDA7XG5cbntcbiAgZGlkV2FybkFib3V0QmFkQ2xhc3MgPSB7fTtcbiAgZGlkV2FybkFib3V0Q29udGV4dFR5cGVPbkZ1bmN0aW9uQ29tcG9uZW50ID0ge307XG4gIGRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25Db21wb25lbnQgPSB7fTtcbiAgZGlkV2FybkFib3V0RnVuY3Rpb25SZWZzID0ge307XG4gIGRpZFdhcm5BYm91dFJlYXNzaWduaW5nUHJvcHMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwpIHtcbiAgICAvLyBJZiB0aGlzIGlzIGEgZnJlc2ggbmV3IGNvbXBvbmVudCB0aGF0IGhhc24ndCBiZWVuIHJlbmRlcmVkIHlldCwgd2VcbiAgICAvLyB3b24ndCB1cGRhdGUgaXRzIGNoaWxkIHNldCBieSBhcHBseWluZyBtaW5pbWFsIHNpZGUtZWZmZWN0cy4gSW5zdGVhZCxcbiAgICAvLyB3ZSB3aWxsIGFkZCB0aGVtIGFsbCB0byB0aGUgY2hpbGQgYmVmb3JlIGl0IGdldHMgcmVuZGVyZWQuIFRoYXQgbWVhbnNcbiAgICAvLyB3ZSBjYW4gb3B0aW1pemUgdGhpcyByZWNvbmNpbGlhdGlvbiBwYXNzIGJ5IG5vdCB0cmFja2luZyBzaWRlLWVmZmVjdHMuXG4gICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBtb3VudENoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY3VycmVudCBjaGlsZCBpcyB0aGUgc2FtZSBhcyB0aGUgd29yayBpbiBwcm9ncmVzcywgaXQgbWVhbnMgdGhhdFxuICAgIC8vIHdlIGhhdmVuJ3QgeWV0IHN0YXJ0ZWQgYW55IHdvcmsgb24gdGhlc2UgY2hpbGRyZW4uIFRoZXJlZm9yZSwgd2UgdXNlXG4gICAgLy8gdGhlIGNsb25lIGFsZ29yaXRobSB0byBjcmVhdGUgYSBjb3B5IG9mIGFsbCB0aGUgY3VycmVudCBjaGlsZHJlbi5cblxuICAgIC8vIElmIHdlIGhhZCBhbnkgcHJvZ3Jlc3NlZCB3b3JrIGFscmVhZHksIHRoYXQgaXMgaW52YWxpZCBhdCB0aGlzIHBvaW50IHNvXG4gICAgLy8gbGV0J3MgdGhyb3cgaXQgb3V0LlxuICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQkJDEuY2hpbGQsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcmNlVW5tb3VudEN1cnJlbnRBbmRSZWNvbmNpbGUoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBmb3JrIG9mIHJlY29uY2lsZUNoaWxkcmVuLiBJdCdzIHVzZWQgaW4gY2FzZXMgd2hlcmUgd2VcbiAgLy8gd2FudCB0byByZWNvbmNpbGUgd2l0aG91dCBtYXRjaGluZyBhZ2FpbnN0IHRoZSBleGlzdGluZyBzZXQuIFRoaXMgaGFzIHRoZVxuICAvLyBlZmZlY3Qgb2YgYWxsIGN1cnJlbnQgY2hpbGRyZW4gYmVpbmcgdW5tb3VudGVkOyBldmVuIGlmIHRoZSB0eXBlIGFuZCBrZXlcbiAgLy8gYXJlIHRoZSBzYW1lLCB0aGUgb2xkIGNoaWxkIGlzIHVubW91bnRlZCBhbmQgYSBuZXcgY2hpbGQgaXMgY3JlYXRlZC5cbiAgLy9cbiAgLy8gVG8gZG8gdGhpcywgd2UncmUgZ29pbmcgdG8gZ28gdGhyb3VnaCB0aGUgcmVjb25jaWxlIGFsZ29yaXRobSB0d2ljZS4gSW5cbiAgLy8gdGhlIGZpcnN0IHBhc3MsIHdlIHNjaGVkdWxlIGEgZGVsZXRpb24gZm9yIGFsbCB0aGUgY3VycmVudCBjaGlsZHJlbiBieVxuICAvLyBwYXNzaW5nIG51bGwuXG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQkJDEuY2hpbGQsIG51bGwsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgLy8gSW4gdGhlIHNlY29uZCBwYXNzLCB3ZSBtb3VudCB0aGUgbmV3IGNoaWxkcmVuLiBUaGUgdHJpY2sgaGVyZSBpcyB0aGF0IHdlXG4gIC8vIHBhc3MgbnVsbCBpbiBwbGFjZSBvZiB3aGVyZSB3ZSB1c3VhbGx5IHBhc3MgdGhlIGN1cnJlbnQgY2hpbGQgc2V0LiBUaGlzIGhhc1xuICAvLyB0aGUgZWZmZWN0IG9mIHJlbW91bnRpbmcgYWxsIGNoaWxkcmVuIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGVpciB0aGVpclxuICAvLyBpZGVudGl0eSBtYXRjaGVzLlxuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRm9yd2FyZFJlZihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIFRPRE86IGN1cnJlbnQgY2FuIGJlIG5vbi1udWxsIGhlcmUgZXZlbiBpZiB0aGUgY29tcG9uZW50XG4gIC8vIGhhc24ndCB5ZXQgbW91bnRlZC4gVGhpcyBoYXBwZW5zIGFmdGVyIHRoZSBmaXJzdCByZW5kZXIgc3VzcGVuZHMuXG4gIC8vIFdlJ2xsIG5lZWQgdG8gZmlndXJlIG91dCBpZiB0aGlzIGlzIGZpbmUgb3IgY2FuIGNhdXNlIGlzc3Vlcy5cblxuICB7XG4gICAgaWYgKHdvcmtJblByb2dyZXNzLnR5cGUgIT09IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlKSB7XG4gICAgICAvLyBMYXp5IGNvbXBvbmVudCBwcm9wcyBjYW4ndCBiZSB2YWxpZGF0ZWQgaW4gY3JlYXRlRWxlbWVudFxuICAgICAgLy8gYmVjYXVzZSB0aGV5J3JlIG9ubHkgZ3VhcmFudGVlZCB0byBiZSByZXNvbHZlZCBoZXJlLlxuICAgICAgdmFyIGlubmVyUHJvcFR5cGVzID0gQ29tcG9uZW50LnByb3BUeXBlcztcbiAgICAgIGlmIChpbm5lclByb3BUeXBlcykge1xuICAgICAgICBjaGVja1Byb3BUeXBlcyhpbm5lclByb3BUeXBlcywgbmV4dFByb3BzLCAvLyBSZXNvbHZlZCBwcm9wc1xuICAgICAgICAncHJvcCcsIGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KSwgZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlbmRlciA9IENvbXBvbmVudC5yZW5kZXI7XG4gIHZhciByZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG5cbiAgLy8gVGhlIHJlc3QgaXMgYSBmb3JrIG9mIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50XG4gIHZhciBuZXh0Q2hpbGRyZW4gPSB2b2lkIDA7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIHtcbiAgICBSZWFjdEN1cnJlbnRPd25lciQzLmN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICBzZXRDdXJyZW50UGhhc2UoJ3JlbmRlcicpO1xuICAgIG5leHRDaGlsZHJlbiA9IHJlbmRlcldpdGhIb29rcyhjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyLCBuZXh0UHJvcHMsIHJlZiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIGlmIChkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHMgfHwgZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSAmJiB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TW9kZSkge1xuICAgICAgLy8gT25seSBkb3VibGUtcmVuZGVyIGNvbXBvbmVudHMgd2l0aCBIb29rc1xuICAgICAgaWYgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgIT09IG51bGwpIHtcbiAgICAgICAgbmV4dENoaWxkcmVuID0gcmVuZGVyV2l0aEhvb2tzKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXIsIG5leHRQcm9wcywgcmVmLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNldEN1cnJlbnRQaGFzZShudWxsKTtcbiAgfVxuXG4gIGlmIChjdXJyZW50JCQxICE9PSBudWxsICYmICFkaWRSZWNlaXZlVXBkYXRlKSB7XG4gICAgYmFpbG91dEhvb2tzKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfVxuXG4gIC8vIFJlYWN0IERldlRvb2xzIHJlYWRzIHRoaXMgZmxhZy5cbiAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBlcmZvcm1lZFdvcms7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVNZW1vQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgdXBkYXRlRXhwaXJhdGlvblRpbWUsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGlmIChjdXJyZW50JCQxID09PSBudWxsKSB7XG4gICAgdmFyIHR5cGUgPSBDb21wb25lbnQudHlwZTtcbiAgICBpZiAoaXNTaW1wbGVGdW5jdGlvbkNvbXBvbmVudCh0eXBlKSAmJiBDb21wb25lbnQuY29tcGFyZSA9PT0gbnVsbCAmJlxuICAgIC8vIFNpbXBsZU1lbW9Db21wb25lbnQgY29kZXBhdGggZG9lc24ndCByZXNvbHZlIG91dGVyIHByb3BzIGVpdGhlci5cbiAgICBDb21wb25lbnQuZGVmYXVsdFByb3BzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBwbGFpbiBmdW5jdGlvbiBjb21wb25lbnQgd2l0aG91dCBkZWZhdWx0IHByb3BzLFxuICAgICAgLy8gYW5kIHdpdGggb25seSB0aGUgZGVmYXVsdCBzaGFsbG93IGNvbXBhcmlzb24sIHdlIHVwZ3JhZGUgaXRcbiAgICAgIC8vIHRvIGEgU2ltcGxlTWVtb0NvbXBvbmVudCB0byBhbGxvdyBmYXN0IHBhdGggdXBkYXRlcy5cbiAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IFNpbXBsZU1lbW9Db21wb25lbnQ7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gdHlwZTtcbiAgICAgIHtcbiAgICAgICAgdmFsaWRhdGVGdW5jdGlvbkNvbXBvbmVudEluRGV2KHdvcmtJblByb2dyZXNzLCB0eXBlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCB0eXBlLCBuZXh0UHJvcHMsIHVwZGF0ZUV4cGlyYXRpb25UaW1lLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgfVxuICAgIHtcbiAgICAgIHZhciBpbm5lclByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzO1xuICAgICAgaWYgKGlubmVyUHJvcFR5cGVzKSB7XG4gICAgICAgIC8vIElubmVyIG1lbW8gY29tcG9uZW50IHByb3BzIGFyZW4ndCBjdXJyZW50bHkgdmFsaWRhdGVkIGluIGNyZWF0ZUVsZW1lbnQuXG4gICAgICAgIC8vIFdlIGNvdWxkIG1vdmUgaXQgdGhlcmUsIGJ1dCB3ZSdkIHN0aWxsIG5lZWQgdGhpcyBmb3IgbGF6eSBjb2RlIHBhdGguXG4gICAgICAgIGNoZWNrUHJvcFR5cGVzKGlubmVyUHJvcFR5cGVzLCBuZXh0UHJvcHMsIC8vIFJlc29sdmVkIHByb3BzXG4gICAgICAgICdwcm9wJywgZ2V0Q29tcG9uZW50TmFtZSh0eXBlKSwgZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldik7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjaGlsZCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhDb21wb25lbnQudHlwZSwgbnVsbCwgbmV4dFByb3BzLCBudWxsLCB3b3JrSW5Qcm9ncmVzcy5tb2RlLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2hpbGQucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICAgIGNoaWxkLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2hpbGQ7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG4gIHtcbiAgICB2YXIgX3R5cGUgPSBDb21wb25lbnQudHlwZTtcbiAgICB2YXIgX2lubmVyUHJvcFR5cGVzID0gX3R5cGUucHJvcFR5cGVzO1xuICAgIGlmIChfaW5uZXJQcm9wVHlwZXMpIHtcbiAgICAgIC8vIElubmVyIG1lbW8gY29tcG9uZW50IHByb3BzIGFyZW4ndCBjdXJyZW50bHkgdmFsaWRhdGVkIGluIGNyZWF0ZUVsZW1lbnQuXG4gICAgICAvLyBXZSBjb3VsZCBtb3ZlIGl0IHRoZXJlLCBidXQgd2UnZCBzdGlsbCBuZWVkIHRoaXMgZm9yIGxhenkgY29kZSBwYXRoLlxuICAgICAgY2hlY2tQcm9wVHlwZXMoX2lubmVyUHJvcFR5cGVzLCBuZXh0UHJvcHMsIC8vIFJlc29sdmVkIHByb3BzXG4gICAgICAncHJvcCcsIGdldENvbXBvbmVudE5hbWUoX3R5cGUpLCBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KTtcbiAgICB9XG4gIH1cbiAgdmFyIGN1cnJlbnRDaGlsZCA9IGN1cnJlbnQkJDEuY2hpbGQ7IC8vIFRoaXMgaXMgYWx3YXlzIGV4YWN0bHkgb25lIGNoaWxkXG4gIGlmICh1cGRhdGVFeHBpcmF0aW9uVGltZSA8IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhpcyB3aWxsIGJlIHRoZSBwcm9wcyB3aXRoIHJlc29sdmVkIGRlZmF1bHRQcm9wcyxcbiAgICAvLyB1bmxpa2UgY3VycmVudC5tZW1vaXplZFByb3BzIHdoaWNoIHdpbGwgYmUgdGhlIHVucmVzb2x2ZWQgb25lcy5cbiAgICB2YXIgcHJldlByb3BzID0gY3VycmVudENoaWxkLm1lbW9pemVkUHJvcHM7XG4gICAgLy8gRGVmYXVsdCB0byBzaGFsbG93IGNvbXBhcmlzb25cbiAgICB2YXIgY29tcGFyZSA9IENvbXBvbmVudC5jb21wYXJlO1xuICAgIGNvbXBhcmUgPSBjb21wYXJlICE9PSBudWxsID8gY29tcGFyZSA6IHNoYWxsb3dFcXVhbDtcbiAgICBpZiAoY29tcGFyZShwcmV2UHJvcHMsIG5leHRQcm9wcykgJiYgY3VycmVudCQkMS5yZWYgPT09IHdvcmtJblByb2dyZXNzLnJlZikge1xuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG4gIH1cbiAgLy8gUmVhY3QgRGV2VG9vbHMgcmVhZHMgdGhpcyBmbGFnLlxuICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUGVyZm9ybWVkV29yaztcbiAgdmFyIG5ld0NoaWxkID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudENoaWxkLCBuZXh0UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgbmV3Q2hpbGQucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBuZXdDaGlsZC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXdDaGlsZDtcbiAgcmV0dXJuIG5ld0NoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgdXBkYXRlRXhwaXJhdGlvblRpbWUsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIFRPRE86IGN1cnJlbnQgY2FuIGJlIG5vbi1udWxsIGhlcmUgZXZlbiBpZiB0aGUgY29tcG9uZW50XG4gIC8vIGhhc24ndCB5ZXQgbW91bnRlZC4gVGhpcyBoYXBwZW5zIHdoZW4gdGhlIGlubmVyIHJlbmRlciBzdXNwZW5kcy5cbiAgLy8gV2UnbGwgbmVlZCB0byBmaWd1cmUgb3V0IGlmIHRoaXMgaXMgZmluZSBvciBjYW4gY2F1c2UgaXNzdWVzLlxuXG4gIHtcbiAgICBpZiAod29ya0luUHJvZ3Jlc3MudHlwZSAhPT0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUpIHtcbiAgICAgIC8vIExhenkgY29tcG9uZW50IHByb3BzIGNhbid0IGJlIHZhbGlkYXRlZCBpbiBjcmVhdGVFbGVtZW50XG4gICAgICAvLyBiZWNhdXNlIHRoZXkncmUgb25seSBndWFyYW50ZWVkIHRvIGJlIHJlc29sdmVkIGhlcmUuXG4gICAgICB2YXIgb3V0ZXJNZW1vVHlwZSA9IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlO1xuICAgICAgaWYgKG91dGVyTWVtb1R5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSkge1xuICAgICAgICAvLyBXZSB3YXJuIHdoZW4geW91IGRlZmluZSBwcm9wVHlwZXMgb24gbGF6eSgpXG4gICAgICAgIC8vIHNvIGxldCdzIGp1c3Qgc2tpcCBvdmVyIGl0IHRvIGZpbmQgbWVtbygpIG91dGVyIHdyYXBwZXIuXG4gICAgICAgIC8vIElubmVyIHByb3BzIGZvciBtZW1vIGFyZSB2YWxpZGF0ZWQgbGF0ZXIuXG4gICAgICAgIG91dGVyTWVtb1R5cGUgPSByZWZpbmVSZXNvbHZlZExhenlDb21wb25lbnQob3V0ZXJNZW1vVHlwZSk7XG4gICAgICB9XG4gICAgICB2YXIgb3V0ZXJQcm9wVHlwZXMgPSBvdXRlck1lbW9UeXBlICYmIG91dGVyTWVtb1R5cGUucHJvcFR5cGVzO1xuICAgICAgaWYgKG91dGVyUHJvcFR5cGVzKSB7XG4gICAgICAgIGNoZWNrUHJvcFR5cGVzKG91dGVyUHJvcFR5cGVzLCBuZXh0UHJvcHMsIC8vIFJlc29sdmVkIChTaW1wbGVNZW1vQ29tcG9uZW50IGhhcyBubyBkZWZhdWx0UHJvcHMpXG4gICAgICAgICdwcm9wJywgZ2V0Q29tcG9uZW50TmFtZShvdXRlck1lbW9UeXBlKSwgZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldik7XG4gICAgICB9XG4gICAgICAvLyBJbm5lciBwcm9wVHlwZXMgd2lsbCBiZSB2YWxpZGF0ZWQgaW4gdGhlIGZ1bmN0aW9uIGNvbXBvbmVudCBwYXRoLlxuICAgIH1cbiAgfVxuICBpZiAoY3VycmVudCQkMSAhPT0gbnVsbCkge1xuICAgIHZhciBwcmV2UHJvcHMgPSBjdXJyZW50JCQxLm1lbW9pemVkUHJvcHM7XG4gICAgaWYgKHNoYWxsb3dFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcykgJiYgY3VycmVudCQkMS5yZWYgPT09IHdvcmtJblByb2dyZXNzLnJlZikge1xuICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgaWYgKHVwZGF0ZUV4cGlyYXRpb25UaW1lIDwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVGcmFnbWVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU1vZGUoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBuZXh0Q2hpbGRyZW4gPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW47XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVQcm9maWxlcihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlO1xuICB9XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiBtYXJrUmVmKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzKSB7XG4gIHZhciByZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG4gIGlmIChjdXJyZW50JCQxID09PSBudWxsICYmIHJlZiAhPT0gbnVsbCB8fCBjdXJyZW50JCQxICE9PSBudWxsICYmIGN1cnJlbnQkJDEucmVmICE9PSByZWYpIHtcbiAgICAvLyBTY2hlZHVsZSBhIFJlZiBlZmZlY3RcbiAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUmVmO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAge1xuICAgIGlmICh3b3JrSW5Qcm9ncmVzcy50eXBlICE9PSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSkge1xuICAgICAgLy8gTGF6eSBjb21wb25lbnQgcHJvcHMgY2FuJ3QgYmUgdmFsaWRhdGVkIGluIGNyZWF0ZUVsZW1lbnRcbiAgICAgIC8vIGJlY2F1c2UgdGhleSdyZSBvbmx5IGd1YXJhbnRlZWQgdG8gYmUgcmVzb2x2ZWQgaGVyZS5cbiAgICAgIHZhciBpbm5lclByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXM7XG4gICAgICBpZiAoaW5uZXJQcm9wVHlwZXMpIHtcbiAgICAgICAgY2hlY2tQcm9wVHlwZXMoaW5uZXJQcm9wVHlwZXMsIG5leHRQcm9wcywgLy8gUmVzb2x2ZWQgcHJvcHNcbiAgICAgICAgJ3Byb3AnLCBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCksIGdldEN1cnJlbnRGaWJlclN0YWNrSW5EZXYpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciB1bm1hc2tlZENvbnRleHQgPSBnZXRVbm1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgdHJ1ZSk7XG4gIHZhciBjb250ZXh0ID0gZ2V0TWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0KTtcblxuICB2YXIgbmV4dENoaWxkcmVuID0gdm9pZCAwO1xuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB7XG4gICAgUmVhY3RDdXJyZW50T3duZXIkMy5jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgc2V0Q3VycmVudFBoYXNlKCdyZW5kZXInKTtcbiAgICBuZXh0Q2hpbGRyZW4gPSByZW5kZXJXaXRoSG9va3MoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgaWYgKGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0cyB8fCBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHNGb3JTdHJpY3RNb2RlICYmIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAvLyBPbmx5IGRvdWJsZS1yZW5kZXIgY29tcG9uZW50cyB3aXRoIEhvb2tzXG4gICAgICBpZiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICBuZXh0Q2hpbGRyZW4gPSByZW5kZXJXaXRoSG9va3MoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNldEN1cnJlbnRQaGFzZShudWxsKTtcbiAgfVxuXG4gIGlmIChjdXJyZW50JCQxICE9PSBudWxsICYmICFkaWRSZWNlaXZlVXBkYXRlKSB7XG4gICAgYmFpbG91dEhvb2tzKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfVxuXG4gIC8vIFJlYWN0IERldlRvb2xzIHJlYWRzIHRoaXMgZmxhZy5cbiAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBlcmZvcm1lZFdvcms7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDbGFzc0NvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHtcbiAgICBpZiAod29ya0luUHJvZ3Jlc3MudHlwZSAhPT0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUpIHtcbiAgICAgIC8vIExhenkgY29tcG9uZW50IHByb3BzIGNhbid0IGJlIHZhbGlkYXRlZCBpbiBjcmVhdGVFbGVtZW50XG4gICAgICAvLyBiZWNhdXNlIHRoZXkncmUgb25seSBndWFyYW50ZWVkIHRvIGJlIHJlc29sdmVkIGhlcmUuXG4gICAgICB2YXIgaW5uZXJQcm9wVHlwZXMgPSBDb21wb25lbnQucHJvcFR5cGVzO1xuICAgICAgaWYgKGlubmVyUHJvcFR5cGVzKSB7XG4gICAgICAgIGNoZWNrUHJvcFR5cGVzKGlubmVyUHJvcFR5cGVzLCBuZXh0UHJvcHMsIC8vIFJlc29sdmVkIHByb3BzXG4gICAgICAgICdwcm9wJywgZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpLCBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBQdXNoIGNvbnRleHQgcHJvdmlkZXJzIGVhcmx5IHRvIHByZXZlbnQgY29udGV4dCBzdGFjayBtaXNtYXRjaGVzLlxuICAvLyBEdXJpbmcgbW91bnRpbmcgd2UgZG9uJ3Qga25vdyB0aGUgY2hpbGQgY29udGV4dCB5ZXQgYXMgdGhlIGluc3RhbmNlIGRvZXNuJ3QgZXhpc3QuXG4gIC8vIFdlIHdpbGwgaW52YWxpZGF0ZSB0aGUgY2hpbGQgY29udGV4dCBpbiBmaW5pc2hDbGFzc0NvbXBvbmVudCgpIHJpZ2h0IGFmdGVyIHJlbmRlcmluZy5cbiAgdmFyIGhhc0NvbnRleHQgPSB2b2lkIDA7XG4gIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgaGFzQ29udGV4dCA9IHRydWU7XG4gICAgcHVzaENvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gIH0gZWxzZSB7XG4gICAgaGFzQ29udGV4dCA9IGZhbHNlO1xuICB9XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG5cbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICB2YXIgc2hvdWxkVXBkYXRlID0gdm9pZCAwO1xuICBpZiAoaW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICBpZiAoY3VycmVudCQkMSAhPT0gbnVsbCkge1xuICAgICAgLy8gQW4gY2xhc3MgY29tcG9uZW50IHdpdGhvdXQgYW4gaW5zdGFuY2Ugb25seSBtb3VudHMgaWYgaXQgc3VzcGVuZGVkXG4gICAgICAvLyBpbnNpZGUgYSBub24tIGNvbmN1cnJlbnQgdHJlZSwgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBXZSB3YW50IHRvXG4gICAgICAvLyB0cmVlIGl0IGxpa2UgYSBuZXcgbW91bnQsIGV2ZW4gdGhvdWdoIGFuIGVtcHR5IHZlcnNpb24gb2YgaXQgYWxyZWFkeVxuICAgICAgLy8gY29tbWl0dGVkLiBEaXNjb25uZWN0IHRoZSBhbHRlcm5hdGUgcG9pbnRlcnMuXG4gICAgICBjdXJyZW50JCQxLmFsdGVybmF0ZSA9IG51bGw7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGUgPSBudWxsO1xuICAgICAgLy8gU2luY2UgdGhpcyBpcyBjb25jZXB0dWFsbHkgYSBuZXcgZmliZXIsIHNjaGVkdWxlIGEgUGxhY2VtZW50IGVmZmVjdFxuICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBsYWNlbWVudDtcbiAgICB9XG4gICAgLy8gSW4gdGhlIGluaXRpYWwgcGFzcyB3ZSBtaWdodCBuZWVkIHRvIGNvbnN0cnVjdCB0aGUgaW5zdGFuY2UuXG4gICAgY29uc3RydWN0Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICBtb3VudENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgc2hvdWxkVXBkYXRlID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChjdXJyZW50JCQxID09PSBudWxsKSB7XG4gICAgLy8gSW4gYSByZXN1bWUsIHdlJ2xsIGFscmVhZHkgaGF2ZSBhbiBpbnN0YW5jZSB3ZSBjYW4gcmV1c2UuXG4gICAgc2hvdWxkVXBkYXRlID0gcmVzdW1lTW91bnRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB9IGVsc2Uge1xuICAgIHNob3VsZFVwZGF0ZSA9IHVwZGF0ZUNsYXNzSW5zdGFuY2UoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIH1cbiAgdmFyIG5leHRVbml0T2ZXb3JrID0gZmluaXNoQ2xhc3NDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgc2hvdWxkVXBkYXRlLCBoYXNDb250ZXh0LCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIHtcbiAgICB2YXIgaW5zdCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBpZiAoaW5zdC5wcm9wcyAhPT0gbmV4dFByb3BzKSB7XG4gICAgICAhZGlkV2FybkFib3V0UmVhc3NpZ25pbmdQcm9wcyA/IHdhcm5pbmckMShmYWxzZSwgJ0l0IGxvb2tzIGxpa2UgJXMgaXMgcmVhc3NpZ25pbmcgaXRzIG93biBgdGhpcy5wcm9wc2Agd2hpbGUgcmVuZGVyaW5nLiAnICsgJ1RoaXMgaXMgbm90IHN1cHBvcnRlZCBhbmQgY2FuIGxlYWQgdG8gY29uZnVzaW5nIGJ1Z3MuJywgZ2V0Q29tcG9uZW50TmFtZSh3b3JrSW5Qcm9ncmVzcy50eXBlKSB8fCAnYSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIGRpZFdhcm5BYm91dFJlYXNzaWduaW5nUHJvcHMgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV4dFVuaXRPZldvcms7XG59XG5cbmZ1bmN0aW9uIGZpbmlzaENsYXNzQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHNob3VsZFVwZGF0ZSwgaGFzQ29udGV4dCwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgLy8gUmVmcyBzaG91bGQgdXBkYXRlIGV2ZW4gaWYgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHJldHVybnMgZmFsc2VcbiAgbWFya1JlZihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgdmFyIGRpZENhcHR1cmVFcnJvciA9ICh3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgJiBEaWRDYXB0dXJlKSAhPT0gTm9FZmZlY3Q7XG5cbiAgaWYgKCFzaG91bGRVcGRhdGUgJiYgIWRpZENhcHR1cmVFcnJvcikge1xuICAgIC8vIENvbnRleHQgcHJvdmlkZXJzIHNob3VsZCBkZWZlciB0byBzQ1UgZm9yIHJlbmRlcmluZ1xuICAgIGlmIChoYXNDb250ZXh0KSB7XG4gICAgICBpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB9XG5cbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuXG4gIC8vIFJlcmVuZGVyXG4gIFJlYWN0Q3VycmVudE93bmVyJDMuY3VycmVudCA9IHdvcmtJblByb2dyZXNzO1xuICB2YXIgbmV4dENoaWxkcmVuID0gdm9pZCAwO1xuICBpZiAoZGlkQ2FwdHVyZUVycm9yICYmIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gSWYgd2UgY2FwdHVyZWQgYW4gZXJyb3IsIGJ1dCBnZXREZXJpdmVkU3RhdGVGcm9tIGNhdGNoIGlzIG5vdCBkZWZpbmVkLFxuICAgIC8vIHVubW91bnQgYWxsIHRoZSBjaGlsZHJlbi4gY29tcG9uZW50RGlkQ2F0Y2ggd2lsbCBzY2hlZHVsZSBhbiB1cGRhdGUgdG9cbiAgICAvLyByZS1yZW5kZXIgYSBmYWxsYmFjay4gVGhpcyBpcyB0ZW1wb3JhcnkgdW50aWwgd2UgbWlncmF0ZSBldmVyeW9uZSB0b1xuICAgIC8vIHRoZSBuZXcgQVBJLlxuICAgIC8vIFRPRE86IFdhcm4gaW4gYSBmdXR1cmUgcmVsZWFzZS5cbiAgICBuZXh0Q2hpbGRyZW4gPSBudWxsO1xuXG4gICAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICAgIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAge1xuICAgICAgc2V0Q3VycmVudFBoYXNlKCdyZW5kZXInKTtcbiAgICAgIG5leHRDaGlsZHJlbiA9IGluc3RhbmNlLnJlbmRlcigpO1xuICAgICAgaWYgKGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0cyB8fCBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHNGb3JTdHJpY3RNb2RlICYmIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAgIGluc3RhbmNlLnJlbmRlcigpO1xuICAgICAgfVxuICAgICAgc2V0Q3VycmVudFBoYXNlKG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlYWN0IERldlRvb2xzIHJlYWRzIHRoaXMgZmxhZy5cbiAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBlcmZvcm1lZFdvcms7XG4gIGlmIChjdXJyZW50JCQxICE9PSBudWxsICYmIGRpZENhcHR1cmVFcnJvcikge1xuICAgIC8vIElmIHdlJ3JlIHJlY292ZXJpbmcgZnJvbSBhbiBlcnJvciwgcmVjb25jaWxlIHdpdGhvdXQgcmV1c2luZyBhbnkgb2ZcbiAgICAvLyB0aGUgZXhpc3RpbmcgY2hpbGRyZW4uIENvbmNlcHR1YWxseSwgdGhlIG5vcm1hbCBjaGlsZHJlbiBhbmQgdGhlIGNoaWxkcmVuXG4gICAgLy8gdGhhdCBhcmUgc2hvd24gb24gZXJyb3IgYXJlIHR3byBkaWZmZXJlbnQgc2V0cywgc28gd2Ugc2hvdWxkbid0IHJldXNlXG4gICAgLy8gbm9ybWFsIGNoaWxkcmVuIGV2ZW4gaWYgdGhlaXIgaWRlbnRpdGllcyBtYXRjaC5cbiAgICBmb3JjZVVubW91bnRDdXJyZW50QW5kUmVjb25jaWxlKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIH1cblxuICAvLyBNZW1vaXplIHN0YXRlIHVzaW5nIHRoZSB2YWx1ZXMgd2UganVzdCB1c2VkIHRvIHJlbmRlci5cbiAgLy8gVE9ETzogUmVzdHJ1Y3R1cmUgc28gd2UgbmV2ZXIgcmVhZCB2YWx1ZXMgZnJvbSB0aGUgaW5zdGFuY2UuXG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBpbnN0YW5jZS5zdGF0ZTtcblxuICAvLyBUaGUgY29udGV4dCBtaWdodCBoYXZlIGNoYW5nZWQgc28gd2UgbmVlZCB0byByZWNhbGN1bGF0ZSBpdC5cbiAgaWYgKGhhc0NvbnRleHQpIHtcbiAgICBpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiBwdXNoSG9zdFJvb3RDb250ZXh0KHdvcmtJblByb2dyZXNzKSB7XG4gIHZhciByb290ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICBpZiAocm9vdC5wZW5kaW5nQ29udGV4dCkge1xuICAgIHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Qod29ya0luUHJvZ3Jlc3MsIHJvb3QucGVuZGluZ0NvbnRleHQsIHJvb3QucGVuZGluZ0NvbnRleHQgIT09IHJvb3QuY29udGV4dCk7XG4gIH0gZWxzZSBpZiAocm9vdC5jb250ZXh0KSB7XG4gICAgLy8gU2hvdWxkIGFsd2F5cyBiZSBzZXRcbiAgICBwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0KHdvcmtJblByb2dyZXNzLCByb290LmNvbnRleHQsIGZhbHNlKTtcbiAgfVxuICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgcm9vdC5jb250YWluZXJJbmZvKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlSG9zdFJvb3QoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHB1c2hIb3N0Um9vdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICB2YXIgdXBkYXRlUXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgISh1cGRhdGVRdWV1ZSAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdJZiB0aGUgcm9vdCBkb2VzIG5vdCBoYXZlIGFuIHVwZGF0ZVF1ZXVlLCB3ZSBzaG91bGQgaGF2ZSBhbHJlYWR5IGJhaWxlZCBvdXQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHZhciBwcmV2U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICB2YXIgcHJldkNoaWxkcmVuID0gcHJldlN0YXRlICE9PSBudWxsID8gcHJldlN0YXRlLmVsZW1lbnQgOiBudWxsO1xuICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVF1ZXVlLCBuZXh0UHJvcHMsIG51bGwsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgdmFyIG5leHRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIC8vIENhdXRpb246IFJlYWN0IERldlRvb2xzIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJvcGVydHlcbiAgLy8gYmVpbmcgY2FsbGVkIFwiZWxlbWVudFwiLlxuICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dFN0YXRlLmVsZW1lbnQ7XG4gIGlmIChuZXh0Q2hpbGRyZW4gPT09IHByZXZDaGlsZHJlbikge1xuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyB0aGUgc2FtZSBhcyBiZWZvcmUsIHRoYXQncyBhIGJhaWxvdXQgYmVjYXVzZSB3ZSBoYWRcbiAgICAvLyBubyB3b3JrIHRoYXQgZXhwaXJlcyBhdCB0aGlzIHRpbWUuXG4gICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIH1cbiAgdmFyIHJvb3QgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIGlmICgoY3VycmVudCQkMSA9PT0gbnVsbCB8fCBjdXJyZW50JCQxLmNoaWxkID09PSBudWxsKSAmJiByb290Lmh5ZHJhdGUgJiYgZW50ZXJIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykpIHtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBjdXJyZW50IGNoaWxkcmVuIHRoaXMgbWlnaHQgYmUgdGhlIGZpcnN0IHBhc3MuXG4gICAgLy8gV2UgYWx3YXlzIHRyeSB0byBoeWRyYXRlLiBJZiB0aGlzIGlzbid0IGEgaHlkcmF0aW9uIHBhc3MgdGhlcmUgd29uJ3RcbiAgICAvLyBiZSBhbnkgY2hpbGRyZW4gdG8gaHlkcmF0ZSB3aGljaCBpcyBlZmZlY3RpdmVseSB0aGUgc2FtZSB0aGluZyBhc1xuICAgIC8vIG5vdCBoeWRyYXRpbmcuXG5cbiAgICAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgdHJhY2sgdGhlIGhvc3Qgcm9vdCBhcyBhIHBsYWNlbWVudCB0b1xuICAgIC8vIGtub3cgdGhhdCB3ZSdyZSBjdXJyZW50bHkgaW4gYSBtb3VudGluZyBzdGF0ZS4gVGhhdCB3YXkgaXNNb3VudGVkXG4gICAgLy8gd29ya3MgYXMgZXhwZWN0ZWQuIFdlIG11c3QgcmVzZXQgdGhpcyBiZWZvcmUgY29tbWl0dGluZy5cbiAgICAvLyBUT0RPOiBEZWxldGUgdGhpcyB3aGVuIHdlIGRlbGV0ZSBpc01vdW50ZWQgYW5kIGZpbmRET01Ob2RlLlxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCBjaGlsZHJlbiBtb3VudCBpbnRvIHRoaXMgcm9vdCB3aXRob3V0IHRyYWNraW5nXG4gICAgLy8gc2lkZS1lZmZlY3RzLiBUaGlzIGVuc3VyZXMgdGhhdCB3ZSBkb24ndCBzdG9yZSBQbGFjZW1lbnQgZWZmZWN0cyBvblxuICAgIC8vIG5vZGVzIHRoYXQgd2lsbCBiZSBoeWRyYXRlZC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG1vdW50Q2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIG51bGwsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSByZXNldCBoeWRyYXRpb24gc3RhdGUgaW4gY2FzZSB3ZSBhYm9ydGVkIGFuZCByZXN1bWVkIGFub3RoZXJcbiAgICAvLyByb290LlxuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gIH1cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVIb3N0Q29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuXG4gIGlmIChjdXJyZW50JCQxID09PSBudWxsKSB7XG4gICAgdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpO1xuICB9XG5cbiAgdmFyIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB2YXIgcHJldlByb3BzID0gY3VycmVudCQkMSAhPT0gbnVsbCA/IGN1cnJlbnQkJDEubWVtb2l6ZWRQcm9wcyA6IG51bGw7XG5cbiAgdmFyIG5leHRDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbjtcbiAgdmFyIGlzRGlyZWN0VGV4dENoaWxkID0gc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgbmV4dFByb3BzKTtcblxuICBpZiAoaXNEaXJlY3RUZXh0Q2hpbGQpIHtcbiAgICAvLyBXZSBzcGVjaWFsIGNhc2UgYSBkaXJlY3QgdGV4dCBjaGlsZCBvZiBhIGhvc3Qgbm9kZS4gVGhpcyBpcyBhIGNvbW1vblxuICAgIC8vIGNhc2UuIFdlIHdvbid0IGhhbmRsZSBpdCBhcyBhIHJlaWZpZWQgY2hpbGQuIFdlIHdpbGwgaW5zdGVhZCBoYW5kbGVcbiAgICAvLyB0aGlzIGluIHRoZSBob3N0IGVudmlyb25tZW50IHRoYXQgYWxzbyBoYXZlIGFjY2VzcyB0byB0aGlzIHByb3AuIFRoYXRcbiAgICAvLyBhdm9pZHMgYWxsb2NhdGluZyBhbm90aGVyIEhvc3RUZXh0IGZpYmVyIGFuZCB0cmF2ZXJzaW5nIGl0LlxuICAgIG5leHRDaGlsZHJlbiA9IG51bGw7XG4gIH0gZWxzZSBpZiAocHJldlByb3BzICE9PSBudWxsICYmIHNob3VsZFNldFRleHRDb250ZW50KHR5cGUsIHByZXZQcm9wcykpIHtcbiAgICAvLyBJZiB3ZSdyZSBzd2l0Y2hpbmcgZnJvbSBhIGRpcmVjdCB0ZXh0IGNoaWxkIHRvIGEgbm9ybWFsIGNoaWxkLCBvciB0b1xuICAgIC8vIGVtcHR5LCB3ZSBuZWVkIHRvIHNjaGVkdWxlIHRoZSB0ZXh0IGNvbnRlbnQgdG8gYmUgcmVzZXQuXG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IENvbnRlbnRSZXNldDtcbiAgfVxuXG4gIG1hcmtSZWYoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gIC8vIENoZWNrIHRoZSBob3N0IGNvbmZpZyB0byBzZWUgaWYgdGhlIGNoaWxkcmVuIGFyZSBvZmZzY3JlZW4vaGlkZGVuLlxuICBpZiAocmVuZGVyRXhwaXJhdGlvblRpbWUgIT09IE5ldmVyICYmIHdvcmtJblByb2dyZXNzLm1vZGUgJiBDb25jdXJyZW50TW9kZSAmJiBzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlKHR5cGUsIG5leHRQcm9wcykpIHtcbiAgICAvLyBTY2hlZHVsZSB0aGlzIGZpYmVyIHRvIHJlLXJlbmRlciBhdCBvZmZzY3JlZW4gcHJpb3JpdHkuIFRoZW4gYmFpbG91dC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkRXhwaXJhdGlvblRpbWUgPSBOZXZlcjtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVIb3N0VGV4dChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcykge1xuICBpZiAoY3VycmVudCQkMSA9PT0gbnVsbCkge1xuICAgIHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlKHdvcmtJblByb2dyZXNzKTtcbiAgfVxuICAvLyBOb3RoaW5nIHRvIGRvIGhlcmUuIFRoaXMgaXMgdGVybWluYWwuIFdlJ2xsIGRvIHRoZSBjb21wbGV0aW9uIHN0ZXBcbiAgLy8gaW1tZWRpYXRlbHkgYWZ0ZXIuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBtb3VudExhenlDb21wb25lbnQoX2N1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBlbGVtZW50VHlwZSwgdXBkYXRlRXhwaXJhdGlvblRpbWUsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGlmIChfY3VycmVudCAhPT0gbnVsbCkge1xuICAgIC8vIEFuIGxhenkgY29tcG9uZW50IG9ubHkgbW91bnRzIGlmIGl0IHN1c3BlbmRlZCBpbnNpZGUgYSBub24tXG4gICAgLy8gY29uY3VycmVudCB0cmVlLCBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFdlIHdhbnQgdG8gdHJlYXQgaXQgbGlrZVxuICAgIC8vIGEgbmV3IG1vdW50LCBldmVuIHRob3VnaCBhbiBlbXB0eSB2ZXJzaW9uIG9mIGl0IGFscmVhZHkgY29tbWl0dGVkLlxuICAgIC8vIERpc2Nvbm5lY3QgdGhlIGFsdGVybmF0ZSBwb2ludGVycy5cbiAgICBfY3VycmVudC5hbHRlcm5hdGUgPSBudWxsO1xuICAgIHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IG51bGw7XG4gICAgLy8gU2luY2UgdGhpcyBpcyBjb25jZXB0dWFsbHkgYSBuZXcgZmliZXIsIHNjaGVkdWxlIGEgUGxhY2VtZW50IGVmZmVjdFxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgcHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIC8vIFdlIGNhbid0IHN0YXJ0IGEgVXNlciBUaW1pbmcgbWVhc3VyZW1lbnQgd2l0aCBjb3JyZWN0IGxhYmVsIHlldC5cbiAgLy8gQ2FuY2VsIGFuZCByZXN1bWUgcmlnaHQgYWZ0ZXIgd2Uga25vdyB0aGUgdGFnLlxuICBjYW5jZWxXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuICB2YXIgQ29tcG9uZW50ID0gcmVhZExhenlDb21wb25lbnRUeXBlKGVsZW1lbnRUeXBlKTtcbiAgLy8gU3RvcmUgdGhlIHVud3JhcHBlZCBjb21wb25lbnQgaW4gdGhlIHR5cGUuXG4gIHdvcmtJblByb2dyZXNzLnR5cGUgPSBDb21wb25lbnQ7XG4gIHZhciByZXNvbHZlZFRhZyA9IHdvcmtJblByb2dyZXNzLnRhZyA9IHJlc29sdmVMYXp5Q29tcG9uZW50VGFnKENvbXBvbmVudCk7XG4gIHN0YXJ0V29ya1RpbWVyKHdvcmtJblByb2dyZXNzKTtcbiAgdmFyIHJlc29sdmVkUHJvcHMgPSByZXNvbHZlRGVmYXVsdFByb3BzKENvbXBvbmVudCwgcHJvcHMpO1xuICB2YXIgY2hpbGQgPSB2b2lkIDA7XG4gIHN3aXRjaCAocmVzb2x2ZWRUYWcpIHtcbiAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB7XG4gICAgICAgICAgdmFsaWRhdGVGdW5jdGlvbkNvbXBvbmVudEluRGV2KHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkID0gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQobnVsbCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcmVzb2x2ZWRQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBjaGlsZCA9IHVwZGF0ZUNsYXNzQ29tcG9uZW50KG51bGwsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlc29sdmVkUHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgICAge1xuICAgICAgICBjaGlsZCA9IHVwZGF0ZUZvcndhcmRSZWYobnVsbCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcmVzb2x2ZWRQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIE1lbW9Db21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3MudHlwZSAhPT0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUpIHtcbiAgICAgICAgICAgIHZhciBvdXRlclByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXM7XG4gICAgICAgICAgICBpZiAob3V0ZXJQcm9wVHlwZXMpIHtcbiAgICAgICAgICAgICAgY2hlY2tQcm9wVHlwZXMob3V0ZXJQcm9wVHlwZXMsIHJlc29sdmVkUHJvcHMsIC8vIFJlc29sdmVkIGZvciBvdXRlciBvbmx5XG4gICAgICAgICAgICAgICdwcm9wJywgZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpLCBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQgPSB1cGRhdGVNZW1vQ29tcG9uZW50KG51bGwsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlc29sdmVEZWZhdWx0UHJvcHMoQ29tcG9uZW50LnR5cGUsIHJlc29sdmVkUHJvcHMpLCAvLyBUaGUgaW5uZXIgdHlwZSBjYW4gaGF2ZSBkZWZhdWx0cyB0b29cbiAgICAgICAgdXBkYXRlRXhwaXJhdGlvblRpbWUsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdmFyIGhpbnQgPSAnJztcbiAgICAgICAge1xuICAgICAgICAgIGlmIChDb21wb25lbnQgIT09IG51bGwgJiYgdHlwZW9mIENvbXBvbmVudCA9PT0gJ29iamVjdCcgJiYgQ29tcG9uZW50LiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUpIHtcbiAgICAgICAgICAgIGhpbnQgPSAnIERpZCB5b3Ugd3JhcCBhIGNvbXBvbmVudCBpbiBSZWFjdC5sYXp5KCkgbW9yZSB0aGFuIG9uY2U/JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhpcyBtZXNzYWdlIGludGVudGlvbmFsbHkgZG9lc24ndCBtZW50aW9uIEZvcndhcmRSZWYgb3IgTWVtb0NvbXBvbmVudFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBmYWN0IHRoYXQgaXQncyBhIHNlcGFyYXRlIHR5cGUgb2Ygd29yayBpcyBhblxuICAgICAgICAvLyBpbXBsZW1lbnRhdGlvbiBkZXRhaWwuXG4gICAgICAgIGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgdHlwZSBpcyBpbnZhbGlkLiBSZWNlaXZlZCBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0bzogJXMuIExhenkgZWxlbWVudCB0eXBlIG11c3QgcmVzb2x2ZSB0byBhIGNsYXNzIG9yIGZ1bmN0aW9uLiVzJywgQ29tcG9uZW50LCBoaW50KTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIG1vdW50SW5jb21wbGV0ZUNsYXNzQ29tcG9uZW50KF9jdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGlmIChfY3VycmVudCAhPT0gbnVsbCkge1xuICAgIC8vIEFuIGluY29tcGxldGUgY29tcG9uZW50IG9ubHkgbW91bnRzIGlmIGl0IHN1c3BlbmRlZCBpbnNpZGUgYSBub24tXG4gICAgLy8gY29uY3VycmVudCB0cmVlLCBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFdlIHdhbnQgdG8gdHJlYXQgaXQgbGlrZVxuICAgIC8vIGEgbmV3IG1vdW50LCBldmVuIHRob3VnaCBhbiBlbXB0eSB2ZXJzaW9uIG9mIGl0IGFscmVhZHkgY29tbWl0dGVkLlxuICAgIC8vIERpc2Nvbm5lY3QgdGhlIGFsdGVybmF0ZSBwb2ludGVycy5cbiAgICBfY3VycmVudC5hbHRlcm5hdGUgPSBudWxsO1xuICAgIHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IG51bGw7XG4gICAgLy8gU2luY2UgdGhpcyBpcyBjb25jZXB0dWFsbHkgYSBuZXcgZmliZXIsIHNjaGVkdWxlIGEgUGxhY2VtZW50IGVmZmVjdFxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG4gIH1cblxuICAvLyBQcm9tb3RlIHRoZSBmaWJlciB0byBhIGNsYXNzIGFuZCB0cnkgcmVuZGVyaW5nIGFnYWluLlxuICB3b3JrSW5Qcm9ncmVzcy50YWcgPSBDbGFzc0NvbXBvbmVudDtcblxuICAvLyBUaGUgcmVzdCBvZiB0aGlzIGZ1bmN0aW9uIGlzIGEgZm9yayBvZiBgdXBkYXRlQ2xhc3NDb21wb25lbnRgXG5cbiAgLy8gUHVzaCBjb250ZXh0IHByb3ZpZGVycyBlYXJseSB0byBwcmV2ZW50IGNvbnRleHQgc3RhY2sgbWlzbWF0Y2hlcy5cbiAgLy8gRHVyaW5nIG1vdW50aW5nIHdlIGRvbid0IGtub3cgdGhlIGNoaWxkIGNvbnRleHQgeWV0IGFzIHRoZSBpbnN0YW5jZSBkb2Vzbid0IGV4aXN0LlxuICAvLyBXZSB3aWxsIGludmFsaWRhdGUgdGhlIGNoaWxkIGNvbnRleHQgaW4gZmluaXNoQ2xhc3NDb21wb25lbnQoKSByaWdodCBhZnRlciByZW5kZXJpbmcuXG4gIHZhciBoYXNDb250ZXh0ID0gdm9pZCAwO1xuICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgIGhhc0NvbnRleHQgPSB0cnVlO1xuICAgIHB1c2hDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICB9IGVsc2Uge1xuICAgIGhhc0NvbnRleHQgPSBmYWxzZTtcbiAgfVxuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuXG4gIGNvbnN0cnVjdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIG1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcblxuICByZXR1cm4gZmluaXNoQ2xhc3NDb21wb25lbnQobnVsbCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgdHJ1ZSwgaGFzQ29udGV4dCwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xufVxuXG5mdW5jdGlvbiBtb3VudEluZGV0ZXJtaW5hdGVDb21wb25lbnQoX2N1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGlmIChfY3VycmVudCAhPT0gbnVsbCkge1xuICAgIC8vIEFuIGluZGV0ZXJtaW5hdGUgY29tcG9uZW50IG9ubHkgbW91bnRzIGlmIGl0IHN1c3BlbmRlZCBpbnNpZGUgYSBub24tXG4gICAgLy8gY29uY3VycmVudCB0cmVlLCBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFdlIHdhbnQgdG8gdHJlYXQgaXQgbGlrZVxuICAgIC8vIGEgbmV3IG1vdW50LCBldmVuIHRob3VnaCBhbiBlbXB0eSB2ZXJzaW9uIG9mIGl0IGFscmVhZHkgY29tbWl0dGVkLlxuICAgIC8vIERpc2Nvbm5lY3QgdGhlIGFsdGVybmF0ZSBwb2ludGVycy5cbiAgICBfY3VycmVudC5hbHRlcm5hdGUgPSBudWxsO1xuICAgIHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IG51bGw7XG4gICAgLy8gU2luY2UgdGhpcyBpcyBjb25jZXB0dWFsbHkgYSBuZXcgZmliZXIsIHNjaGVkdWxlIGEgUGxhY2VtZW50IGVmZmVjdFxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgcHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHZhciB1bm1hc2tlZENvbnRleHQgPSBnZXRVbm1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgZmFsc2UpO1xuICB2YXIgY29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCk7XG5cbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcblxuICB2YXIgdmFsdWUgPSB2b2lkIDA7XG5cbiAge1xuICAgIGlmIChDb21wb25lbnQucHJvdG90eXBlICYmIHR5cGVvZiBDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCkgfHwgJ1Vua25vd24nO1xuXG4gICAgICBpZiAoIWRpZFdhcm5BYm91dEJhZENsYXNzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgXCJUaGUgPCVzIC8+IGNvbXBvbmVudCBhcHBlYXJzIHRvIGhhdmUgYSByZW5kZXIgbWV0aG9kLCBidXQgZG9lc24ndCBleHRlbmQgUmVhY3QuQ29tcG9uZW50LiBcIiArICdUaGlzIGlzIGxpa2VseSB0byBjYXVzZSBlcnJvcnMuIENoYW5nZSAlcyB0byBleHRlbmQgUmVhY3QuQ29tcG9uZW50IGluc3RlYWQuJywgY29tcG9uZW50TmFtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICAgIGRpZFdhcm5BYm91dEJhZENsYXNzW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdE1vZGUpIHtcbiAgICAgIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLnJlY29yZExlZ2FjeUNvbnRleHRXYXJuaW5nKHdvcmtJblByb2dyZXNzLCBudWxsKTtcbiAgICB9XG5cbiAgICBSZWFjdEN1cnJlbnRPd25lciQzLmN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICB2YWx1ZSA9IHJlbmRlcldpdGhIb29rcyhudWxsLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBwcm9wcywgY29udGV4dCwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB9XG4gIC8vIFJlYWN0IERldlRvb2xzIHJlYWRzIHRoaXMgZmxhZy5cbiAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBlcmZvcm1lZFdvcms7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWx1ZS4kJHR5cGVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gUHJvY2VlZCB1bmRlciB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoaXMgaXMgYSBjbGFzcyBpbnN0YW5jZVxuICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IENsYXNzQ29tcG9uZW50O1xuXG4gICAgLy8gVGhyb3cgb3V0IGFueSBob29rcyB0aGF0IHdlcmUgdXNlZC5cbiAgICByZXNldEhvb2tzKCk7XG5cbiAgICAvLyBQdXNoIGNvbnRleHQgcHJvdmlkZXJzIGVhcmx5IHRvIHByZXZlbnQgY29udGV4dCBzdGFjayBtaXNtYXRjaGVzLlxuICAgIC8vIER1cmluZyBtb3VudGluZyB3ZSBkb24ndCBrbm93IHRoZSBjaGlsZCBjb250ZXh0IHlldCBhcyB0aGUgaW5zdGFuY2UgZG9lc24ndCBleGlzdC5cbiAgICAvLyBXZSB3aWxsIGludmFsaWRhdGUgdGhlIGNoaWxkIGNvbnRleHQgaW4gZmluaXNoQ2xhc3NDb21wb25lbnQoKSByaWdodCBhZnRlciByZW5kZXJpbmcuXG4gICAgdmFyIGhhc0NvbnRleHQgPSBmYWxzZTtcbiAgICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgICAgaGFzQ29udGV4dCA9IHRydWU7XG4gICAgICBwdXNoQ29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFzQ29udGV4dCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB2YWx1ZS5zdGF0ZSAhPT0gbnVsbCAmJiB2YWx1ZS5zdGF0ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUuc3RhdGUgOiBudWxsO1xuXG4gICAgdmFyIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywgcHJvcHMpO1xuICAgIH1cblxuICAgIGFkb3B0Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgdmFsdWUpO1xuICAgIG1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBwcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIHJldHVybiBmaW5pc2hDbGFzc0NvbXBvbmVudChudWxsLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCB0cnVlLCBoYXNDb250ZXh0LCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gUHJvY2VlZCB1bmRlciB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoaXMgaXMgYSBmdW5jdGlvbiBjb21wb25lbnRcbiAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSBGdW5jdGlvbkNvbXBvbmVudDtcbiAgICB7XG4gICAgICBpZiAoZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzIHx8IGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdE1vZGUpIHtcbiAgICAgICAgLy8gT25seSBkb3VibGUtcmVuZGVyIGNvbXBvbmVudHMgd2l0aCBIb29rc1xuICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhbHVlID0gcmVuZGVyV2l0aEhvb2tzKG51bGwsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHByb3BzLCBjb250ZXh0LCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmVjb25jaWxlQ2hpbGRyZW4obnVsbCwgd29ya0luUHJvZ3Jlc3MsIHZhbHVlLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAge1xuICAgICAgdmFsaWRhdGVGdW5jdGlvbkNvbXBvbmVudEluRGV2KHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVGdW5jdGlvbkNvbXBvbmVudEluRGV2KHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQpIHtcbiAgaWYgKENvbXBvbmVudCkge1xuICAgICEhQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMoLi4uKTogY2hpbGRDb250ZXh0VHlwZXMgY2Fubm90IGJlIGRlZmluZWQgb24gYSBmdW5jdGlvbiBjb21wb25lbnQuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgfVxuICBpZiAod29ya0luUHJvZ3Jlc3MucmVmICE9PSBudWxsKSB7XG4gICAgdmFyIGluZm8gPSAnJztcbiAgICB2YXIgb3duZXJOYW1lID0gZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lSW5EZXZPck51bGwoKTtcbiAgICBpZiAob3duZXJOYW1lKSB7XG4gICAgICBpbmZvICs9ICdcXG5cXG5DaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG93bmVyTmFtZSArICdgLic7XG4gICAgfVxuXG4gICAgdmFyIHdhcm5pbmdLZXkgPSBvd25lck5hbWUgfHwgd29ya0luUHJvZ3Jlc3MuX2RlYnVnSUQgfHwgJyc7XG4gICAgdmFyIGRlYnVnU291cmNlID0gd29ya0luUHJvZ3Jlc3MuX2RlYnVnU291cmNlO1xuICAgIGlmIChkZWJ1Z1NvdXJjZSkge1xuICAgICAgd2FybmluZ0tleSA9IGRlYnVnU291cmNlLmZpbGVOYW1lICsgJzonICsgZGVidWdTb3VyY2UubGluZU51bWJlcjtcbiAgICB9XG4gICAgaWYgKCFkaWRXYXJuQWJvdXRGdW5jdGlvblJlZnNbd2FybmluZ0tleV0pIHtcbiAgICAgIGRpZFdhcm5BYm91dEZ1bmN0aW9uUmVmc1t3YXJuaW5nS2V5XSA9IHRydWU7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzLiAnICsgJ0F0dGVtcHRzIHRvIGFjY2VzcyB0aGlzIHJlZiB3aWxsIGZhaWwuICcgKyAnRGlkIHlvdSBtZWFuIHRvIHVzZSBSZWFjdC5mb3J3YXJkUmVmKCk/JXMnLCBpbmZvKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KSB8fCAnVW5rbm93bic7XG5cbiAgICBpZiAoIWRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25Db21wb25lbnRbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzOiBGdW5jdGlvbiBjb21wb25lbnRzIGRvIG5vdCBzdXBwb3J0IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy4nLCBjb21wb25lbnROYW1lKTtcbiAgICAgIGRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25Db21wb25lbnRbY29tcG9uZW50TmFtZV0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50LmNvbnRleHRUeXBlID09PSAnb2JqZWN0JyAmJiBDb21wb25lbnQuY29udGV4dFR5cGUgIT09IG51bGwpIHtcbiAgICB2YXIgX2NvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCkgfHwgJ1Vua25vd24nO1xuXG4gICAgaWYgKCFkaWRXYXJuQWJvdXRDb250ZXh0VHlwZU9uRnVuY3Rpb25Db21wb25lbnRbX2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclczogRnVuY3Rpb24gY29tcG9uZW50cyBkbyBub3Qgc3VwcG9ydCBjb250ZXh0VHlwZS4nLCBfY29tcG9uZW50TmFtZSk7XG4gICAgICBkaWRXYXJuQWJvdXRDb250ZXh0VHlwZU9uRnVuY3Rpb25Db21wb25lbnRbX2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBtb2RlID0gd29ya0luUHJvZ3Jlc3MubW9kZTtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcblxuICAvLyBXZSBzaG91bGQgYXR0ZW1wdCB0byByZW5kZXIgdGhlIHByaW1hcnkgY2hpbGRyZW4gdW5sZXNzIHRoaXMgYm91bmRhcnlcbiAgLy8gYWxyZWFkeSBzdXNwZW5kZWQgZHVyaW5nIHRoaXMgcmVuZGVyIChgYWxyZWFkeUNhcHR1cmVkYCBpcyB0cnVlKS5cbiAgdmFyIG5leHRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG5cbiAgdmFyIG5leHREaWRUaW1lb3V0ID0gdm9pZCAwO1xuICBpZiAoKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyAmIERpZENhcHR1cmUpID09PSBOb0VmZmVjdCkge1xuICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGF0dGVtcHQuXG4gICAgbmV4dFN0YXRlID0gbnVsbDtcbiAgICBuZXh0RGlkVGltZW91dCA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIC8vIFNvbWV0aGluZyBpbiB0aGlzIGJvdW5kYXJ5J3Mgc3VidHJlZSBhbHJlYWR5IHN1c3BlbmRlZC4gU3dpdGNoIHRvXG4gICAgLy8gcmVuZGVyaW5nIHRoZSBmYWxsYmFjayBjaGlsZHJlbi5cbiAgICBuZXh0U3RhdGUgPSB7XG4gICAgICB0aW1lZE91dEF0OiBuZXh0U3RhdGUgIT09IG51bGwgPyBuZXh0U3RhdGUudGltZWRPdXRBdCA6IE5vV29ya1xuICAgIH07XG4gICAgbmV4dERpZFRpbWVvdXQgPSB0cnVlO1xuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyAmPSB+RGlkQ2FwdHVyZTtcbiAgfVxuXG4gIC8vIFRoaXMgbmV4dCBwYXJ0IGlzIGEgYml0IGNvbmZ1c2luZy4gSWYgdGhlIGNoaWxkcmVuIHRpbWVvdXQsIHdlIHN3aXRjaCB0b1xuICAvLyBzaG93aW5nIHRoZSBmYWxsYmFjayBjaGlsZHJlbiBpbiBwbGFjZSBvZiB0aGUgXCJwcmltYXJ5XCIgY2hpbGRyZW4uXG4gIC8vIEhvd2V2ZXIsIHdlIGRvbid0IHdhbnQgdG8gZGVsZXRlIHRoZSBwcmltYXJ5IGNoaWxkcmVuIGJlY2F1c2UgdGhlbiB0aGVpclxuICAvLyBzdGF0ZSB3aWxsIGJlIGxvc3QgKGJvdGggdGhlIFJlYWN0IHN0YXRlIGFuZCB0aGUgaG9zdCBzdGF0ZSwgZS5nLlxuICAvLyB1bmNvbnRyb2xsZWQgZm9ybSBpbnB1dHMpLiBJbnN0ZWFkIHdlIGtlZXAgdGhlbSBtb3VudGVkIGFuZCBoaWRlIHRoZW0uXG4gIC8vIEJvdGggdGhlIGZhbGxiYWNrIGNoaWxkcmVuIEFORCB0aGUgcHJpbWFyeSBjaGlsZHJlbiBhcmUgcmVuZGVyZWQgYXQgdGhlXG4gIC8vIHNhbWUgdGltZS4gT25jZSB0aGUgcHJpbWFyeSBjaGlsZHJlbiBhcmUgdW4tc3VzcGVuZGVkLCB3ZSBjYW4gZGVsZXRlXG4gIC8vIHRoZSBmYWxsYmFjayBjaGlsZHJlbiDigJQgZG9uJ3QgbmVlZCB0byBwcmVzZXJ2ZSB0aGVpciBzdGF0ZS5cbiAgLy9cbiAgLy8gVGhlIHR3byBzZXRzIG9mIGNoaWxkcmVuIGFyZSBzaWJsaW5ncyBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudCwgYnV0XG4gIC8vIHNlbWFudGljYWxseSwgZm9yIHB1cnBvc2VzIG9mIHJlY29uY2lsaWF0aW9uLCB0aGV5IGFyZSB0d28gc2VwYXJhdGUgc2V0cy5cbiAgLy8gU28gd2Ugc3RvcmUgdGhlbSB1c2luZyB0d28gZnJhZ21lbnQgZmliZXJzLlxuICAvL1xuICAvLyBIb3dldmVyLCB3ZSB3YW50IHRvIGF2b2lkIGFsbG9jYXRpbmcgZXh0cmEgZmliZXJzIGZvciBldmVyeSBwbGFjZWhvbGRlci5cbiAgLy8gVGhleSdyZSBvbmx5IG5lY2Vzc2FyeSB3aGVuIHRoZSBjaGlsZHJlbiB0aW1lIG91dCwgYmVjYXVzZSB0aGF0J3MgdGhlXG4gIC8vIG9ubHkgdGltZSB3aGVuIGJvdGggc2V0cyBhcmUgbW91bnRlZC5cbiAgLy9cbiAgLy8gU28sIHRoZSBleHRyYSBmcmFnbWVudCBmaWJlcnMgYXJlIG9ubHkgdXNlZCBpZiB0aGUgY2hpbGRyZW4gdGltZSBvdXQuXG4gIC8vIE90aGVyd2lzZSwgd2UgcmVuZGVyIHRoZSBwcmltYXJ5IGNoaWxkcmVuIGRpcmVjdGx5LiBUaGlzIHJlcXVpcmVzIHNvbWVcbiAgLy8gY3VzdG9tIHJlY29uY2lsaWF0aW9uIGxvZ2ljIHRvIHByZXNlcnZlIHRoZSBzdGF0ZSBvZiB0aGUgcHJpbWFyeVxuICAvLyBjaGlsZHJlbi4gSXQncyBlc3NlbnRpYWxseSBhIHZlcnkgYmFzaWMgZm9ybSBvZiByZS1wYXJlbnRpbmcuXG5cbiAgLy8gYGNoaWxkYCBwb2ludHMgdG8gdGhlIGNoaWxkIGZpYmVyLiBJbiB0aGUgbm9ybWFsIGNhc2UsIHRoaXMgaXMgdGhlIGZpcnN0XG4gIC8vIGZpYmVyIG9mIHRoZSBwcmltYXJ5IGNoaWxkcmVuIHNldC4gSW4gdGhlIHRpbWVkLW91dCBjYXNlLCBpdCdzIGFcbiAgLy8gYSBmcmFnbWVudCBmaWJlciBjb250YWluaW5nIHRoZSBwcmltYXJ5IGNoaWxkcmVuLlxuICB2YXIgY2hpbGQgPSB2b2lkIDA7XG4gIC8vIGBuZXh0YCBwb2ludHMgdG8gdGhlIG5leHQgZmliZXIgUmVhY3Qgc2hvdWxkIHJlbmRlci4gSW4gdGhlIG5vcm1hbCBjYXNlLFxuICAvLyBpdCdzIHRoZSBzYW1lIGFzIGBjaGlsZGA6IHRoZSBmaXJzdCBmaWJlciBvZiB0aGUgcHJpbWFyeSBjaGlsZHJlbiBzZXQuXG4gIC8vIEluIHRoZSB0aW1lZC1vdXQgY2FzZSwgaXQncyBhIGZyYWdtZW50IGZpYmVyIGNvbnRhaW5pbmcgdGhlICpmYWxsYmFjaypcbiAgLy8gY2hpbGRyZW4gLS0gd2Ugc2tpcCBvdmVyIHRoZSBwcmltYXJ5IGNoaWxkcmVuIGVudGlyZWx5LlxuICB2YXIgbmV4dCA9IHZvaWQgMDtcbiAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwpIHtcbiAgICBpZiAoZW5hYmxlU3VzcGVuc2VTZXJ2ZXJSZW5kZXJlcikge1xuICAgICAgLy8gSWYgd2UncmUgY3VycmVudGx5IGh5ZHJhdGluZywgdHJ5IHRvIGh5ZHJhdGUgdGhpcyBib3VuZGFyeS5cbiAgICAgIC8vIEJ1dCBvbmx5IGlmIHRoaXMgaGFzIGEgZmFsbGJhY2suXG4gICAgICBpZiAobmV4dFByb3BzLmZhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAvLyBUaGlzIGNvdWxkJ3ZlIGNoYW5nZWQgdGhlIHRhZyBpZiB0aGlzIHdhcyBhIGRlaHlkcmF0ZWQgc3VzcGVuc2UgY29tcG9uZW50LlxuICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3MudGFnID09PSBEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gdXBkYXRlRGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50KG51bGwsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIHRoZSBpbml0aWFsIG1vdW50LiBUaGlzIGJyYW5jaCBpcyBwcmV0dHkgc2ltcGxlIGJlY2F1c2UgdGhlcmUnc1xuICAgIC8vIG5vIHByZXZpb3VzIHN0YXRlIHRoYXQgbmVlZHMgdG8gYmUgcHJlc2VydmVkLlxuICAgIGlmIChuZXh0RGlkVGltZW91dCkge1xuICAgICAgLy8gTW91bnQgc2VwYXJhdGUgZnJhZ21lbnRzIGZvciBwcmltYXJ5IGFuZCBmYWxsYmFjayBjaGlsZHJlbi5cbiAgICAgIHZhciBuZXh0RmFsbGJhY2tDaGlsZHJlbiA9IG5leHRQcm9wcy5mYWxsYmFjaztcbiAgICAgIHZhciBwcmltYXJ5Q2hpbGRGcmFnbWVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KG51bGwsIG1vZGUsIE5vV29yaywgbnVsbCk7XG5cbiAgICAgIGlmICgod29ya0luUHJvZ3Jlc3MubW9kZSAmIENvbmN1cnJlbnRNb2RlKSA9PT0gTm9Db250ZXh0KSB7XG4gICAgICAgIC8vIE91dHNpZGUgb2YgY29uY3VycmVudCBtb2RlLCB3ZSBjb21taXQgdGhlIGVmZmVjdHMgZnJvbSB0aGVcbiAgICAgICAgdmFyIHByb2dyZXNzZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIHZhciBwcm9ncmVzc2VkUHJpbWFyeUNoaWxkID0gcHJvZ3Jlc3NlZFN0YXRlICE9PSBudWxsID8gd29ya0luUHJvZ3Jlc3MuY2hpbGQuY2hpbGQgOiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQuY2hpbGQgPSBwcm9ncmVzc2VkUHJpbWFyeUNoaWxkO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmFsbGJhY2tDaGlsZEZyYWdtZW50ID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQobmV4dEZhbGxiYWNrQ2hpbGRyZW4sIG1vZGUsIHJlbmRlckV4cGlyYXRpb25UaW1lLCBudWxsKTtcbiAgICAgIHByaW1hcnlDaGlsZEZyYWdtZW50LnNpYmxpbmcgPSBmYWxsYmFja0NoaWxkRnJhZ21lbnQ7XG4gICAgICBjaGlsZCA9IHByaW1hcnlDaGlsZEZyYWdtZW50O1xuICAgICAgLy8gU2tpcCB0aGUgcHJpbWFyeSBjaGlsZHJlbiwgYW5kIGNvbnRpbnVlIHdvcmtpbmcgb24gdGhlXG4gICAgICAvLyBmYWxsYmFjayBjaGlsZHJlbi5cbiAgICAgIG5leHQgPSBmYWxsYmFja0NoaWxkRnJhZ21lbnQ7XG4gICAgICBjaGlsZC5yZXR1cm4gPSBuZXh0LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNb3VudCB0aGUgcHJpbWFyeSBjaGlsZHJlbiB3aXRob3V0IGFuIGludGVybWVkaWF0ZSBmcmFnbWVudCBmaWJlci5cbiAgICAgIHZhciBuZXh0UHJpbWFyeUNoaWxkcmVuID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgICAgY2hpbGQgPSBuZXh0ID0gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dFByaW1hcnlDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIGlzIGFuIHVwZGF0ZS4gVGhpcyBicmFuY2ggaXMgbW9yZSBjb21wbGljYXRlZCBiZWNhdXNlIHdlIG5lZWQgdG9cbiAgICAvLyBlbnN1cmUgdGhlIHN0YXRlIG9mIHRoZSBwcmltYXJ5IGNoaWxkcmVuIGlzIHByZXNlcnZlZC5cbiAgICB2YXIgcHJldlN0YXRlID0gY3VycmVudCQkMS5tZW1vaXplZFN0YXRlO1xuICAgIHZhciBwcmV2RGlkVGltZW91dCA9IHByZXZTdGF0ZSAhPT0gbnVsbDtcbiAgICBpZiAocHJldkRpZFRpbWVvdXQpIHtcbiAgICAgIC8vIFRoZSBjdXJyZW50IHRyZWUgYWxyZWFkeSB0aW1lZCBvdXQuIFRoYXQgbWVhbnMgZWFjaCBjaGlsZCBzZXQgaXNcbiAgICAgIHZhciBjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQgPSBjdXJyZW50JCQxLmNoaWxkO1xuICAgICAgdmFyIGN1cnJlbnRGYWxsYmFja0NoaWxkRnJhZ21lbnQgPSBjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQuc2libGluZztcbiAgICAgIGlmIChuZXh0RGlkVGltZW91dCkge1xuICAgICAgICAvLyBTdGlsbCB0aW1lZCBvdXQuIFJldXNlIHRoZSBjdXJyZW50IHByaW1hcnkgY2hpbGRyZW4gYnkgY2xvbmluZ1xuICAgICAgICAvLyBpdHMgZnJhZ21lbnQuIFdlJ3JlIGdvaW5nIHRvIHNraXAgb3ZlciB0aGVzZSBlbnRpcmVseS5cbiAgICAgICAgdmFyIF9uZXh0RmFsbGJhY2tDaGlsZHJlbiA9IG5leHRQcm9wcy5mYWxsYmFjaztcbiAgICAgICAgdmFyIF9wcmltYXJ5Q2hpbGRGcmFnbWVudCA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnRQcmltYXJ5Q2hpbGRGcmFnbWVudCwgY3VycmVudFByaW1hcnlDaGlsZEZyYWdtZW50LnBlbmRpbmdQcm9wcywgTm9Xb3JrKTtcblxuICAgICAgICBpZiAoKHdvcmtJblByb2dyZXNzLm1vZGUgJiBDb25jdXJyZW50TW9kZSkgPT09IE5vQ29udGV4dCkge1xuICAgICAgICAgIC8vIE91dHNpZGUgb2YgY29uY3VycmVudCBtb2RlLCB3ZSBjb21taXQgdGhlIGVmZmVjdHMgZnJvbSB0aGVcbiAgICAgICAgICB2YXIgX3Byb2dyZXNzZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgdmFyIF9wcm9ncmVzc2VkUHJpbWFyeUNoaWxkID0gX3Byb2dyZXNzZWRTdGF0ZSAhPT0gbnVsbCA/IHdvcmtJblByb2dyZXNzLmNoaWxkLmNoaWxkIDogd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgICAgaWYgKF9wcm9ncmVzc2VkUHJpbWFyeUNoaWxkICE9PSBjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQuY2hpbGQpIHtcbiAgICAgICAgICAgIF9wcmltYXJ5Q2hpbGRGcmFnbWVudC5jaGlsZCA9IF9wcm9ncmVzc2VkUHJpbWFyeUNoaWxkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlY2F1c2UgcHJpbWFyeUNoaWxkRnJhZ21lbnQgaXMgYSBuZXcgZmliZXIgdGhhdCB3ZSdyZSBpbnNlcnRpbmcgYXMgdGhlXG4gICAgICAgIC8vIHBhcmVudCBvZiBhIG5ldyB0cmVlLCB3ZSBuZWVkIHRvIHNldCBpdHMgdHJlZUJhc2VEdXJhdGlvbi5cbiAgICAgICAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgICAgICAgLy8gdHJlZUJhc2VEdXJhdGlvbiBpcyB0aGUgc3VtIG9mIGFsbCB0aGUgY2hpbGQgdHJlZSBiYXNlIGR1cmF0aW9ucy5cbiAgICAgICAgICB2YXIgdHJlZUJhc2VEdXJhdGlvbiA9IDA7XG4gICAgICAgICAgdmFyIGhpZGRlbkNoaWxkID0gX3ByaW1hcnlDaGlsZEZyYWdtZW50LmNoaWxkO1xuICAgICAgICAgIHdoaWxlIChoaWRkZW5DaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdHJlZUJhc2VEdXJhdGlvbiArPSBoaWRkZW5DaGlsZC50cmVlQmFzZUR1cmF0aW9uO1xuICAgICAgICAgICAgaGlkZGVuQ2hpbGQgPSBoaWRkZW5DaGlsZC5zaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfcHJpbWFyeUNoaWxkRnJhZ21lbnQudHJlZUJhc2VEdXJhdGlvbiA9IHRyZWVCYXNlRHVyYXRpb247XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbG9uZSB0aGUgZmFsbGJhY2sgY2hpbGQgZnJhZ21lbnQsIHRvby4gVGhlc2Ugd2UnbGwgY29udGludWVcbiAgICAgICAgLy8gd29ya2luZyBvbi5cbiAgICAgICAgdmFyIF9mYWxsYmFja0NoaWxkRnJhZ21lbnQgPSBfcHJpbWFyeUNoaWxkRnJhZ21lbnQuc2libGluZyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnRGYWxsYmFja0NoaWxkRnJhZ21lbnQsIF9uZXh0RmFsbGJhY2tDaGlsZHJlbiwgY3VycmVudEZhbGxiYWNrQ2hpbGRGcmFnbWVudC5leHBpcmF0aW9uVGltZSk7XG4gICAgICAgIGNoaWxkID0gX3ByaW1hcnlDaGlsZEZyYWdtZW50O1xuICAgICAgICBfcHJpbWFyeUNoaWxkRnJhZ21lbnQuY2hpbGRFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgICAgICAgLy8gU2tpcCB0aGUgcHJpbWFyeSBjaGlsZHJlbiwgYW5kIGNvbnRpbnVlIHdvcmtpbmcgb24gdGhlXG4gICAgICAgIC8vIGZhbGxiYWNrIGNoaWxkcmVuLlxuICAgICAgICBuZXh0ID0gX2ZhbGxiYWNrQ2hpbGRGcmFnbWVudDtcbiAgICAgICAgY2hpbGQucmV0dXJuID0gbmV4dC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vIGxvbmdlciBzdXNwZW5kZWQuIFN3aXRjaCBiYWNrIHRvIHNob3dpbmcgdGhlIHByaW1hcnkgY2hpbGRyZW4sXG4gICAgICAgIC8vIGFuZCByZW1vdmUgdGhlIGludGVybWVkaWF0ZSBmcmFnbWVudCBmaWJlci5cbiAgICAgICAgdmFyIF9uZXh0UHJpbWFyeUNoaWxkcmVuID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgICAgICB2YXIgY3VycmVudFByaW1hcnlDaGlsZCA9IGN1cnJlbnRQcmltYXJ5Q2hpbGRGcmFnbWVudC5jaGlsZDtcbiAgICAgICAgdmFyIHByaW1hcnlDaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBjdXJyZW50UHJpbWFyeUNoaWxkLCBfbmV4dFByaW1hcnlDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuXG4gICAgICAgIC8vIElmIHRoaXMgcmVuZGVyIGRvZXNuJ3Qgc3VzcGVuZCwgd2UgbmVlZCB0byBkZWxldGUgdGhlIGZhbGxiYWNrXG4gICAgICAgIC8vIGNoaWxkcmVuLiBXYWl0IHVudGlsIHRoZSBjb21wbGV0ZSBwaGFzZSwgYWZ0ZXIgd2UndmUgY29uZmlybWVkIHRoZVxuICAgICAgICAvLyBmYWxsYmFjayBpcyBubyBsb25nZXIgbmVlZGVkLlxuICAgICAgICAvLyBUT0RPOiBXb3VsZCBpdCBiZSBiZXR0ZXIgdG8gc3RvcmUgdGhlIGZhbGxiYWNrIGZyYWdtZW50IG9uXG4gICAgICAgIC8vIHRoZSBzdGF0ZU5vZGU/XG5cbiAgICAgICAgLy8gQ29udGludWUgcmVuZGVyaW5nIHRoZSBjaGlsZHJlbiwgbGlrZSB3ZSBub3JtYWxseSBkby5cbiAgICAgICAgY2hpbGQgPSBuZXh0ID0gcHJpbWFyeUNoaWxkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgY3VycmVudCB0cmVlIGhhcyBub3QgYWxyZWFkeSB0aW1lZCBvdXQuIFRoYXQgbWVhbnMgdGhlIHByaW1hcnlcbiAgICAgIC8vIGNoaWxkcmVuIGFyZSBub3Qgd3JhcHBlZCBpbiBhIGZyYWdtZW50IGZpYmVyLlxuICAgICAgdmFyIF9jdXJyZW50UHJpbWFyeUNoaWxkID0gY3VycmVudCQkMS5jaGlsZDtcbiAgICAgIGlmIChuZXh0RGlkVGltZW91dCkge1xuICAgICAgICAvLyBUaW1lZCBvdXQuIFdyYXAgdGhlIGNoaWxkcmVuIGluIGEgZnJhZ21lbnQgZmliZXIgdG8ga2VlcCB0aGVtXG4gICAgICAgIC8vIHNlcGFyYXRlIGZyb20gdGhlIGZhbGxiYWNrIGNoaWxkcmVuLlxuICAgICAgICB2YXIgX25leHRGYWxsYmFja0NoaWxkcmVuMiA9IG5leHRQcm9wcy5mYWxsYmFjaztcbiAgICAgICAgdmFyIF9wcmltYXJ5Q2hpbGRGcmFnbWVudDIgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgLy8gSXQgc2hvdWxkbid0IG1hdHRlciB3aGF0IHRoZSBwZW5kaW5nIHByb3BzIGFyZSBiZWNhdXNlIHdlIGFyZW4ndFxuICAgICAgICAvLyBnb2luZyB0byByZW5kZXIgdGhpcyBmcmFnbWVudC5cbiAgICAgICAgbnVsbCwgbW9kZSwgTm9Xb3JrLCBudWxsKTtcbiAgICAgICAgX3ByaW1hcnlDaGlsZEZyYWdtZW50Mi5jaGlsZCA9IF9jdXJyZW50UHJpbWFyeUNoaWxkO1xuXG4gICAgICAgIC8vIEV2ZW4gdGhvdWdoIHdlJ3JlIGNyZWF0aW5nIGEgbmV3IGZpYmVyLCB0aGVyZSBhcmUgbm8gbmV3IGNoaWxkcmVuLFxuICAgICAgICAvLyBiZWNhdXNlIHdlJ3JlIHJldXNpbmcgYW4gYWxyZWFkeSBtb3VudGVkIHRyZWUuIFNvIHdlIGRvbid0IG5lZWQgdG9cbiAgICAgICAgLy8gc2NoZWR1bGUgYSBwbGFjZW1lbnQuXG4gICAgICAgIC8vIHByaW1hcnlDaGlsZEZyYWdtZW50LmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG5cbiAgICAgICAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgQ29uY3VycmVudE1vZGUpID09PSBOb0NvbnRleHQpIHtcbiAgICAgICAgICAvLyBPdXRzaWRlIG9mIGNvbmN1cnJlbnQgbW9kZSwgd2UgY29tbWl0IHRoZSBlZmZlY3RzIGZyb20gdGhlXG4gICAgICAgICAgdmFyIF9wcm9ncmVzc2VkU3RhdGUyID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICB2YXIgX3Byb2dyZXNzZWRQcmltYXJ5Q2hpbGQyID0gX3Byb2dyZXNzZWRTdGF0ZTIgIT09IG51bGwgPyB3b3JrSW5Qcm9ncmVzcy5jaGlsZC5jaGlsZCA6IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICAgIF9wcmltYXJ5Q2hpbGRGcmFnbWVudDIuY2hpbGQgPSBfcHJvZ3Jlc3NlZFByaW1hcnlDaGlsZDI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZWNhdXNlIHByaW1hcnlDaGlsZEZyYWdtZW50IGlzIGEgbmV3IGZpYmVyIHRoYXQgd2UncmUgaW5zZXJ0aW5nIGFzIHRoZVxuICAgICAgICAvLyBwYXJlbnQgb2YgYSBuZXcgdHJlZSwgd2UgbmVlZCB0byBzZXQgaXRzIHRyZWVCYXNlRHVyYXRpb24uXG4gICAgICAgIGlmIChlbmFibGVQcm9maWxlclRpbWVyICYmIHdvcmtJblByb2dyZXNzLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAgIC8vIHRyZWVCYXNlRHVyYXRpb24gaXMgdGhlIHN1bSBvZiBhbGwgdGhlIGNoaWxkIHRyZWUgYmFzZSBkdXJhdGlvbnMuXG4gICAgICAgICAgdmFyIF90cmVlQmFzZUR1cmF0aW9uID0gMDtcbiAgICAgICAgICB2YXIgX2hpZGRlbkNoaWxkID0gX3ByaW1hcnlDaGlsZEZyYWdtZW50Mi5jaGlsZDtcbiAgICAgICAgICB3aGlsZSAoX2hpZGRlbkNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBfdHJlZUJhc2VEdXJhdGlvbiArPSBfaGlkZGVuQ2hpbGQudHJlZUJhc2VEdXJhdGlvbjtcbiAgICAgICAgICAgIF9oaWRkZW5DaGlsZCA9IF9oaWRkZW5DaGlsZC5zaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfcHJpbWFyeUNoaWxkRnJhZ21lbnQyLnRyZWVCYXNlRHVyYXRpb24gPSBfdHJlZUJhc2VEdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIGZyYWdtZW50IGZyb20gdGhlIGZhbGxiYWNrIGNoaWxkcmVuLCB0b28uXG4gICAgICAgIHZhciBfZmFsbGJhY2tDaGlsZEZyYWdtZW50MiA9IF9wcmltYXJ5Q2hpbGRGcmFnbWVudDIuc2libGluZyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KF9uZXh0RmFsbGJhY2tDaGlsZHJlbjIsIG1vZGUsIHJlbmRlckV4cGlyYXRpb25UaW1lLCBudWxsKTtcbiAgICAgICAgX2ZhbGxiYWNrQ2hpbGRGcmFnbWVudDIuZWZmZWN0VGFnIHw9IFBsYWNlbWVudDtcbiAgICAgICAgY2hpbGQgPSBfcHJpbWFyeUNoaWxkRnJhZ21lbnQyO1xuICAgICAgICBfcHJpbWFyeUNoaWxkRnJhZ21lbnQyLmNoaWxkRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gICAgICAgIC8vIFNraXAgdGhlIHByaW1hcnkgY2hpbGRyZW4sIGFuZCBjb250aW51ZSB3b3JraW5nIG9uIHRoZVxuICAgICAgICAvLyBmYWxsYmFjayBjaGlsZHJlbi5cbiAgICAgICAgbmV4dCA9IF9mYWxsYmFja0NoaWxkRnJhZ21lbnQyO1xuICAgICAgICBjaGlsZC5yZXR1cm4gPSBuZXh0LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU3RpbGwgaGF2ZW4ndCB0aW1lZCBvdXQuICBDb250aW51ZSByZW5kZXJpbmcgdGhlIGNoaWxkcmVuLCBsaWtlIHdlXG4gICAgICAgIC8vIG5vcm1hbGx5IGRvLlxuICAgICAgICB2YXIgX25leHRQcmltYXJ5Q2hpbGRyZW4yID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgICAgICBuZXh0ID0gY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgX2N1cnJlbnRQcmltYXJ5Q2hpbGQsIF9uZXh0UHJpbWFyeUNoaWxkcmVuMiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50JCQxLnN0YXRlTm9kZTtcbiAgfVxuXG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBuZXh0U3RhdGU7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2hpbGQ7XG4gIHJldHVybiBuZXh0O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGlmIChjdXJyZW50JCQxID09PSBudWxsKSB7XG4gICAgLy8gRHVyaW5nIHRoZSBmaXJzdCBwYXNzLCB3ZSdsbCBiYWlsIG91dCBhbmQgbm90IGRyaWxsIGludG8gdGhlIGNoaWxkcmVuLlxuICAgIC8vIEluc3RlYWQsIHdlJ2xsIGxlYXZlIHRoZSBjb250ZW50IGluIHBsYWNlIGFuZCB0cnkgdG8gaHlkcmF0ZSBpdCBsYXRlci5cbiAgICB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IE5ldmVyO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIFdlIHVzZSBjaGlsZEV4cGlyYXRpb25UaW1lIHRvIGluZGljYXRlIHRoYXQgYSBjaGlsZCBtaWdodCBkZXBlbmQgb24gY29udGV4dCwgc28gaWZcbiAgLy8gYW55IGNvbnRleHQgaGFzIGNoYW5nZWQsIHdlIG5lZWQgdG8gdHJlYXQgaXMgYXMgaWYgdGhlIGlucHV0IG1pZ2h0IGhhdmUgY2hhbmdlZC5cbiAgdmFyIGhhc0NvbnRleHRDaGFuZ2VkJCQxID0gY3VycmVudCQkMS5jaGlsZEV4cGlyYXRpb25UaW1lID49IHJlbmRlckV4cGlyYXRpb25UaW1lO1xuICBpZiAoZGlkUmVjZWl2ZVVwZGF0ZSB8fCBoYXNDb250ZXh0Q2hhbmdlZCQkMSkge1xuICAgIC8vIFRoaXMgYm91bmRhcnkgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGZpcnN0IHJlbmRlci4gVGhpcyBtZWFucyB0aGF0IHdlIGFyZSBub3cgdW5hYmxlIHRvXG4gICAgLy8gaHlkcmF0ZSBpdC4gV2UgbWlnaHQgc3RpbGwgYmUgYWJsZSB0byBoeWRyYXRlIGl0IHVzaW5nIGFuIGVhcmxpZXIgZXhwaXJhdGlvbiB0aW1lIGJ1dFxuICAgIC8vIGR1cmluZyB0aGlzIHJlbmRlciB3ZSBjYW4ndC4gSW5zdGVhZCwgd2UncmUgZ29pbmcgdG8gZGVsZXRlIHRoZSB3aG9sZSBzdWJ0cmVlIGFuZFxuICAgIC8vIGluc3RlYWQgaW5qZWN0IGEgbmV3IHJlYWwgU3VzcGVuc2UgYm91bmRhcnkgdG8gdGFrZSBpdHMgcGxhY2UsIHdoaWNoIG1heSByZW5kZXIgY29udGVudFxuICAgIC8vIG9yIGZhbGxiYWNrLiBUaGUgcmVhbCBTdXNwZW5zZSBib3VuZGFyeSB3aWxsIHN1c3BlbmQgZm9yIGEgd2hpbGUgc28gd2UgaGF2ZSBzb21lIHRpbWVcbiAgICAvLyB0byBlbnN1cmUgaXQgY2FuIHByb2R1Y2UgcmVhbCBjb250ZW50LCBidXQgYWxsIHN0YXRlIGFuZCBwZW5kaW5nIGV2ZW50cyB3aWxsIGJlIGxvc3QuXG5cbiAgICAvLyBEZXRhY2ggZnJvbSB0aGUgY3VycmVudCBkZWh5ZHJhdGVkIGJvdW5kYXJ5LlxuICAgIGN1cnJlbnQkJDEuYWx0ZXJuYXRlID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGUgPSBudWxsO1xuXG4gICAgLy8gSW5zZXJ0IGEgZGVsZXRpb24gaW4gdGhlIGVmZmVjdCBsaXN0LlxuICAgIHZhciByZXR1cm5GaWJlciA9IHdvcmtJblByb2dyZXNzLnJldHVybjtcbiAgICAhKHJldHVybkZpYmVyICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ1N1c3BlbnNlIGJvdW5kYXJpZXMgYXJlIG5ldmVyIG9uIHRoZSByb290LiBUaGlzIGlzIHByb2JhYmx5IGEgYnVnIGluIFJlYWN0LicpIDogdm9pZCAwO1xuICAgIHZhciBsYXN0ID0gcmV0dXJuRmliZXIubGFzdEVmZmVjdDtcbiAgICBpZiAobGFzdCAhPT0gbnVsbCkge1xuICAgICAgbGFzdC5uZXh0RWZmZWN0ID0gY3VycmVudCQkMTtcbiAgICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBjdXJyZW50JCQxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9IHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBjdXJyZW50JCQxO1xuICAgIH1cbiAgICBjdXJyZW50JCQxLm5leHRFZmZlY3QgPSBudWxsO1xuICAgIGN1cnJlbnQkJDEuZWZmZWN0VGFnID0gRGVsZXRpb247XG5cbiAgICAvLyBVcGdyYWRlIHRoaXMgd29yayBpbiBwcm9ncmVzcyB0byBhIHJlYWwgU3VzcGVuc2UgY29tcG9uZW50LlxuICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IFN1c3BlbnNlQ29tcG9uZW50O1xuICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IG51bGw7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gICAgLy8gVGhpcyBpcyBub3cgYW4gaW5zZXJ0aW9uLlxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG4gICAgLy8gUmV0cnkgYXMgYSByZWFsIFN1c3BlbnNlIGNvbXBvbmVudC5cbiAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQobnVsbCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfVxuICBpZiAoKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyAmIERpZENhcHR1cmUpID09PSBOb0VmZmVjdCkge1xuICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGF0dGVtcHQuXG4gICAgcmVlbnRlckh5ZHJhdGlvblN0YXRlRnJvbURlaHlkcmF0ZWRTdXNwZW5zZUluc3RhbmNlKHdvcmtJblByb2dyZXNzKTtcbiAgICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBtb3VudENoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gU29tZXRoaW5nIHN1c3BlbmRlZC4gTGVhdmUgdGhlIGV4aXN0aW5nIGNoaWxkcmVuIGluIHBsYWNlLlxuICAgIC8vIFRPRE86IEluIG5vbi1jb25jdXJyZW50IG1vZGUsIHNob3VsZCB3ZSBjb21taXQgdGhlIG5vZGVzIHdlIGhhdmUgaHlkcmF0ZWQgc28gZmFyP1xuICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVQb3J0YWxDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHB1c2hIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gIHZhciBuZXh0Q2hpbGRyZW4gPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIGlmIChjdXJyZW50JCQxID09PSBudWxsKSB7XG4gICAgLy8gUG9ydGFscyBhcmUgc3BlY2lhbCBiZWNhdXNlIHdlIGRvbid0IGFwcGVuZCB0aGUgY2hpbGRyZW4gZHVyaW5nIG1vdW50XG4gICAgLy8gYnV0IGF0IGNvbW1pdC4gVGhlcmVmb3JlIHdlIG5lZWQgdG8gdHJhY2sgaW5zZXJ0aW9ucyB3aGljaCB0aGUgbm9ybWFsXG4gICAgLy8gZmxvdyBkb2Vzbid0IGRvIGR1cmluZyBtb3VudC4gVGhpcyBkb2Vzbid0IGhhcHBlbiBhdCB0aGUgcm9vdCBiZWNhdXNlXG4gICAgLy8gdGhlIHJvb3QgYWx3YXlzIHN0YXJ0cyB3aXRoIGEgXCJjdXJyZW50XCIgd2l0aCBhIG51bGwgY2hpbGQuXG4gICAgLy8gVE9ETzogQ29uc2lkZXIgdW5pZnlpbmcgdGhpcyB3aXRoIGhvdyB0aGUgcm9vdCB3b3Jrcy5cbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIH1cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDb250ZXh0UHJvdmlkZXIoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBwcm92aWRlclR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICB2YXIgY29udGV4dCA9IHByb3ZpZGVyVHlwZS5fY29udGV4dDtcblxuICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHZhciBvbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG5cbiAgdmFyIG5ld1ZhbHVlID0gbmV3UHJvcHMudmFsdWU7XG5cbiAge1xuICAgIHZhciBwcm92aWRlclByb3BUeXBlcyA9IHdvcmtJblByb2dyZXNzLnR5cGUucHJvcFR5cGVzO1xuXG4gICAgaWYgKHByb3ZpZGVyUHJvcFR5cGVzKSB7XG4gICAgICBjaGVja1Byb3BUeXBlcyhwcm92aWRlclByb3BUeXBlcywgbmV3UHJvcHMsICdwcm9wJywgJ0NvbnRleHQuUHJvdmlkZXInLCBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KTtcbiAgICB9XG4gIH1cblxuICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIG5ld1ZhbHVlKTtcblxuICBpZiAob2xkUHJvcHMgIT09IG51bGwpIHtcbiAgICB2YXIgb2xkVmFsdWUgPSBvbGRQcm9wcy52YWx1ZTtcbiAgICB2YXIgY2hhbmdlZEJpdHMgPSBjYWxjdWxhdGVDaGFuZ2VkQml0cyhjb250ZXh0LCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgIGlmIChjaGFuZ2VkQml0cyA9PT0gMCkge1xuICAgICAgLy8gTm8gY2hhbmdlLiBCYWlsb3V0IGVhcmx5IGlmIGNoaWxkcmVuIGFyZSB0aGUgc2FtZS5cbiAgICAgIGlmIChvbGRQcm9wcy5jaGlsZHJlbiA9PT0gbmV3UHJvcHMuY2hpbGRyZW4gJiYgIWhhc0NvbnRleHRDaGFuZ2VkKCkpIHtcbiAgICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIGNvbnRleHQgdmFsdWUgY2hhbmdlZC4gU2VhcmNoIGZvciBtYXRjaGluZyBjb25zdW1lcnMgYW5kIHNjaGVkdWxlXG4gICAgICAvLyB0aGVtIHRvIHVwZGF0ZS5cbiAgICAgIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2Uod29ya0luUHJvZ3Jlc3MsIGNvbnRleHQsIGNoYW5nZWRCaXRzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG5ld0NoaWxkcmVuID0gbmV3UHJvcHMuY2hpbGRyZW47XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXdDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbnZhciBoYXNXYXJuZWRBYm91dFVzaW5nQ29udGV4dEFzQ29uc3VtZXIgPSBmYWxzZTtcblxuZnVuY3Rpb24gdXBkYXRlQ29udGV4dENvbnN1bWVyKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gIC8vIFRoZSBsb2dpYyBiZWxvdyBmb3IgQ29udGV4dCBkaWZmZXJzIGRlcGVuZGluZyBvbiBQUk9EIG9yIERFViBtb2RlLiBJblxuICAvLyBERVYgbW9kZSwgd2UgY3JlYXRlIGEgc2VwYXJhdGUgb2JqZWN0IGZvciBDb250ZXh0LkNvbnN1bWVyIHRoYXQgYWN0c1xuICAvLyBsaWtlIGEgcHJveHkgdG8gQ29udGV4dC4gVGhpcyBwcm94eSBvYmplY3QgYWRkcyB1bm5lY2Vzc2FyeSBjb2RlIGluIFBST0RcbiAgLy8gc28gd2UgdXNlIHRoZSBvbGQgYmVoYXZpb3VyIChDb250ZXh0LkNvbnN1bWVyIHJlZmVyZW5jZXMgQ29udGV4dCkgdG9cbiAgLy8gcmVkdWNlIHNpemUgYW5kIG92ZXJoZWFkLiBUaGUgc2VwYXJhdGUgb2JqZWN0IHJlZmVyZW5jZXMgY29udGV4dCB2aWFcbiAgLy8gYSBwcm9wZXJ0eSBjYWxsZWQgXCJfY29udGV4dFwiLCB3aGljaCBhbHNvIGdpdmVzIHVzIHRoZSBhYmlsaXR5IHRvIGNoZWNrXG4gIC8vIGluIERFViBtb2RlIGlmIHRoaXMgcHJvcGVydHkgZXhpc3RzIG9yIG5vdCBhbmQgd2FybiBpZiBpdCBkb2VzIG5vdC5cbiAge1xuICAgIGlmIChjb250ZXh0Ll9jb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFRoaXMgbWF5IGJlIGJlY2F1c2UgaXQncyBhIENvbnRleHQgKHJhdGhlciB0aGFuIGEgQ29uc3VtZXIpLlxuICAgICAgLy8gT3IgaXQgbWF5IGJlIGJlY2F1c2UgaXQncyBvbGRlciBSZWFjdCB3aGVyZSB0aGV5J3JlIHRoZSBzYW1lIHRoaW5nLlxuICAgICAgLy8gV2Ugb25seSB3YW50IHRvIHdhcm4gaWYgd2UncmUgc3VyZSBpdCdzIGEgbmV3IFJlYWN0LlxuICAgICAgaWYgKGNvbnRleHQgIT09IGNvbnRleHQuQ29uc3VtZXIpIHtcbiAgICAgICAgaWYgKCFoYXNXYXJuZWRBYm91dFVzaW5nQ29udGV4dEFzQ29uc3VtZXIpIHtcbiAgICAgICAgICBoYXNXYXJuZWRBYm91dFVzaW5nQ29udGV4dEFzQ29uc3VtZXIgPSB0cnVlO1xuICAgICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlbmRlcmluZyA8Q29udGV4dD4gZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluICcgKyAnYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gRGlkIHlvdSBtZWFuIHRvIHJlbmRlciA8Q29udGV4dC5Db25zdW1lcj4gaW5zdGVhZD8nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dC5fY29udGV4dDtcbiAgICB9XG4gIH1cbiAgdmFyIG5ld1Byb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB2YXIgcmVuZGVyID0gbmV3UHJvcHMuY2hpbGRyZW47XG5cbiAge1xuICAgICEodHlwZW9mIHJlbmRlciA9PT0gJ2Z1bmN0aW9uJykgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdBIGNvbnRleHQgY29uc3VtZXIgd2FzIHJlbmRlcmVkIHdpdGggbXVsdGlwbGUgY2hpbGRyZW4sIG9yIGEgY2hpbGQgJyArIFwidGhhdCBpc24ndCBhIGZ1bmN0aW9uLiBBIGNvbnRleHQgY29uc3VtZXIgZXhwZWN0cyBhIHNpbmdsZSBjaGlsZCBcIiArICd0aGF0IGlzIGEgZnVuY3Rpb24uIElmIHlvdSBkaWQgcGFzcyBhIGZ1bmN0aW9uLCBtYWtlIHN1cmUgdGhlcmUgJyArICdpcyBubyB0cmFpbGluZyBvciBsZWFkaW5nIHdoaXRlc3BhY2UgYXJvdW5kIGl0LicpIDogdm9pZCAwO1xuICB9XG5cbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgdmFyIG5ld1ZhbHVlID0gcmVhZENvbnRleHQoY29udGV4dCwgbmV3UHJvcHMudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKTtcbiAgdmFyIG5ld0NoaWxkcmVuID0gdm9pZCAwO1xuICB7XG4gICAgUmVhY3RDdXJyZW50T3duZXIkMy5jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgc2V0Q3VycmVudFBoYXNlKCdyZW5kZXInKTtcbiAgICBuZXdDaGlsZHJlbiA9IHJlbmRlcihuZXdWYWx1ZSk7XG4gICAgc2V0Q3VycmVudFBoYXNlKG51bGwpO1xuICB9XG5cbiAgLy8gUmVhY3QgRGV2VG9vbHMgcmVhZHMgdGhpcyBmbGFnLlxuICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUGVyZm9ybWVkV29yaztcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5ld0NoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cblxuZnVuY3Rpb24gbWFya1dvcmtJblByb2dyZXNzUmVjZWl2ZWRVcGRhdGUoKSB7XG4gIGRpZFJlY2VpdmVVcGRhdGUgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICBjYW5jZWxXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuXG4gIGlmIChjdXJyZW50JCQxICE9PSBudWxsKSB7XG4gICAgLy8gUmV1c2UgcHJldmlvdXMgY29udGV4dCBsaXN0XG4gICAgd29ya0luUHJvZ3Jlc3MuY29udGV4dERlcGVuZGVuY2llcyA9IGN1cnJlbnQkJDEuY29udGV4dERlcGVuZGVuY2llcztcbiAgfVxuXG4gIGlmIChlbmFibGVQcm9maWxlclRpbWVyKSB7XG4gICAgLy8gRG9uJ3QgdXBkYXRlIFwiYmFzZVwiIHJlbmRlciB0aW1lcyBmb3IgYmFpbG91dHMuXG4gICAgc3RvcFByb2ZpbGVyVGltZXJJZlJ1bm5pbmcod29ya0luUHJvZ3Jlc3MpO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIGNoaWxkcmVuIGhhdmUgYW55IHBlbmRpbmcgd29yay5cbiAgdmFyIGNoaWxkRXhwaXJhdGlvblRpbWUgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZEV4cGlyYXRpb25UaW1lO1xuICBpZiAoY2hpbGRFeHBpcmF0aW9uVGltZSA8IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhlIGNoaWxkcmVuIGRvbid0IGhhdmUgYW55IHdvcmsgZWl0aGVyLiBXZSBjYW4gc2tpcCB0aGVtLlxuICAgIC8vIFRPRE86IE9uY2Ugd2UgYWRkIGJhY2sgcmVzdW1pbmcsIHdlIHNob3VsZCBjaGVjayBpZiB0aGUgY2hpbGRyZW4gYXJlXG4gICAgLy8gYSB3b3JrLWluLXByb2dyZXNzIHNldC4gSWYgc28sIHdlIG5lZWQgdG8gdHJhbnNmZXIgdGhlaXIgZWZmZWN0cy5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIGZpYmVyIGRvZXNuJ3QgaGF2ZSB3b3JrLCBidXQgaXRzIHN1YnRyZWUgZG9lcy4gQ2xvbmUgdGhlIGNoaWxkXG4gICAgLy8gZmliZXJzIGFuZCBjb250aW51ZS5cbiAgICBjbG9uZUNoaWxkRmliZXJzKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmVnaW5Xb3JrKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgdXBkYXRlRXhwaXJhdGlvblRpbWUgPSB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZTtcblxuICBpZiAoY3VycmVudCQkMSAhPT0gbnVsbCkge1xuICAgIHZhciBvbGRQcm9wcyA9IGN1cnJlbnQkJDEubWVtb2l6ZWRQcm9wcztcbiAgICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG5cbiAgICBpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzIHx8IGhhc0NvbnRleHRDaGFuZ2VkKCkpIHtcbiAgICAgIC8vIElmIHByb3BzIG9yIGNvbnRleHQgY2hhbmdlZCwgbWFyayB0aGUgZmliZXIgYXMgaGF2aW5nIHBlcmZvcm1lZCB3b3JrLlxuICAgICAgLy8gVGhpcyBtYXkgYmUgdW5zZXQgaWYgdGhlIHByb3BzIGFyZSBkZXRlcm1pbmVkIHRvIGJlIGVxdWFsIGxhdGVyIChtZW1vKS5cbiAgICAgIGRpZFJlY2VpdmVVcGRhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodXBkYXRlRXhwaXJhdGlvblRpbWUgPCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgLy8gVGhpcyBmaWJlciBkb2VzIG5vdCBoYXZlIGFueSBwZW5kaW5nIHdvcmsuIEJhaWxvdXQgd2l0aG91dCBlbnRlcmluZ1xuICAgICAgLy8gdGhlIGJlZ2luIHBoYXNlLiBUaGVyZSdzIHN0aWxsIHNvbWUgYm9va2tlZXBpbmcgd2UgdGhhdCBuZWVkcyB0byBiZSBkb25lXG4gICAgICAvLyBpbiB0aGlzIG9wdGltaXplZCBwYXRoLCBtb3N0bHkgcHVzaGluZyBzdHVmZiBvbnRvIHRoZSBzdGFjay5cbiAgICAgIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgICAgcHVzaEhvc3RSb290Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICAgICAgICAgIHB1c2hDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcy52YWx1ZTtcbiAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgbmV3VmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFByb2ZpbGVyOlxuICAgICAgICAgIGlmIChlbmFibGVQcm9maWxlclRpbWVyKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgdmFyIGRpZFRpbWVvdXQgPSBzdGF0ZSAhPT0gbnVsbDtcbiAgICAgICAgICAgIGlmIChkaWRUaW1lb3V0KSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoaXMgYm91bmRhcnkgaXMgY3VycmVudGx5IHRpbWVkIG91dCwgd2UgbmVlZCB0byBkZWNpZGVcbiAgICAgICAgICAgICAgLy8gd2hldGhlciB0byByZXRyeSB0aGUgcHJpbWFyeSBjaGlsZHJlbiwgb3IgdG8gc2tpcCBvdmVyIGl0IGFuZFxuICAgICAgICAgICAgICAvLyBnbyBzdHJhaWdodCB0byB0aGUgZmFsbGJhY2suIENoZWNrIHRoZSBwcmlvcml0eSBvZiB0aGUgcHJpbWFyeVxuICAgICAgICAgICAgICB2YXIgcHJpbWFyeUNoaWxkRnJhZ21lbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgICAgICAgICAgdmFyIHByaW1hcnlDaGlsZEV4cGlyYXRpb25UaW1lID0gcHJpbWFyeUNoaWxkRnJhZ21lbnQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgICAgICAgaWYgKHByaW1hcnlDaGlsZEV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmsgJiYgcHJpbWFyeUNoaWxkRXhwaXJhdGlvblRpbWUgPj0gcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcHJpbWFyeSBjaGlsZHJlbiBoYXZlIHBlbmRpbmcgd29yay4gVXNlIHRoZSBub3JtYWwgcGF0aFxuICAgICAgICAgICAgICAgIC8vIHRvIGF0dGVtcHQgdG8gcmVuZGVyIHRoZSBwcmltYXJ5IGNoaWxkcmVuIGFnYWluLlxuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBwcmltYXJ5IGNoaWxkcmVuIGRvIG5vdCBoYXZlIHBlbmRpbmcgd29yayB3aXRoIHN1ZmZpY2llbnRcbiAgICAgICAgICAgICAgICAvLyBwcmlvcml0eS4gQmFpbG91dC5cbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgZmFsbGJhY2sgY2hpbGRyZW4gaGF2ZSBwZW5kaW5nIHdvcmsuIFNraXAgb3ZlciB0aGVcbiAgICAgICAgICAgICAgICAgIC8vIHByaW1hcnkgY2hpbGRyZW4gYW5kIHdvcmsgb24gdGhlIGZhbGxiYWNrLlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIERlaHlkcmF0ZWRTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoZW5hYmxlU3VzcGVuc2VTZXJ2ZXJSZW5kZXJlcikge1xuICAgICAgICAgICAgICAvLyBXZSBrbm93IHRoYXQgdGhpcyBjb21wb25lbnQgd2lsbCBzdXNwZW5kIGFnYWluIGJlY2F1c2UgaWYgaXQgaGFzXG4gICAgICAgICAgICAgIC8vIGJlZW4gdW5zdXNwZW5kZWQgaXQgaGFzIGNvbW1pdHRlZCBhcyBhIHJlZ3VsYXIgU3VzcGVuc2UgY29tcG9uZW50LlxuICAgICAgICAgICAgICAvLyBJZiBpdCBuZWVkcyB0byBiZSByZXRyaWVkLCBpdCBzaG91bGQgaGF2ZSB3b3JrIHNjaGVkdWxlZCBvbiBpdC5cbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IERpZENhcHR1cmU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGRpZFJlY2VpdmVVcGRhdGUgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIEJlZm9yZSBlbnRlcmluZyB0aGUgYmVnaW4gcGhhc2UsIGNsZWFyIHRoZSBleHBpcmF0aW9uIHRpbWUuXG4gIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuXG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSBJbmRldGVybWluYXRlQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgZWxlbWVudFR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZTtcbiAgICAgICAgcmV0dXJuIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgZWxlbWVudFR5cGUsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICBjYXNlIExhenlDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBfZWxlbWVudFR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZTtcbiAgICAgICAgcmV0dXJuIG1vdW50TGF6eUNvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgX2VsZW1lbnRUeXBlLCB1cGRhdGVFeHBpcmF0aW9uVGltZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgfVxuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBfQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgdmFyIHVucmVzb2x2ZWRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICAgICAgdmFyIHJlc29sdmVkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSA9PT0gX0NvbXBvbmVudCA/IHVucmVzb2x2ZWRQcm9wcyA6IHJlc29sdmVEZWZhdWx0UHJvcHMoX0NvbXBvbmVudCwgdW5yZXNvbHZlZFByb3BzKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBfQ29tcG9uZW50LCByZXNvbHZlZFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIF9Db21wb25lbnQyID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgdmFyIF91bnJlc29sdmVkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBfcmVzb2x2ZWRQcm9wcyA9IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID09PSBfQ29tcG9uZW50MiA/IF91bnJlc29sdmVkUHJvcHMgOiByZXNvbHZlRGVmYXVsdFByb3BzKF9Db21wb25lbnQyLCBfdW5yZXNvbHZlZFByb3BzKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUNsYXNzQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBfQ29tcG9uZW50MiwgX3Jlc29sdmVkUHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RSb290OlxuICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RSb290KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RUZXh0KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzKTtcbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgcmV0dXJuIHVwZGF0ZVBvcnRhbENvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICAgIHtcbiAgICAgICAgdmFyIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICB2YXIgX3VucmVzb2x2ZWRQcm9wczIgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBfcmVzb2x2ZWRQcm9wczIgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSA9PT0gdHlwZSA/IF91bnJlc29sdmVkUHJvcHMyIDogcmVzb2x2ZURlZmF1bHRQcm9wcyh0eXBlLCBfdW5yZXNvbHZlZFByb3BzMik7XG4gICAgICAgIHJldHVybiB1cGRhdGVGb3J3YXJkUmVmKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCB0eXBlLCBfcmVzb2x2ZWRQcm9wczIsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICBjYXNlIEZyYWdtZW50OlxuICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBNb2RlOlxuICAgICAgcmV0dXJuIHVwZGF0ZU1vZGUoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICBjYXNlIFByb2ZpbGVyOlxuICAgICAgcmV0dXJuIHVwZGF0ZVByb2ZpbGVyKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICByZXR1cm4gdXBkYXRlQ29udGV4dFByb3ZpZGVyKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBDb250ZXh0Q29uc3VtZXI6XG4gICAgICByZXR1cm4gdXBkYXRlQ29udGV4dENvbnN1bWVyKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBNZW1vQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgX3R5cGUyID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgdmFyIF91bnJlc29sdmVkUHJvcHMzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICAvLyBSZXNvbHZlIG91dGVyIHByb3BzIGZpcnN0LCB0aGVuIHJlc29sdmUgaW5uZXIgcHJvcHMuXG4gICAgICAgIHZhciBfcmVzb2x2ZWRQcm9wczMgPSByZXNvbHZlRGVmYXVsdFByb3BzKF90eXBlMiwgX3VucmVzb2x2ZWRQcm9wczMpO1xuICAgICAgICB7XG4gICAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLnR5cGUgIT09IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICB2YXIgb3V0ZXJQcm9wVHlwZXMgPSBfdHlwZTIucHJvcFR5cGVzO1xuICAgICAgICAgICAgaWYgKG91dGVyUHJvcFR5cGVzKSB7XG4gICAgICAgICAgICAgIGNoZWNrUHJvcFR5cGVzKG91dGVyUHJvcFR5cGVzLCBfcmVzb2x2ZWRQcm9wczMsIC8vIFJlc29sdmVkIGZvciBvdXRlciBvbmx5XG4gICAgICAgICAgICAgICdwcm9wJywgZ2V0Q29tcG9uZW50TmFtZShfdHlwZTIpLCBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3Jlc29sdmVkUHJvcHMzID0gcmVzb2x2ZURlZmF1bHRQcm9wcyhfdHlwZTIudHlwZSwgX3Jlc29sdmVkUHJvcHMzKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1lbW9Db21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIF90eXBlMiwgX3Jlc29sdmVkUHJvcHMzLCB1cGRhdGVFeHBpcmF0aW9uVGltZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgfVxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnR5cGUsIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcywgdXBkYXRlRXhwaXJhdGlvblRpbWUsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICBjYXNlIEluY29tcGxldGVDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIF9Db21wb25lbnQzID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgdmFyIF91bnJlc29sdmVkUHJvcHM0ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICB2YXIgX3Jlc29sdmVkUHJvcHM0ID0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUgPT09IF9Db21wb25lbnQzID8gX3VucmVzb2x2ZWRQcm9wczQgOiByZXNvbHZlRGVmYXVsdFByb3BzKF9Db21wb25lbnQzLCBfdW5yZXNvbHZlZFByb3BzNCk7XG4gICAgICAgIHJldHVybiBtb3VudEluY29tcGxldGVDbGFzc0NvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgX0NvbXBvbmVudDMsIF9yZXNvbHZlZFByb3BzNCwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgfVxuICAgIGNhc2UgRGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBpZiAoZW5hYmxlU3VzcGVuc2VTZXJ2ZXJSZW5kZXJlcikge1xuICAgICAgICAgIHJldHVybiB1cGRhdGVEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxuICBpbnZhcmlhbnQoZmFsc2UsICdVbmtub3duIHVuaXQgb2Ygd29yayB0YWcuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG59XG5cbnZhciB2YWx1ZUN1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKTtcblxudmFyIHJlbmRlcmVyU2lnaWwgPSB2b2lkIDA7XG57XG4gIC8vIFVzZSB0aGlzIHRvIGRldGVjdCBtdWx0aXBsZSByZW5kZXJlcnMgdXNpbmcgdGhlIHNhbWUgY29udGV4dFxuICByZW5kZXJlclNpZ2lsID0ge307XG59XG5cbnZhciBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG52YXIgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbnVsbDtcbnZhciBsYXN0Q29udGV4dFdpdGhBbGxCaXRzT2JzZXJ2ZWQgPSBudWxsO1xuXG52YXIgaXNEaXNhbGxvd2VkQ29udGV4dFJlYWRJbkRFViA9IGZhbHNlO1xuXG5mdW5jdGlvbiByZXNldENvbnRleHREZXBlbmRlbmNlcygpIHtcbiAgLy8gVGhpcyBpcyBjYWxsZWQgcmlnaHQgYmVmb3JlIFJlYWN0IHlpZWxkcyBleGVjdXRpb24sIHRvIGVuc3VyZSBgcmVhZENvbnRleHRgXG4gIC8vIGNhbm5vdCBiZSBjYWxsZWQgb3V0c2lkZSB0aGUgcmVuZGVyIHBoYXNlLlxuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IG51bGw7XG4gIGxhc3RDb250ZXh0V2l0aEFsbEJpdHNPYnNlcnZlZCA9IG51bGw7XG4gIHtcbiAgICBpc0Rpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW50ZXJEaXNhbGxvd2VkQ29udGV4dFJlYWRJbkRFVigpIHtcbiAge1xuICAgIGlzRGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4aXREaXNhbGxvd2VkQ29udGV4dFJlYWRJbkRFVigpIHtcbiAge1xuICAgIGlzRGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdXNoUHJvdmlkZXIocHJvdmlkZXJGaWJlciwgbmV4dFZhbHVlKSB7XG4gIHZhciBjb250ZXh0ID0gcHJvdmlkZXJGaWJlci50eXBlLl9jb250ZXh0O1xuXG4gIGlmIChpc1ByaW1hcnlSZW5kZXJlcikge1xuICAgIHB1c2godmFsdWVDdXJzb3IsIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSwgcHJvdmlkZXJGaWJlcik7XG5cbiAgICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBuZXh0VmFsdWU7XG4gICAge1xuICAgICAgIShjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPT09IHVuZGVmaW5lZCB8fCBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPT09IG51bGwgfHwgY29udGV4dC5fY3VycmVudFJlbmRlcmVyID09PSByZW5kZXJlclNpZ2lsKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0RldGVjdGVkIG11bHRpcGxlIHJlbmRlcmVycyBjb25jdXJyZW50bHkgcmVuZGVyaW5nIHRoZSAnICsgJ3NhbWUgY29udGV4dCBwcm92aWRlci4gVGhpcyBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPSByZW5kZXJlclNpZ2lsO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwdXNoKHZhbHVlQ3Vyc29yLCBjb250ZXh0Ll9jdXJyZW50VmFsdWUyLCBwcm92aWRlckZpYmVyKTtcblxuICAgIGNvbnRleHQuX2N1cnJlbnRWYWx1ZTIgPSBuZXh0VmFsdWU7XG4gICAge1xuICAgICAgIShjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIyID09PSB1bmRlZmluZWQgfHwgY29udGV4dC5fY3VycmVudFJlbmRlcmVyMiA9PT0gbnVsbCB8fCBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIyID09PSByZW5kZXJlclNpZ2lsKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0RldGVjdGVkIG11bHRpcGxlIHJlbmRlcmVycyBjb25jdXJyZW50bHkgcmVuZGVyaW5nIHRoZSAnICsgJ3NhbWUgY29udGV4dCBwcm92aWRlci4gVGhpcyBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIyID0gcmVuZGVyZXJTaWdpbDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9wUHJvdmlkZXIocHJvdmlkZXJGaWJlcikge1xuICB2YXIgY3VycmVudFZhbHVlID0gdmFsdWVDdXJzb3IuY3VycmVudDtcblxuICBwb3AodmFsdWVDdXJzb3IsIHByb3ZpZGVyRmliZXIpO1xuXG4gIHZhciBjb250ZXh0ID0gcHJvdmlkZXJGaWJlci50eXBlLl9jb250ZXh0O1xuICBpZiAoaXNQcmltYXJ5UmVuZGVyZXIpIHtcbiAgICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBjdXJyZW50VmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dC5fY3VycmVudFZhbHVlMiA9IGN1cnJlbnRWYWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVDaGFuZ2VkQml0cyhjb250ZXh0LCBuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgaWYgKGlzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAvLyBObyBjaGFuZ2VcbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY29udGV4dC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjb250ZXh0Ll9jYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogbWF4U2lnbmVkMzFCaXRJbnQ7XG5cbiAgICB7XG4gICAgICAhKChjaGFuZ2VkQml0cyAmIG1heFNpZ25lZDMxQml0SW50KSA9PT0gY2hhbmdlZEJpdHMpID8gd2FybmluZyQxKGZhbHNlLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcycsIGNoYW5nZWRCaXRzKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZWRCaXRzIHwgMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzY2hlZHVsZVdvcmtPblBhcmVudFBhdGgocGFyZW50LCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAvLyBVcGRhdGUgdGhlIGNoaWxkIGV4cGlyYXRpb24gdGltZSBvZiBhbGwgdGhlIGFuY2VzdG9ycywgaW5jbHVkaW5nXG4gIC8vIHRoZSBhbHRlcm5hdGVzLlxuICB2YXIgbm9kZSA9IHBhcmVudDtcbiAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICB2YXIgYWx0ZXJuYXRlID0gbm9kZS5hbHRlcm5hdGU7XG4gICAgaWYgKG5vZGUuY2hpbGRFeHBpcmF0aW9uVGltZSA8IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgICBub2RlLmNoaWxkRXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgIGlmIChhbHRlcm5hdGUgIT09IG51bGwgJiYgYWx0ZXJuYXRlLmNoaWxkRXhwaXJhdGlvblRpbWUgPCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgICAgICBhbHRlcm5hdGUuY2hpbGRFeHBpcmF0aW9uVGltZSA9IHJlbmRlckV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lIDwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5laXRoZXIgYWx0ZXJuYXRlIHdhcyB1cGRhdGVkLCB3aGljaCBtZWFucyB0aGUgcmVzdCBvZiB0aGVcbiAgICAgIC8vIGFuY2VzdG9yIHBhdGggYWxyZWFkeSBoYXMgc3VmZmljaWVudCBwcmlvcml0eS5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvcGFnYXRlQ29udGV4dENoYW5nZSh3b3JrSW5Qcm9ncmVzcywgY29udGV4dCwgY2hhbmdlZEJpdHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBmaWJlciA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICBpZiAoZmliZXIgIT09IG51bGwpIHtcbiAgICAvLyBTZXQgdGhlIHJldHVybiBwb2ludGVyIG9mIHRoZSBjaGlsZCB0byB0aGUgd29yay1pbi1wcm9ncmVzcyBmaWJlci5cbiAgICBmaWJlci5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgfVxuICB3aGlsZSAoZmliZXIgIT09IG51bGwpIHtcbiAgICB2YXIgbmV4dEZpYmVyID0gdm9pZCAwO1xuXG4gICAgLy8gVmlzaXQgdGhpcyBmaWJlci5cbiAgICB2YXIgbGlzdCA9IGZpYmVyLmNvbnRleHREZXBlbmRlbmNpZXM7XG4gICAgaWYgKGxpc3QgIT09IG51bGwpIHtcbiAgICAgIG5leHRGaWJlciA9IGZpYmVyLmNoaWxkO1xuXG4gICAgICB2YXIgZGVwZW5kZW5jeSA9IGxpc3QuZmlyc3Q7XG4gICAgICB3aGlsZSAoZGVwZW5kZW5jeSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29udGV4dCBtYXRjaGVzLlxuICAgICAgICBpZiAoZGVwZW5kZW5jeS5jb250ZXh0ID09PSBjb250ZXh0ICYmIChkZXBlbmRlbmN5Lm9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIC8vIE1hdGNoISBTY2hlZHVsZSBhbiB1cGRhdGUgb24gdGhpcyBmaWJlci5cblxuICAgICAgICAgIGlmIChmaWJlci50YWcgPT09IENsYXNzQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAvLyBTY2hlZHVsZSBhIGZvcmNlIHVwZGF0ZSBvbiB0aGUgd29yay1pbi1wcm9ncmVzcy5cbiAgICAgICAgICAgIHZhciB1cGRhdGUgPSBjcmVhdGVVcGRhdGUocmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgICAgdXBkYXRlLnRhZyA9IEZvcmNlVXBkYXRlO1xuICAgICAgICAgICAgLy8gVE9ETzogQmVjYXVzZSB3ZSBkb24ndCBoYXZlIGEgd29yay1pbi1wcm9ncmVzcywgdGhpcyB3aWxsIGFkZCB0aGVcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0byB0aGUgY3VycmVudCBmaWJlciwgdG9vLCB3aGljaCBtZWFucyBpdCB3aWxsIHBlcnNpc3QgZXZlbiBpZlxuICAgICAgICAgICAgLy8gdGhpcyByZW5kZXIgaXMgdGhyb3duIGF3YXkuIFNpbmNlIGl0J3MgYSByYWNlIGNvbmRpdGlvbiwgbm90IHN1cmUgaXQnc1xuICAgICAgICAgICAgLy8gd29ydGggZml4aW5nLlxuICAgICAgICAgICAgZW5xdWV1ZVVwZGF0ZShmaWJlciwgdXBkYXRlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZmliZXIuZXhwaXJhdGlvblRpbWUgPCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgICAgICAgICAgZmliZXIuZXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgICAgICAgICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIGFsdGVybmF0ZS5leHBpcmF0aW9uVGltZSA8IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgICAgICBhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzY2hlZHVsZVdvcmtPblBhcmVudFBhdGgoZmliZXIucmV0dXJuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG5cbiAgICAgICAgICAvLyBNYXJrIHRoZSBleHBpcmF0aW9uIHRpbWUgb24gdGhlIGxpc3QsIHRvby5cbiAgICAgICAgICBpZiAobGlzdC5leHBpcmF0aW9uVGltZSA8IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgICAgICBsaXN0LmV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2luY2Ugd2UgYWxyZWFkeSBmb3VuZCBhIG1hdGNoLCB3ZSBjYW4gc3RvcCB0cmF2ZXJzaW5nIHRoZVxuICAgICAgICAgIC8vIGRlcGVuZGVuY3kgbGlzdC5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jeS5uZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZmliZXIudGFnID09PSBDb250ZXh0UHJvdmlkZXIpIHtcbiAgICAgIC8vIERvbid0IHNjYW4gZGVlcGVyIGlmIHRoaXMgaXMgYSBtYXRjaGluZyBwcm92aWRlclxuICAgICAgbmV4dEZpYmVyID0gZmliZXIudHlwZSA9PT0gd29ya0luUHJvZ3Jlc3MudHlwZSA/IG51bGwgOiBmaWJlci5jaGlsZDtcbiAgICB9IGVsc2UgaWYgKGVuYWJsZVN1c3BlbnNlU2VydmVyUmVuZGVyZXIgJiYgZmliZXIudGFnID09PSBEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnQpIHtcbiAgICAgIC8vIElmIGEgZGVoeWRyYXRlZCBzdXNwZW5zZSBjb21wb25lbnQgaXMgaW4gdGhpcyBzdWJ0cmVlLCB3ZSBkb24ndCBrbm93XG4gICAgICAvLyBpZiBpdCB3aWxsIGhhdmUgYW55IGNvbnRleHQgY29uc3VtZXJzIGluIGl0LiBUaGUgYmVzdCB3ZSBjYW4gZG8gaXNcbiAgICAgIC8vIG1hcmsgaXQgYXMgaGF2aW5nIHVwZGF0ZXMgb24gaXRzIGNoaWxkcmVuLlxuICAgICAgaWYgKGZpYmVyLmV4cGlyYXRpb25UaW1lIDwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgZmliZXIuZXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICAgIHZhciBfYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICAgICAgaWYgKF9hbHRlcm5hdGUgIT09IG51bGwgJiYgX2FsdGVybmF0ZS5leHBpcmF0aW9uVGltZSA8IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIF9hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBwYXNzaW5nIHRoaXMgZmliZXIgYXMgdGhlIHBhcmVudFxuICAgICAgLy8gYmVjYXVzZSB3ZSB3YW50IHRvIHNjaGVkdWxlIHRoaXMgZmliZXIgYXMgaGF2aW5nIHdvcmtcbiAgICAgIC8vIG9uIGl0cyBjaGlsZHJlbi4gV2UnbGwgdXNlIHRoZSBjaGlsZEV4cGlyYXRpb25UaW1lIG9uXG4gICAgICAvLyB0aGlzIGZpYmVyIHRvIGluZGljYXRlIHRoYXQgYSBjb250ZXh0IGhhcyBjaGFuZ2VkLlxuICAgICAgc2NoZWR1bGVXb3JrT25QYXJlbnRQYXRoKGZpYmVyLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICBuZXh0RmliZXIgPSBmaWJlci5zaWJsaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcmF2ZXJzZSBkb3duLlxuICAgICAgbmV4dEZpYmVyID0gZmliZXIuY2hpbGQ7XG4gICAgfVxuXG4gICAgaWYgKG5leHRGaWJlciAhPT0gbnVsbCkge1xuICAgICAgLy8gU2V0IHRoZSByZXR1cm4gcG9pbnRlciBvZiB0aGUgY2hpbGQgdG8gdGhlIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIuXG4gICAgICBuZXh0RmliZXIucmV0dXJuID0gZmliZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5vIGNoaWxkLiBUcmF2ZXJzZSB0byBuZXh0IHNpYmxpbmcuXG4gICAgICBuZXh0RmliZXIgPSBmaWJlcjtcbiAgICAgIHdoaWxlIChuZXh0RmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5leHRGaWJlciA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAvLyBXZSdyZSBiYWNrIHRvIHRoZSByb290IG9mIHRoaXMgc3VidHJlZS4gRXhpdC5cbiAgICAgICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaWJsaW5nID0gbmV4dEZpYmVyLnNpYmxpbmc7XG4gICAgICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gU2V0IHRoZSByZXR1cm4gcG9pbnRlciBvZiB0aGUgc2libGluZyB0byB0aGUgd29yay1pbi1wcm9ncmVzcyBmaWJlci5cbiAgICAgICAgICBzaWJsaW5nLnJldHVybiA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICAgICAgbmV4dEZpYmVyID0gc2libGluZztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBObyBtb3JlIHNpYmxpbmdzLiBUcmF2ZXJzZSB1cC5cbiAgICAgICAgbmV4dEZpYmVyID0gbmV4dEZpYmVyLnJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgZmliZXIgPSBuZXh0RmliZXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IG51bGw7XG4gIGxhc3RDb250ZXh0V2l0aEFsbEJpdHNPYnNlcnZlZCA9IG51bGw7XG5cbiAgdmFyIGN1cnJlbnREZXBlbmRlbmNpZXMgPSB3b3JrSW5Qcm9ncmVzcy5jb250ZXh0RGVwZW5kZW5jaWVzO1xuICBpZiAoY3VycmVudERlcGVuZGVuY2llcyAhPT0gbnVsbCAmJiBjdXJyZW50RGVwZW5kZW5jaWVzLmV4cGlyYXRpb25UaW1lID49IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gQ29udGV4dCBsaXN0IGhhcyBhIHBlbmRpbmcgdXBkYXRlLiBNYXJrIHRoYXQgdGhpcyBmaWJlciBwZXJmb3JtZWQgd29yay5cbiAgICBtYXJrV29ya0luUHJvZ3Jlc3NSZWNlaXZlZFVwZGF0ZSgpO1xuICB9XG5cbiAgLy8gUmVzZXQgdGhlIHdvcmstaW4tcHJvZ3Jlc3MgbGlzdFxuICB3b3JrSW5Qcm9ncmVzcy5jb250ZXh0RGVwZW5kZW5jaWVzID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVhZENvbnRleHQoY29udGV4dCwgb2JzZXJ2ZWRCaXRzKSB7XG4gIHtcbiAgICAvLyBUaGlzIHdhcm5pbmcgd291bGQgZmlyZSBpZiB5b3UgcmVhZCBjb250ZXh0IGluc2lkZSBhIEhvb2sgbGlrZSB1c2VNZW1vLlxuICAgIC8vIFVubGlrZSB0aGUgY2xhc3MgY2hlY2sgYmVsb3csIGl0J3Mgbm90IGVuZm9yY2VkIGluIHByb2R1Y3Rpb24gZm9yIHBlcmYuXG4gICAgISFpc0Rpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWID8gd2FybmluZyQxKGZhbHNlLCAnQ29udGV4dCBjYW4gb25seSBiZSByZWFkIHdoaWxlIFJlYWN0IGlzIHJlbmRlcmluZy4gJyArICdJbiBjbGFzc2VzLCB5b3UgY2FuIHJlYWQgaXQgaW4gdGhlIHJlbmRlciBtZXRob2Qgb3IgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLiAnICsgJ0luIGZ1bmN0aW9uIGNvbXBvbmVudHMsIHlvdSBjYW4gcmVhZCBpdCBkaXJlY3RseSBpbiB0aGUgZnVuY3Rpb24gYm9keSwgYnV0IG5vdCAnICsgJ2luc2lkZSBIb29rcyBsaWtlIHVzZVJlZHVjZXIoKSBvciB1c2VNZW1vKCkuJykgOiB2b2lkIDA7XG4gIH1cblxuICBpZiAobGFzdENvbnRleHRXaXRoQWxsQml0c09ic2VydmVkID09PSBjb250ZXh0KSB7XG4gICAgLy8gTm90aGluZyB0byBkby4gV2UgYWxyZWFkeSBvYnNlcnZlIGV2ZXJ5dGhpbmcgaW4gdGhpcyBjb250ZXh0LlxuICB9IGVsc2UgaWYgKG9ic2VydmVkQml0cyA9PT0gZmFsc2UgfHwgb2JzZXJ2ZWRCaXRzID09PSAwKSB7XG4gICAgLy8gRG8gbm90IG9ic2VydmUgYW55IHVwZGF0ZXMuXG4gIH0gZWxzZSB7XG4gICAgdmFyIHJlc29sdmVkT2JzZXJ2ZWRCaXRzID0gdm9pZCAwOyAvLyBBdm9pZCBkZW9wdGluZyBvbiBvYnNlcnZhYmxlIGFyZ3VtZW50cyBvciBoZXRlcm9nZW5lb3VzIHR5cGVzLlxuICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZWRCaXRzICE9PSAnbnVtYmVyJyB8fCBvYnNlcnZlZEJpdHMgPT09IG1heFNpZ25lZDMxQml0SW50KSB7XG4gICAgICAvLyBPYnNlcnZlIGFsbCB1cGRhdGVzLlxuICAgICAgbGFzdENvbnRleHRXaXRoQWxsQml0c09ic2VydmVkID0gY29udGV4dDtcbiAgICAgIHJlc29sdmVkT2JzZXJ2ZWRCaXRzID0gbWF4U2lnbmVkMzFCaXRJbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc29sdmVkT2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzO1xuICAgIH1cblxuICAgIHZhciBjb250ZXh0SXRlbSA9IHtcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBvYnNlcnZlZEJpdHM6IHJlc29sdmVkT2JzZXJ2ZWRCaXRzLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG5cbiAgICBpZiAobGFzdENvbnRleHREZXBlbmRlbmN5ID09PSBudWxsKSB7XG4gICAgICAhKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0NvbnRleHQgY2FuIG9ubHkgYmUgcmVhZCB3aGlsZSBSZWFjdCBpcyByZW5kZXJpbmcuIEluIGNsYXNzZXMsIHlvdSBjYW4gcmVhZCBpdCBpbiB0aGUgcmVuZGVyIG1ldGhvZCBvciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuIEluIGZ1bmN0aW9uIGNvbXBvbmVudHMsIHlvdSBjYW4gcmVhZCBpdCBkaXJlY3RseSBpbiB0aGUgZnVuY3Rpb24gYm9keSwgYnV0IG5vdCBpbnNpZGUgSG9va3MgbGlrZSB1c2VSZWR1Y2VyKCkgb3IgdXNlTWVtbygpLicpIDogdm9pZCAwO1xuXG4gICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBkZXBlbmRlbmN5IGZvciB0aGlzIGNvbXBvbmVudC4gQ3JlYXRlIGEgbmV3IGxpc3QuXG4gICAgICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjb250ZXh0SXRlbTtcbiAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmNvbnRleHREZXBlbmRlbmNpZXMgPSB7XG4gICAgICAgIGZpcnN0OiBjb250ZXh0SXRlbSxcbiAgICAgICAgZXhwaXJhdGlvblRpbWU6IE5vV29ya1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXBwZW5kIGEgbmV3IGNvbnRleHQgaXRlbS5cbiAgICAgIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGxhc3RDb250ZXh0RGVwZW5kZW5jeS5uZXh0ID0gY29udGV4dEl0ZW07XG4gICAgfVxuICB9XG4gIHJldHVybiBpc1ByaW1hcnlSZW5kZXJlciA/IGNvbnRleHQuX2N1cnJlbnRWYWx1ZSA6IGNvbnRleHQuX2N1cnJlbnRWYWx1ZTI7XG59XG5cbi8vIFVwZGF0ZVF1ZXVlIGlzIGEgbGlua2VkIGxpc3Qgb2YgcHJpb3JpdGl6ZWQgdXBkYXRlcy5cbi8vXG4vLyBMaWtlIGZpYmVycywgdXBkYXRlIHF1ZXVlcyBjb21lIGluIHBhaXJzOiBhIGN1cnJlbnQgcXVldWUsIHdoaWNoIHJlcHJlc2VudHNcbi8vIHRoZSB2aXNpYmxlIHN0YXRlIG9mIHRoZSBzY3JlZW4sIGFuZCBhIHdvcmstaW4tcHJvZ3Jlc3MgcXVldWUsIHdoaWNoIGNhbiBiZVxuLy8gbXV0YXRlZCBhbmQgcHJvY2Vzc2VkIGFzeW5jaHJvbm91c2x5IGJlZm9yZSBpdCBpcyBjb21taXR0ZWQg4oCUIGEgZm9ybSBvZlxuLy8gZG91YmxlIGJ1ZmZlcmluZy4gSWYgYSB3b3JrLWluLXByb2dyZXNzIHJlbmRlciBpcyBkaXNjYXJkZWQgYmVmb3JlIGZpbmlzaGluZyxcbi8vIHdlIGNyZWF0ZSBhIG5ldyB3b3JrLWluLXByb2dyZXNzIGJ5IGNsb25pbmcgdGhlIGN1cnJlbnQgcXVldWUuXG4vL1xuLy8gQm90aCBxdWV1ZXMgc2hhcmUgYSBwZXJzaXN0ZW50LCBzaW5nbHktbGlua2VkIGxpc3Qgc3RydWN0dXJlLiBUbyBzY2hlZHVsZSBhblxuLy8gdXBkYXRlLCB3ZSBhcHBlbmQgaXQgdG8gdGhlIGVuZCBvZiBib3RoIHF1ZXVlcy4gRWFjaCBxdWV1ZSBtYWludGFpbnMgYVxuLy8gcG9pbnRlciB0byBmaXJzdCB1cGRhdGUgaW4gdGhlIHBlcnNpc3RlbnQgbGlzdCB0aGF0IGhhc24ndCBiZWVuIHByb2Nlc3NlZC5cbi8vIFRoZSB3b3JrLWluLXByb2dyZXNzIHBvaW50ZXIgYWx3YXlzIGhhcyBhIHBvc2l0aW9uIGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhblxuLy8gdGhlIGN1cnJlbnQgcXVldWUsIHNpbmNlIHdlIGFsd2F5cyB3b3JrIG9uIHRoYXQgb25lLiBUaGUgY3VycmVudCBxdWV1ZSdzXG4vLyBwb2ludGVyIGlzIG9ubHkgdXBkYXRlZCBkdXJpbmcgdGhlIGNvbW1pdCBwaGFzZSwgd2hlbiB3ZSBzd2FwIGluIHRoZVxuLy8gd29yay1pbi1wcm9ncmVzcy5cbi8vXG4vLyBGb3IgZXhhbXBsZTpcbi8vXG4vLyAgIEN1cnJlbnQgcG9pbnRlcjogICAgICAgICAgIEEgLSBCIC0gQyAtIEQgLSBFIC0gRlxuLy8gICBXb3JrLWluLXByb2dyZXNzIHBvaW50ZXI6ICAgICAgICAgICAgICBEIC0gRSAtIEZcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgd29yay1pbi1wcm9ncmVzcyBxdWV1ZSBoYXNcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkIG1vcmUgdXBkYXRlcyB0aGFuIGN1cnJlbnQuXG4vL1xuLy8gVGhlIHJlYXNvbiB3ZSBhcHBlbmQgdG8gYm90aCBxdWV1ZXMgaXMgYmVjYXVzZSBvdGhlcndpc2Ugd2UgbWlnaHQgZHJvcFxuLy8gdXBkYXRlcyB3aXRob3V0IGV2ZXIgcHJvY2Vzc2luZyB0aGVtLiBGb3IgZXhhbXBsZSwgaWYgd2Ugb25seSBhZGQgdXBkYXRlcyB0b1xuLy8gdGhlIHdvcmstaW4tcHJvZ3Jlc3MgcXVldWUsIHNvbWUgdXBkYXRlcyBjb3VsZCBiZSBsb3N0IHdoZW5ldmVyIGEgd29yay1pblxuLy8gLXByb2dyZXNzIHJlbmRlciByZXN0YXJ0cyBieSBjbG9uaW5nIGZyb20gY3VycmVudC4gU2ltaWxhcmx5LCBpZiB3ZSBvbmx5IGFkZFxuLy8gdXBkYXRlcyB0byB0aGUgY3VycmVudCBxdWV1ZSwgdGhlIHVwZGF0ZXMgd2lsbCBiZSBsb3N0IHdoZW5ldmVyIGFuIGFscmVhZHlcbi8vIGluLXByb2dyZXNzIHF1ZXVlIGNvbW1pdHMgYW5kIHN3YXBzIHdpdGggdGhlIGN1cnJlbnQgcXVldWUuIEhvd2V2ZXIsIGJ5XG4vLyBhZGRpbmcgdG8gYm90aCBxdWV1ZXMsIHdlIGd1YXJhbnRlZSB0aGF0IHRoZSB1cGRhdGUgd2lsbCBiZSBwYXJ0IG9mIHRoZSBuZXh0XG4vLyB3b3JrLWluLXByb2dyZXNzLiAoQW5kIGJlY2F1c2UgdGhlIHdvcmstaW4tcHJvZ3Jlc3MgcXVldWUgYmVjb21lcyB0aGVcbi8vIGN1cnJlbnQgcXVldWUgb25jZSBpdCBjb21taXRzLCB0aGVyZSdzIG5vIGRhbmdlciBvZiBhcHBseWluZyB0aGUgc2FtZVxuLy8gdXBkYXRlIHR3aWNlLilcbi8vXG4vLyBQcmlvcml0aXphdGlvblxuLy8gLS0tLS0tLS0tLS0tLS1cbi8vXG4vLyBVcGRhdGVzIGFyZSBub3Qgc29ydGVkIGJ5IHByaW9yaXR5LCBidXQgYnkgaW5zZXJ0aW9uOyBuZXcgdXBkYXRlcyBhcmUgYWx3YXlzXG4vLyBhcHBlbmRlZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuLy9cbi8vIFRoZSBwcmlvcml0eSBpcyBzdGlsbCBpbXBvcnRhbnQsIHRob3VnaC4gV2hlbiBwcm9jZXNzaW5nIHRoZSB1cGRhdGUgcXVldWVcbi8vIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLCBvbmx5IHRoZSB1cGRhdGVzIHdpdGggc3VmZmljaWVudCBwcmlvcml0eSBhcmVcbi8vIGluY2x1ZGVkIGluIHRoZSByZXN1bHQuIElmIHdlIHNraXAgYW4gdXBkYXRlIGJlY2F1c2UgaXQgaGFzIGluc3VmZmljaWVudFxuLy8gcHJpb3JpdHksIGl0IHJlbWFpbnMgaW4gdGhlIHF1ZXVlIHRvIGJlIHByb2Nlc3NlZCBsYXRlciwgZHVyaW5nIGEgbG93ZXJcbi8vIHByaW9yaXR5IHJlbmRlci4gQ3J1Y2lhbGx5LCBhbGwgdXBkYXRlcyBzdWJzZXF1ZW50IHRvIGEgc2tpcHBlZCB1cGRhdGUgYWxzb1xuLy8gcmVtYWluIGluIHRoZSBxdWV1ZSAqcmVnYXJkbGVzcyBvZiB0aGVpciBwcmlvcml0eSouIFRoYXQgbWVhbnMgaGlnaCBwcmlvcml0eVxuLy8gdXBkYXRlcyBhcmUgc29tZXRpbWVzIHByb2Nlc3NlZCB0d2ljZSwgYXQgdHdvIHNlcGFyYXRlIHByaW9yaXRpZXMuIFdlIGFsc29cbi8vIGtlZXAgdHJhY2sgb2YgYSBiYXNlIHN0YXRlLCB0aGF0IHJlcHJlc2VudHMgdGhlIHN0YXRlIGJlZm9yZSB0aGUgZmlyc3Rcbi8vIHVwZGF0ZSBpbiB0aGUgcXVldWUgaXMgYXBwbGllZC5cbi8vXG4vLyBGb3IgZXhhbXBsZTpcbi8vXG4vLyAgIEdpdmVuIGEgYmFzZSBzdGF0ZSBvZiAnJywgYW5kIHRoZSBmb2xsb3dpbmcgcXVldWUgb2YgdXBkYXRlc1xuLy9cbi8vICAgICBBMSAtIEIyIC0gQzEgLSBEMlxuLy9cbi8vICAgd2hlcmUgdGhlIG51bWJlciBpbmRpY2F0ZXMgdGhlIHByaW9yaXR5LCBhbmQgdGhlIHVwZGF0ZSBpcyBhcHBsaWVkIHRvIHRoZVxuLy8gICBwcmV2aW91cyBzdGF0ZSBieSBhcHBlbmRpbmcgYSBsZXR0ZXIsIFJlYWN0IHdpbGwgcHJvY2VzcyB0aGVzZSB1cGRhdGVzIGFzXG4vLyAgIHR3byBzZXBhcmF0ZSByZW5kZXJzLCBvbmUgcGVyIGRpc3RpbmN0IHByaW9yaXR5IGxldmVsOlxuLy9cbi8vICAgRmlyc3QgcmVuZGVyLCBhdCBwcmlvcml0eSAxOlxuLy8gICAgIEJhc2Ugc3RhdGU6ICcnXG4vLyAgICAgVXBkYXRlczogW0ExLCBDMV1cbi8vICAgICBSZXN1bHQgc3RhdGU6ICdBQydcbi8vXG4vLyAgIFNlY29uZCByZW5kZXIsIGF0IHByaW9yaXR5IDI6XG4vLyAgICAgQmFzZSBzdGF0ZTogJ0EnICAgICAgICAgICAgPC0gIFRoZSBiYXNlIHN0YXRlIGRvZXMgbm90IGluY2x1ZGUgQzEsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgQjIgd2FzIHNraXBwZWQuXG4vLyAgICAgVXBkYXRlczogW0IyLCBDMSwgRDJdICAgICAgPC0gIEMxIHdhcyByZWJhc2VkIG9uIHRvcCBvZiBCMlxuLy8gICAgIFJlc3VsdCBzdGF0ZTogJ0FCQ0QnXG4vL1xuLy8gQmVjYXVzZSB3ZSBwcm9jZXNzIHVwZGF0ZXMgaW4gaW5zZXJ0aW9uIG9yZGVyLCBhbmQgcmViYXNlIGhpZ2ggcHJpb3JpdHlcbi8vIHVwZGF0ZXMgd2hlbiBwcmVjZWRpbmcgdXBkYXRlcyBhcmUgc2tpcHBlZCwgdGhlIGZpbmFsIHJlc3VsdCBpcyBkZXRlcm1pbmlzdGljXG4vLyByZWdhcmRsZXNzIG9mIHByaW9yaXR5LiBJbnRlcm1lZGlhdGUgc3RhdGUgbWF5IHZhcnkgYWNjb3JkaW5nIHRvIHN5c3RlbVxuLy8gcmVzb3VyY2VzLCBidXQgdGhlIGZpbmFsIHN0YXRlIGlzIGFsd2F5cyB0aGUgc2FtZS5cblxudmFyIFVwZGF0ZVN0YXRlID0gMDtcbnZhciBSZXBsYWNlU3RhdGUgPSAxO1xudmFyIEZvcmNlVXBkYXRlID0gMjtcbnZhciBDYXB0dXJlVXBkYXRlID0gMztcblxuLy8gR2xvYmFsIHN0YXRlIHRoYXQgaXMgcmVzZXQgYXQgdGhlIGJlZ2lubmluZyBvZiBjYWxsaW5nIGBwcm9jZXNzVXBkYXRlUXVldWVgLlxuLy8gSXQgc2hvdWxkIG9ubHkgYmUgcmVhZCByaWdodCBhZnRlciBjYWxsaW5nIGBwcm9jZXNzVXBkYXRlUXVldWVgLCB2aWFcbi8vIGBjaGVja0hhc0ZvcmNlVXBkYXRlQWZ0ZXJQcm9jZXNzaW5nYC5cbnZhciBoYXNGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG52YXIgZGlkV2FyblVwZGF0ZUluc2lkZVVwZGF0ZSA9IHZvaWQgMDtcbnZhciBjdXJyZW50bHlQcm9jZXNzaW5nUXVldWUgPSB2b2lkIDA7XG52YXIgcmVzZXRDdXJyZW50bHlQcm9jZXNzaW5nUXVldWUgPSB2b2lkIDA7XG57XG4gIGRpZFdhcm5VcGRhdGVJbnNpZGVVcGRhdGUgPSBmYWxzZTtcbiAgY3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID0gbnVsbDtcbiAgcmVzZXRDdXJyZW50bHlQcm9jZXNzaW5nUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID0gbnVsbDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVXBkYXRlUXVldWUoYmFzZVN0YXRlKSB7XG4gIHZhciBxdWV1ZSA9IHtcbiAgICBiYXNlU3RhdGU6IGJhc2VTdGF0ZSxcbiAgICBmaXJzdFVwZGF0ZTogbnVsbCxcbiAgICBsYXN0VXBkYXRlOiBudWxsLFxuICAgIGZpcnN0Q2FwdHVyZWRVcGRhdGU6IG51bGwsXG4gICAgbGFzdENhcHR1cmVkVXBkYXRlOiBudWxsLFxuICAgIGZpcnN0RWZmZWN0OiBudWxsLFxuICAgIGxhc3RFZmZlY3Q6IG51bGwsXG4gICAgZmlyc3RDYXB0dXJlZEVmZmVjdDogbnVsbCxcbiAgICBsYXN0Q2FwdHVyZWRFZmZlY3Q6IG51bGxcbiAgfTtcbiAgcmV0dXJuIHF1ZXVlO1xufVxuXG5mdW5jdGlvbiBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnRRdWV1ZSkge1xuICB2YXIgcXVldWUgPSB7XG4gICAgYmFzZVN0YXRlOiBjdXJyZW50UXVldWUuYmFzZVN0YXRlLFxuICAgIGZpcnN0VXBkYXRlOiBjdXJyZW50UXVldWUuZmlyc3RVcGRhdGUsXG4gICAgbGFzdFVwZGF0ZTogY3VycmVudFF1ZXVlLmxhc3RVcGRhdGUsXG5cbiAgICAvLyBUT0RPOiBXaXRoIHJlc3VtaW5nLCBpZiB3ZSBiYWlsIG91dCBhbmQgcmVzdXNlIHRoZSBjaGlsZCB0cmVlLCB3ZSBzaG91bGRcbiAgICAvLyBrZWVwIHRoZXNlIGVmZmVjdHMuXG4gICAgZmlyc3RDYXB0dXJlZFVwZGF0ZTogbnVsbCxcbiAgICBsYXN0Q2FwdHVyZWRVcGRhdGU6IG51bGwsXG5cbiAgICBmaXJzdEVmZmVjdDogbnVsbCxcbiAgICBsYXN0RWZmZWN0OiBudWxsLFxuXG4gICAgZmlyc3RDYXB0dXJlZEVmZmVjdDogbnVsbCxcbiAgICBsYXN0Q2FwdHVyZWRFZmZlY3Q6IG51bGxcbiAgfTtcbiAgcmV0dXJuIHF1ZXVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVcGRhdGUoZXhwaXJhdGlvblRpbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBleHBpcmF0aW9uVGltZTogZXhwaXJhdGlvblRpbWUsXG5cbiAgICB0YWc6IFVwZGF0ZVN0YXRlLFxuICAgIHBheWxvYWQ6IG51bGwsXG4gICAgY2FsbGJhY2s6IG51bGwsXG5cbiAgICBuZXh0OiBudWxsLFxuICAgIG5leHRFZmZlY3Q6IG51bGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kVXBkYXRlVG9RdWV1ZShxdWV1ZSwgdXBkYXRlKSB7XG4gIC8vIEFwcGVuZCB0aGUgdXBkYXRlIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3QuXG4gIGlmIChxdWV1ZS5sYXN0VXBkYXRlID09PSBudWxsKSB7XG4gICAgLy8gUXVldWUgaXMgZW1wdHlcbiAgICBxdWV1ZS5maXJzdFVwZGF0ZSA9IHF1ZXVlLmxhc3RVcGRhdGUgPSB1cGRhdGU7XG4gIH0gZWxzZSB7XG4gICAgcXVldWUubGFzdFVwZGF0ZS5uZXh0ID0gdXBkYXRlO1xuICAgIHF1ZXVlLmxhc3RVcGRhdGUgPSB1cGRhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShmaWJlciwgdXBkYXRlKSB7XG4gIC8vIFVwZGF0ZSBxdWV1ZXMgYXJlIGNyZWF0ZWQgbGF6aWx5LlxuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICB2YXIgcXVldWUxID0gdm9pZCAwO1xuICB2YXIgcXVldWUyID0gdm9pZCAwO1xuICBpZiAoYWx0ZXJuYXRlID09PSBudWxsKSB7XG4gICAgLy8gVGhlcmUncyBvbmx5IG9uZSBmaWJlci5cbiAgICBxdWV1ZTEgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgICBxdWV1ZTIgPSBudWxsO1xuICAgIGlmIChxdWV1ZTEgPT09IG51bGwpIHtcbiAgICAgIHF1ZXVlMSA9IGZpYmVyLnVwZGF0ZVF1ZXVlID0gY3JlYXRlVXBkYXRlUXVldWUoZmliZXIubWVtb2l6ZWRTdGF0ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZXJlIGFyZSB0d28gb3duZXJzLlxuICAgIHF1ZXVlMSA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuICAgIHF1ZXVlMiA9IGFsdGVybmF0ZS51cGRhdGVRdWV1ZTtcbiAgICBpZiAocXVldWUxID09PSBudWxsKSB7XG4gICAgICBpZiAocXVldWUyID09PSBudWxsKSB7XG4gICAgICAgIC8vIE5laXRoZXIgZmliZXIgaGFzIGFuIHVwZGF0ZSBxdWV1ZS4gQ3JlYXRlIG5ldyBvbmVzLlxuICAgICAgICBxdWV1ZTEgPSBmaWJlci51cGRhdGVRdWV1ZSA9IGNyZWF0ZVVwZGF0ZVF1ZXVlKGZpYmVyLm1lbW9pemVkU3RhdGUpO1xuICAgICAgICBxdWV1ZTIgPSBhbHRlcm5hdGUudXBkYXRlUXVldWUgPSBjcmVhdGVVcGRhdGVRdWV1ZShhbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPbmx5IG9uZSBmaWJlciBoYXMgYW4gdXBkYXRlIHF1ZXVlLiBDbG9uZSB0byBjcmVhdGUgYSBuZXcgb25lLlxuICAgICAgICBxdWV1ZTEgPSBmaWJlci51cGRhdGVRdWV1ZSA9IGNsb25lVXBkYXRlUXVldWUocXVldWUyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHF1ZXVlMiA9PT0gbnVsbCkge1xuICAgICAgICAvLyBPbmx5IG9uZSBmaWJlciBoYXMgYW4gdXBkYXRlIHF1ZXVlLiBDbG9uZSB0byBjcmVhdGUgYSBuZXcgb25lLlxuICAgICAgICBxdWV1ZTIgPSBhbHRlcm5hdGUudXBkYXRlUXVldWUgPSBjbG9uZVVwZGF0ZVF1ZXVlKHF1ZXVlMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCb3RoIG93bmVycyBoYXZlIGFuIHVwZGF0ZSBxdWV1ZS5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHF1ZXVlMiA9PT0gbnVsbCB8fCBxdWV1ZTEgPT09IHF1ZXVlMikge1xuICAgIC8vIFRoZXJlJ3Mgb25seSBhIHNpbmdsZSBxdWV1ZS5cbiAgICBhcHBlbmRVcGRhdGVUb1F1ZXVlKHF1ZXVlMSwgdXBkYXRlKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGVyZSBhcmUgdHdvIHF1ZXVlcy4gV2UgbmVlZCB0byBhcHBlbmQgdGhlIHVwZGF0ZSB0byBib3RoIHF1ZXVlcyxcbiAgICAvLyB3aGlsZSBhY2NvdW50aW5nIGZvciB0aGUgcGVyc2lzdGVudCBzdHJ1Y3R1cmUgb2YgdGhlIGxpc3Qg4oCUIHdlIGRvbid0XG4gICAgLy8gd2FudCB0aGUgc2FtZSB1cGRhdGUgdG8gYmUgYWRkZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgaWYgKHF1ZXVlMS5sYXN0VXBkYXRlID09PSBudWxsIHx8IHF1ZXVlMi5sYXN0VXBkYXRlID09PSBudWxsKSB7XG4gICAgICAvLyBPbmUgb2YgdGhlIHF1ZXVlcyBpcyBub3QgZW1wdHkuIFdlIG11c3QgYWRkIHRoZSB1cGRhdGUgdG8gYm90aCBxdWV1ZXMuXG4gICAgICBhcHBlbmRVcGRhdGVUb1F1ZXVlKHF1ZXVlMSwgdXBkYXRlKTtcbiAgICAgIGFwcGVuZFVwZGF0ZVRvUXVldWUocXVldWUyLCB1cGRhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBCb3RoIHF1ZXVlcyBhcmUgbm9uLWVtcHR5LiBUaGUgbGFzdCB1cGRhdGUgaXMgdGhlIHNhbWUgaW4gYm90aCBsaXN0cyxcbiAgICAgIC8vIGJlY2F1c2Ugb2Ygc3RydWN0dXJhbCBzaGFyaW5nLiBTbywgb25seSBhcHBlbmQgdG8gb25lIG9mIHRoZSBsaXN0cy5cbiAgICAgIGFwcGVuZFVwZGF0ZVRvUXVldWUocXVldWUxLCB1cGRhdGUpO1xuICAgICAgLy8gQnV0IHdlIHN0aWxsIG5lZWQgdG8gdXBkYXRlIHRoZSBgbGFzdFVwZGF0ZWAgcG9pbnRlciBvZiBxdWV1ZTIuXG4gICAgICBxdWV1ZTIubGFzdFVwZGF0ZSA9IHVwZGF0ZTtcbiAgICB9XG4gIH1cblxuICB7XG4gICAgaWYgKGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQgJiYgKGN1cnJlbnRseVByb2Nlc3NpbmdRdWV1ZSA9PT0gcXVldWUxIHx8IHF1ZXVlMiAhPT0gbnVsbCAmJiBjdXJyZW50bHlQcm9jZXNzaW5nUXVldWUgPT09IHF1ZXVlMikgJiYgIWRpZFdhcm5VcGRhdGVJbnNpZGVVcGRhdGUpIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0FuIHVwZGF0ZSAoc2V0U3RhdGUsIHJlcGxhY2VTdGF0ZSwgb3IgZm9yY2VVcGRhdGUpIHdhcyBzY2hlZHVsZWQgJyArICdmcm9tIGluc2lkZSBhbiB1cGRhdGUgZnVuY3Rpb24uIFVwZGF0ZSBmdW5jdGlvbnMgc2hvdWxkIGJlIHB1cmUsICcgKyAnd2l0aCB6ZXJvIHNpZGUtZWZmZWN0cy4gQ29uc2lkZXIgdXNpbmcgY29tcG9uZW50RGlkVXBkYXRlIG9yIGEgJyArICdjYWxsYmFjay4nKTtcbiAgICAgIGRpZFdhcm5VcGRhdGVJbnNpZGVVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUod29ya0luUHJvZ3Jlc3MsIHVwZGF0ZSkge1xuICAvLyBDYXB0dXJlZCB1cGRhdGVzIGdvIGludG8gYSBzZXBhcmF0ZSBsaXN0LCBhbmQgb25seSBvbiB0aGUgd29yay1pbi1cbiAgLy8gcHJvZ3Jlc3MgcXVldWUuXG4gIHZhciB3b3JrSW5Qcm9ncmVzc1F1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gIGlmICh3b3JrSW5Qcm9ncmVzc1F1ZXVlID09PSBudWxsKSB7XG4gICAgd29ya0luUHJvZ3Jlc3NRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3JlYXRlVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVE9ETzogSSBwdXQgdGhpcyBoZXJlIHJhdGhlciB0aGFuIGNyZWF0ZVdvcmtJblByb2dyZXNzIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAvLyBjbG9uZSB0aGUgcXVldWUgdW5uZWNlc3NhcmlseS4gVGhlcmUncyBwcm9iYWJseSBhIGJldHRlciB3YXkgdG9cbiAgICAvLyBzdHJ1Y3R1cmUgdGhpcy5cbiAgICB3b3JrSW5Qcm9ncmVzc1F1ZXVlID0gZW5zdXJlV29ya0luUHJvZ3Jlc3NRdWV1ZUlzQUNsb25lKHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzc1F1ZXVlKTtcbiAgfVxuXG4gIC8vIEFwcGVuZCB0aGUgdXBkYXRlIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3QuXG4gIGlmICh3b3JrSW5Qcm9ncmVzc1F1ZXVlLmxhc3RDYXB0dXJlZFVwZGF0ZSA9PT0gbnVsbCkge1xuICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHJlbmRlciBwaGFzZSB1cGRhdGVcbiAgICB3b3JrSW5Qcm9ncmVzc1F1ZXVlLmZpcnN0Q2FwdHVyZWRVcGRhdGUgPSB3b3JrSW5Qcm9ncmVzc1F1ZXVlLmxhc3RDYXB0dXJlZFVwZGF0ZSA9IHVwZGF0ZTtcbiAgfSBlbHNlIHtcbiAgICB3b3JrSW5Qcm9ncmVzc1F1ZXVlLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0ID0gdXBkYXRlO1xuICAgIHdvcmtJblByb2dyZXNzUXVldWUubGFzdENhcHR1cmVkVXBkYXRlID0gdXBkYXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVdvcmtJblByb2dyZXNzUXVldWVJc0FDbG9uZSh3b3JrSW5Qcm9ncmVzcywgcXVldWUpIHtcbiAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgLy8gSWYgdGhlIHdvcmstaW4tcHJvZ3Jlc3MgcXVldWUgaXMgZXF1YWwgdG8gdGhlIGN1cnJlbnQgcXVldWUsXG4gICAgLy8gd2UgbmVlZCB0byBjbG9uZSBpdCBmaXJzdC5cbiAgICBpZiAocXVldWUgPT09IGN1cnJlbnQudXBkYXRlUXVldWUpIHtcbiAgICAgIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjbG9uZVVwZGF0ZVF1ZXVlKHF1ZXVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHF1ZXVlO1xufVxuXG5mdW5jdGlvbiBnZXRTdGF0ZUZyb21VcGRhdGUod29ya0luUHJvZ3Jlc3MsIHF1ZXVlLCB1cGRhdGUsIHByZXZTdGF0ZSwgbmV4dFByb3BzLCBpbnN0YW5jZSkge1xuICBzd2l0Y2ggKHVwZGF0ZS50YWcpIHtcbiAgICBjYXNlIFJlcGxhY2VTdGF0ZTpcbiAgICAgIHtcbiAgICAgICAgdmFyIF9wYXlsb2FkID0gdXBkYXRlLnBheWxvYWQ7XG4gICAgICAgIGlmICh0eXBlb2YgX3BheWxvYWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBVcGRhdGVyIGZ1bmN0aW9uXG4gICAgICAgICAge1xuICAgICAgICAgICAgZW50ZXJEaXNhbGxvd2VkQ29udGV4dFJlYWRJbkRFVigpO1xuICAgICAgICAgICAgaWYgKGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0cyB8fCBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHNGb3JTdHJpY3RNb2RlICYmIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAgICAgICAgIF9wYXlsb2FkLmNhbGwoaW5zdGFuY2UsIHByZXZTdGF0ZSwgbmV4dFByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG5leHRTdGF0ZSA9IF9wYXlsb2FkLmNhbGwoaW5zdGFuY2UsIHByZXZTdGF0ZSwgbmV4dFByb3BzKTtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBleGl0RGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGF0ZSBvYmplY3RcbiAgICAgICAgcmV0dXJuIF9wYXlsb2FkO1xuICAgICAgfVxuICAgIGNhc2UgQ2FwdHVyZVVwZGF0ZTpcbiAgICAgIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnID0gd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnICYgflNob3VsZENhcHR1cmUgfCBEaWRDYXB0dXJlO1xuICAgICAgfVxuICAgIC8vIEludGVudGlvbmFsIGZhbGx0aHJvdWdoXG4gICAgY2FzZSBVcGRhdGVTdGF0ZTpcbiAgICAgIHtcbiAgICAgICAgdmFyIF9wYXlsb2FkMiA9IHVwZGF0ZS5wYXlsb2FkO1xuICAgICAgICB2YXIgcGFydGlhbFN0YXRlID0gdm9pZCAwO1xuICAgICAgICBpZiAodHlwZW9mIF9wYXlsb2FkMiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIC8vIFVwZGF0ZXIgZnVuY3Rpb25cbiAgICAgICAgICB7XG4gICAgICAgICAgICBlbnRlckRpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWKCk7XG4gICAgICAgICAgICBpZiAoZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzIHx8IGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdE1vZGUpIHtcbiAgICAgICAgICAgICAgX3BheWxvYWQyLmNhbGwoaW5zdGFuY2UsIHByZXZTdGF0ZSwgbmV4dFByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcGFydGlhbFN0YXRlID0gX3BheWxvYWQyLmNhbGwoaW5zdGFuY2UsIHByZXZTdGF0ZSwgbmV4dFByb3BzKTtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBleGl0RGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUGFydGlhbCBzdGF0ZSBvYmplY3RcbiAgICAgICAgICBwYXJ0aWFsU3RhdGUgPSBfcGF5bG9hZDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxTdGF0ZSA9PT0gbnVsbCB8fCBwYXJ0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIE51bGwgYW5kIHVuZGVmaW5lZCBhcmUgdHJlYXRlZCBhcyBuby1vcHMuXG4gICAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNZXJnZSB0aGUgcGFydGlhbCBzdGF0ZSBhbmQgdGhlIHByZXZpb3VzIHN0YXRlLlxuICAgICAgICByZXR1cm4gX2Fzc2lnbih7fSwgcHJldlN0YXRlLCBwYXJ0aWFsU3RhdGUpO1xuICAgICAgfVxuICAgIGNhc2UgRm9yY2VVcGRhdGU6XG4gICAgICB7XG4gICAgICAgIGhhc0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gcHJldlN0YXRlO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIHF1ZXVlLCBwcm9wcywgaW5zdGFuY2UsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGhhc0ZvcmNlVXBkYXRlID0gZmFsc2U7XG5cbiAgcXVldWUgPSBlbnN1cmVXb3JrSW5Qcm9ncmVzc1F1ZXVlSXNBQ2xvbmUod29ya0luUHJvZ3Jlc3MsIHF1ZXVlKTtcblxuICB7XG4gICAgY3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID0gcXVldWU7XG4gIH1cblxuICAvLyBUaGVzZSB2YWx1ZXMgbWF5IGNoYW5nZSBhcyB3ZSBwcm9jZXNzIHRoZSBxdWV1ZS5cbiAgdmFyIG5ld0Jhc2VTdGF0ZSA9IHF1ZXVlLmJhc2VTdGF0ZTtcbiAgdmFyIG5ld0ZpcnN0VXBkYXRlID0gbnVsbDtcbiAgdmFyIG5ld0V4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuXG4gIC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgbGlzdCBvZiB1cGRhdGVzIHRvIGNvbXB1dGUgdGhlIHJlc3VsdC5cbiAgdmFyIHVwZGF0ZSA9IHF1ZXVlLmZpcnN0VXBkYXRlO1xuICB2YXIgcmVzdWx0U3RhdGUgPSBuZXdCYXNlU3RhdGU7XG4gIHdoaWxlICh1cGRhdGUgIT09IG51bGwpIHtcbiAgICB2YXIgdXBkYXRlRXhwaXJhdGlvblRpbWUgPSB1cGRhdGUuZXhwaXJhdGlvblRpbWU7XG4gICAgaWYgKHVwZGF0ZUV4cGlyYXRpb25UaW1lIDwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIC8vIFRoaXMgdXBkYXRlIGRvZXMgbm90IGhhdmUgc3VmZmljaWVudCBwcmlvcml0eS4gU2tpcCBpdC5cbiAgICAgIGlmIChuZXdGaXJzdFVwZGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBza2lwcGVkIHVwZGF0ZS4gSXQgd2lsbCBiZSB0aGUgZmlyc3QgdXBkYXRlIGluXG4gICAgICAgIC8vIHRoZSBuZXcgbGlzdC5cbiAgICAgICAgbmV3Rmlyc3RVcGRhdGUgPSB1cGRhdGU7XG4gICAgICAgIC8vIFNpbmNlIHRoaXMgaXMgdGhlIGZpcnN0IHVwZGF0ZSB0aGF0IHdhcyBza2lwcGVkLCB0aGUgY3VycmVudCByZXN1bHRcbiAgICAgICAgLy8gaXMgdGhlIG5ldyBiYXNlIHN0YXRlLlxuICAgICAgICBuZXdCYXNlU3RhdGUgPSByZXN1bHRTdGF0ZTtcbiAgICAgIH1cbiAgICAgIC8vIFNpbmNlIHRoaXMgdXBkYXRlIHdpbGwgcmVtYWluIGluIHRoZSBsaXN0LCB1cGRhdGUgdGhlIHJlbWFpbmluZ1xuICAgICAgLy8gZXhwaXJhdGlvbiB0aW1lLlxuICAgICAgaWYgKG5ld0V4cGlyYXRpb25UaW1lIDwgdXBkYXRlRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgbmV3RXhwaXJhdGlvblRpbWUgPSB1cGRhdGVFeHBpcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyB1cGRhdGUgZG9lcyBoYXZlIHN1ZmZpY2llbnQgcHJpb3JpdHkuIFByb2Nlc3MgaXQgYW5kIGNvbXB1dGVcbiAgICAgIC8vIGEgbmV3IHJlc3VsdC5cbiAgICAgIHJlc3VsdFN0YXRlID0gZ2V0U3RhdGVGcm9tVXBkYXRlKHdvcmtJblByb2dyZXNzLCBxdWV1ZSwgdXBkYXRlLCByZXN1bHRTdGF0ZSwgcHJvcHMsIGluc3RhbmNlKTtcbiAgICAgIHZhciBfY2FsbGJhY2sgPSB1cGRhdGUuY2FsbGJhY2s7XG4gICAgICBpZiAoX2NhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBDYWxsYmFjaztcbiAgICAgICAgLy8gU2V0IHRoaXMgdG8gbnVsbCwgaW4gY2FzZSBpdCB3YXMgbXV0YXRlZCBkdXJpbmcgYW4gYWJvcnRlZCByZW5kZXIuXG4gICAgICAgIHVwZGF0ZS5uZXh0RWZmZWN0ID0gbnVsbDtcbiAgICAgICAgaWYgKHF1ZXVlLmxhc3RFZmZlY3QgPT09IG51bGwpIHtcbiAgICAgICAgICBxdWV1ZS5maXJzdEVmZmVjdCA9IHF1ZXVlLmxhc3RFZmZlY3QgPSB1cGRhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcXVldWUubGFzdEVmZmVjdC5uZXh0RWZmZWN0ID0gdXBkYXRlO1xuICAgICAgICAgIHF1ZXVlLmxhc3RFZmZlY3QgPSB1cGRhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQ29udGludWUgdG8gdGhlIG5leHQgdXBkYXRlLlxuICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICB9XG5cbiAgLy8gU2VwYXJhdGVseSwgaXRlcmF0ZSB0aG91Z2ggdGhlIGxpc3Qgb2YgY2FwdHVyZWQgdXBkYXRlcy5cbiAgdmFyIG5ld0ZpcnN0Q2FwdHVyZWRVcGRhdGUgPSBudWxsO1xuICB1cGRhdGUgPSBxdWV1ZS5maXJzdENhcHR1cmVkVXBkYXRlO1xuICB3aGlsZSAodXBkYXRlICE9PSBudWxsKSB7XG4gICAgdmFyIF91cGRhdGVFeHBpcmF0aW9uVGltZSA9IHVwZGF0ZS5leHBpcmF0aW9uVGltZTtcbiAgICBpZiAoX3VwZGF0ZUV4cGlyYXRpb25UaW1lIDwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIC8vIFRoaXMgdXBkYXRlIGRvZXMgbm90IGhhdmUgc3VmZmljaWVudCBwcmlvcml0eS4gU2tpcCBpdC5cbiAgICAgIGlmIChuZXdGaXJzdENhcHR1cmVkVXBkYXRlID09PSBudWxsKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHNraXBwZWQgY2FwdHVyZWQgdXBkYXRlLiBJdCB3aWxsIGJlIHRoZSBmaXJzdFxuICAgICAgICAvLyB1cGRhdGUgaW4gdGhlIG5ldyBsaXN0LlxuICAgICAgICBuZXdGaXJzdENhcHR1cmVkVXBkYXRlID0gdXBkYXRlO1xuICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB1cGRhdGUgdGhhdCB3YXMgc2tpcHBlZCwgdGhlIGN1cnJlbnQgcmVzdWx0IGlzXG4gICAgICAgIC8vIHRoZSBuZXcgYmFzZSBzdGF0ZS5cbiAgICAgICAgaWYgKG5ld0ZpcnN0VXBkYXRlID09PSBudWxsKSB7XG4gICAgICAgICAgbmV3QmFzZVN0YXRlID0gcmVzdWx0U3RhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNpbmNlIHRoaXMgdXBkYXRlIHdpbGwgcmVtYWluIGluIHRoZSBsaXN0LCB1cGRhdGUgdGhlIHJlbWFpbmluZ1xuICAgICAgLy8gZXhwaXJhdGlvbiB0aW1lLlxuICAgICAgaWYgKG5ld0V4cGlyYXRpb25UaW1lIDwgX3VwZGF0ZUV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIG5ld0V4cGlyYXRpb25UaW1lID0gX3VwZGF0ZUV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIHVwZGF0ZSBkb2VzIGhhdmUgc3VmZmljaWVudCBwcmlvcml0eS4gUHJvY2VzcyBpdCBhbmQgY29tcHV0ZVxuICAgICAgLy8gYSBuZXcgcmVzdWx0LlxuICAgICAgcmVzdWx0U3RhdGUgPSBnZXRTdGF0ZUZyb21VcGRhdGUod29ya0luUHJvZ3Jlc3MsIHF1ZXVlLCB1cGRhdGUsIHJlc3VsdFN0YXRlLCBwcm9wcywgaW5zdGFuY2UpO1xuICAgICAgdmFyIF9jYWxsYmFjazIgPSB1cGRhdGUuY2FsbGJhY2s7XG4gICAgICBpZiAoX2NhbGxiYWNrMiAhPT0gbnVsbCkge1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gQ2FsbGJhY2s7XG4gICAgICAgIC8vIFNldCB0aGlzIHRvIG51bGwsIGluIGNhc2UgaXQgd2FzIG11dGF0ZWQgZHVyaW5nIGFuIGFib3J0ZWQgcmVuZGVyLlxuICAgICAgICB1cGRhdGUubmV4dEVmZmVjdCA9IG51bGw7XG4gICAgICAgIGlmIChxdWV1ZS5sYXN0Q2FwdHVyZWRFZmZlY3QgPT09IG51bGwpIHtcbiAgICAgICAgICBxdWV1ZS5maXJzdENhcHR1cmVkRWZmZWN0ID0gcXVldWUubGFzdENhcHR1cmVkRWZmZWN0ID0gdXBkYXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHF1ZXVlLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0ID0gdXBkYXRlO1xuICAgICAgICAgIHF1ZXVlLmxhc3RDYXB0dXJlZEVmZmVjdCA9IHVwZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUgPSB1cGRhdGUubmV4dDtcbiAgfVxuXG4gIGlmIChuZXdGaXJzdFVwZGF0ZSA9PT0gbnVsbCkge1xuICAgIHF1ZXVlLmxhc3RVcGRhdGUgPSBudWxsO1xuICB9XG4gIGlmIChuZXdGaXJzdENhcHR1cmVkVXBkYXRlID09PSBudWxsKSB7XG4gICAgcXVldWUubGFzdENhcHR1cmVkVXBkYXRlID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gQ2FsbGJhY2s7XG4gIH1cbiAgaWYgKG5ld0ZpcnN0VXBkYXRlID09PSBudWxsICYmIG5ld0ZpcnN0Q2FwdHVyZWRVcGRhdGUgPT09IG51bGwpIHtcbiAgICAvLyBXZSBwcm9jZXNzZWQgZXZlcnkgdXBkYXRlLCB3aXRob3V0IHNraXBwaW5nLiBUaGF0IG1lYW5zIHRoZSBuZXcgYmFzZVxuICAgIC8vIHN0YXRlIGlzIHRoZSBzYW1lIGFzIHRoZSByZXN1bHQgc3RhdGUuXG4gICAgbmV3QmFzZVN0YXRlID0gcmVzdWx0U3RhdGU7XG4gIH1cblxuICBxdWV1ZS5iYXNlU3RhdGUgPSBuZXdCYXNlU3RhdGU7XG4gIHF1ZXVlLmZpcnN0VXBkYXRlID0gbmV3Rmlyc3RVcGRhdGU7XG4gIHF1ZXVlLmZpcnN0Q2FwdHVyZWRVcGRhdGUgPSBuZXdGaXJzdENhcHR1cmVkVXBkYXRlO1xuXG4gIC8vIFNldCB0aGUgcmVtYWluaW5nIGV4cGlyYXRpb24gdGltZSB0byBiZSB3aGF0ZXZlciBpcyByZW1haW5pbmcgaW4gdGhlIHF1ZXVlLlxuICAvLyBUaGlzIHNob3VsZCBiZSBmaW5lIGJlY2F1c2UgdGhlIG9ubHkgdHdvIG90aGVyIHRoaW5ncyB0aGF0IGNvbnRyaWJ1dGUgdG9cbiAgLy8gZXhwaXJhdGlvbiB0aW1lIGFyZSBwcm9wcyBhbmQgY29udGV4dC4gV2UncmUgYWxyZWFkeSBpbiB0aGUgbWlkZGxlIG9mIHRoZVxuICAvLyBiZWdpbiBwaGFzZSBieSB0aGUgdGltZSB3ZSBzdGFydCBwcm9jZXNzaW5nIHRoZSBxdWV1ZSwgc28gd2UndmUgYWxyZWFkeVxuICAvLyBkZWFsdCB3aXRoIHRoZSBwcm9wcy4gQ29udGV4dCBpbiBjb21wb25lbnRzIHRoYXQgc3BlY2lmeVxuICAvLyBzaG91bGRDb21wb25lbnRVcGRhdGUgaXMgdHJpY2t5OyBidXQgd2UnbGwgaGF2ZSB0byBhY2NvdW50IGZvclxuICAvLyB0aGF0IHJlZ2FyZGxlc3MuXG4gIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gbmV3RXhwaXJhdGlvblRpbWU7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSByZXN1bHRTdGF0ZTtcblxuICB7XG4gICAgY3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsQ2FsbGJhY2soY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgISh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpID8gaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgYXMgY2FsbGJhY2suIEV4cGVjdGVkIGEgZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzJywgY2FsbGJhY2spIDogdm9pZCAwO1xuICBjYWxsYmFjay5jYWxsKGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiByZXNldEhhc0ZvcmNlVXBkYXRlQmVmb3JlUHJvY2Vzc2luZygpIHtcbiAgaGFzRm9yY2VVcGRhdGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY2hlY2tIYXNGb3JjZVVwZGF0ZUFmdGVyUHJvY2Vzc2luZygpIHtcbiAgcmV0dXJuIGhhc0ZvcmNlVXBkYXRlO1xufVxuXG5mdW5jdGlvbiBjb21taXRVcGRhdGVRdWV1ZShmaW5pc2hlZFdvcmssIGZpbmlzaGVkUXVldWUsIGluc3RhbmNlLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAvLyBJZiB0aGUgZmluaXNoZWQgcmVuZGVyIGluY2x1ZGVkIGNhcHR1cmVkIHVwZGF0ZXMsIGFuZCB0aGVyZSBhcmUgc3RpbGxcbiAgLy8gbG93ZXIgcHJpb3JpdHkgdXBkYXRlcyBsZWZ0IG92ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgY2FwdHVyZWQgdXBkYXRlc1xuICAvLyBpbiB0aGUgcXVldWUgc28gdGhhdCB0aGV5IGFyZSByZWJhc2VkIGFuZCBub3QgZHJvcHBlZCBvbmNlIHdlIHByb2Nlc3MgdGhlXG4gIC8vIHF1ZXVlIGFnYWluIGF0IHRoZSBsb3dlciBwcmlvcml0eS5cbiAgaWYgKGZpbmlzaGVkUXVldWUuZmlyc3RDYXB0dXJlZFVwZGF0ZSAhPT0gbnVsbCkge1xuICAgIC8vIEpvaW4gdGhlIGNhcHR1cmVkIHVwZGF0ZSBsaXN0IHRvIHRoZSBlbmQgb2YgdGhlIG5vcm1hbCBsaXN0LlxuICAgIGlmIChmaW5pc2hlZFF1ZXVlLmxhc3RVcGRhdGUgIT09IG51bGwpIHtcbiAgICAgIGZpbmlzaGVkUXVldWUubGFzdFVwZGF0ZS5uZXh0ID0gZmluaXNoZWRRdWV1ZS5maXJzdENhcHR1cmVkVXBkYXRlO1xuICAgICAgZmluaXNoZWRRdWV1ZS5sYXN0VXBkYXRlID0gZmluaXNoZWRRdWV1ZS5sYXN0Q2FwdHVyZWRVcGRhdGU7XG4gICAgfVxuICAgIC8vIENsZWFyIHRoZSBsaXN0IG9mIGNhcHR1cmVkIHVwZGF0ZXMuXG4gICAgZmluaXNoZWRRdWV1ZS5maXJzdENhcHR1cmVkVXBkYXRlID0gZmluaXNoZWRRdWV1ZS5sYXN0Q2FwdHVyZWRVcGRhdGUgPSBudWxsO1xuICB9XG5cbiAgLy8gQ29tbWl0IHRoZSBlZmZlY3RzXG4gIGNvbW1pdFVwZGF0ZUVmZmVjdHMoZmluaXNoZWRRdWV1ZS5maXJzdEVmZmVjdCwgaW5zdGFuY2UpO1xuICBmaW5pc2hlZFF1ZXVlLmZpcnN0RWZmZWN0ID0gZmluaXNoZWRRdWV1ZS5sYXN0RWZmZWN0ID0gbnVsbDtcblxuICBjb21taXRVcGRhdGVFZmZlY3RzKGZpbmlzaGVkUXVldWUuZmlyc3RDYXB0dXJlZEVmZmVjdCwgaW5zdGFuY2UpO1xuICBmaW5pc2hlZFF1ZXVlLmZpcnN0Q2FwdHVyZWRFZmZlY3QgPSBmaW5pc2hlZFF1ZXVlLmxhc3RDYXB0dXJlZEVmZmVjdCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFVwZGF0ZUVmZmVjdHMoZWZmZWN0LCBpbnN0YW5jZSkge1xuICB3aGlsZSAoZWZmZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyIF9jYWxsYmFjazMgPSBlZmZlY3QuY2FsbGJhY2s7XG4gICAgaWYgKF9jYWxsYmFjazMgIT09IG51bGwpIHtcbiAgICAgIGVmZmVjdC5jYWxsYmFjayA9IG51bGw7XG4gICAgICBjYWxsQ2FsbGJhY2soX2NhbGxiYWNrMywgaW5zdGFuY2UpO1xuICAgIH1cbiAgICBlZmZlY3QgPSBlZmZlY3QubmV4dEVmZmVjdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDYXB0dXJlZFZhbHVlKHZhbHVlLCBzb3VyY2UpIHtcbiAgLy8gSWYgdGhlIHZhbHVlIGlzIGFuIGVycm9yLCBjYWxsIHRoaXMgZnVuY3Rpb24gaW1tZWRpYXRlbHkgYWZ0ZXIgaXQgaXMgdGhyb3duXG4gIC8vIHNvIHRoZSBzdGFjayBpcyBhY2N1cmF0ZS5cbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgc291cmNlOiBzb3VyY2UsXG4gICAgc3RhY2s6IGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChzb3VyY2UpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpIHtcbiAgLy8gVGFnIHRoZSBmaWJlciB3aXRoIGFuIHVwZGF0ZSBlZmZlY3QuIFRoaXMgdHVybnMgYSBQbGFjZW1lbnQgaW50b1xuICAvLyBhIFBsYWNlbWVudEFuZFVwZGF0ZS5cbiAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbn1cblxuZnVuY3Rpb24gbWFya1JlZiQxKHdvcmtJblByb2dyZXNzKSB7XG4gIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBSZWY7XG59XG5cbnZhciBhcHBlbmRBbGxDaGlsZHJlbiA9IHZvaWQgMDtcbnZhciB1cGRhdGVIb3N0Q29udGFpbmVyID0gdm9pZCAwO1xudmFyIHVwZGF0ZUhvc3RDb21wb25lbnQkMSA9IHZvaWQgMDtcbnZhciB1cGRhdGVIb3N0VGV4dCQxID0gdm9pZCAwO1xuaWYgKHN1cHBvcnRzTXV0YXRpb24pIHtcbiAgLy8gTXV0YXRpb24gbW9kZVxuXG4gIGFwcGVuZEFsbENoaWxkcmVuID0gZnVuY3Rpb24gKHBhcmVudCwgd29ya0luUHJvZ3Jlc3MsIG5lZWRzVmlzaWJpbGl0eVRvZ2dsZSwgaXNIaWRkZW4pIHtcbiAgICAvLyBXZSBvbmx5IGhhdmUgdGhlIHRvcCBGaWJlciB0aGF0IHdhcyBjcmVhdGVkIGJ1dCB3ZSBuZWVkIHJlY3Vyc2UgZG93biBpdHNcbiAgICAvLyBjaGlsZHJlbiB0byBmaW5kIGFsbCB0aGUgdGVybWluYWwgbm9kZXMuXG4gICAgdmFyIG5vZGUgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IG5vZGUudGFnID09PSBIb3N0VGV4dCkge1xuICAgICAgICBhcHBlbmRJbml0aWFsQ2hpbGQocGFyZW50LCBub2RlLnN0YXRlTm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBIb3N0UG9ydGFsKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBwb3J0YWwgY2hpbGQsIHRoZW4gd2UgZG9uJ3Qgd2FudCB0byB0cmF2ZXJzZVxuICAgICAgICAvLyBkb3duIGl0cyBjaGlsZHJlbi4gSW5zdGVhZCwgd2UnbGwgZ2V0IGluc2VydGlvbnMgZnJvbSBlYWNoIGNoaWxkIGluXG4gICAgICAgIC8vIHRoZSBwb3J0YWwgZGlyZWN0bHkuXG4gICAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlO1xuICAgICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAobm9kZSA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAobm9kZS5yZXR1cm4gPT09IG51bGwgfHwgbm9kZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgfVxuICB9O1xuXG4gIHVwZGF0ZUhvc3RDb250YWluZXIgPSBmdW5jdGlvbiAod29ya0luUHJvZ3Jlc3MpIHtcbiAgICAvLyBOb29wXG4gIH07XG4gIHVwZGF0ZUhvc3RDb21wb25lbnQkMSA9IGZ1bmN0aW9uIChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgdHlwZSwgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSkge1xuICAgIC8vIElmIHdlIGhhdmUgYW4gYWx0ZXJuYXRlLCB0aGF0IG1lYW5zIHRoaXMgaXMgYW4gdXBkYXRlIGFuZCB3ZSBuZWVkIHRvXG4gICAgLy8gc2NoZWR1bGUgYSBzaWRlLWVmZmVjdCB0byBkbyB0aGUgdXBkYXRlcy5cbiAgICB2YXIgb2xkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gICAgaWYgKG9sZFByb3BzID09PSBuZXdQcm9wcykge1xuICAgICAgLy8gSW4gbXV0YXRpb24gbW9kZSwgdGhpcyBpcyBzdWZmaWNpZW50IGZvciBhIGJhaWxvdXQgYmVjYXVzZVxuICAgICAgLy8gd2Ugd29uJ3QgdG91Y2ggdGhpcyBub2RlIGV2ZW4gaWYgY2hpbGRyZW4gY2hhbmdlZC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBnZXQgdXBkYXRlZCBiZWNhdXNlIG9uZSBvZiBvdXIgY2hpbGRyZW4gdXBkYXRlZCwgd2UgZG9uJ3RcbiAgICAvLyBoYXZlIG5ld1Byb3BzIHNvIHdlJ2xsIGhhdmUgdG8gcmV1c2UgdGhlbS5cbiAgICAvLyBUT0RPOiBTcGxpdCB0aGUgdXBkYXRlIEFQSSBhcyBzZXBhcmF0ZSBmb3IgdGhlIHByb3BzIHZzLiBjaGlsZHJlbi5cbiAgICAvLyBFdmVuIGJldHRlciB3b3VsZCBiZSBpZiBjaGlsZHJlbiB3ZXJlbid0IHNwZWNpYWwgY2FzZWQgYXQgYWxsIHRoby5cbiAgICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgdmFyIGN1cnJlbnRIb3N0Q29udGV4dCA9IGdldEhvc3RDb250ZXh0KCk7XG4gICAgLy8gVE9ETzogRXhwZXJpZW5jaW5nIGFuIGVycm9yIHdoZXJlIG9sZFByb3BzIGlzIG51bGwuIFN1Z2dlc3RzIGEgaG9zdFxuICAgIC8vIGNvbXBvbmVudCBpcyBoaXR0aW5nIHRoZSByZXN1bWUgcGF0aC4gRmlndXJlIG91dCB3aHkuIFBvc3NpYmx5XG4gICAgLy8gcmVsYXRlZCB0byBgaGlkZGVuYC5cbiAgICB2YXIgdXBkYXRlUGF5bG9hZCA9IHByZXBhcmVVcGRhdGUoaW5zdGFuY2UsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBjdXJyZW50SG9zdENvbnRleHQpO1xuICAgIC8vIFRPRE86IFR5cGUgdGhpcyBzcGVjaWZpYyB0byB0aGlzIHR5cGUgb2YgY29tcG9uZW50LlxuICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gdXBkYXRlUGF5bG9hZDtcbiAgICAvLyBJZiB0aGUgdXBkYXRlIHBheWxvYWQgaW5kaWNhdGVzIHRoYXQgdGhlcmUgaXMgYSBjaGFuZ2Ugb3IgaWYgdGhlcmVcbiAgICAvLyBpcyBhIG5ldyByZWYgd2UgbWFyayB0aGlzIGFzIGFuIHVwZGF0ZS4gQWxsIHRoZSB3b3JrIGlzIGRvbmUgaW4gY29tbWl0V29yay5cbiAgICBpZiAodXBkYXRlUGF5bG9hZCkge1xuICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICB9O1xuICB1cGRhdGVIb3N0VGV4dCQxID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBvbGRUZXh0LCBuZXdUZXh0KSB7XG4gICAgLy8gSWYgdGhlIHRleHQgZGlmZmVycywgbWFyayBpdCBhcyBhbiB1cGRhdGUuIEFsbCB0aGUgd29yayBpbiBkb25lIGluIGNvbW1pdFdvcmsuXG4gICAgaWYgKG9sZFRleHQgIT09IG5ld1RleHQpIHtcbiAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cbiAgfTtcbn0gZWxzZSBpZiAoc3VwcG9ydHNQZXJzaXN0ZW5jZSkge1xuICAvLyBQZXJzaXN0ZW50IGhvc3QgdHJlZSBtb2RlXG5cbiAgYXBwZW5kQWxsQ2hpbGRyZW4gPSBmdW5jdGlvbiAocGFyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmVlZHNWaXNpYmlsaXR5VG9nZ2xlLCBpc0hpZGRlbikge1xuICAgIC8vIFdlIG9ubHkgaGF2ZSB0aGUgdG9wIEZpYmVyIHRoYXQgd2FzIGNyZWF0ZWQgYnV0IHdlIG5lZWQgcmVjdXJzZSBkb3duIGl0c1xuICAgIC8vIGNoaWxkcmVuIHRvIGZpbmQgYWxsIHRoZSB0ZXJtaW5hbCBub2Rlcy5cbiAgICB2YXIgbm9kZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbGFiZWxzXG4gICAgICBicmFuY2hlczogaWYgKG5vZGUudGFnID09PSBIb3N0Q29tcG9uZW50KSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5vZGUuc3RhdGVOb2RlO1xuICAgICAgICBpZiAobmVlZHNWaXNpYmlsaXR5VG9nZ2xlKSB7XG4gICAgICAgICAgdmFyIHByb3BzID0gbm9kZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgIHZhciB0eXBlID0gbm9kZS50eXBlO1xuICAgICAgICAgIGlmIChpc0hpZGRlbikge1xuICAgICAgICAgICAgLy8gVGhpcyBjaGlsZCBpcyBpbnNpZGUgYSB0aW1lZCBvdXQgdHJlZS4gSGlkZSBpdC5cbiAgICAgICAgICAgIGluc3RhbmNlID0gY2xvbmVIaWRkZW5JbnN0YW5jZShpbnN0YW5jZSwgdHlwZSwgcHJvcHMsIG5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNoaWxkIHdhcyBwcmV2aW91c2x5IGluc2lkZSBhIHRpbWVkIG91dCB0cmVlLiBJZiBpdCB3YXMgbm90XG4gICAgICAgICAgICAvLyB1cGRhdGVkIGR1cmluZyB0aGlzIHJlbmRlciwgaXQgbWF5IG5lZWQgdG8gYmUgdW5oaWRkZW4uIENsb25lXG4gICAgICAgICAgICAvLyBhZ2FpbiB0byBiZSBzdXJlLlxuICAgICAgICAgICAgaW5zdGFuY2UgPSBjbG9uZVVuaGlkZGVuSW5zdGFuY2UoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCBub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZS5zdGF0ZU5vZGUgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICBhcHBlbmRJbml0aWFsQ2hpbGQocGFyZW50LCBpbnN0YW5jZSk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBIb3N0VGV4dCkge1xuICAgICAgICB2YXIgX2luc3RhbmNlID0gbm9kZS5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChuZWVkc1Zpc2liaWxpdHlUb2dnbGUpIHtcbiAgICAgICAgICB2YXIgdGV4dCA9IG5vZGUubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICB2YXIgcm9vdENvbnRhaW5lckluc3RhbmNlID0gZ2V0Um9vdEhvc3RDb250YWluZXIoKTtcbiAgICAgICAgICB2YXIgY3VycmVudEhvc3RDb250ZXh0ID0gZ2V0SG9zdENvbnRleHQoKTtcbiAgICAgICAgICBpZiAoaXNIaWRkZW4pIHtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IGNyZWF0ZUhpZGRlblRleHRJbnN0YW5jZSh0ZXh0LCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfaW5zdGFuY2UgPSBjcmVhdGVUZXh0SW5zdGFuY2UodGV4dCwgcm9vdENvbnRhaW5lckluc3RhbmNlLCBjdXJyZW50SG9zdENvbnRleHQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZS5zdGF0ZU5vZGUgPSBfaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgYXBwZW5kSW5pdGlhbENoaWxkKHBhcmVudCwgX2luc3RhbmNlKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IEhvc3RQb3J0YWwpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBvcnRhbCBjaGlsZCwgdGhlbiB3ZSBkb24ndCB3YW50IHRvIHRyYXZlcnNlXG4gICAgICAgIC8vIGRvd24gaXRzIGNoaWxkcmVuLiBJbnN0ZWFkLCB3ZSdsbCBnZXQgaW5zZXJ0aW9ucyBmcm9tIGVhY2ggY2hpbGQgaW5cbiAgICAgICAgLy8gdGhlIHBvcnRhbCBkaXJlY3RseS5cbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IFN1c3BlbnNlQ29tcG9uZW50KSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbm9kZS5hbHRlcm5hdGU7XG4gICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIG9sZFN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgIHZhciBuZXdTdGF0ZSA9IG5vZGUubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICB2YXIgb2xkSXNIaWRkZW4gPSBvbGRTdGF0ZSAhPT0gbnVsbDtcbiAgICAgICAgICB2YXIgbmV3SXNIaWRkZW4gPSBuZXdTdGF0ZSAhPT0gbnVsbDtcbiAgICAgICAgICBpZiAob2xkSXNIaWRkZW4gIT09IG5ld0lzSGlkZGVuKSB7XG4gICAgICAgICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgZWl0aGVyIGp1c3QgdGltZWQgb3V0IG9yIHN3aXRjaGVkIGJhY2sgdG8gdGhlIG5vcm1hbFxuICAgICAgICAgICAgLy8gY2hpbGRyZW4gYWZ0ZXIgaGF2aW5nIHByZXZpb3VzbHkgdGltZWQgb3V0LiBUb2dnbGUgdGhlIHZpc2liaWxpdHkgb2ZcbiAgICAgICAgICAgIC8vIHRoZSBkaXJlY3QgaG9zdCBjaGlsZHJlbi5cbiAgICAgICAgICAgIHZhciBwcmltYXJ5Q2hpbGRQYXJlbnQgPSBuZXdJc0hpZGRlbiA/IG5vZGUuY2hpbGQgOiBub2RlO1xuICAgICAgICAgICAgaWYgKHByaW1hcnlDaGlsZFBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBhcHBlbmRBbGxDaGlsZHJlbihwYXJlbnQsIHByaW1hcnlDaGlsZFBhcmVudCwgdHJ1ZSwgbmV3SXNIaWRkZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgICAgYnJlYWsgYnJhbmNoZXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gQ29udGludWUgdHJhdmVyc2luZyBsaWtlIG5vcm1hbFxuICAgICAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gJEZsb3dGaXhNZSBUaGlzIGlzIGNvcnJlY3QgYnV0IEZsb3cgaXMgY29uZnVzZWQgYnkgdGhlIGxhYmVsZWQgYnJlYWsuXG4gICAgICBub2RlID0gbm9kZTtcbiAgICAgIGlmIChub2RlID09PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgIGlmIChub2RlLnJldHVybiA9PT0gbnVsbCB8fCBub2RlLnJldHVybiA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICB9XG4gIH07XG5cbiAgLy8gQW4gdW5mb3J0dW5hdGUgZm9yayBvZiBhcHBlbmRBbGxDaGlsZHJlbiBiZWNhdXNlIHdlIGhhdmUgdHdvIGRpZmZlcmVudCBwYXJlbnQgdHlwZXMuXG4gIHZhciBhcHBlbmRBbGxDaGlsZHJlblRvQ29udGFpbmVyID0gZnVuY3Rpb24gKGNvbnRhaW5lckNoaWxkU2V0LCB3b3JrSW5Qcm9ncmVzcywgbmVlZHNWaXNpYmlsaXR5VG9nZ2xlLCBpc0hpZGRlbikge1xuICAgIC8vIFdlIG9ubHkgaGF2ZSB0aGUgdG9wIEZpYmVyIHRoYXQgd2FzIGNyZWF0ZWQgYnV0IHdlIG5lZWQgcmVjdXJzZSBkb3duIGl0c1xuICAgIC8vIGNoaWxkcmVuIHRvIGZpbmQgYWxsIHRoZSB0ZXJtaW5hbCBub2Rlcy5cbiAgICB2YXIgbm9kZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbGFiZWxzXG4gICAgICBicmFuY2hlczogaWYgKG5vZGUudGFnID09PSBIb3N0Q29tcG9uZW50KSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5vZGUuc3RhdGVOb2RlO1xuICAgICAgICBpZiAobmVlZHNWaXNpYmlsaXR5VG9nZ2xlKSB7XG4gICAgICAgICAgdmFyIHByb3BzID0gbm9kZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgIHZhciB0eXBlID0gbm9kZS50eXBlO1xuICAgICAgICAgIGlmIChpc0hpZGRlbikge1xuICAgICAgICAgICAgLy8gVGhpcyBjaGlsZCBpcyBpbnNpZGUgYSB0aW1lZCBvdXQgdHJlZS4gSGlkZSBpdC5cbiAgICAgICAgICAgIGluc3RhbmNlID0gY2xvbmVIaWRkZW5JbnN0YW5jZShpbnN0YW5jZSwgdHlwZSwgcHJvcHMsIG5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNoaWxkIHdhcyBwcmV2aW91c2x5IGluc2lkZSBhIHRpbWVkIG91dCB0cmVlLiBJZiBpdCB3YXMgbm90XG4gICAgICAgICAgICAvLyB1cGRhdGVkIGR1cmluZyB0aGlzIHJlbmRlciwgaXQgbWF5IG5lZWQgdG8gYmUgdW5oaWRkZW4uIENsb25lXG4gICAgICAgICAgICAvLyBhZ2FpbiB0byBiZSBzdXJlLlxuICAgICAgICAgICAgaW5zdGFuY2UgPSBjbG9uZVVuaGlkZGVuSW5zdGFuY2UoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCBub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZS5zdGF0ZU5vZGUgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICBhcHBlbmRDaGlsZFRvQ29udGFpbmVyQ2hpbGRTZXQoY29udGFpbmVyQ2hpbGRTZXQsIGluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICAgIHZhciBfaW5zdGFuY2UyID0gbm9kZS5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChuZWVkc1Zpc2liaWxpdHlUb2dnbGUpIHtcbiAgICAgICAgICB2YXIgdGV4dCA9IG5vZGUubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICB2YXIgcm9vdENvbnRhaW5lckluc3RhbmNlID0gZ2V0Um9vdEhvc3RDb250YWluZXIoKTtcbiAgICAgICAgICB2YXIgY3VycmVudEhvc3RDb250ZXh0ID0gZ2V0SG9zdENvbnRleHQoKTtcbiAgICAgICAgICBpZiAoaXNIaWRkZW4pIHtcbiAgICAgICAgICAgIF9pbnN0YW5jZTIgPSBjcmVhdGVIaWRkZW5UZXh0SW5zdGFuY2UodGV4dCwgcm9vdENvbnRhaW5lckluc3RhbmNlLCBjdXJyZW50SG9zdENvbnRleHQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2luc3RhbmNlMiA9IGNyZWF0ZVRleHRJbnN0YW5jZSh0ZXh0LCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlLnN0YXRlTm9kZSA9IF9pbnN0YW5jZTI7XG4gICAgICAgIH1cbiAgICAgICAgYXBwZW5kQ2hpbGRUb0NvbnRhaW5lckNoaWxkU2V0KGNvbnRhaW5lckNoaWxkU2V0LCBfaW5zdGFuY2UyKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IEhvc3RQb3J0YWwpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBvcnRhbCBjaGlsZCwgdGhlbiB3ZSBkb24ndCB3YW50IHRvIHRyYXZlcnNlXG4gICAgICAgIC8vIGRvd24gaXRzIGNoaWxkcmVuLiBJbnN0ZWFkLCB3ZSdsbCBnZXQgaW5zZXJ0aW9ucyBmcm9tIGVhY2ggY2hpbGQgaW5cbiAgICAgICAgLy8gdGhlIHBvcnRhbCBkaXJlY3RseS5cbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IFN1c3BlbnNlQ29tcG9uZW50KSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbm9kZS5hbHRlcm5hdGU7XG4gICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIG9sZFN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgIHZhciBuZXdTdGF0ZSA9IG5vZGUubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICB2YXIgb2xkSXNIaWRkZW4gPSBvbGRTdGF0ZSAhPT0gbnVsbDtcbiAgICAgICAgICB2YXIgbmV3SXNIaWRkZW4gPSBuZXdTdGF0ZSAhPT0gbnVsbDtcbiAgICAgICAgICBpZiAob2xkSXNIaWRkZW4gIT09IG5ld0lzSGlkZGVuKSB7XG4gICAgICAgICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgZWl0aGVyIGp1c3QgdGltZWQgb3V0IG9yIHN3aXRjaGVkIGJhY2sgdG8gdGhlIG5vcm1hbFxuICAgICAgICAgICAgLy8gY2hpbGRyZW4gYWZ0ZXIgaGF2aW5nIHByZXZpb3VzbHkgdGltZWQgb3V0LiBUb2dnbGUgdGhlIHZpc2liaWxpdHkgb2ZcbiAgICAgICAgICAgIC8vIHRoZSBkaXJlY3QgaG9zdCBjaGlsZHJlbi5cbiAgICAgICAgICAgIHZhciBwcmltYXJ5Q2hpbGRQYXJlbnQgPSBuZXdJc0hpZGRlbiA/IG5vZGUuY2hpbGQgOiBub2RlO1xuICAgICAgICAgICAgaWYgKHByaW1hcnlDaGlsZFBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBhcHBlbmRBbGxDaGlsZHJlblRvQ29udGFpbmVyKGNvbnRhaW5lckNoaWxkU2V0LCBwcmltYXJ5Q2hpbGRQYXJlbnQsIHRydWUsIG5ld0lzSGlkZGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHNcbiAgICAgICAgICAgIGJyZWFrIGJyYW5jaGVzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIENvbnRpbnVlIHRyYXZlcnNpbmcgbGlrZSBub3JtYWxcbiAgICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vICRGbG93Rml4TWUgVGhpcyBpcyBjb3JyZWN0IGJ1dCBGbG93IGlzIGNvbmZ1c2VkIGJ5IHRoZSBsYWJlbGVkIGJyZWFrLlxuICAgICAgbm9kZSA9IG5vZGU7XG4gICAgICBpZiAobm9kZSA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAobm9kZS5yZXR1cm4gPT09IG51bGwgfHwgbm9kZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgfVxuICB9O1xuICB1cGRhdGVIb3N0Q29udGFpbmVyID0gZnVuY3Rpb24gKHdvcmtJblByb2dyZXNzKSB7XG4gICAgdmFyIHBvcnRhbE9yUm9vdCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICB2YXIgY2hpbGRyZW5VbmNoYW5nZWQgPSB3b3JrSW5Qcm9ncmVzcy5maXJzdEVmZmVjdCA9PT0gbnVsbDtcbiAgICBpZiAoY2hpbGRyZW5VbmNoYW5nZWQpIHtcbiAgICAgIC8vIE5vIGNoYW5nZXMsIGp1c3QgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlLlxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gcG9ydGFsT3JSb290LmNvbnRhaW5lckluZm87XG4gICAgICB2YXIgbmV3Q2hpbGRTZXQgPSBjcmVhdGVDb250YWluZXJDaGlsZFNldChjb250YWluZXIpO1xuICAgICAgLy8gSWYgY2hpbGRyZW4gbWlnaHQgaGF2ZSBjaGFuZ2VkLCB3ZSBoYXZlIHRvIGFkZCB0aGVtIGFsbCB0byB0aGUgc2V0LlxuICAgICAgYXBwZW5kQWxsQ2hpbGRyZW5Ub0NvbnRhaW5lcihuZXdDaGlsZFNldCwgd29ya0luUHJvZ3Jlc3MsIGZhbHNlLCBmYWxzZSk7XG4gICAgICBwb3J0YWxPclJvb3QucGVuZGluZ0NoaWxkcmVuID0gbmV3Q2hpbGRTZXQ7XG4gICAgICAvLyBTY2hlZHVsZSBhbiB1cGRhdGUgb24gdGhlIGNvbnRhaW5lciB0byBzd2FwIG91dCB0aGUgY29udGFpbmVyLlxuICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBmaW5hbGl6ZUNvbnRhaW5lckNoaWxkcmVuKGNvbnRhaW5lciwgbmV3Q2hpbGRTZXQpO1xuICAgIH1cbiAgfTtcbiAgdXBkYXRlSG9zdENvbXBvbmVudCQxID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB0eXBlLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gICAgdmFyIGN1cnJlbnRJbnN0YW5jZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgIHZhciBvbGRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gZWZmZWN0cyBhc3NvY2lhdGVkIHdpdGggdGhpcyBub2RlLCB0aGVuIG5vbmUgb2Ygb3VyIGNoaWxkcmVuIGhhZCBhbnkgdXBkYXRlcy5cbiAgICAvLyBUaGlzIGd1YXJhbnRlZXMgdGhhdCB3ZSBjYW4gcmV1c2UgYWxsIG9mIHRoZW0uXG4gICAgdmFyIGNoaWxkcmVuVW5jaGFuZ2VkID0gd29ya0luUHJvZ3Jlc3MuZmlyc3RFZmZlY3QgPT09IG51bGw7XG4gICAgaWYgKGNoaWxkcmVuVW5jaGFuZ2VkICYmIG9sZFByb3BzID09PSBuZXdQcm9wcykge1xuICAgICAgLy8gTm8gY2hhbmdlcywganVzdCByZXVzZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UuXG4gICAgICAvLyBOb3RlIHRoYXQgdGhpcyBtaWdodCByZWxlYXNlIGEgcHJldmlvdXMgY2xvbmUuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZWN5Y2xhYmxlSW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgdmFyIGN1cnJlbnRIb3N0Q29udGV4dCA9IGdldEhvc3RDb250ZXh0KCk7XG4gICAgdmFyIHVwZGF0ZVBheWxvYWQgPSBudWxsO1xuICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMpIHtcbiAgICAgIHVwZGF0ZVBheWxvYWQgPSBwcmVwYXJlVXBkYXRlKHJlY3ljbGFibGVJbnN0YW5jZSwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCk7XG4gICAgfVxuICAgIGlmIChjaGlsZHJlblVuY2hhbmdlZCAmJiB1cGRhdGVQYXlsb2FkID09PSBudWxsKSB7XG4gICAgICAvLyBObyBjaGFuZ2VzLCBqdXN0IHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZS5cbiAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIG1pZ2h0IHJlbGVhc2UgYSBwcmV2aW91cyBjbG9uZS5cbiAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5ld0luc3RhbmNlID0gY2xvbmVJbnN0YW5jZShjdXJyZW50SW5zdGFuY2UsIHVwZGF0ZVBheWxvYWQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgd29ya0luUHJvZ3Jlc3MsIGNoaWxkcmVuVW5jaGFuZ2VkLCByZWN5Y2xhYmxlSW5zdGFuY2UpO1xuICAgIGlmIChmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbihuZXdJbnN0YW5jZSwgdHlwZSwgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0KSkge1xuICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IG5ld0luc3RhbmNlO1xuICAgIGlmIChjaGlsZHJlblVuY2hhbmdlZCkge1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIG90aGVyIGVmZmVjdHMgaW4gdGhpcyB0cmVlLCB3ZSBuZWVkIHRvIGZsYWcgdGhpcyBub2RlIGFzIGhhdmluZyBvbmUuXG4gICAgICAvLyBFdmVuIHRob3VnaCB3ZSdyZSBub3QgZ29pbmcgdG8gdXNlIGl0IGZvciBhbnl0aGluZy5cbiAgICAgIC8vIE90aGVyd2lzZSBwYXJlbnRzIHdvbid0IGtub3cgdGhhdCB0aGVyZSBhcmUgbmV3IGNoaWxkcmVuIHRvIHByb3BhZ2F0ZSB1cHdhcmRzLlxuICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIGNoaWxkcmVuIG1pZ2h0IGhhdmUgY2hhbmdlZCwgd2UgaGF2ZSB0byBhZGQgdGhlbSBhbGwgdG8gdGhlIHNldC5cbiAgICAgIGFwcGVuZEFsbENoaWxkcmVuKG5ld0luc3RhbmNlLCB3b3JrSW5Qcm9ncmVzcywgZmFsc2UsIGZhbHNlKTtcbiAgICB9XG4gIH07XG4gIHVwZGF0ZUhvc3RUZXh0JDEgPSBmdW5jdGlvbiAoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG9sZFRleHQsIG5ld1RleHQpIHtcbiAgICBpZiAob2xkVGV4dCAhPT0gbmV3VGV4dCkge1xuICAgICAgLy8gSWYgdGhlIHRleHQgY29udGVudCBkaWZmZXJzLCB3ZSdsbCBjcmVhdGUgYSBuZXcgdGV4dCBpbnN0YW5jZSBmb3IgaXQuXG4gICAgICB2YXIgcm9vdENvbnRhaW5lckluc3RhbmNlID0gZ2V0Um9vdEhvc3RDb250YWluZXIoKTtcbiAgICAgIHZhciBjdXJyZW50SG9zdENvbnRleHQgPSBnZXRIb3N0Q29udGV4dCgpO1xuICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3JlYXRlVGV4dEluc3RhbmNlKG5ld1RleHQsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAvLyBXZSdsbCBoYXZlIHRvIG1hcmsgaXQgYXMgaGF2aW5nIGFuIGVmZmVjdCwgZXZlbiB0aG91Z2ggd2Ugd29uJ3QgdXNlIHRoZSBlZmZlY3QgZm9yIGFueXRoaW5nLlxuICAgICAgLy8gVGhpcyBsZXRzIHRoZSBwYXJlbnRzIGtub3cgdGhhdCBhdCBsZWFzdCBvbmUgb2YgdGhlaXIgY2hpbGRyZW4gaGFzIGNoYW5nZWQuXG4gICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBObyBob3N0IG9wZXJhdGlvbnNcbiAgdXBkYXRlSG9zdENvbnRhaW5lciA9IGZ1bmN0aW9uICh3b3JrSW5Qcm9ncmVzcykge1xuICAgIC8vIE5vb3BcbiAgfTtcbiAgdXBkYXRlSG9zdENvbXBvbmVudCQxID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB0eXBlLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gICAgLy8gTm9vcFxuICB9O1xuICB1cGRhdGVIb3N0VGV4dCQxID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBvbGRUZXh0LCBuZXdUZXh0KSB7XG4gICAgLy8gTm9vcFxuICB9O1xufVxuXG5mdW5jdGlvbiBjb21wbGV0ZVdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcblxuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTGF6eUNvbXBvbmVudDpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIENvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICAgICAgcG9wQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgIHtcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHBvcFRvcExldmVsQ29udGV4dE9iamVjdCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHZhciBmaWJlclJvb3QgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChmaWJlclJvb3QucGVuZGluZ0NvbnRleHQpIHtcbiAgICAgICAgICBmaWJlclJvb3QuY29udGV4dCA9IGZpYmVyUm9vdC5wZW5kaW5nQ29udGV4dDtcbiAgICAgICAgICBmaWJlclJvb3QucGVuZGluZ0NvbnRleHQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSBudWxsIHx8IGN1cnJlbnQuY2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBJZiB3ZSBoeWRyYXRlZCwgcG9wIHNvIHRoYXQgd2UgY2FuIGRlbGV0ZSBhbnkgcmVtYWluaW5nIGNoaWxkcmVuXG4gICAgICAgICAgLy8gdGhhdCB3ZXJlbid0IGh5ZHJhdGVkLlxuICAgICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAvLyBUaGlzIHJlc2V0cyB0aGUgaGFja3kgc3RhdGUgdG8gZml4IGlzTW91bnRlZCBiZWZvcmUgY29tbWl0dGluZy5cbiAgICAgICAgICAvLyBUT0RPOiBEZWxldGUgdGhpcyB3aGVuIHdlIGRlbGV0ZSBpc01vdW50ZWQgYW5kIGZpbmRET01Ob2RlLlxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyAmPSB+UGxhY2VtZW50O1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgdmFyIHJvb3RDb250YWluZXJJbnN0YW5jZSA9IGdldFJvb3RIb3N0Q29udGFpbmVyKCk7XG4gICAgICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwgJiYgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICB1cGRhdGVIb3N0Q29tcG9uZW50JDEoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHR5cGUsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpO1xuXG4gICAgICAgICAgaWYgKGN1cnJlbnQucmVmICE9PSB3b3JrSW5Qcm9ncmVzcy5yZWYpIHtcbiAgICAgICAgICAgIG1hcmtSZWYkMSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICAgICEod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ1dlIG11c3QgaGF2ZSBuZXcgcHJvcHMgZm9yIG5ldyBtb3VudHMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gd2hlbiB3ZSBhYm9ydCB3b3JrLlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGN1cnJlbnRIb3N0Q29udGV4dCA9IGdldEhvc3RDb250ZXh0KCk7XG4gICAgICAgICAgLy8gVE9ETzogTW92ZSBjcmVhdGVJbnN0YW5jZSB0byBiZWdpbldvcmsgYW5kIGtlZXAgaXQgb24gYSBjb250ZXh0XG4gICAgICAgICAgLy8gXCJzdGFja1wiIGFzIHRoZSBwYXJlbnQuIFRoZW4gYXBwZW5kIGNoaWxkcmVuIGFzIHdlIGdvIGluIGJlZ2luV29ya1xuICAgICAgICAgIC8vIG9yIGNvbXBsZXRlV29yayBkZXBlbmRpbmcgb24gd2Ugd2FudCB0byBhZGQgdGhlbiB0b3AtPmRvd24gb3JcbiAgICAgICAgICAvLyBib3R0b20tPnVwLiBUb3AtPmRvd24gaXMgZmFzdGVyIGluIElFMTEuXG4gICAgICAgICAgdmFyIHdhc0h5ZHJhdGVkID0gcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIGlmICh3YXNIeWRyYXRlZCkge1xuICAgICAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIGFuZCBjcmVhdGVJbnN0YW5jZSBzdGVwIGludG8gdGhlIGJlZ2luUGhhc2VcbiAgICAgICAgICAgIC8vIHRvIGNvbnNvbGlkYXRlLlxuICAgICAgICAgICAgaWYgKHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0KSkge1xuICAgICAgICAgICAgICAvLyBJZiBjaGFuZ2VzIHRvIHRoZSBoeWRyYXRlZCBub2RlIG5lZWRzIHRvIGJlIGFwcGxpZWQgYXQgdGhlXG4gICAgICAgICAgICAgIC8vIGNvbW1pdC1waGFzZSB3ZSBtYXJrIHRoaXMgYXMgc3VjaC5cbiAgICAgICAgICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZUluc3RhbmNlKHR5cGUsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgICAgICBhcHBlbmRBbGxDaGlsZHJlbihpbnN0YW5jZSwgd29ya0luUHJvZ3Jlc3MsIGZhbHNlLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIENlcnRhaW4gcmVuZGVyZXJzIHJlcXVpcmUgY29tbWl0LXRpbWUgZWZmZWN0cyBmb3IgaW5pdGlhbCBtb3VudC5cbiAgICAgICAgICAgIC8vIChlZyBET00gcmVuZGVyZXIgc3VwcG9ydHMgYXV0by1mb2N1cyBmb3IgY2VydGFpbiBlbGVtZW50cykuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgc3VjaCByZW5kZXJlcnMgZ2V0IHNjaGVkdWxlZCBmb3IgbGF0ZXIgd29yay5cbiAgICAgICAgICAgIGlmIChmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbihpbnN0YW5jZSwgdHlwZSwgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0KSkge1xuICAgICAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGluc3RhbmNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5yZWYgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGEgcmVmIG9uIGEgaG9zdCBub2RlIHdlIG5lZWQgdG8gc2NoZWR1bGUgYSBjYWxsYmFja1xuICAgICAgICAgICAgbWFya1JlZiQxKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgIHtcbiAgICAgICAgdmFyIG5ld1RleHQgPSBuZXdQcm9wcztcbiAgICAgICAgaWYgKGN1cnJlbnQgJiYgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgb2xkVGV4dCA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGFuIGFsdGVybmF0ZSwgdGhhdCBtZWFucyB0aGlzIGlzIGFuIHVwZGF0ZSBhbmQgd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHNjaGVkdWxlIGEgc2lkZS1lZmZlY3QgdG8gZG8gdGhlIHVwZGF0ZXMuXG4gICAgICAgICAgdXBkYXRlSG9zdFRleHQkMShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgb2xkVGV4dCwgbmV3VGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuZXdUZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgISh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnV2UgbXVzdCBoYXZlIG5ldyBwcm9wcyBmb3IgbmV3IG1vdW50cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiB3aGVuIHdlIGFib3J0IHdvcmsuXG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBfcm9vdENvbnRhaW5lckluc3RhbmNlID0gZ2V0Um9vdEhvc3RDb250YWluZXIoKTtcbiAgICAgICAgICB2YXIgX2N1cnJlbnRIb3N0Q29udGV4dCA9IGdldEhvc3RDb250ZXh0KCk7XG4gICAgICAgICAgdmFyIF93YXNIeWRyYXRlZCA9IHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICBpZiAoX3dhc0h5ZHJhdGVkKSB7XG4gICAgICAgICAgICBpZiAocHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjcmVhdGVUZXh0SW5zdGFuY2UobmV3VGV4dCwgX3Jvb3RDb250YWluZXJJbnN0YW5jZSwgX2N1cnJlbnRIb3N0Q29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgbmV4dFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgJiBEaWRDYXB0dXJlKSAhPT0gTm9FZmZlY3QpIHtcbiAgICAgICAgICAvLyBTb21ldGhpbmcgc3VzcGVuZGVkLiBSZS1yZW5kZXIgd2l0aCB0aGUgZmFsbGJhY2sgY2hpbGRyZW4uXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgICAvLyBEbyBub3QgcmVzZXQgdGhlIGVmZmVjdCBsaXN0LlxuICAgICAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXh0RGlkVGltZW91dCA9IG5leHRTdGF0ZSAhPT0gbnVsbDtcbiAgICAgICAgdmFyIHByZXZEaWRUaW1lb3V0ID0gY3VycmVudCAhPT0gbnVsbCAmJiBjdXJyZW50Lm1lbW9pemVkU3RhdGUgIT09IG51bGw7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwgJiYgIW5leHREaWRUaW1lb3V0ICYmIHByZXZEaWRUaW1lb3V0KSB7XG4gICAgICAgICAgLy8gV2UganVzdCBzd2l0Y2hlZCBmcm9tIHRoZSBmYWxsYmFjayB0byB0aGUgbm9ybWFsIGNoaWxkcmVuLiBEZWxldGVcbiAgICAgICAgICAvLyB0aGUgZmFsbGJhY2suXG4gICAgICAgICAgLy8gVE9ETzogV291bGQgaXQgYmUgYmV0dGVyIHRvIHN0b3JlIHRoZSBmYWxsYmFjayBmcmFnbWVudCBvblxuICAgICAgICAgIHZhciBjdXJyZW50RmFsbGJhY2tDaGlsZCA9IGN1cnJlbnQuY2hpbGQuc2libGluZztcbiAgICAgICAgICBpZiAoY3VycmVudEZhbGxiYWNrQ2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIERlbGV0aW9ucyBnbyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSByZXR1cm4gZmliZXIncyBlZmZlY3QgbGlzdFxuICAgICAgICAgICAgdmFyIGZpcnN0ID0gd29ya0luUHJvZ3Jlc3MuZmlyc3RFZmZlY3Q7XG4gICAgICAgICAgICBpZiAoZmlyc3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmlyc3RFZmZlY3QgPSBjdXJyZW50RmFsbGJhY2tDaGlsZDtcbiAgICAgICAgICAgICAgY3VycmVudEZhbGxiYWNrQ2hpbGQubmV4dEVmZmVjdCA9IGZpcnN0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmlyc3RFZmZlY3QgPSB3b3JrSW5Qcm9ncmVzcy5sYXN0RWZmZWN0ID0gY3VycmVudEZhbGxiYWNrQ2hpbGQ7XG4gICAgICAgICAgICAgIGN1cnJlbnRGYWxsYmFja0NoaWxkLm5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudEZhbGxiYWNrQ2hpbGQuZWZmZWN0VGFnID0gRGVsZXRpb247XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHREaWRUaW1lb3V0IHx8IHByZXZEaWRUaW1lb3V0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGNoaWxkcmVuIGFyZSBoaWRkZW4sIG9yIGlmIHRoZXkgd2VyZSBwcmV2aW91cyBoaWRkZW4sIHNjaGVkdWxlXG4gICAgICAgICAgLy8gYW4gZWZmZWN0IHRvIHRvZ2dsZSB0aGVpciB2aXNpYmlsaXR5LiBUaGlzIGlzIGFsc28gdXNlZCB0byBhdHRhY2ggYVxuICAgICAgICAgIC8vIHJldHJ5IGxpc3RlbmVyIHRvIHRoZSBwcm9taXNlLlxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBGcmFnbWVudDpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTW9kZTpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHVwZGF0ZUhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICAvLyBQb3AgcHJvdmlkZXIgZmliZXJcbiAgICAgIHBvcFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQ29udGV4dENvbnN1bWVyOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBNZW1vQ29tcG9uZW50OlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIC8vIFNhbWUgYXMgY2xhc3MgY29tcG9uZW50IGNhc2UuIEkgcHV0IGl0IGRvd24gaGVyZSBzbyB0aGF0IHRoZSB0YWdzIGFyZVxuICAgICAgICAvLyBzZXF1ZW50aWFsIHRvIGVuc3VyZSB0aGlzIHN3aXRjaCBpcyBjb21waWxlZCB0byBhIGp1bXAgdGFibGUuXG4gICAgICAgIHZhciBfQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgaWYgKGlzQ29udGV4dFByb3ZpZGVyKF9Db21wb25lbnQpKSB7XG4gICAgICAgICAgcG9wQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIGlmIChlbmFibGVTdXNwZW5zZVNlcnZlclJlbmRlcmVyKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBfd2FzSHlkcmF0ZWQyID0gcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgIV93YXNIeWRyYXRlZDIgPyBpbnZhcmlhbnQoZmFsc2UsICdBIGRlaHlkcmF0ZWQgc3VzcGVuc2UgY29tcG9uZW50IHdhcyBjb21wbGV0ZWQgd2l0aG91dCBhIGh5ZHJhdGVkIG5vZGUuIFRoaXMgaXMgcHJvYmFibHkgYSBidWcgaW4gUmVhY3QuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICBza2lwUGFzdERlaHlkcmF0ZWRTdXNwZW5zZUluc3RhbmNlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCh3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgJiBEaWRDYXB0dXJlKSA9PT0gTm9FZmZlY3QpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgYm91bmRhcnkgZGlkIG5vdCBzdXNwZW5kIHNvIGl0J3Mgbm93IGh5ZHJhdGVkLlxuICAgICAgICAgICAgLy8gVG8gaGFuZGxlIGFueSBmdXR1cmUgc3VzcGVuc2UgY2FzZXMsIHdlJ3JlIGdvaW5nIHRvIG5vdyB1cGdyYWRlIGl0XG4gICAgICAgICAgICAvLyB0byBhIFN1c3BlbnNlIGNvbXBvbmVudC4gV2UgZGV0YWNoIGl0IGZyb20gdGhlIGV4aXN0aW5nIGN1cnJlbnQgZmliZXIuXG4gICAgICAgICAgICBjdXJyZW50LmFsdGVybmF0ZSA9IG51bGw7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGUgPSBudWxsO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudGFnID0gU3VzcGVuc2VDb21wb25lbnQ7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsICdVbmtub3duIHVuaXQgb2Ygd29yayB0YWcuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2hvdWxkQ2FwdHVyZVN1c3BlbnNlKHdvcmtJblByb2dyZXNzKSB7XG4gIC8vIEluIG9yZGVyIHRvIGNhcHR1cmUsIHRoZSBTdXNwZW5zZSBjb21wb25lbnQgbXVzdCBoYXZlIGEgZmFsbGJhY2sgcHJvcC5cbiAgaWYgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMuZmFsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBJZiBpdCB3YXMgdGhlIHByaW1hcnkgY2hpbGRyZW4gdGhhdCBqdXN0IHN1c3BlbmRlZCwgY2FwdHVyZSBhbmQgcmVuZGVyIHRoZVxuICAvLyBmYWxsYmFjay4gT3RoZXJ3aXNlLCBkb24ndCBjYXB0dXJlIGFuZCBidWJibGUgdG8gdGhlIG5leHQgYm91bmRhcnkuXG4gIHZhciBuZXh0U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICByZXR1cm4gbmV4dFN0YXRlID09PSBudWxsO1xufVxuXG4vLyBUaGlzIG1vZHVsZSBpcyBmb3JrZWQgaW4gZGlmZmVyZW50IGVudmlyb25tZW50cy5cbi8vIEJ5IGRlZmF1bHQsIHJldHVybiBgdHJ1ZWAgdG8gbG9nIGVycm9ycyB0byB0aGUgY29uc29sZS5cbi8vIEZvcmtzIGNhbiByZXR1cm4gYGZhbHNlYCBpZiB0aGlzIGlzbid0IGRlc2lyYWJsZS5cbmZ1bmN0aW9uIHNob3dFcnJvckRpYWxvZyhjYXB0dXJlZEVycm9yKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBsb2dDYXB0dXJlZEVycm9yKGNhcHR1cmVkRXJyb3IpIHtcbiAgdmFyIGxvZ0Vycm9yID0gc2hvd0Vycm9yRGlhbG9nKGNhcHR1cmVkRXJyb3IpO1xuXG4gIC8vIEFsbG93IGluamVjdGVkIHNob3dFcnJvckRpYWxvZygpIHRvIHByZXZlbnQgZGVmYXVsdCBjb25zb2xlLmVycm9yIGxvZ2dpbmcuXG4gIC8vIFRoaXMgZW5hYmxlcyByZW5kZXJlcnMgbGlrZSBSZWFjdE5hdGl2ZSB0byBiZXR0ZXIgbWFuYWdlIHJlZGJveCBiZWhhdmlvci5cbiAgaWYgKGxvZ0Vycm9yID09PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlcnJvciA9IGNhcHR1cmVkRXJyb3IuZXJyb3I7XG4gIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IGNhcHR1cmVkRXJyb3IuY29tcG9uZW50TmFtZSxcbiAgICAgICAgY29tcG9uZW50U3RhY2sgPSBjYXB0dXJlZEVycm9yLmNvbXBvbmVudFN0YWNrLFxuICAgICAgICBlcnJvckJvdW5kYXJ5TmFtZSA9IGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeU5hbWUsXG4gICAgICAgIGVycm9yQm91bmRhcnlGb3VuZCA9IGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeUZvdW5kLFxuICAgICAgICB3aWxsUmV0cnkgPSBjYXB0dXJlZEVycm9yLndpbGxSZXRyeTtcblxuICAgIC8vIEJyb3dzZXJzIHN1cHBvcnQgc2lsZW5jaW5nIHVuY2F1Z2h0IGVycm9ycyBieSBjYWxsaW5nXG4gICAgLy8gYHByZXZlbnREZWZhdWx0KClgIGluIHdpbmRvdyBgZXJyb3JgIGhhbmRsZXIuXG4gICAgLy8gV2UgcmVjb3JkIHRoaXMgaW5mb3JtYXRpb24gYXMgYW4gZXhwYW5kbyBvbiB0aGUgZXJyb3IuXG5cbiAgICBpZiAoZXJyb3IgIT0gbnVsbCAmJiBlcnJvci5fc3VwcHJlc3NMb2dnaW5nKSB7XG4gICAgICBpZiAoZXJyb3JCb3VuZGFyeUZvdW5kICYmIHdpbGxSZXRyeSkge1xuICAgICAgICAvLyBUaGUgZXJyb3IgaXMgcmVjb3ZlcmFibGUgYW5kIHdhcyBzaWxlbmNlZC5cbiAgICAgICAgLy8gSWdub3JlIGl0IGFuZCBkb24ndCBwcmludCB0aGUgc3RhY2sgYWRkZW5kdW0uXG4gICAgICAgIC8vIFRoaXMgaXMgaGFuZHkgZm9yIHRlc3RpbmcgZXJyb3IgYm91bmRhcmllcyB3aXRob3V0IG5vaXNlLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBUaGUgZXJyb3IgaXMgZmF0YWwuIFNpbmNlIHRoZSBzaWxlbmNpbmcgbWlnaHQgaGF2ZVxuICAgICAgLy8gYmVlbiBhY2NpZGVudGFsLCB3ZSdsbCBzdXJmYWNlIGl0IGFueXdheS5cbiAgICAgIC8vIEhvd2V2ZXIsIHRoZSBicm93c2VyIHdvdWxkIGhhdmUgc2lsZW5jZWQgdGhlIG9yaWdpbmFsIGVycm9yXG4gICAgICAvLyBzbyB3ZSdsbCBwcmludCBpdCBmaXJzdCwgYW5kIHRoZW4gcHJpbnQgdGhlIHN0YWNrIGFkZGVuZHVtLlxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAvLyBGb3IgYSBtb3JlIGRldGFpbGVkIGRlc2NyaXB0aW9uIG9mIHRoaXMgYmxvY2ssIHNlZTpcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzEzMzg0XG4gICAgfVxuXG4gICAgdmFyIGNvbXBvbmVudE5hbWVNZXNzYWdlID0gY29tcG9uZW50TmFtZSA/ICdUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gdGhlIDwnICsgY29tcG9uZW50TmFtZSArICc+IGNvbXBvbmVudDonIDogJ1RoZSBhYm92ZSBlcnJvciBvY2N1cnJlZCBpbiBvbmUgb2YgeW91ciBSZWFjdCBjb21wb25lbnRzOic7XG5cbiAgICB2YXIgZXJyb3JCb3VuZGFyeU1lc3NhZ2UgPSB2b2lkIDA7XG4gICAgLy8gZXJyb3JCb3VuZGFyeUZvdW5kIGNoZWNrIGlzIHN1ZmZpY2llbnQ7IGVycm9yQm91bmRhcnlOYW1lIGNoZWNrIGlzIHRvIHNhdGlzZnkgRmxvdy5cbiAgICBpZiAoZXJyb3JCb3VuZGFyeUZvdW5kICYmIGVycm9yQm91bmRhcnlOYW1lKSB7XG4gICAgICBpZiAod2lsbFJldHJ5KSB7XG4gICAgICAgIGVycm9yQm91bmRhcnlNZXNzYWdlID0gJ1JlYWN0IHdpbGwgdHJ5IHRvIHJlY3JlYXRlIHRoaXMgY29tcG9uZW50IHRyZWUgZnJvbSBzY3JhdGNoICcgKyAoJ3VzaW5nIHRoZSBlcnJvciBib3VuZGFyeSB5b3UgcHJvdmlkZWQsICcgKyBlcnJvckJvdW5kYXJ5TmFtZSArICcuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvckJvdW5kYXJ5TWVzc2FnZSA9ICdUaGlzIGVycm9yIHdhcyBpbml0aWFsbHkgaGFuZGxlZCBieSB0aGUgZXJyb3IgYm91bmRhcnkgJyArIGVycm9yQm91bmRhcnlOYW1lICsgJy5cXG4nICsgJ1JlY3JlYXRpbmcgdGhlIHRyZWUgZnJvbSBzY3JhdGNoIGZhaWxlZCBzbyBSZWFjdCB3aWxsIHVubW91bnQgdGhlIHRyZWUuJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JCb3VuZGFyeU1lc3NhZ2UgPSAnQ29uc2lkZXIgYWRkaW5nIGFuIGVycm9yIGJvdW5kYXJ5IHRvIHlvdXIgdHJlZSB0byBjdXN0b21pemUgZXJyb3IgaGFuZGxpbmcgYmVoYXZpb3IuXFxuJyArICdWaXNpdCBodHRwczovL2ZiLm1lL3JlYWN0LWVycm9yLWJvdW5kYXJpZXMgdG8gbGVhcm4gbW9yZSBhYm91dCBlcnJvciBib3VuZGFyaWVzLic7XG4gICAgfVxuICAgIHZhciBjb21iaW5lZE1lc3NhZ2UgPSAnJyArIGNvbXBvbmVudE5hbWVNZXNzYWdlICsgY29tcG9uZW50U3RhY2sgKyAnXFxuXFxuJyArICgnJyArIGVycm9yQm91bmRhcnlNZXNzYWdlKTtcblxuICAgIC8vIEluIGRldmVsb3BtZW50LCB3ZSBwcm92aWRlIG91ciBvd24gbWVzc2FnZSB3aXRoIGp1c3QgdGhlIGNvbXBvbmVudCBzdGFjay5cbiAgICAvLyBXZSBkb24ndCBpbmNsdWRlIHRoZSBvcmlnaW5hbCBlcnJvciBtZXNzYWdlIGFuZCBKUyBzdGFjayBiZWNhdXNlIHRoZSBicm93c2VyXG4gICAgLy8gaGFzIGFscmVhZHkgcHJpbnRlZCBpdC4gRXZlbiBpZiB0aGUgYXBwbGljYXRpb24gc3dhbGxvd3MgdGhlIGVycm9yLCBpdCBpcyBzdGlsbFxuICAgIC8vIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciB0aGFua3MgdG8gdGhlIERFVi1vbmx5IGZha2UgZXZlbnQgdHJpY2sgaW4gUmVhY3RFcnJvclV0aWxzLlxuICAgIGNvbnNvbGUuZXJyb3IoY29tYmluZWRNZXNzYWdlKTtcbiAgfVxufVxuXG52YXIgZGlkV2FybkFib3V0VW5kZWZpbmVkU25hcHNob3RCZWZvcmVVcGRhdGUgPSBudWxsO1xue1xuICBkaWRXYXJuQWJvdXRVbmRlZmluZWRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IG5ldyBTZXQoKTtcbn1cblxudmFyIFBvc3NpYmx5V2Vha1NldCQxID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbicgPyBXZWFrU2V0IDogU2V0O1xuXG5mdW5jdGlvbiBsb2dFcnJvcihib3VuZGFyeSwgZXJyb3JJbmZvKSB7XG4gIHZhciBzb3VyY2UgPSBlcnJvckluZm8uc291cmNlO1xuICB2YXIgc3RhY2sgPSBlcnJvckluZm8uc3RhY2s7XG4gIGlmIChzdGFjayA9PT0gbnVsbCAmJiBzb3VyY2UgIT09IG51bGwpIHtcbiAgICBzdGFjayA9IGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChzb3VyY2UpO1xuICB9XG5cbiAgdmFyIGNhcHR1cmVkRXJyb3IgPSB7XG4gICAgY29tcG9uZW50TmFtZTogc291cmNlICE9PSBudWxsID8gZ2V0Q29tcG9uZW50TmFtZShzb3VyY2UudHlwZSkgOiBudWxsLFxuICAgIGNvbXBvbmVudFN0YWNrOiBzdGFjayAhPT0gbnVsbCA/IHN0YWNrIDogJycsXG4gICAgZXJyb3I6IGVycm9ySW5mby52YWx1ZSxcbiAgICBlcnJvckJvdW5kYXJ5OiBudWxsLFxuICAgIGVycm9yQm91bmRhcnlOYW1lOiBudWxsLFxuICAgIGVycm9yQm91bmRhcnlGb3VuZDogZmFsc2UsXG4gICAgd2lsbFJldHJ5OiBmYWxzZVxuICB9O1xuXG4gIGlmIChib3VuZGFyeSAhPT0gbnVsbCAmJiBib3VuZGFyeS50YWcgPT09IENsYXNzQ29tcG9uZW50KSB7XG4gICAgY2FwdHVyZWRFcnJvci5lcnJvckJvdW5kYXJ5ID0gYm91bmRhcnkuc3RhdGVOb2RlO1xuICAgIGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeU5hbWUgPSBnZXRDb21wb25lbnROYW1lKGJvdW5kYXJ5LnR5cGUpO1xuICAgIGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeUZvdW5kID0gdHJ1ZTtcbiAgICBjYXB0dXJlZEVycm9yLndpbGxSZXRyeSA9IHRydWU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvZ0NhcHR1cmVkRXJyb3IoY2FwdHVyZWRFcnJvcik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBUaGlzIG1ldGhvZCBtdXN0IG5vdCB0aHJvdywgb3IgUmVhY3QgaW50ZXJuYWwgc3RhdGUgd2lsbCBnZXQgbWVzc2VkIHVwLlxuICAgIC8vIElmIGNvbnNvbGUuZXJyb3IgaXMgb3ZlcnJpZGRlbiwgb3IgbG9nQ2FwdHVyZWRFcnJvcigpIHNob3dzIGEgZGlhbG9nIHRoYXQgdGhyb3dzLFxuICAgIC8vIHdlIHdhbnQgdG8gcmVwb3J0IHRoaXMgZXJyb3Igb3V0c2lkZSBvZiB0aGUgbm9ybWFsIHN0YWNrIGFzIGEgbGFzdCByZXNvcnQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMzE4OFxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgY2FsbENvbXBvbmVudFdpbGxVbm1vdW50V2l0aFRpbWVyID0gZnVuY3Rpb24gKGN1cnJlbnQkJDEsIGluc3RhbmNlKSB7XG4gIHN0YXJ0UGhhc2VUaW1lcihjdXJyZW50JCQxLCAnY29tcG9uZW50V2lsbFVubW91bnQnKTtcbiAgaW5zdGFuY2UucHJvcHMgPSBjdXJyZW50JCQxLm1lbW9pemVkUHJvcHM7XG4gIGluc3RhbmNlLnN0YXRlID0gY3VycmVudCQkMS5tZW1vaXplZFN0YXRlO1xuICBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICBzdG9wUGhhc2VUaW1lcigpO1xufTtcblxuLy8gQ2FwdHVyZSBlcnJvcnMgc28gdGhleSBkb24ndCBpbnRlcnJ1cHQgdW5tb3VudGluZy5cbmZ1bmN0aW9uIHNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudChjdXJyZW50JCQxLCBpbnN0YW5jZSkge1xuICB7XG4gICAgaW52b2tlR3VhcmRlZENhbGxiYWNrKG51bGwsIGNhbGxDb21wb25lbnRXaWxsVW5tb3VudFdpdGhUaW1lciwgbnVsbCwgY3VycmVudCQkMSwgaW5zdGFuY2UpO1xuICAgIGlmIChoYXNDYXVnaHRFcnJvcigpKSB7XG4gICAgICB2YXIgdW5tb3VudEVycm9yID0gY2xlYXJDYXVnaHRFcnJvcigpO1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCQkMSwgdW5tb3VudEVycm9yKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQkJDEpIHtcbiAgdmFyIHJlZiA9IGN1cnJlbnQkJDEucmVmO1xuICBpZiAocmVmICE9PSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHtcbiAgICAgICAgaW52b2tlR3VhcmRlZENhbGxiYWNrKG51bGwsIHJlZiwgbnVsbCwgbnVsbCk7XG4gICAgICAgIGlmIChoYXNDYXVnaHRFcnJvcigpKSB7XG4gICAgICAgICAgdmFyIHJlZkVycm9yID0gY2xlYXJDYXVnaHRFcnJvcigpO1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQkJDEsIHJlZkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWYuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNhZmVseUNhbGxEZXN0cm95KGN1cnJlbnQkJDEsIGRlc3Ryb3kpIHtcbiAge1xuICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayhudWxsLCBkZXN0cm95LCBudWxsKTtcbiAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgdmFyIGVycm9yID0gY2xlYXJDYXVnaHRFcnJvcigpO1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCQkMSwgZXJyb3IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMoY3VycmVudCQkMSwgZmluaXNoZWRXb3JrKSB7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3QoVW5tb3VudFNuYXBzaG90LCBOb0VmZmVjdCQxLCBmaW5pc2hlZFdvcmspO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgaWYgKGZpbmlzaGVkV29yay5lZmZlY3RUYWcgJiBTbmFwc2hvdCkge1xuICAgICAgICAgIGlmIChjdXJyZW50JCQxICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgcHJldlByb3BzID0gY3VycmVudCQkMS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgdmFyIHByZXZTdGF0ZSA9IGN1cnJlbnQkJDEubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgIHN0YXJ0UGhhc2VUaW1lcihmaW5pc2hlZFdvcmssICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZScpO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIC8vIFdlIGNvdWxkIHVwZGF0ZSBpbnN0YW5jZSBwcm9wcyBhbmQgc3RhdGUgaGVyZSxcbiAgICAgICAgICAgIC8vIGJ1dCBpbnN0ZWFkIHdlIHJlbHkgb24gdGhlbSBiZWluZyBzZXQgZHVyaW5nIGxhc3QgcmVuZGVyLlxuICAgICAgICAgICAgLy8gVE9ETzogcmV2aXNpdCB0aGlzIHdoZW4gd2UgaW1wbGVtZW50IHJlc3VtaW5nLlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZiAoZmluaXNoZWRXb3JrLnR5cGUgPT09IGZpbmlzaGVkV29yay5lbGVtZW50VHlwZSAmJiAhZGlkV2FybkFib3V0UmVhc3NpZ25pbmdQcm9wcykge1xuICAgICAgICAgICAgICAgICEoaW5zdGFuY2UucHJvcHMgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzKSA/IHdhcm5pbmckMShmYWxzZSwgJ0V4cGVjdGVkICVzIHByb3BzIHRvIG1hdGNoIG1lbW9pemVkIHByb3BzIGJlZm9yZSAnICsgJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlLiAnICsgJ1RoaXMgbWlnaHQgZWl0aGVyIGJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gUmVhY3QsIG9yIGJlY2F1c2UgJyArICdhIGNvbXBvbmVudCByZWFzc2lnbnMgaXRzIG93biBgdGhpcy5wcm9wc2AuICcgKyAnUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgZ2V0Q29tcG9uZW50TmFtZShmaW5pc2hlZFdvcmsudHlwZSkgfHwgJ2luc3RhbmNlJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgIShpbnN0YW5jZS5zdGF0ZSA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUpID8gd2FybmluZyQxKGZhbHNlLCAnRXhwZWN0ZWQgJXMgc3RhdGUgdG8gbWF0Y2ggbWVtb2l6ZWQgc3RhdGUgYmVmb3JlICcgKyAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUuICcgKyAnVGhpcyBtaWdodCBlaXRoZXIgYmUgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBSZWFjdCwgb3IgYmVjYXVzZSAnICsgJ2EgY29tcG9uZW50IHJlYXNzaWducyBpdHMgb3duIGB0aGlzLnByb3BzYC4gJyArICdQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLCBnZXRDb21wb25lbnROYW1lKGZpbmlzaGVkV29yay50eXBlKSB8fCAnaW5zdGFuY2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoZmluaXNoZWRXb3JrLmVsZW1lbnRUeXBlID09PSBmaW5pc2hlZFdvcmsudHlwZSA/IHByZXZQcm9wcyA6IHJlc29sdmVEZWZhdWx0UHJvcHMoZmluaXNoZWRXb3JrLnR5cGUsIHByZXZQcm9wcyksIHByZXZTdGF0ZSk7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBkaWRXYXJuU2V0ID0gZGlkV2FybkFib3V0VW5kZWZpbmVkU25hcHNob3RCZWZvcmVVcGRhdGU7XG4gICAgICAgICAgICAgIGlmIChzbmFwc2hvdCA9PT0gdW5kZWZpbmVkICYmICFkaWRXYXJuU2V0LmhhcyhmaW5pc2hlZFdvcmsudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBkaWRXYXJuU2V0LmFkZChmaW5pc2hlZFdvcmsudHlwZSk7XG4gICAgICAgICAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKTogQSBzbmFwc2hvdCB2YWx1ZSAob3IgbnVsbCkgJyArICdtdXN0IGJlIHJldHVybmVkLiBZb3UgaGF2ZSByZXR1cm5lZCB1bmRlZmluZWQuJywgZ2V0Q29tcG9uZW50TmFtZShmaW5pc2hlZFdvcmsudHlwZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IHNuYXBzaG90O1xuICAgICAgICAgICAgc3RvcFBoYXNlVGltZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgIGNhc2UgSW5jb21wbGV0ZUNsYXNzQ29tcG9uZW50OlxuICAgICAgLy8gTm90aGluZyB0byBkbyBmb3IgdGhlc2UgY29tcG9uZW50IHR5cGVzXG4gICAgICByZXR1cm47XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgaW52YXJpYW50KGZhbHNlLCAnVGhpcyB1bml0IG9mIHdvcmsgdGFnIHNob3VsZCBub3QgaGF2ZSBzaWRlLWVmZmVjdHMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0SG9va0VmZmVjdExpc3QodW5tb3VudFRhZywgbW91bnRUYWcsIGZpbmlzaGVkV29yaykge1xuICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWU7XG4gIHZhciBsYXN0RWZmZWN0ID0gdXBkYXRlUXVldWUgIT09IG51bGwgPyB1cGRhdGVRdWV1ZS5sYXN0RWZmZWN0IDogbnVsbDtcbiAgaWYgKGxhc3RFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgZmlyc3RFZmZlY3QgPSBsYXN0RWZmZWN0Lm5leHQ7XG4gICAgdmFyIGVmZmVjdCA9IGZpcnN0RWZmZWN0O1xuICAgIGRvIHtcbiAgICAgIGlmICgoZWZmZWN0LnRhZyAmIHVubW91bnRUYWcpICE9PSBOb0VmZmVjdCQxKSB7XG4gICAgICAgIC8vIFVubW91bnRcbiAgICAgICAgdmFyIGRlc3Ryb3kgPSBlZmZlY3QuZGVzdHJveTtcbiAgICAgICAgZWZmZWN0LmRlc3Ryb3kgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChkZXN0cm95ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgoZWZmZWN0LnRhZyAmIG1vdW50VGFnKSAhPT0gTm9FZmZlY3QkMSkge1xuICAgICAgICAvLyBNb3VudFxuICAgICAgICB2YXIgY3JlYXRlID0gZWZmZWN0LmNyZWF0ZTtcbiAgICAgICAgZWZmZWN0LmRlc3Ryb3kgPSBjcmVhdGUoKTtcblxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9kZXN0cm95ID0gZWZmZWN0LmRlc3Ryb3k7XG4gICAgICAgICAgaWYgKF9kZXN0cm95ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIF9kZXN0cm95ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgYWRkZW5kdW0gPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAoX2Rlc3Ryb3kgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgYWRkZW5kdW0gPSAnIFlvdSByZXR1cm5lZCBudWxsLiBJZiB5b3VyIGVmZmVjdCBkb2VzIG5vdCByZXF1aXJlIGNsZWFuICcgKyAndXAsIHJldHVybiB1bmRlZmluZWQgKG9yIG5vdGhpbmcpLic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBfZGVzdHJveS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGFkZGVuZHVtID0gJ1xcblxcbkl0IGxvb2tzIGxpa2UgeW91IHdyb3RlIHVzZUVmZmVjdChhc3luYyAoKSA9PiAuLi4pIG9yIHJldHVybmVkIGEgUHJvbWlzZS4gJyArICdJbnN0ZWFkLCB3cml0ZSB0aGUgYXN5bmMgZnVuY3Rpb24gaW5zaWRlIHlvdXIgZWZmZWN0ICcgKyAnYW5kIGNhbGwgaXQgaW1tZWRpYXRlbHk6XFxuXFxuJyArICd1c2VFZmZlY3QoKCkgPT4ge1xcbicgKyAnICBhc3luYyBmdW5jdGlvbiBmZXRjaERhdGEoKSB7XFxuJyArICcgICAgLy8gWW91IGNhbiBhd2FpdCBoZXJlXFxuJyArICcgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBNeUFQSS5nZXREYXRhKHNvbWVJZCk7XFxuJyArICcgICAgLy8gLi4uXFxuJyArICcgIH1cXG4nICsgJyAgZmV0Y2hEYXRhKCk7XFxuJyArICd9LCBbc29tZUlkXSk7IC8vIE9yIFtdIGlmIGVmZmVjdCBkb2VzblxcJ3QgbmVlZCBwcm9wcyBvciBzdGF0ZVxcblxcbicgKyAnTGVhcm4gbW9yZSBhYm91dCBkYXRhIGZldGNoaW5nIHdpdGggSG9va3M6IGh0dHBzOi8vZmIubWUvcmVhY3QtaG9va3MtZGF0YS1mZXRjaGluZyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhZGRlbmR1bSA9ICcgWW91IHJldHVybmVkOiAnICsgX2Rlc3Ryb3k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdBbiBlZmZlY3QgZnVuY3Rpb24gbXVzdCBub3QgcmV0dXJuIGFueXRoaW5nIGJlc2lkZXMgYSBmdW5jdGlvbiwgJyArICd3aGljaCBpcyB1c2VkIGZvciBjbGVhbi11cC4lcyVzJywgYWRkZW5kdW0sIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChmaW5pc2hlZFdvcmspKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVmZmVjdCA9IGVmZmVjdC5uZXh0O1xuICAgIH0gd2hpbGUgKGVmZmVjdCAhPT0gZmlyc3RFZmZlY3QpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFBhc3NpdmVIb29rRWZmZWN0cyhmaW5pc2hlZFdvcmspIHtcbiAgY29tbWl0SG9va0VmZmVjdExpc3QoVW5tb3VudFBhc3NpdmUsIE5vRWZmZWN0JDEsIGZpbmlzaGVkV29yayk7XG4gIGNvbW1pdEhvb2tFZmZlY3RMaXN0KE5vRWZmZWN0JDEsIE1vdW50UGFzc2l2ZSwgZmluaXNoZWRXb3JrKTtcbn1cblxuZnVuY3Rpb24gY29tbWl0TGlmZUN5Y2xlcyhmaW5pc2hlZFJvb3QsIGN1cnJlbnQkJDEsIGZpbmlzaGVkV29yaywgY29tbWl0dGVkRXhwaXJhdGlvblRpbWUpIHtcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSBGdW5jdGlvbkNvbXBvbmVudDpcbiAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgY2FzZSBTaW1wbGVNZW1vQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdChVbm1vdW50TGF5b3V0LCBNb3VudExheW91dCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKGZpbmlzaGVkV29yay5lZmZlY3RUYWcgJiBVcGRhdGUpIHtcbiAgICAgICAgICBpZiAoY3VycmVudCQkMSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhcnRQaGFzZVRpbWVyKGZpbmlzaGVkV29yaywgJ2NvbXBvbmVudERpZE1vdW50Jyk7XG4gICAgICAgICAgICAvLyBXZSBjb3VsZCB1cGRhdGUgaW5zdGFuY2UgcHJvcHMgYW5kIHN0YXRlIGhlcmUsXG4gICAgICAgICAgICAvLyBidXQgaW5zdGVhZCB3ZSByZWx5IG9uIHRoZW0gYmVpbmcgc2V0IGR1cmluZyBsYXN0IHJlbmRlci5cbiAgICAgICAgICAgIC8vIFRPRE86IHJldmlzaXQgdGhpcyB3aGVuIHdlIGltcGxlbWVudCByZXN1bWluZy5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWYgKGZpbmlzaGVkV29yay50eXBlID09PSBmaW5pc2hlZFdvcmsuZWxlbWVudFR5cGUgJiYgIWRpZFdhcm5BYm91dFJlYXNzaWduaW5nUHJvcHMpIHtcbiAgICAgICAgICAgICAgICAhKGluc3RhbmNlLnByb3BzID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcykgPyB3YXJuaW5nJDEoZmFsc2UsICdFeHBlY3RlZCAlcyBwcm9wcyB0byBtYXRjaCBtZW1vaXplZCBwcm9wcyBiZWZvcmUgJyArICdjb21wb25lbnREaWRNb3VudC4gJyArICdUaGlzIG1pZ2h0IGVpdGhlciBiZSBiZWNhdXNlIG9mIGEgYnVnIGluIFJlYWN0LCBvciBiZWNhdXNlICcgKyAnYSBjb21wb25lbnQgcmVhc3NpZ25zIGl0cyBvd24gYHRoaXMucHJvcHNgLiAnICsgJ1BsZWFzZSBmaWxlIGFuIGlzc3VlLicsIGdldENvbXBvbmVudE5hbWUoZmluaXNoZWRXb3JrLnR5cGUpIHx8ICdpbnN0YW5jZScpIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgICEoaW5zdGFuY2Uuc3RhdGUgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlKSA/IHdhcm5pbmckMShmYWxzZSwgJ0V4cGVjdGVkICVzIHN0YXRlIHRvIG1hdGNoIG1lbW9pemVkIHN0YXRlIGJlZm9yZSAnICsgJ2NvbXBvbmVudERpZE1vdW50LiAnICsgJ1RoaXMgbWlnaHQgZWl0aGVyIGJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gUmVhY3QsIG9yIGJlY2F1c2UgJyArICdhIGNvbXBvbmVudCByZWFzc2lnbnMgaXRzIG93biBgdGhpcy5wcm9wc2AuICcgKyAnUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgZ2V0Q29tcG9uZW50TmFtZShmaW5pc2hlZFdvcmsudHlwZSkgfHwgJ2luc3RhbmNlJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICAgICAgICBzdG9wUGhhc2VUaW1lcigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcHJldlByb3BzID0gZmluaXNoZWRXb3JrLmVsZW1lbnRUeXBlID09PSBmaW5pc2hlZFdvcmsudHlwZSA/IGN1cnJlbnQkJDEubWVtb2l6ZWRQcm9wcyA6IHJlc29sdmVEZWZhdWx0UHJvcHMoZmluaXNoZWRXb3JrLnR5cGUsIGN1cnJlbnQkJDEubWVtb2l6ZWRQcm9wcyk7XG4gICAgICAgICAgICB2YXIgcHJldlN0YXRlID0gY3VycmVudCQkMS5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgc3RhcnRQaGFzZVRpbWVyKGZpbmlzaGVkV29yaywgJ2NvbXBvbmVudERpZFVwZGF0ZScpO1xuICAgICAgICAgICAgLy8gV2UgY291bGQgdXBkYXRlIGluc3RhbmNlIHByb3BzIGFuZCBzdGF0ZSBoZXJlLFxuICAgICAgICAgICAgLy8gYnV0IGluc3RlYWQgd2UgcmVseSBvbiB0aGVtIGJlaW5nIHNldCBkdXJpbmcgbGFzdCByZW5kZXIuXG4gICAgICAgICAgICAvLyBUT0RPOiByZXZpc2l0IHRoaXMgd2hlbiB3ZSBpbXBsZW1lbnQgcmVzdW1pbmcuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmIChmaW5pc2hlZFdvcmsudHlwZSA9PT0gZmluaXNoZWRXb3JrLmVsZW1lbnRUeXBlICYmICFkaWRXYXJuQWJvdXRSZWFzc2lnbmluZ1Byb3BzKSB7XG4gICAgICAgICAgICAgICAgIShpbnN0YW5jZS5wcm9wcyA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMpID8gd2FybmluZyQxKGZhbHNlLCAnRXhwZWN0ZWQgJXMgcHJvcHMgdG8gbWF0Y2ggbWVtb2l6ZWQgcHJvcHMgYmVmb3JlICcgKyAnY29tcG9uZW50RGlkVXBkYXRlLiAnICsgJ1RoaXMgbWlnaHQgZWl0aGVyIGJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gUmVhY3QsIG9yIGJlY2F1c2UgJyArICdhIGNvbXBvbmVudCByZWFzc2lnbnMgaXRzIG93biBgdGhpcy5wcm9wc2AuICcgKyAnUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgZ2V0Q29tcG9uZW50TmFtZShmaW5pc2hlZFdvcmsudHlwZSkgfHwgJ2luc3RhbmNlJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgIShpbnN0YW5jZS5zdGF0ZSA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUpID8gd2FybmluZyQxKGZhbHNlLCAnRXhwZWN0ZWQgJXMgc3RhdGUgdG8gbWF0Y2ggbWVtb2l6ZWQgc3RhdGUgYmVmb3JlICcgKyAnY29tcG9uZW50RGlkVXBkYXRlLiAnICsgJ1RoaXMgbWlnaHQgZWl0aGVyIGJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gUmVhY3QsIG9yIGJlY2F1c2UgJyArICdhIGNvbXBvbmVudCByZWFzc2lnbnMgaXRzIG93biBgdGhpcy5wcm9wc2AuICcgKyAnUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgZ2V0Q29tcG9uZW50TmFtZShmaW5pc2hlZFdvcmsudHlwZSkgfHwgJ2luc3RhbmNlJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSwgaW5zdGFuY2UuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpO1xuICAgICAgICAgICAgc3RvcFBoYXNlVGltZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuICAgICAgICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoZmluaXNoZWRXb3JrLnR5cGUgPT09IGZpbmlzaGVkV29yay5lbGVtZW50VHlwZSAmJiAhZGlkV2FybkFib3V0UmVhc3NpZ25pbmdQcm9wcykge1xuICAgICAgICAgICAgICAhKGluc3RhbmNlLnByb3BzID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcykgPyB3YXJuaW5nJDEoZmFsc2UsICdFeHBlY3RlZCAlcyBwcm9wcyB0byBtYXRjaCBtZW1vaXplZCBwcm9wcyBiZWZvcmUgJyArICdwcm9jZXNzaW5nIHRoZSB1cGRhdGUgcXVldWUuICcgKyAnVGhpcyBtaWdodCBlaXRoZXIgYmUgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBSZWFjdCwgb3IgYmVjYXVzZSAnICsgJ2EgY29tcG9uZW50IHJlYXNzaWducyBpdHMgb3duIGB0aGlzLnByb3BzYC4gJyArICdQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLCBnZXRDb21wb25lbnROYW1lKGZpbmlzaGVkV29yay50eXBlKSB8fCAnaW5zdGFuY2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgIShpbnN0YW5jZS5zdGF0ZSA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUpID8gd2FybmluZyQxKGZhbHNlLCAnRXhwZWN0ZWQgJXMgc3RhdGUgdG8gbWF0Y2ggbWVtb2l6ZWQgc3RhdGUgYmVmb3JlICcgKyAncHJvY2Vzc2luZyB0aGUgdXBkYXRlIHF1ZXVlLiAnICsgJ1RoaXMgbWlnaHQgZWl0aGVyIGJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gUmVhY3QsIG9yIGJlY2F1c2UgJyArICdhIGNvbXBvbmVudCByZWFzc2lnbnMgaXRzIG93biBgdGhpcy5wcm9wc2AuICcgKyAnUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgZ2V0Q29tcG9uZW50TmFtZShmaW5pc2hlZFdvcmsudHlwZSkgfHwgJ2luc3RhbmNlJykgOiB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFdlIGNvdWxkIHVwZGF0ZSBpbnN0YW5jZSBwcm9wcyBhbmQgc3RhdGUgaGVyZSxcbiAgICAgICAgICAvLyBidXQgaW5zdGVhZCB3ZSByZWx5IG9uIHRoZW0gYmVpbmcgc2V0IGR1cmluZyBsYXN0IHJlbmRlci5cbiAgICAgICAgICAvLyBUT0RPOiByZXZpc2l0IHRoaXMgd2hlbiB3ZSBpbXBsZW1lbnQgcmVzdW1pbmcuXG4gICAgICAgICAgY29tbWl0VXBkYXRlUXVldWUoZmluaXNoZWRXb3JrLCB1cGRhdGVRdWV1ZSwgaW5zdGFuY2UsIGNvbW1pdHRlZEV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgIHtcbiAgICAgICAgdmFyIF91cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgICAgICAgaWYgKF91cGRhdGVRdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBfaW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgIGlmIChmaW5pc2hlZFdvcmsuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLmNoaWxkLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgICAgICAgX2luc3RhbmNlID0gZ2V0UHVibGljSW5zdGFuY2UoZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAgICAgICAgX2luc3RhbmNlID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29tbWl0VXBkYXRlUXVldWUoZmluaXNoZWRXb3JrLCBfdXBkYXRlUXVldWUsIF9pbnN0YW5jZSwgY29tbWl0dGVkRXhwaXJhdGlvblRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBfaW5zdGFuY2UyID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcblxuICAgICAgICAvLyBSZW5kZXJlcnMgbWF5IHNjaGVkdWxlIHdvcmsgdG8gYmUgZG9uZSBhZnRlciBob3N0IGNvbXBvbmVudHMgYXJlIG1vdW50ZWRcbiAgICAgICAgLy8gKGVnIERPTSByZW5kZXJlciBtYXkgc2NoZWR1bGUgYXV0by1mb2N1cyBmb3IgaW5wdXRzIGFuZCBmb3JtIGNvbnRyb2xzKS5cbiAgICAgICAgLy8gVGhlc2UgZWZmZWN0cyBzaG91bGQgb25seSBiZSBjb21taXR0ZWQgd2hlbiBjb21wb25lbnRzIGFyZSBmaXJzdCBtb3VudGVkLFxuICAgICAgICAvLyBha2Egd2hlbiB0aGVyZSBpcyBubyBjdXJyZW50L2FsdGVybmF0ZS5cbiAgICAgICAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwgJiYgZmluaXNoZWRXb3JrLmVmZmVjdFRhZyAmIFVwZGF0ZSkge1xuICAgICAgICAgIHZhciB0eXBlID0gZmluaXNoZWRXb3JrLnR5cGU7XG4gICAgICAgICAgdmFyIHByb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgY29tbWl0TW91bnQoX2luc3RhbmNlMiwgdHlwZSwgcHJvcHMsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBubyBsaWZlLWN5Y2xlcyBhc3NvY2lhdGVkIHdpdGggdGV4dC5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBubyBsaWZlLWN5Y2xlcyBhc3NvY2lhdGVkIHdpdGggcG9ydGFscy5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICB7XG4gICAgICAgIGlmIChlbmFibGVQcm9maWxlclRpbWVyKSB7XG4gICAgICAgICAgdmFyIG9uUmVuZGVyID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMub25SZW5kZXI7XG5cbiAgICAgICAgICBpZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICAgICAgICAgICAgb25SZW5kZXIoZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMuaWQsIGN1cnJlbnQkJDEgPT09IG51bGwgPyAnbW91bnQnIDogJ3VwZGF0ZScsIGZpbmlzaGVkV29yay5hY3R1YWxEdXJhdGlvbiwgZmluaXNoZWRXb3JrLnRyZWVCYXNlRHVyYXRpb24sIGZpbmlzaGVkV29yay5hY3R1YWxTdGFydFRpbWUsIGdldENvbW1pdFRpbWUoKSwgZmluaXNoZWRSb290Lm1lbW9pemVkSW50ZXJhY3Rpb25zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb25SZW5kZXIoZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMuaWQsIGN1cnJlbnQkJDEgPT09IG51bGwgPyAnbW91bnQnIDogJ3VwZGF0ZScsIGZpbmlzaGVkV29yay5hY3R1YWxEdXJhdGlvbiwgZmluaXNoZWRXb3JrLnRyZWVCYXNlRHVyYXRpb24sIGZpbmlzaGVkV29yay5hY3R1YWxTdGFydFRpbWUsIGdldENvbW1pdFRpbWUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQ6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdUaGlzIHVuaXQgb2Ygd29yayB0YWcgc2hvdWxkIG5vdCBoYXZlIHNpZGUtZWZmZWN0cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBoaWRlT3JVbmhpZGVBbGxDaGlsZHJlbihmaW5pc2hlZFdvcmssIGlzSGlkZGVuKSB7XG4gIGlmIChzdXBwb3J0c011dGF0aW9uKSB7XG4gICAgLy8gV2Ugb25seSBoYXZlIHRoZSB0b3AgRmliZXIgdGhhdCB3YXMgaW5zZXJ0ZWQgYnV0IHdlIG5lZWQgdG8gcmVjdXJzZSBkb3duIGl0c1xuICAgIHZhciBub2RlID0gZmluaXNoZWRXb3JrO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gbm9kZS5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChpc0hpZGRlbikge1xuICAgICAgICAgIGhpZGVJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdW5oaWRlSW5zdGFuY2Uobm9kZS5zdGF0ZU5vZGUsIG5vZGUubWVtb2l6ZWRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICAgIHZhciBfaW5zdGFuY2UzID0gbm9kZS5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChpc0hpZGRlbikge1xuICAgICAgICAgIGhpZGVUZXh0SW5zdGFuY2UoX2luc3RhbmNlMyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdW5oaWRlVGV4dEluc3RhbmNlKF9pbnN0YW5jZTMsIG5vZGUubWVtb2l6ZWRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IFN1c3BlbnNlQ29tcG9uZW50ICYmIG5vZGUubWVtb2l6ZWRTdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBGb3VuZCBhIG5lc3RlZCBTdXNwZW5zZSBjb21wb25lbnQgdGhhdCB0aW1lZCBvdXQuIFNraXAgb3ZlciB0aGVcbiAgICAgICAgdmFyIGZhbGxiYWNrQ2hpbGRGcmFnbWVudCA9IG5vZGUuY2hpbGQuc2libGluZztcbiAgICAgICAgZmFsbGJhY2tDaGlsZEZyYWdtZW50LnJldHVybiA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBmYWxsYmFja0NoaWxkRnJhZ21lbnQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChub2RlLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUgPT09IGZpbmlzaGVkV29yaykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgIGlmIChub2RlLnJldHVybiA9PT0gbnVsbCB8fCBub2RlLnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdEF0dGFjaFJlZihmaW5pc2hlZFdvcmspIHtcbiAgdmFyIHJlZiA9IGZpbmlzaGVkV29yay5yZWY7XG4gIGlmIChyZWYgIT09IG51bGwpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgIHZhciBpbnN0YW5jZVRvVXNlID0gdm9pZCAwO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICBpbnN0YW5jZVRvVXNlID0gZ2V0UHVibGljSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGluc3RhbmNlVG9Vc2UgPSBpbnN0YW5jZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlZihpbnN0YW5jZVRvVXNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAge1xuICAgICAgICBpZiAoIXJlZi5oYXNPd25Qcm9wZXJ0eSgnY3VycmVudCcpKSB7XG4gICAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnVW5leHBlY3RlZCByZWYgb2JqZWN0IHByb3ZpZGVkIGZvciAlcy4gJyArICdVc2UgZWl0aGVyIGEgcmVmLXNldHRlciBmdW5jdGlvbiBvciBSZWFjdC5jcmVhdGVSZWYoKS4lcycsIGdldENvbXBvbmVudE5hbWUoZmluaXNoZWRXb3JrLnR5cGUpLCBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2QoZmluaXNoZWRXb3JrKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVmLmN1cnJlbnQgPSBpbnN0YW5jZVRvVXNlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXREZXRhY2hSZWYoY3VycmVudCQkMSkge1xuICB2YXIgY3VycmVudFJlZiA9IGN1cnJlbnQkJDEucmVmO1xuICBpZiAoY3VycmVudFJlZiAhPT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgY3VycmVudFJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY3VycmVudFJlZihudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuLy8gVXNlci1vcmlnaW5hdGluZyBlcnJvcnMgKGxpZmVjeWNsZXMgYW5kIHJlZnMpIHNob3VsZCBub3QgaW50ZXJydXB0XG4vLyBkZWxldGlvbiwgc28gZG9uJ3QgbGV0IHRoZW0gdGhyb3cuIEhvc3Qtb3JpZ2luYXRpbmcgZXJyb3JzIHNob3VsZFxuLy8gaW50ZXJydXB0IGRlbGV0aW9uLCBzbyBpdCdzIG9rYXlcbmZ1bmN0aW9uIGNvbW1pdFVubW91bnQoY3VycmVudCQkMSkge1xuICBvbkNvbW1pdFVubW91bnQoY3VycmVudCQkMSk7XG5cbiAgc3dpdGNoIChjdXJyZW50JCQxLnRhZykge1xuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgIGNhc2UgTWVtb0NvbXBvbmVudDpcbiAgICBjYXNlIFNpbXBsZU1lbW9Db21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciB1cGRhdGVRdWV1ZSA9IGN1cnJlbnQkJDEudXBkYXRlUXVldWU7XG4gICAgICAgIGlmICh1cGRhdGVRdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBsYXN0RWZmZWN0ID0gdXBkYXRlUXVldWUubGFzdEVmZmVjdDtcbiAgICAgICAgICBpZiAobGFzdEVmZmVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGZpcnN0RWZmZWN0ID0gbGFzdEVmZmVjdC5uZXh0O1xuICAgICAgICAgICAgdmFyIGVmZmVjdCA9IGZpcnN0RWZmZWN0O1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICB2YXIgZGVzdHJveSA9IGVmZmVjdC5kZXN0cm95O1xuICAgICAgICAgICAgICBpZiAoZGVzdHJveSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2FmZWx5Q2FsbERlc3Ryb3koY3VycmVudCQkMSwgZGVzdHJveSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWZmZWN0ID0gZWZmZWN0Lm5leHQ7XG4gICAgICAgICAgICB9IHdoaWxlIChlZmZlY3QgIT09IGZpcnN0RWZmZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQkJDEpO1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50JCQxLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudChjdXJyZW50JCQxLCBpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQkJDEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIHJlY3Vyc2l2ZS5cbiAgICAgICAgLy8gV2UgYXJlIGFsc28gbm90IHVzaW5nIHRoaXMgcGFyZW50IGJlY2F1c2VcbiAgICAgICAgLy8gdGhlIHBvcnRhbCB3aWxsIGdldCBwdXNoZWQgaW1tZWRpYXRlbHkuXG4gICAgICAgIGlmIChzdXBwb3J0c011dGF0aW9uKSB7XG4gICAgICAgICAgdW5tb3VudEhvc3RDb21wb25lbnRzKGN1cnJlbnQkJDEpO1xuICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnRzUGVyc2lzdGVuY2UpIHtcbiAgICAgICAgICBlbXB0eVBvcnRhbENvbnRhaW5lcihjdXJyZW50JCQxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0TmVzdGVkVW5tb3VudHMocm9vdCkge1xuICAvLyBXaGlsZSB3ZSdyZSBpbnNpZGUgYSByZW1vdmVkIGhvc3Qgbm9kZSB3ZSBkb24ndCB3YW50IHRvIGNhbGxcbiAgLy8gcmVtb3ZlQ2hpbGQgb24gdGhlIGlubmVyIG5vZGVzIGJlY2F1c2UgdGhleSdyZSByZW1vdmVkIGJ5IHRoZSB0b3BcbiAgLy8gY2FsbCBhbnl3YXkuIFdlIGFsc28gd2FudCB0byBjYWxsIGNvbXBvbmVudFdpbGxVbm1vdW50IG9uIGFsbFxuICAvLyBjb21wb3NpdGVzIGJlZm9yZSB0aGlzIGhvc3Qgbm9kZSBpcyByZW1vdmVkIGZyb20gdGhlIHRyZWUuIFRoZXJlZm9yZVxuICB2YXIgbm9kZSA9IHJvb3Q7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29tbWl0VW5tb3VudChub2RlKTtcbiAgICAvLyBWaXNpdCBjaGlsZHJlbiBiZWNhdXNlIHRoZXkgbWF5IGNvbnRhaW4gbW9yZSBjb21wb3NpdGUgb3IgaG9zdCBub2Rlcy5cbiAgICAvLyBTa2lwIHBvcnRhbHMgYmVjYXVzZSBjb21taXRVbm1vdW50KCkgY3VycmVudGx5IHZpc2l0cyB0aGVtIHJlY3Vyc2l2ZWx5LlxuICAgIGlmIChub2RlLmNoaWxkICE9PSBudWxsICYmIChcbiAgICAvLyBJZiB3ZSB1c2UgbXV0YXRpb24gd2UgZHJpbGwgZG93biBpbnRvIHBvcnRhbHMgdXNpbmcgY29tbWl0VW5tb3VudCBhYm92ZS5cbiAgICAvLyBJZiB3ZSBkb24ndCB1c2UgbXV0YXRpb24gd2UgZHJpbGwgZG93biBpbnRvIHBvcnRhbHMgaGVyZSBpbnN0ZWFkLlxuICAgICFzdXBwb3J0c011dGF0aW9uIHx8IG5vZGUudGFnICE9PSBIb3N0UG9ydGFsKSkge1xuICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlO1xuICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5vZGUgPT09IHJvb3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUucmV0dXJuID09PSBudWxsIHx8IG5vZGUucmV0dXJuID09PSByb290KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoRmliZXIoY3VycmVudCQkMSkge1xuICAvLyBDdXQgb2ZmIHRoZSByZXR1cm4gcG9pbnRlcnMgdG8gZGlzY29ubmVjdCBpdCBmcm9tIHRoZSB0cmVlLiBJZGVhbGx5LCB3ZVxuICAvLyBzaG91bGQgY2xlYXIgdGhlIGNoaWxkIHBvaW50ZXIgb2YgdGhlIHBhcmVudCBhbHRlcm5hdGUgdG8gbGV0IHRoaXNcbiAgLy8gZ2V0IEdDOmVkIGJ1dCB3ZSBkb24ndCBrbm93IHdoaWNoIGZvciBzdXJlIHdoaWNoIHBhcmVudCBpcyB0aGUgY3VycmVudFxuICAvLyBvbmUgc28gd2UnbGwgc2V0dGxlIGZvciBHQzppbmcgdGhlIHN1YnRyZWUgb2YgdGhpcyBjaGlsZC4gVGhpcyBjaGlsZFxuICAvLyBpdHNlbGYgd2lsbCBiZSBHQzplZCB3aGVuIHRoZSBwYXJlbnQgdXBkYXRlcyB0aGUgbmV4dCB0aW1lLlxuICBjdXJyZW50JCQxLnJldHVybiA9IG51bGw7XG4gIGN1cnJlbnQkJDEuY2hpbGQgPSBudWxsO1xuICBjdXJyZW50JCQxLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICBjdXJyZW50JCQxLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgdmFyIGFsdGVybmF0ZSA9IGN1cnJlbnQkJDEuYWx0ZXJuYXRlO1xuICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsKSB7XG4gICAgYWx0ZXJuYXRlLnJldHVybiA9IG51bGw7XG4gICAgYWx0ZXJuYXRlLmNoaWxkID0gbnVsbDtcbiAgICBhbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gICAgYWx0ZXJuYXRlLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbXB0eVBvcnRhbENvbnRhaW5lcihjdXJyZW50JCQxKSB7XG4gIGlmICghc3VwcG9ydHNQZXJzaXN0ZW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwb3J0YWwgPSBjdXJyZW50JCQxLnN0YXRlTm9kZTtcbiAgdmFyIGNvbnRhaW5lckluZm8gPSBwb3J0YWwuY29udGFpbmVySW5mbztcblxuICB2YXIgZW1wdHlDaGlsZFNldCA9IGNyZWF0ZUNvbnRhaW5lckNoaWxkU2V0KGNvbnRhaW5lckluZm8pO1xuICByZXBsYWNlQ29udGFpbmVyQ2hpbGRyZW4oY29udGFpbmVySW5mbywgZW1wdHlDaGlsZFNldCk7XG59XG5cbmZ1bmN0aW9uIGNvbW1pdENvbnRhaW5lcihmaW5pc2hlZFdvcmspIHtcbiAgaWYgKCFzdXBwb3J0c1BlcnNpc3RlbmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RSb290OlxuICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgIHtcbiAgICAgICAgdmFyIHBvcnRhbE9yUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIHZhciBjb250YWluZXJJbmZvID0gcG9ydGFsT3JSb290LmNvbnRhaW5lckluZm8sXG4gICAgICAgICAgICBfcGVuZGluZ0NoaWxkcmVuID0gcG9ydGFsT3JSb290LnBlbmRpbmdDaGlsZHJlbjtcblxuICAgICAgICByZXBsYWNlQ29udGFpbmVyQ2hpbGRyZW4oY29udGFpbmVySW5mbywgX3BlbmRpbmdDaGlsZHJlbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdUaGlzIHVuaXQgb2Ygd29yayB0YWcgc2hvdWxkIG5vdCBoYXZlIHNpZGUtZWZmZWN0cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRIb3N0UGFyZW50RmliZXIoZmliZXIpIHtcbiAgdmFyIHBhcmVudCA9IGZpYmVyLnJldHVybjtcbiAgd2hpbGUgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgIGlmIChpc0hvc3RQYXJlbnQocGFyZW50KSkge1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgfVxuICBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCB0byBmaW5kIGEgaG9zdCBwYXJlbnQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG59XG5cbmZ1bmN0aW9uIGlzSG9zdFBhcmVudChmaWJlcikge1xuICByZXR1cm4gZmliZXIudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IGZpYmVyLnRhZyA9PT0gSG9zdFJvb3QgfHwgZmliZXIudGFnID09PSBIb3N0UG9ydGFsO1xufVxuXG5mdW5jdGlvbiBnZXRIb3N0U2libGluZyhmaWJlcikge1xuICAvLyBXZSdyZSBnb2luZyB0byBzZWFyY2ggZm9yd2FyZCBpbnRvIHRoZSB0cmVlIHVudGlsIHdlIGZpbmQgYSBzaWJsaW5nIGhvc3RcbiAgLy8gbm9kZS4gVW5mb3J0dW5hdGVseSwgaWYgbXVsdGlwbGUgaW5zZXJ0aW9ucyBhcmUgZG9uZSBpbiBhIHJvdyB3ZSBoYXZlIHRvXG4gIC8vIHNlYXJjaCBwYXN0IHRoZW0uIFRoaXMgbGVhZHMgdG8gZXhwb25lbnRpYWwgc2VhcmNoIGZvciB0aGUgbmV4dCBzaWJsaW5nLlxuICB2YXIgbm9kZSA9IGZpYmVyO1xuICBzaWJsaW5nczogd2hpbGUgKHRydWUpIHtcbiAgICAvLyBJZiB3ZSBkaWRuJ3QgZmluZCBhbnl0aGluZywgbGV0J3MgdHJ5IHRoZSBuZXh0IHNpYmxpbmcuXG4gICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUucmV0dXJuID09PSBudWxsIHx8IGlzSG9zdFBhcmVudChub2RlLnJldHVybikpIHtcbiAgICAgICAgLy8gSWYgd2UgcG9wIG91dCBvZiB0aGUgcm9vdCBvciBoaXQgdGhlIHBhcmVudCB0aGUgZmliZXIgd2UgYXJlIHRoZVxuICAgICAgICAvLyBsYXN0IHNpYmxpbmcuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICB3aGlsZSAobm9kZS50YWcgIT09IEhvc3RDb21wb25lbnQgJiYgbm9kZS50YWcgIT09IEhvc3RUZXh0ICYmIG5vZGUudGFnICE9PSBEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnQpIHtcbiAgICAgIC8vIElmIGl0IGlzIG5vdCBob3N0IG5vZGUgYW5kLCB3ZSBtaWdodCBoYXZlIGEgaG9zdCBub2RlIGluc2lkZSBpdC5cbiAgICAgIC8vIFRyeSB0byBzZWFyY2ggZG93biB1bnRpbCB3ZSBmaW5kIG9uZS5cbiAgICAgIGlmIChub2RlLmVmZmVjdFRhZyAmIFBsYWNlbWVudCkge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgY2hpbGQsIHRyeSB0aGUgc2libGluZ3MgaW5zdGVhZC5cbiAgICAgICAgY29udGludWUgc2libGluZ3M7XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgY2hpbGQsIHRyeSB0aGUgc2libGluZ3MgaW5zdGVhZC5cbiAgICAgIC8vIFdlIGFsc28gc2tpcCBwb3J0YWxzIGJlY2F1c2UgdGhleSBhcmUgbm90IHBhcnQgb2YgdGhpcyBob3N0IHRyZWUuXG4gICAgICBpZiAobm9kZS5jaGlsZCA9PT0gbnVsbCB8fCBub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCkge1xuICAgICAgICBjb250aW51ZSBzaWJsaW5ncztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHRoaXMgaG9zdCBub2RlIGlzIHN0YWJsZSBvciBhYm91dCB0byBiZSBwbGFjZWQuXG4gICAgaWYgKCEobm9kZS5lZmZlY3RUYWcgJiBQbGFjZW1lbnQpKSB7XG4gICAgICAvLyBGb3VuZCBpdCFcbiAgICAgIHJldHVybiBub2RlLnN0YXRlTm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0UGxhY2VtZW50KGZpbmlzaGVkV29yaykge1xuICBpZiAoIXN1cHBvcnRzTXV0YXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZWN1cnNpdmVseSBpbnNlcnQgYWxsIGhvc3Qgbm9kZXMgaW50byB0aGUgcGFyZW50LlxuICB2YXIgcGFyZW50RmliZXIgPSBnZXRIb3N0UGFyZW50RmliZXIoZmluaXNoZWRXb3JrKTtcblxuICAvLyBOb3RlOiB0aGVzZSB0d28gdmFyaWFibGVzICptdXN0KiBhbHdheXMgYmUgdXBkYXRlZCB0b2dldGhlci5cbiAgdmFyIHBhcmVudCA9IHZvaWQgMDtcbiAgdmFyIGlzQ29udGFpbmVyID0gdm9pZCAwO1xuXG4gIHN3aXRjaCAocGFyZW50RmliZXIudGFnKSB7XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgcGFyZW50ID0gcGFyZW50RmliZXIuc3RhdGVOb2RlO1xuICAgICAgaXNDb250YWluZXIgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICBwYXJlbnQgPSBwYXJlbnRGaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgIGlzQ29udGFpbmVyID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgIHBhcmVudCA9IHBhcmVudEZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgaXNDb250YWluZXIgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgaG9zdCBwYXJlbnQgZmliZXIuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cbiAgaWYgKHBhcmVudEZpYmVyLmVmZmVjdFRhZyAmIENvbnRlbnRSZXNldCkge1xuICAgIC8vIFJlc2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHBhcmVudCBiZWZvcmUgZG9pbmcgYW55IGluc2VydGlvbnNcbiAgICByZXNldFRleHRDb250ZW50KHBhcmVudCk7XG4gICAgLy8gQ2xlYXIgQ29udGVudFJlc2V0IGZyb20gdGhlIGVmZmVjdCB0YWdcbiAgICBwYXJlbnRGaWJlci5lZmZlY3RUYWcgJj0gfkNvbnRlbnRSZXNldDtcbiAgfVxuXG4gIHZhciBiZWZvcmUgPSBnZXRIb3N0U2libGluZyhmaW5pc2hlZFdvcmspO1xuICAvLyBXZSBvbmx5IGhhdmUgdGhlIHRvcCBGaWJlciB0aGF0IHdhcyBpbnNlcnRlZCBidXQgd2UgbmVlZCB0byByZWN1cnNlIGRvd24gaXRzXG4gIC8vIGNoaWxkcmVuIHRvIGZpbmQgYWxsIHRoZSB0ZXJtaW5hbCBub2Rlcy5cbiAgdmFyIG5vZGUgPSBmaW5pc2hlZFdvcms7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKG5vZGUudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IG5vZGUudGFnID09PSBIb3N0VGV4dCkge1xuICAgICAgaWYgKGJlZm9yZSkge1xuICAgICAgICBpZiAoaXNDb250YWluZXIpIHtcbiAgICAgICAgICBpbnNlcnRJbkNvbnRhaW5lckJlZm9yZShwYXJlbnQsIG5vZGUuc3RhdGVOb2RlLCBiZWZvcmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluc2VydEJlZm9yZShwYXJlbnQsIG5vZGUuc3RhdGVOb2RlLCBiZWZvcmUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNDb250YWluZXIpIHtcbiAgICAgICAgICBhcHBlbmRDaGlsZFRvQ29udGFpbmVyKHBhcmVudCwgbm9kZS5zdGF0ZU5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFwcGVuZENoaWxkKHBhcmVudCwgbm9kZS5zdGF0ZU5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCkge1xuICAgICAgLy8gSWYgdGhlIGluc2VydGlvbiBpdHNlbGYgaXMgYSBwb3J0YWwsIHRoZW4gd2UgZG9uJ3Qgd2FudCB0byB0cmF2ZXJzZVxuICAgICAgLy8gZG93biBpdHMgY2hpbGRyZW4uIEluc3RlYWQsIHdlJ2xsIGdldCBpbnNlcnRpb25zIGZyb20gZWFjaCBjaGlsZCBpblxuICAgICAgLy8gdGhlIHBvcnRhbCBkaXJlY3RseS5cbiAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSBmaW5pc2hlZFdvcmspIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUucmV0dXJuID09PSBudWxsIHx8IG5vZGUucmV0dXJuID09PSBmaW5pc2hlZFdvcmspIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiB1bm1vdW50SG9zdENvbXBvbmVudHMoY3VycmVudCQkMSkge1xuICAvLyBXZSBvbmx5IGhhdmUgdGhlIHRvcCBGaWJlciB0aGF0IHdhcyBkZWxldGVkIGJ1dCB3ZSBuZWVkIHRvIHJlY3Vyc2UgZG93biBpdHNcbiAgdmFyIG5vZGUgPSBjdXJyZW50JCQxO1xuXG4gIC8vIEVhY2ggaXRlcmF0aW9uLCBjdXJyZW50UGFyZW50IGlzIHBvcHVsYXRlZCB3aXRoIG5vZGUncyBob3N0IHBhcmVudCBpZiBub3RcbiAgLy8gY3VycmVudFBhcmVudElzVmFsaWQuXG4gIHZhciBjdXJyZW50UGFyZW50SXNWYWxpZCA9IGZhbHNlO1xuXG4gIC8vIE5vdGU6IHRoZXNlIHR3byB2YXJpYWJsZXMgKm11c3QqIGFsd2F5cyBiZSB1cGRhdGVkIHRvZ2V0aGVyLlxuICB2YXIgY3VycmVudFBhcmVudCA9IHZvaWQgMDtcbiAgdmFyIGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciA9IHZvaWQgMDtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmICghY3VycmVudFBhcmVudElzVmFsaWQpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBub2RlLnJldHVybjtcbiAgICAgIGZpbmRQYXJlbnQ6IHdoaWxlICh0cnVlKSB7XG4gICAgICAgICEocGFyZW50ICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHRvIGZpbmQgYSBob3N0IHBhcmVudC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgICAgc3dpdGNoIChwYXJlbnQudGFnKSB7XG4gICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgICAgY3VycmVudFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICBjdXJyZW50UGFyZW50SXNDb250YWluZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrIGZpbmRQYXJlbnQ7XG4gICAgICAgICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBjdXJyZW50UGFyZW50SXNDb250YWluZXIgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWsgZmluZFBhcmVudDtcbiAgICAgICAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICAgICAgICBjdXJyZW50UGFyZW50ID0gcGFyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICAgICAgY3VycmVudFBhcmVudElzQ29udGFpbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrIGZpbmRQYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRQYXJlbnRJc1ZhbGlkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICBjb21taXROZXN0ZWRVbm1vdW50cyhub2RlKTtcbiAgICAgIC8vIEFmdGVyIGFsbCB0aGUgY2hpbGRyZW4gaGF2ZSB1bm1vdW50ZWQsIGl0IGlzIG5vdyBzYWZlIHRvIHJlbW92ZSB0aGVcbiAgICAgIC8vIG5vZGUgZnJvbSB0aGUgdHJlZS5cbiAgICAgIGlmIChjdXJyZW50UGFyZW50SXNDb250YWluZXIpIHtcbiAgICAgICAgcmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyKGN1cnJlbnRQYXJlbnQsIG5vZGUuc3RhdGVOb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbW92ZUNoaWxkKGN1cnJlbnRQYXJlbnQsIG5vZGUuc3RhdGVOb2RlKTtcbiAgICAgIH1cbiAgICAgIC8vIERvbid0IHZpc2l0IGNoaWxkcmVuIGJlY2F1c2Ugd2UgYWxyZWFkeSB2aXNpdGVkIHRoZW0uXG4gICAgfSBlbHNlIGlmIChlbmFibGVTdXNwZW5zZVNlcnZlclJlbmRlcmVyICYmIG5vZGUudGFnID09PSBEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnQpIHtcbiAgICAgIC8vIERlbGV0ZSB0aGUgZGVoeWRyYXRlZCBzdXNwZW5zZSBib3VuZGFyeSBhbmQgYWxsIG9mIGl0cyBjb250ZW50LlxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lcikge1xuICAgICAgICBjbGVhclN1c3BlbnNlQm91bmRhcnlGcm9tQ29udGFpbmVyKGN1cnJlbnRQYXJlbnQsIG5vZGUuc3RhdGVOb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsZWFyU3VzcGVuc2VCb3VuZGFyeShjdXJyZW50UGFyZW50LCBub2RlLnN0YXRlTm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCkge1xuICAgICAgaWYgKG5vZGUuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgLy8gV2hlbiB3ZSBnbyBpbnRvIGEgcG9ydGFsLCBpdCBiZWNvbWVzIHRoZSBwYXJlbnQgdG8gcmVtb3ZlIGZyb20uXG4gICAgICAgIC8vIFdlIHdpbGwgcmVhc3NpZ24gaXQgYmFjayB3aGVuIHdlIHBvcCB0aGUgcG9ydGFsIG9uIHRoZSB3YXkgdXAuXG4gICAgICAgIGN1cnJlbnRQYXJlbnQgPSBub2RlLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICBjdXJyZW50UGFyZW50SXNDb250YWluZXIgPSB0cnVlO1xuICAgICAgICAvLyBWaXNpdCBjaGlsZHJlbiBiZWNhdXNlIHBvcnRhbHMgbWlnaHQgY29udGFpbiBob3N0IGNvbXBvbmVudHMuXG4gICAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21taXRVbm1vdW50KG5vZGUpO1xuICAgICAgLy8gVmlzaXQgY2hpbGRyZW4gYmVjYXVzZSB3ZSBtYXkgZmluZCBtb3JlIGhvc3QgY29tcG9uZW50cyBiZWxvdy5cbiAgICAgIGlmIChub2RlLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZSA9PT0gY3VycmVudCQkMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICBpZiAobm9kZS5yZXR1cm4gPT09IG51bGwgfHwgbm9kZS5yZXR1cm4gPT09IGN1cnJlbnQkJDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgICAgaWYgKG5vZGUudGFnID09PSBIb3N0UG9ydGFsKSB7XG4gICAgICAgIC8vIFdoZW4gd2UgZ28gb3V0IG9mIHRoZSBwb3J0YWwsIHdlIG5lZWQgdG8gcmVzdG9yZSB0aGUgcGFyZW50LlxuICAgICAgICAvLyBTaW5jZSB3ZSBkb24ndCBrZWVwIGEgc3RhY2sgb2YgdGhlbSwgd2Ugd2lsbCBzZWFyY2ggZm9yIGl0LlxuICAgICAgICBjdXJyZW50UGFyZW50SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXREZWxldGlvbihjdXJyZW50JCQxKSB7XG4gIGlmIChzdXBwb3J0c011dGF0aW9uKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgZGVsZXRlIGFsbCBob3N0IG5vZGVzIGZyb20gdGhlIHBhcmVudC5cbiAgICAvLyBEZXRhY2ggcmVmcyBhbmQgY2FsbCBjb21wb25lbnRXaWxsVW5tb3VudCgpIG9uIHRoZSB3aG9sZSBzdWJ0cmVlLlxuICAgIHVubW91bnRIb3N0Q29tcG9uZW50cyhjdXJyZW50JCQxKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBEZXRhY2ggcmVmcyBhbmQgY2FsbCBjb21wb25lbnRXaWxsVW5tb3VudCgpIG9uIHRoZSB3aG9sZSBzdWJ0cmVlLlxuICAgIGNvbW1pdE5lc3RlZFVubW91bnRzKGN1cnJlbnQkJDEpO1xuICB9XG4gIGRldGFjaEZpYmVyKGN1cnJlbnQkJDEpO1xufVxuXG5mdW5jdGlvbiBjb21taXRXb3JrKGN1cnJlbnQkJDEsIGZpbmlzaGVkV29yaykge1xuICBpZiAoIXN1cHBvcnRzTXV0YXRpb24pIHtcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICBjYXNlIE1lbW9Db21wb25lbnQ6XG4gICAgICBjYXNlIFNpbXBsZU1lbW9Db21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBOb3RlOiBXZSBjdXJyZW50bHkgbmV2ZXIgdXNlIE1vdW50TXV0YXRpb24sIGJ1dCB1c2VMYXlvdXQgdXNlc1xuICAgICAgICAgIC8vIFVubW91bnRNdXRhdGlvbi5cbiAgICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdChVbm1vdW50TXV0YXRpb24sIE1vdW50TXV0YXRpb24sIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tbWl0Q29udGFpbmVyKGZpbmlzaGVkV29yayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSBGdW5jdGlvbkNvbXBvbmVudDpcbiAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgY2FzZSBNZW1vQ29tcG9uZW50OlxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgLy8gTm90ZTogV2UgY3VycmVudGx5IG5ldmVyIHVzZSBNb3VudE11dGF0aW9uLCBidXQgdXNlTGF5b3V0IHVzZXNcbiAgICAgICAgLy8gVW5tb3VudE11dGF0aW9uLlxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdChVbm1vdW50TXV0YXRpb24sIE1vdW50TXV0YXRpb24sIGZpbmlzaGVkV29yayk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIENvbW1pdCB0aGUgd29yayBwcmVwYXJlZCBlYXJsaWVyLlxuICAgICAgICAgIHZhciBuZXdQcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgIC8vIEZvciBoeWRyYXRpb24gd2UgcmV1c2UgdGhlIHVwZGF0ZSBwYXRoIGJ1dCB3ZSB0cmVhdCB0aGUgb2xkUHJvcHNcbiAgICAgICAgICAvLyBhcyB0aGUgbmV3UHJvcHMuIFRoZSB1cGRhdGVQYXlsb2FkIHdpbGwgY29udGFpbiB0aGUgcmVhbCBjaGFuZ2UgaW5cbiAgICAgICAgICAvLyB0aGlzIGNhc2UuXG4gICAgICAgICAgdmFyIG9sZFByb3BzID0gY3VycmVudCQkMSAhPT0gbnVsbCA/IGN1cnJlbnQkJDEubWVtb2l6ZWRQcm9wcyA6IG5ld1Byb3BzO1xuICAgICAgICAgIHZhciB0eXBlID0gZmluaXNoZWRXb3JrLnR5cGU7XG4gICAgICAgICAgLy8gVE9ETzogVHlwZSB0aGUgdXBkYXRlUXVldWUgdG8gYmUgc3BlY2lmaWMgdG8gaG9zdCBjb21wb25lbnRzLlxuICAgICAgICAgIHZhciB1cGRhdGVQYXlsb2FkID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuICAgICAgICAgIGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGw7XG4gICAgICAgICAgaWYgKHVwZGF0ZVBheWxvYWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbW1pdFVwZGF0ZShpbnN0YW5jZSwgdXBkYXRlUGF5bG9hZCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCBmaW5pc2hlZFdvcmspO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgIHtcbiAgICAgICAgIShmaW5pc2hlZFdvcmsuc3RhdGVOb2RlICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ1RoaXMgc2hvdWxkIGhhdmUgYSB0ZXh0IG5vZGUgaW5pdGlhbGl6ZWQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICAgIHZhciB0ZXh0SW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB2YXIgbmV3VGV4dCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAvLyBGb3IgaHlkcmF0aW9uIHdlIHJldXNlIHRoZSB1cGRhdGUgcGF0aCBidXQgd2UgdHJlYXQgdGhlIG9sZFByb3BzXG4gICAgICAgIC8vIGFzIHRoZSBuZXdQcm9wcy4gVGhlIHVwZGF0ZVBheWxvYWQgd2lsbCBjb250YWluIHRoZSByZWFsIGNoYW5nZSBpblxuICAgICAgICAvLyB0aGlzIGNhc2UuXG4gICAgICAgIHZhciBvbGRUZXh0ID0gY3VycmVudCQkMSAhPT0gbnVsbCA/IGN1cnJlbnQkJDEubWVtb2l6ZWRQcm9wcyA6IG5ld1RleHQ7XG4gICAgICAgIGNvbW1pdFRleHRVcGRhdGUodGV4dEluc3RhbmNlLCBvbGRUZXh0LCBuZXdUZXh0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIFByb2ZpbGVyOlxuICAgICAge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIG5ld1N0YXRlID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG5cbiAgICAgICAgdmFyIG5ld0RpZFRpbWVvdXQgPSB2b2lkIDA7XG4gICAgICAgIHZhciBwcmltYXJ5Q2hpbGRQYXJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGlmIChuZXdTdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIG5ld0RpZFRpbWVvdXQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdEaWRUaW1lb3V0ID0gdHJ1ZTtcbiAgICAgICAgICBwcmltYXJ5Q2hpbGRQYXJlbnQgPSBmaW5pc2hlZFdvcmsuY2hpbGQ7XG4gICAgICAgICAgaWYgKG5ld1N0YXRlLnRpbWVkT3V0QXQgPT09IE5vV29yaykge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNoaWxkcmVuIGhhZCBub3QgYWxyZWFkeSB0aW1lZCBvdXQsIHJlY29yZCB0aGUgdGltZS5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdXNlZCB0byBjb21wdXRlIHRoZSBlbGFwc2VkIHRpbWUgZHVyaW5nIHN1YnNlcXVlbnRcbiAgICAgICAgICAgIC8vIGF0dGVtcHRzIHRvIHJlbmRlciB0aGUgY2hpbGRyZW4uXG4gICAgICAgICAgICBuZXdTdGF0ZS50aW1lZE91dEF0ID0gcmVxdWVzdEN1cnJlbnRUaW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByaW1hcnlDaGlsZFBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgIGhpZGVPclVuaGlkZUFsbENoaWxkcmVuKHByaW1hcnlDaGlsZFBhcmVudCwgbmV3RGlkVGltZW91dCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGlzIGJvdW5kYXJ5IGp1c3QgdGltZWQgb3V0LCB0aGVuIGl0IHdpbGwgaGF2ZSBhIHNldCBvZiB0aGVuYWJsZXMuXG4gICAgICAgIC8vIEZvciBlYWNoIHRoZW5hYmxlLCBhdHRhY2ggYSBsaXN0ZW5lciBzbyB0aGF0IHdoZW4gaXQgcmVzb2x2ZXMsIFJlYWN0XG4gICAgICAgIC8vIGF0dGVtcHRzIHRvIHJlLXJlbmRlciB0aGUgYm91bmRhcnkgaW4gdGhlIHByaW1hcnkgKHByZS10aW1lb3V0KSBzdGF0ZS5cbiAgICAgICAgdmFyIHRoZW5hYmxlcyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgICAgICAgaWYgKHRoZW5hYmxlcyAhPT0gbnVsbCkge1xuICAgICAgICAgIGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGw7XG4gICAgICAgICAgdmFyIHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICAgIGlmIChyZXRyeUNhY2hlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IG5ldyBQb3NzaWJseVdlYWtTZXQkMSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGVuYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAodGhlbmFibGUpIHtcbiAgICAgICAgICAgIC8vIE1lbW9pemUgdXNpbmcgdGhlIGJvdW5kYXJ5IGZpYmVyIHRvIHByZXZlbnQgcmVkdW5kYW50IGxpc3RlbmVycy5cbiAgICAgICAgICAgIHZhciByZXRyeSA9IHJldHJ5VGltZWRPdXRCb3VuZGFyeS5iaW5kKG51bGwsIGZpbmlzaGVkV29yaywgdGhlbmFibGUpO1xuICAgICAgICAgICAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICAgICAgICAgICAgcmV0cnkgPSB0cmFjaW5nLnVuc3RhYmxlX3dyYXAocmV0cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyZXRyeUNhY2hlLmhhcyh0aGVuYWJsZSkpIHtcbiAgICAgICAgICAgICAgcmV0cnlDYWNoZS5hZGQodGhlbmFibGUpO1xuICAgICAgICAgICAgICB0aGVuYWJsZS50aGVuKHJldHJ5LCByZXRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdUaGlzIHVuaXQgb2Ygd29yayB0YWcgc2hvdWxkIG5vdCBoYXZlIHNpZGUtZWZmZWN0cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRSZXNldFRleHRDb250ZW50KGN1cnJlbnQkJDEpIHtcbiAgaWYgKCFzdXBwb3J0c011dGF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJlc2V0VGV4dENvbnRlbnQoY3VycmVudCQkMS5zdGF0ZU5vZGUpO1xufVxuXG52YXIgUG9zc2libHlXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbicgPyBXZWFrU2V0IDogU2V0O1xudmFyIFBvc3NpYmx5V2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nID8gV2Vha01hcCA6IE1hcDtcblxuZnVuY3Rpb24gY3JlYXRlUm9vdEVycm9yVXBkYXRlKGZpYmVyLCBlcnJvckluZm8sIGV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciB1cGRhdGUgPSBjcmVhdGVVcGRhdGUoZXhwaXJhdGlvblRpbWUpO1xuICAvLyBVbm1vdW50IHRoZSByb290IGJ5IHJlbmRlcmluZyBudWxsLlxuICB1cGRhdGUudGFnID0gQ2FwdHVyZVVwZGF0ZTtcbiAgLy8gQ2F1dGlvbjogUmVhY3QgRGV2VG9vbHMgY3VycmVudGx5IGRlcGVuZHMgb24gdGhpcyBwcm9wZXJ0eVxuICAvLyBiZWluZyBjYWxsZWQgXCJlbGVtZW50XCIuXG4gIHVwZGF0ZS5wYXlsb2FkID0geyBlbGVtZW50OiBudWxsIH07XG4gIHZhciBlcnJvciA9IGVycm9ySW5mby52YWx1ZTtcbiAgdXBkYXRlLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgIG9uVW5jYXVnaHRFcnJvcihlcnJvcik7XG4gICAgbG9nRXJyb3IoZmliZXIsIGVycm9ySW5mbyk7XG4gIH07XG4gIHJldHVybiB1cGRhdGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUoZmliZXIsIGVycm9ySW5mbywgZXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShleHBpcmF0aW9uVGltZSk7XG4gIHVwZGF0ZS50YWcgPSBDYXB0dXJlVXBkYXRlO1xuICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID0gZmliZXIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7XG4gIGlmICh0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGVycm9yID0gZXJyb3JJbmZvLnZhbHVlO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcik7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBpbnN0ID0gZmliZXIuc3RhdGVOb2RlO1xuICBpZiAoaW5zdCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5zdC5jb21wb25lbnREaWRDYXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHVwZGF0ZS5jYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gVG8gcHJlc2VydmUgdGhlIHByZWV4aXN0aW5nIHJldHJ5IGJlaGF2aW9yIG9mIGVycm9yIGJvdW5kYXJpZXMsXG4gICAgICAgIC8vIHdlIGtlZXAgdHJhY2sgb2Ygd2hpY2ggb25lcyBhbHJlYWR5IGZhaWxlZCBkdXJpbmcgdGhpcyBiYXRjaC5cbiAgICAgICAgLy8gVGhpcyBnZXRzIHJlc2V0IGJlZm9yZSB3ZSB5aWVsZCBiYWNrIHRvIHRoZSBicm93c2VyLlxuICAgICAgICAvLyBUT0RPOiBXYXJuIGluIHN0cmljdCBtb2RlIGlmIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciBpc1xuICAgICAgICAvLyBub3QgZGVmaW5lZC5cbiAgICAgICAgbWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZCh0aGlzKTtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IGVycm9ySW5mby52YWx1ZTtcbiAgICAgIHZhciBzdGFjayA9IGVycm9ySW5mby5zdGFjaztcbiAgICAgIGxvZ0Vycm9yKGZpYmVyLCBlcnJvckluZm8pO1xuICAgICAgdGhpcy5jb21wb25lbnREaWRDYXRjaChlcnJvciwge1xuICAgICAgICBjb21wb25lbnRTdGFjazogc3RhY2sgIT09IG51bGwgPyBzdGFjayA6ICcnXG4gICAgICB9KTtcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBJZiBjb21wb25lbnREaWRDYXRjaCBpcyB0aGUgb25seSBlcnJvciBib3VuZGFyeSBtZXRob2QgZGVmaW5lZCxcbiAgICAgICAgICAvLyB0aGVuIGl0IG5lZWRzIHRvIGNhbGwgc2V0U3RhdGUgdG8gcmVjb3ZlciBmcm9tIGVycm9ycy5cbiAgICAgICAgICAvLyBJZiBubyBzdGF0ZSB1cGRhdGUgaXMgc2NoZWR1bGVkIHRoZW4gdGhlIGJvdW5kYXJ5IHdpbGwgc3dhbGxvdyB0aGUgZXJyb3IuXG4gICAgICAgICAgIShmaWJlci5leHBpcmF0aW9uVGltZSA9PT0gU3luYykgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclczogRXJyb3IgYm91bmRhcmllcyBzaG91bGQgaW1wbGVtZW50IGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcigpLiAnICsgJ0luIHRoYXQgbWV0aG9kLCByZXR1cm4gYSBzdGF0ZSB1cGRhdGUgdG8gZGlzcGxheSBhbiBlcnJvciBtZXNzYWdlIG9yIGZhbGxiYWNrIFVJLicsIGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ1Vua25vd24nKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZTtcbn1cblxuZnVuY3Rpb24gYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHJlbmRlckV4cGlyYXRpb25UaW1lLCB0aGVuYWJsZSkge1xuICAvLyBBdHRhY2ggYSBsaXN0ZW5lciB0byB0aGUgcHJvbWlzZSB0byBcInBpbmdcIiB0aGUgcm9vdCBhbmQgcmV0cnkuIEJ1dFxuICAvLyBvbmx5IGlmIG9uZSBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0IGZvciB0aGUgY3VycmVudCByZW5kZXIgZXhwaXJhdGlvblxuICAvLyB0aW1lICh3aGljaCBhY3RzIGxpa2UgYSBcInRocmVhZCBJRFwiIGhlcmUpLlxuICB2YXIgcGluZ0NhY2hlID0gcm9vdC5waW5nQ2FjaGU7XG4gIHZhciB0aHJlYWRJRHMgPSB2b2lkIDA7XG4gIGlmIChwaW5nQ2FjaGUgPT09IG51bGwpIHtcbiAgICBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtNYXAoKTtcbiAgICB0aHJlYWRJRHMgPSBuZXcgU2V0KCk7XG4gICAgcGluZ0NhY2hlLnNldCh0aGVuYWJsZSwgdGhyZWFkSURzKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJlYWRJRHMgPSBwaW5nQ2FjaGUuZ2V0KHRoZW5hYmxlKTtcbiAgICBpZiAodGhyZWFkSURzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocmVhZElEcyA9IG5ldyBTZXQoKTtcbiAgICAgIHBpbmdDYWNoZS5zZXQodGhlbmFibGUsIHRocmVhZElEcyk7XG4gICAgfVxuICB9XG4gIGlmICghdGhyZWFkSURzLmhhcyhyZW5kZXJFeHBpcmF0aW9uVGltZSkpIHtcbiAgICAvLyBNZW1vaXplIHVzaW5nIHRoZSB0aHJlYWQgSUQgdG8gcHJldmVudCByZWR1bmRhbnQgbGlzdGVuZXJzLlxuICAgIHRocmVhZElEcy5hZGQocmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIHZhciBwaW5nID0gcGluZ1N1c3BlbmRlZFJvb3QuYmluZChudWxsLCByb290LCB0aGVuYWJsZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIGlmIChlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gICAgICBwaW5nID0gdHJhY2luZy51bnN0YWJsZV93cmFwKHBpbmcpO1xuICAgIH1cbiAgICB0aGVuYWJsZS50aGVuKHBpbmcsIHBpbmcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKHJvb3QsIHJldHVybkZpYmVyLCBzb3VyY2VGaWJlciwgdmFsdWUsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIFRoZSBzb3VyY2UgZmliZXIgZGlkIG5vdCBjb21wbGV0ZS5cbiAgc291cmNlRmliZXIuZWZmZWN0VGFnIHw9IEluY29tcGxldGU7XG4gIC8vIEl0cyBlZmZlY3QgbGlzdCBpcyBubyBsb25nZXIgdmFsaWQuXG4gIHNvdXJjZUZpYmVyLmZpcnN0RWZmZWN0ID0gc291cmNlRmliZXIubGFzdEVmZmVjdCA9IG51bGw7XG5cbiAgaWYgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBUaGlzIGlzIGEgdGhlbmFibGUuXG4gICAgdmFyIHRoZW5hYmxlID0gdmFsdWU7XG5cbiAgICAvLyBGaW5kIHRoZSBlYXJsaWVzdCB0aW1lb3V0IHRocmVzaG9sZCBvZiBhbGwgdGhlIHBsYWNlaG9sZGVycyBpbiB0aGVcbiAgICAvLyBhbmNlc3RvciBwYXRoLiBXZSBjb3VsZCBhdm9pZCB0aGlzIHRyYXZlcnNhbCBieSBzdG9yaW5nIHRoZSB0aHJlc2hvbGRzIG9uXG4gICAgLy8gdGhlIHN0YWNrLCBidXQgd2UgY2hvb3NlIG5vdCB0byBiZWNhdXNlIHdlIG9ubHkgaGl0IHRoaXMgcGF0aCBpZiB3ZSdyZVxuICAgIC8vIElPLWJvdW5kIChpLmUuIGlmIHNvbWV0aGluZyBzdXNwZW5kcykuIFdoZXJlYXMgdGhlIHN0YWNrIGlzIHVzZWQgZXZlbiBpblxuICAgIC8vIHRoZSBub24tSU8tIGJvdW5kIGNhc2UuXG4gICAgdmFyIF93b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyO1xuICAgIHZhciBlYXJsaWVzdFRpbWVvdXRNcyA9IC0xO1xuICAgIHZhciBzdGFydFRpbWVNcyA9IC0xO1xuICAgIGRvIHtcbiAgICAgIGlmIChfd29ya0luUHJvZ3Jlc3MudGFnID09PSBTdXNwZW5zZUNvbXBvbmVudCkge1xuICAgICAgICB2YXIgY3VycmVudCQkMSA9IF93b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gICAgICAgIGlmIChjdXJyZW50JCQxICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnQkJDEubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICBpZiAoY3VycmVudFN0YXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBSZWFjaGVkIGEgYm91bmRhcnkgdGhhdCBhbHJlYWR5IHRpbWVkIG91dC4gRG8gbm90IHNlYXJjaFxuICAgICAgICAgICAgLy8gYW55IGZ1cnRoZXIuXG4gICAgICAgICAgICB2YXIgdGltZWRPdXRBdCA9IGN1cnJlbnRTdGF0ZS50aW1lZE91dEF0O1xuICAgICAgICAgICAgc3RhcnRUaW1lTXMgPSBleHBpcmF0aW9uVGltZVRvTXModGltZWRPdXRBdCk7XG4gICAgICAgICAgICAvLyBEbyBub3Qgc2VhcmNoIGFueSBmdXJ0aGVyLlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB0aW1lb3V0UHJvcE1zID0gX3dvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtcbiAgICAgICAgaWYgKHR5cGVvZiB0aW1lb3V0UHJvcE1zID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGlmICh0aW1lb3V0UHJvcE1zIDw9IDApIHtcbiAgICAgICAgICAgIGVhcmxpZXN0VGltZW91dE1zID0gMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGVhcmxpZXN0VGltZW91dE1zID09PSAtMSB8fCB0aW1lb3V0UHJvcE1zIDwgZWFybGllc3RUaW1lb3V0TXMpIHtcbiAgICAgICAgICAgIGVhcmxpZXN0VGltZW91dE1zID0gdGltZW91dFByb3BNcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIElmIHRoZXJlIGlzIGEgRGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50IHdlIGRvbid0IGhhdmUgdG8gZG8gYW55dGhpbmcgYmVjYXVzZVxuICAgICAgLy8gaWYgc29tZXRoaW5nIHN1c3BlbmRzIGluc2lkZSBpdCwgd2Ugd2lsbCBzaW1wbHkgbGVhdmUgdGhhdCBhcyBkZWh5ZHJhdGVkLiBJdFxuICAgICAgLy8gd2lsbCBuZXZlciB0aW1lb3V0LlxuICAgICAgX3dvcmtJblByb2dyZXNzID0gX3dvcmtJblByb2dyZXNzLnJldHVybjtcbiAgICB9IHdoaWxlIChfd29ya0luUHJvZ3Jlc3MgIT09IG51bGwpO1xuXG4gICAgLy8gU2NoZWR1bGUgdGhlIG5lYXJlc3QgU3VzcGVuc2UgdG8gcmUtcmVuZGVyIHRoZSB0aW1lZCBvdXQgdmlldy5cbiAgICBfd29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlcjtcbiAgICBkbyB7XG4gICAgICBpZiAoX3dvcmtJblByb2dyZXNzLnRhZyA9PT0gU3VzcGVuc2VDb21wb25lbnQgJiYgc2hvdWxkQ2FwdHVyZVN1c3BlbnNlKF93b3JrSW5Qcm9ncmVzcykpIHtcbiAgICAgICAgLy8gRm91bmQgdGhlIG5lYXJlc3QgYm91bmRhcnkuXG5cbiAgICAgICAgLy8gU3Rhc2ggdGhlIHByb21pc2Ugb24gdGhlIGJvdW5kYXJ5IGZpYmVyLiBJZiB0aGUgYm91bmRhcnkgdGltZXMgb3V0LCB3ZSdsbFxuICAgICAgICB2YXIgdGhlbmFibGVzID0gX3dvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgICAgICBpZiAodGhlbmFibGVzID09PSBudWxsKSB7XG4gICAgICAgICAgdmFyIHVwZGF0ZVF1ZXVlID0gbmV3IFNldCgpO1xuICAgICAgICAgIHVwZGF0ZVF1ZXVlLmFkZCh0aGVuYWJsZSk7XG4gICAgICAgICAgX3dvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gdXBkYXRlUXVldWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhlbmFibGVzLmFkZCh0aGVuYWJsZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgYm91bmRhcnkgaXMgb3V0c2lkZSBvZiBjb25jdXJyZW50IG1vZGUsIHdlIHNob3VsZCAqbm90KlxuICAgICAgICAvLyBzdXNwZW5kIHRoZSBjb21taXQuIFByZXRlbmQgYXMgaWYgdGhlIHN1c3BlbmRlZCBjb21wb25lbnQgcmVuZGVyZWRcbiAgICAgICAgLy8gbnVsbCBhbmQga2VlcCByZW5kZXJpbmcuIEluIHRoZSBjb21taXQgcGhhc2UsIHdlJ2xsIHNjaGVkdWxlIGFcbiAgICAgICAgLy8gc3Vic2VxdWVudCBzeW5jaHJvbm91cyB1cGRhdGUgdG8gcmUtcmVuZGVyIHRoZSBTdXNwZW5zZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gTm90ZTogSXQgZG9lc24ndCBtYXR0ZXIgd2hldGhlciB0aGUgY29tcG9uZW50IHRoYXQgc3VzcGVuZGVkIHdhc1xuICAgICAgICAvLyBpbnNpZGUgYSBjb25jdXJyZW50IG1vZGUgdHJlZS4gSWYgdGhlIFN1c3BlbnNlIGlzIG91dHNpZGUgb2YgaXQsIHdlXG4gICAgICAgIC8vIHNob3VsZCAqbm90KiBzdXNwZW5kIHRoZSBjb21taXQuXG4gICAgICAgIGlmICgoX3dvcmtJblByb2dyZXNzLm1vZGUgJiBDb25jdXJyZW50TW9kZSkgPT09IE5vRWZmZWN0KSB7XG4gICAgICAgICAgX3dvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBEaWRDYXB0dXJlO1xuXG4gICAgICAgICAgLy8gV2UncmUgZ29pbmcgdG8gY29tbWl0IHRoaXMgZmliZXIgZXZlbiB0aG91Z2ggaXQgZGlkbid0IGNvbXBsZXRlLlxuICAgICAgICAgIC8vIEJ1dCB3ZSBzaG91bGRuJ3QgY2FsbCBhbnkgbGlmZWN5Y2xlIG1ldGhvZHMgb3IgY2FsbGJhY2tzLiBSZW1vdmVcbiAgICAgICAgICAvLyBhbGwgbGlmZWN5Y2xlIGVmZmVjdCB0YWdzLlxuICAgICAgICAgIHNvdXJjZUZpYmVyLmVmZmVjdFRhZyAmPSB+KExpZmVjeWNsZUVmZmVjdE1hc2sgfCBJbmNvbXBsZXRlKTtcblxuICAgICAgICAgIGlmIChzb3VyY2VGaWJlci50YWcgPT09IENsYXNzQ29tcG9uZW50KSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFNvdXJjZUZpYmVyID0gc291cmNlRmliZXIuYWx0ZXJuYXRlO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTb3VyY2VGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbmV3IG1vdW50LiBDaGFuZ2UgdGhlIHRhZyBzbyBpdCdzIG5vdCBtaXN0YWtlbiBmb3IgYVxuICAgICAgICAgICAgICAvLyBjb21wbGV0ZWQgY2xhc3MgY29tcG9uZW50LiBGb3IgZXhhbXBsZSwgd2Ugc2hvdWxkIG5vdCBjYWxsXG4gICAgICAgICAgICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGlmIGl0IGlzIGRlbGV0ZWQuXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyLnRhZyA9IEluY29tcGxldGVDbGFzc0NvbXBvbmVudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFdoZW4gd2UgdHJ5IHJlbmRlcmluZyBhZ2Fpbiwgd2Ugc2hvdWxkIG5vdCByZXVzZSB0aGUgY3VycmVudCBmaWJlcixcbiAgICAgICAgICAgICAgLy8gc2luY2UgaXQncyBrbm93biB0byBiZSBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFVzZSBhIGZvcmNlIHVwZHRlIHRvXG4gICAgICAgICAgICAgIC8vIHByZXZlbnQgYSBiYWlsIG91dC5cbiAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShTeW5jKTtcbiAgICAgICAgICAgICAgdXBkYXRlLnRhZyA9IEZvcmNlVXBkYXRlO1xuICAgICAgICAgICAgICBlbnF1ZXVlVXBkYXRlKHNvdXJjZUZpYmVyLCB1cGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBzb3VyY2UgZmliZXIgZGlkIG5vdCBjb21wbGV0ZS4gTWFyayBpdCB3aXRoIFN5bmMgcHJpb3JpdHkgdG9cbiAgICAgICAgICAvLyBpbmRpY2F0ZSB0aGF0IGl0IHN0aWxsIGhhcyBwZW5kaW5nIHdvcmsuXG4gICAgICAgICAgc291cmNlRmliZXIuZXhwaXJhdGlvblRpbWUgPSBTeW5jO1xuXG4gICAgICAgICAgLy8gRXhpdCB3aXRob3V0IHN1c3BlbmRpbmcuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29uZmlybWVkIHRoYXQgdGhlIGJvdW5kYXJ5IGlzIGluIGEgY29uY3VycmVudCBtb2RlIHRyZWUuIENvbnRpbnVlXG4gICAgICAgIC8vIHdpdGggdGhlIG5vcm1hbCBzdXNwZW5kIHBhdGguXG5cbiAgICAgICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHJlbmRlckV4cGlyYXRpb25UaW1lLCB0aGVuYWJsZSk7XG5cbiAgICAgICAgdmFyIGFic29sdXRlVGltZW91dE1zID0gdm9pZCAwO1xuICAgICAgICBpZiAoZWFybGllc3RUaW1lb3V0TXMgPT09IC0xKSB7XG4gICAgICAgICAgLy8gSWYgbm8gZXhwbGljaXQgdGhyZXNob2xkIGlzIGdpdmVuLCBkZWZhdWx0IHRvIGFuIGFyYml0cmFyaWx5IGxhcmdlXG4gICAgICAgICAgLy8gdmFsdWUuIFRoZSBhY3R1YWwgc2l6ZSBkb2Vzbid0IG1hdHRlciBiZWNhdXNlIHRoZSB0aHJlc2hvbGQgZm9yIHRoZVxuICAgICAgICAgIC8vIHdob2xlIHRyZWUgd2lsbCBiZSBjbGFtcGVkIHRvIHRoZSBleHBpcmF0aW9uIHRpbWUuXG4gICAgICAgICAgYWJzb2x1dGVUaW1lb3V0TXMgPSBtYXhTaWduZWQzMUJpdEludDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc3RhcnRUaW1lTXMgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHN1c3BlbmQgaGFwcGVuZWQgb3V0c2lkZSBvZiBhbnkgYWxyZWFkeSB0aW1lZC1vdXRcbiAgICAgICAgICAgIC8vIHBsYWNlaG9sZGVycy4gV2UgZG9uJ3Qga25vdyBleGFjdGx5IHdoZW4gdGhlIHVwZGF0ZSB3YXNcbiAgICAgICAgICAgIC8vIHNjaGVkdWxlZCwgYnV0IHdlIGNhbiBpbmZlciBhbiBhcHByb3hpbWF0ZSBzdGFydCB0aW1lIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBleHBpcmF0aW9uIHRpbWUuIEZpcnN0LCBmaW5kIHRoZSBlYXJsaWVzdCB1bmNvbW1pdHRlZCBleHBpcmF0aW9uXG4gICAgICAgICAgICAvLyB0aW1lIGluIHRoZSB0cmVlLCBpbmNsdWRpbmcgd29yayB0aGF0IGlzIHN1c3BlbmRlZC4gVGhlbiBzdWJ0cmFjdFxuICAgICAgICAgICAgLy8gdGhlIG9mZnNldCB1c2VkIHRvIGNvbXB1dGUgYW4gYXN5bmMgdXBkYXRlJ3MgZXhwaXJhdGlvbiB0aW1lLlxuICAgICAgICAgICAgLy8gVGhpcyB3aWxsIGNhdXNlIGhpZ2ggcHJpb3JpdHkgKGludGVyYWN0aXZlKSB3b3JrIHRvIGV4cGlyZVxuICAgICAgICAgICAgLy8gZWFybGllciB0aGFuIG5lY2Vzc2FyeSwgYnV0IHdlIGNhbiBhY2NvdW50IGZvciB0aGlzIGJ5IGFkanVzdGluZ1xuICAgICAgICAgICAgLy8gZm9yIHRoZSBKdXN0IE5vdGljZWFibGUgRGlmZmVyZW5jZS5cbiAgICAgICAgICAgIHZhciBlYXJsaWVzdEV4cGlyYXRpb25UaW1lID0gZmluZEVhcmxpZXN0T3V0c3RhbmRpbmdQcmlvcml0eUxldmVsKHJvb3QsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICAgIHZhciBlYXJsaWVzdEV4cGlyYXRpb25UaW1lTXMgPSBleHBpcmF0aW9uVGltZVRvTXMoZWFybGllc3RFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICBzdGFydFRpbWVNcyA9IGVhcmxpZXN0RXhwaXJhdGlvblRpbWVNcyAtIExPV19QUklPUklUWV9FWFBJUkFUSU9OO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhYnNvbHV0ZVRpbWVvdXRNcyA9IHN0YXJ0VGltZU1zICsgZWFybGllc3RUaW1lb3V0TXM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNYXJrIHRoZSBlYXJsaWVzdCB0aW1lb3V0IGluIHRoZSBzdXNwZW5kZWQgZmliZXIncyBhbmNlc3RvciBwYXRoLlxuICAgICAgICAvLyBBZnRlciBjb21wbGV0aW5nIHRoZSByb290LCB3ZSdsbCB0YWtlIHRoZSBsYXJnZXN0IG9mIGFsbCB0aGVcbiAgICAgICAgLy8gc3VzcGVuZGVkIGZpYmVyJ3MgdGltZW91dHMgYW5kIHVzZSBpdCB0byBjb21wdXRlIGEgdGltZW91dCBmb3IgdGhlXG4gICAgICAgIC8vIHdob2xlIHRyZWUuXG4gICAgICAgIHJlbmRlckRpZFN1c3BlbmQocm9vdCwgYWJzb2x1dGVUaW1lb3V0TXMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcblxuICAgICAgICBfd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFNob3VsZENhcHR1cmU7XG4gICAgICAgIF93b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IHJlbmRlckV4cGlyYXRpb25UaW1lO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGVuYWJsZVN1c3BlbnNlU2VydmVyUmVuZGVyZXIgJiYgX3dvcmtJblByb2dyZXNzLnRhZyA9PT0gRGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50KSB7XG4gICAgICAgIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCByZW5kZXJFeHBpcmF0aW9uVGltZSwgdGhlbmFibGUpO1xuXG4gICAgICAgIC8vIFNpbmNlIHdlIGFscmVhZHkgaGF2ZSBhIGN1cnJlbnQgZmliZXIsIHdlIGNhbiBlYWdlcmx5IGFkZCBhIHJldHJ5IGxpc3RlbmVyLlxuICAgICAgICB2YXIgcmV0cnlDYWNoZSA9IF93b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICBpZiAocmV0cnlDYWNoZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHJ5Q2FjaGUgPSBfd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5ldyBQb3NzaWJseVdlYWtTZXQoKTtcbiAgICAgICAgICB2YXIgX2N1cnJlbnQgPSBfd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuICAgICAgICAgICFfY3VycmVudCA/IGludmFyaWFudChmYWxzZSwgJ0EgZGVoeWRyYXRlZCBzdXNwZW5zZSBib3VuZGFyeSBtdXN0IGNvbW1pdCBiZWZvcmUgdHJ5aW5nIHRvIHJlbmRlci4gVGhpcyBpcyBwcm9iYWJseSBhIGJ1ZyBpbiBSZWFjdC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICBfY3VycmVudC5tZW1vaXplZFN0YXRlID0gcmV0cnlDYWNoZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNZW1vaXplIHVzaW5nIHRoZSBib3VuZGFyeSBmaWJlciB0byBwcmV2ZW50IHJlZHVuZGFudCBsaXN0ZW5lcnMuXG4gICAgICAgIGlmICghcmV0cnlDYWNoZS5oYXModGhlbmFibGUpKSB7XG4gICAgICAgICAgcmV0cnlDYWNoZS5hZGQodGhlbmFibGUpO1xuICAgICAgICAgIHZhciByZXRyeSA9IHJldHJ5VGltZWRPdXRCb3VuZGFyeS5iaW5kKG51bGwsIF93b3JrSW5Qcm9ncmVzcywgdGhlbmFibGUpO1xuICAgICAgICAgIGlmIChlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gICAgICAgICAgICByZXRyeSA9IHRyYWNpbmcudW5zdGFibGVfd3JhcChyZXRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoZW5hYmxlLnRoZW4ocmV0cnksIHJldHJ5KTtcbiAgICAgICAgfVxuICAgICAgICBfd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFNob3VsZENhcHR1cmU7XG4gICAgICAgIF93b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IHJlbmRlckV4cGlyYXRpb25UaW1lO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBUaGlzIGJvdW5kYXJ5IGFscmVhZHkgY2FwdHVyZWQgZHVyaW5nIHRoaXMgcmVuZGVyLiBDb250aW51ZSB0byB0aGUgbmV4dFxuICAgICAgLy8gYm91bmRhcnkuXG4gICAgICBfd29ya0luUHJvZ3Jlc3MgPSBfd29ya0luUHJvZ3Jlc3MucmV0dXJuO1xuICAgIH0gd2hpbGUgKF93b3JrSW5Qcm9ncmVzcyAhPT0gbnVsbCk7XG4gICAgLy8gTm8gYm91bmRhcnkgd2FzIGZvdW5kLiBGYWxsdGhyb3VnaCB0byBlcnJvciBtb2RlLlxuICAgIC8vIFRPRE86IFVzZSBpbnZhcmlhbnQgc28gdGhlIG1lc3NhZ2UgaXMgc3RyaXBwZWQgaW4gcHJvZD9cbiAgICB2YWx1ZSA9IG5ldyBFcnJvcigoZ2V0Q29tcG9uZW50TmFtZShzb3VyY2VGaWJlci50eXBlKSB8fCAnQSBSZWFjdCBjb21wb25lbnQnKSArICcgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuJyArICdcXG4nICsgJ0FkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gJyArICdwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS4nICsgZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHNvdXJjZUZpYmVyKSk7XG4gIH1cblxuICAvLyBXZSBkaWRuJ3QgZmluZCBhIGJvdW5kYXJ5IHRoYXQgY291bGQgaGFuZGxlIHRoaXMgdHlwZSBvZiBleGNlcHRpb24uIFN0YXJ0XG4gIC8vIG92ZXIgYW5kIHRyYXZlcnNlIHBhcmVudCBwYXRoIGFnYWluLCB0aGlzIHRpbWUgdHJlYXRpbmcgdGhlIGV4Y2VwdGlvblxuICAvLyBhcyBhbiBlcnJvci5cbiAgcmVuZGVyRGlkRXJyb3IoKTtcbiAgdmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlKHZhbHVlLCBzb3VyY2VGaWJlcik7XG4gIHZhciB3b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyO1xuICBkbyB7XG4gICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2Vycm9ySW5mbyA9IHZhbHVlO1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBTaG91bGRDYXB0dXJlO1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgdmFyIF91cGRhdGUgPSBjcmVhdGVSb290RXJyb3JVcGRhdGUod29ya0luUHJvZ3Jlc3MsIF9lcnJvckluZm8sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUod29ya0luUHJvZ3Jlc3MsIF91cGRhdGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAgLy8gQ2FwdHVyZSBhbmQgcmV0cnlcbiAgICAgICAgdmFyIGVycm9ySW5mbyA9IHZhbHVlO1xuICAgICAgICB2YXIgY3RvciA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgJiBEaWRDYXB0dXJlKSA9PT0gTm9FZmZlY3QgJiYgKHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9PT0gJ2Z1bmN0aW9uJyB8fCBpbnN0YW5jZSAhPT0gbnVsbCAmJiB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggPT09ICdmdW5jdGlvbicgJiYgIWlzQWxyZWFkeUZhaWxlZExlZ2FjeUVycm9yQm91bmRhcnkoaW5zdGFuY2UpKSkge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBTaG91bGRDYXB0dXJlO1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgLy8gU2NoZWR1bGUgdGhlIGVycm9yIGJvdW5kYXJ5IHRvIHJlLXJlbmRlciB1c2luZyB1cGRhdGVkIHN0YXRlXG4gICAgICAgICAgdmFyIF91cGRhdGUyID0gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgZXJyb3JJbmZvLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHdvcmtJblByb2dyZXNzLCBfdXBkYXRlMik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MucmV0dXJuO1xuICB9IHdoaWxlICh3b3JrSW5Qcm9ncmVzcyAhPT0gbnVsbCk7XG59XG5cbmZ1bmN0aW9uIHVud2luZFdvcmsod29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIENvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICAgICAgcG9wQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVmZmVjdFRhZyA9IHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZztcbiAgICAgICAgaWYgKGVmZmVjdFRhZyAmIFNob3VsZENhcHR1cmUpIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgPSBlZmZlY3RUYWcgJiB+U2hvdWxkQ2FwdHVyZSB8IERpZENhcHR1cmU7XG4gICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICB7XG4gICAgICAgIHBvcEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBwb3BUb3BMZXZlbENvbnRleHRPYmplY3Qod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB2YXIgX2VmZmVjdFRhZyA9IHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZztcbiAgICAgICAgISgoX2VmZmVjdFRhZyAmIERpZENhcHR1cmUpID09PSBOb0VmZmVjdCkgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGUgcm9vdCBmYWlsZWQgdG8gdW5tb3VudCBhZnRlciBhbiBlcnJvci4gVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgPSBfZWZmZWN0VGFnICYgflNob3VsZENhcHR1cmUgfCBEaWRDYXB0dXJlO1xuICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAge1xuICAgICAgICAvLyBUT0RPOiBwb3BIeWRyYXRpb25TdGF0ZVxuICAgICAgICBwb3BIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIGNhc2UgU3VzcGVuc2VDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBfZWZmZWN0VGFnMiA9IHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZztcbiAgICAgICAgaWYgKF9lZmZlY3RUYWcyICYgU2hvdWxkQ2FwdHVyZSkge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyA9IF9lZmZlY3RUYWcyICYgflNob3VsZENhcHR1cmUgfCBEaWRDYXB0dXJlO1xuICAgICAgICAgIC8vIENhcHR1cmVkIGEgc3VzcGVuc2UgZWZmZWN0LiBSZS1yZW5kZXIgdGhlIGJvdW5kYXJ5LlxuICAgICAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICBjYXNlIERlaHlkcmF0ZWRTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgaWYgKGVuYWJsZVN1c3BlbnNlU2VydmVyUmVuZGVyZXIpIHtcbiAgICAgICAgICAvLyBUT0RPOiBwb3BIeWRyYXRpb25TdGF0ZVxuICAgICAgICAgIHZhciBfZWZmZWN0VGFnMyA9IHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZztcbiAgICAgICAgICBpZiAoX2VmZmVjdFRhZzMgJiBTaG91bGRDYXB0dXJlKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgPSBfZWZmZWN0VGFnMyAmIH5TaG91bGRDYXB0dXJlIHwgRGlkQ2FwdHVyZTtcbiAgICAgICAgICAgIC8vIENhcHR1cmVkIGEgc3VzcGVuc2UgZWZmZWN0LiBSZS1yZW5kZXIgdGhlIGJvdW5kYXJ5LlxuICAgICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgcG9wUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVud2luZEludGVycnVwdGVkV29yayhpbnRlcnJ1cHRlZFdvcmspIHtcbiAgc3dpdGNoIChpbnRlcnJ1cHRlZFdvcmsudGFnKSB7XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gaW50ZXJydXB0ZWRXb3JrLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgICAgIGlmIChjaGlsZENvbnRleHRUeXBlcyAhPT0gbnVsbCAmJiBjaGlsZENvbnRleHRUeXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcG9wQ29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICB7XG4gICAgICAgIHBvcEhvc3RDb250YWluZXIoaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgICAgcG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0KGludGVycnVwdGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcG9wSG9zdENvbnRleHQoaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgcG9wSG9zdENvbnRhaW5lcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICBwb3BQcm92aWRlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcbnZhciBSZWFjdEN1cnJlbnRPd25lciQyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG5cblxudmFyIGRpZFdhcm5BYm91dFN0YXRlVHJhbnNpdGlvbiA9IHZvaWQgMDtcbnZhciBkaWRXYXJuU2V0U3RhdGVDaGlsZENvbnRleHQgPSB2b2lkIDA7XG52YXIgd2FybkFib3V0VXBkYXRlT25Vbm1vdW50ZWQgPSB2b2lkIDA7XG52YXIgd2FybkFib3V0SW52YWxpZFVwZGF0ZXMgPSB2b2lkIDA7XG5cbmlmIChlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gIC8vIFByb3ZpZGUgZXhwbGljaXQgZXJyb3IgbWVzc2FnZSB3aGVuIHByb2R1Y3Rpb24rcHJvZmlsaW5nIGJ1bmRsZSBvZiBlLmcuIHJlYWN0LWRvbVxuICAvLyBpcyB1c2VkIHdpdGggcHJvZHVjdGlvbiAobm9uLXByb2ZpbGluZykgYnVuZGxlIG9mIHNjaGVkdWxlci90cmFjaW5nXG4gICEodHJhY2luZy5fX2ludGVyYWN0aW9uc1JlZiAhPSBudWxsICYmIHRyYWNpbmcuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudCAhPSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0l0IGlzIG5vdCBzdXBwb3J0ZWQgdG8gcnVuIHRoZSBwcm9maWxpbmcgdmVyc2lvbiBvZiBhIHJlbmRlcmVyIChmb3IgZXhhbXBsZSwgYHJlYWN0LWRvbS9wcm9maWxpbmdgKSB3aXRob3V0IGFsc28gcmVwbGFjaW5nIHRoZSBgc2NoZWR1bGVyL3RyYWNpbmdgIG1vZHVsZSB3aXRoIGBzY2hlZHVsZXIvdHJhY2luZy1wcm9maWxpbmdgLiBZb3VyIGJ1bmRsZXIgbWlnaHQgaGF2ZSBhIHNldHRpbmcgZm9yIGFsaWFzaW5nIGJvdGggbW9kdWxlcy4gTGVhcm4gbW9yZSBhdCBodHRwOi8vZmIubWUvcmVhY3QtcHJvZmlsaW5nJykgOiB2b2lkIDA7XG59XG5cbntcbiAgZGlkV2FybkFib3V0U3RhdGVUcmFuc2l0aW9uID0gZmFsc2U7XG4gIGRpZFdhcm5TZXRTdGF0ZUNoaWxkQ29udGV4dCA9IGZhbHNlO1xuICB2YXIgZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50ID0ge307XG5cbiAgd2FybkFib3V0VXBkYXRlT25Vbm1vdW50ZWQgPSBmdW5jdGlvbiAoZmliZXIsIGlzQ2xhc3MpIHtcbiAgICAvLyBXZSBzaG93IHRoZSB3aG9sZSBzdGFjayBidXQgZGVkdXBlIG9uIHRoZSB0b3AgY29tcG9uZW50J3MgbmFtZSBiZWNhdXNlXG4gICAgLy8gdGhlIHByb2JsZW1hdGljIGNvZGUgYWxtb3N0IGFsd2F5cyBsaWVzIGluc2lkZSB0aGF0IGNvbXBvbmVudC5cbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ1JlYWN0Q29tcG9uZW50JztcbiAgICBpZiAoZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50W2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgXCJDYW4ndCBwZXJmb3JtIGEgUmVhY3Qgc3RhdGUgdXBkYXRlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuIFRoaXMgXCIgKyAnaXMgYSBuby1vcCwgYnV0IGl0IGluZGljYXRlcyBhIG1lbW9yeSBsZWFrIGluIHlvdXIgYXBwbGljYXRpb24uIFRvICcgKyAnZml4LCBjYW5jZWwgYWxsIHN1YnNjcmlwdGlvbnMgYW5kIGFzeW5jaHJvbm91cyB0YXNrcyBpbiAlcy4lcycsIGlzQ2xhc3MgPyAndGhlIGNvbXBvbmVudFdpbGxVbm1vdW50IG1ldGhvZCcgOiAnYSB1c2VFZmZlY3QgY2xlYW51cCBmdW5jdGlvbicsIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChmaWJlcikpO1xuICAgIGRpZFdhcm5TdGF0ZVVwZGF0ZUZvclVubW91bnRlZENvbXBvbmVudFtjb21wb25lbnROYW1lXSA9IHRydWU7XG4gIH07XG5cbiAgd2FybkFib3V0SW52YWxpZFVwZGF0ZXMgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBzd2l0Y2ggKHBoYXNlKSB7XG4gICAgICBjYXNlICdnZXRDaGlsZENvbnRleHQnOlxuICAgICAgICBpZiAoZGlkV2FyblNldFN0YXRlQ2hpbGRDb250ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ3NldFN0YXRlKC4uLik6IENhbm5vdCBjYWxsIHNldFN0YXRlKCkgaW5zaWRlIGdldENoaWxkQ29udGV4dCgpJyk7XG4gICAgICAgIGRpZFdhcm5TZXRTdGF0ZUNoaWxkQ29udGV4dCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVuZGVyJzpcbiAgICAgICAgaWYgKGRpZFdhcm5BYm91dFN0YXRlVHJhbnNpdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdDYW5ub3QgdXBkYXRlIGR1cmluZyBhbiBleGlzdGluZyBzdGF0ZSB0cmFuc2l0aW9uIChzdWNoIGFzIHdpdGhpbiAnICsgJ2ByZW5kZXJgKS4gUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuJyk7XG4gICAgICAgIGRpZFdhcm5BYm91dFN0YXRlVHJhbnNpdGlvbiA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gVXNlZCB0byBlbnN1cmUgY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbiBpcyBtb25vdG9uaWNhbGx5IGRlY3JlYXNpbmcuXG52YXIgbGFzdFVuaXF1ZUFzeW5jRXhwaXJhdGlvbiA9IFN5bmMgLSAxO1xuXG52YXIgaXNXb3JraW5nID0gZmFsc2U7XG5cbi8vIFRoZSBuZXh0IHdvcmsgaW4gcHJvZ3Jlc3MgZmliZXIgdGhhdCB3ZSdyZSBjdXJyZW50bHkgd29ya2luZyBvbi5cbnZhciBuZXh0VW5pdE9mV29yayA9IG51bGw7XG52YXIgbmV4dFJvb3QgPSBudWxsO1xuLy8gVGhlIHRpbWUgYXQgd2hpY2ggd2UncmUgY3VycmVudGx5IHJlbmRlcmluZyB3b3JrLlxudmFyIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbnZhciBuZXh0TGF0ZXN0QWJzb2x1dGVUaW1lb3V0TXMgPSAtMTtcbnZhciBuZXh0UmVuZGVyRGlkRXJyb3IgPSBmYWxzZTtcblxuLy8gVGhlIG5leHQgZmliZXIgd2l0aCBhbiBlZmZlY3QgdGhhdCB3ZSdyZSBjdXJyZW50bHkgY29tbWl0dGluZy5cbnZhciBuZXh0RWZmZWN0ID0gbnVsbDtcblxudmFyIGlzQ29tbWl0dGluZyQxID0gZmFsc2U7XG52YXIgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBudWxsO1xudmFyIHBhc3NpdmVFZmZlY3RDYWxsYmFja0hhbmRsZSA9IG51bGw7XG52YXIgcGFzc2l2ZUVmZmVjdENhbGxiYWNrID0gbnVsbDtcblxudmFyIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbDtcblxuLy8gVXNlZCBmb3IgcGVyZm9ybWFuY2UgdHJhY2tpbmcuXG52YXIgaW50ZXJydXB0ZWRCeSA9IG51bGw7XG5cbnZhciBzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzID0gdm9pZCAwO1xudmFyIHJlcGxheVVuaXRPZldvcmsgPSB2b2lkIDA7XG52YXIgbWF5UmVwbGF5RmFpbGVkVW5pdE9mV29yayA9IHZvaWQgMDtcbnZhciBpc1JlcGxheWluZ0ZhaWxlZFVuaXRPZldvcmsgPSB2b2lkIDA7XG52YXIgb3JpZ2luYWxSZXBsYXlFcnJvciA9IHZvaWQgMDtcbnZhciByZXRocm93T3JpZ2luYWxFcnJvciA9IHZvaWQgMDtcbmlmICh0cnVlICYmIHJlcGxheUZhaWxlZFVuaXRPZldvcmtXaXRoSW52b2tlR3VhcmRlZENhbGxiYWNrKSB7XG4gIHN0YXNoZWRXb3JrSW5Qcm9ncmVzc1Byb3BlcnRpZXMgPSBudWxsO1xuICBtYXlSZXBsYXlGYWlsZWRVbml0T2ZXb3JrID0gdHJ1ZTtcbiAgaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrID0gZmFsc2U7XG4gIG9yaWdpbmFsUmVwbGF5RXJyb3IgPSBudWxsO1xuICByZXBsYXlVbml0T2ZXb3JrID0gZnVuY3Rpb24gKGZhaWxlZFVuaXRPZldvcmssIHRocm93blZhbHVlLCBpc1lpZWxkeSkge1xuICAgIGlmICh0aHJvd25WYWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdGhyb3duVmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0aHJvd25WYWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBEb24ndCByZXBsYXkgcHJvbWlzZXMuIFRyZWF0IGV2ZXJ5dGhpbmcgZWxzZSBsaWtlIGFuIGVycm9yLlxuICAgICAgLy8gVE9ETzogTmVlZCB0byBmaWd1cmUgb3V0IGEgZGlmZmVyZW50IHN0cmF0ZWd5IGlmL3doZW4gd2UgYWRkXG4gICAgICAvLyBzdXBwb3J0IGZvciBjYXRjaGluZyBvdGhlciB0eXBlcy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBzdGF0ZSBvZiB0aGUgd29yay1pbi1wcm9ncmVzc1xuICAgIGlmIChzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzID09PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4uIERvbid0IHRocm93IGJlY2F1c2UgdGhpcyBjb2RlIGlzIERFVi1vbmx5LlxuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnQ291bGQgbm90IHJlcGxheSByZW5kZXJpbmcgYWZ0ZXIgYW4gZXJyb3IuIFRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlYWN0LiAnICsgJ1BsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFVihmYWlsZWRVbml0T2ZXb3JrLCBzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzKTtcblxuICAgIHN3aXRjaCAoZmFpbGVkVW5pdE9mV29yay50YWcpIHtcbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgIHBvcEhvc3RDb250YWluZXIoZmFpbGVkVW5pdE9mV29yayk7XG4gICAgICAgIHBvcFRvcExldmVsQ29udGV4dE9iamVjdChmYWlsZWRVbml0T2ZXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgIHBvcEhvc3RDb250ZXh0KGZhaWxlZFVuaXRPZldvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgQ29tcG9uZW50ID0gZmFpbGVkVW5pdE9mV29yay50eXBlO1xuICAgICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICAgICAgICBwb3BDb250ZXh0KGZhaWxlZFVuaXRPZldvcmspO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgICBwb3BIb3N0Q29udGFpbmVyKGZhaWxlZFVuaXRPZldvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgICBwb3BQcm92aWRlcihmYWlsZWRVbml0T2ZXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlcGxheSB0aGUgYmVnaW4gcGhhc2UuXG4gICAgaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrID0gdHJ1ZTtcbiAgICBvcmlnaW5hbFJlcGxheUVycm9yID0gdGhyb3duVmFsdWU7XG4gICAgaW52b2tlR3VhcmRlZENhbGxiYWNrKG51bGwsIHdvcmtMb29wLCBudWxsLCBpc1lpZWxkeSk7XG4gICAgaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrID0gZmFsc2U7XG4gICAgb3JpZ2luYWxSZXBsYXlFcnJvciA9IG51bGw7XG4gICAgaWYgKGhhc0NhdWdodEVycm9yKCkpIHtcbiAgICAgIHZhciByZXBsYXlFcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgICAgIGlmIChyZXBsYXlFcnJvciAhPSBudWxsICYmIHRocm93blZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBSZWFkaW5nIHRoZSBleHBhbmRvIHByb3BlcnR5IGlzIGludGVudGlvbmFsbHlcbiAgICAgICAgICAvLyBpbnNpZGUgYHRyeWAgYmVjYXVzZSBpdCBtaWdodCBiZSBhIGdldHRlciBvciBQcm94eS5cbiAgICAgICAgICBpZiAocmVwbGF5RXJyb3IuX3N1cHByZXNzTG9nZ2luZykge1xuICAgICAgICAgICAgLy8gQWxzbyBzdXBwcmVzcyBsb2dnaW5nIGZvciB0aGUgb3JpZ2luYWwgZXJyb3IuXG4gICAgICAgICAgICB0aHJvd25WYWx1ZS5fc3VwcHJlc3NMb2dnaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGlubmVyKSB7XG4gICAgICAgICAgLy8gSWdub3JlLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBiZWdpbiBwaGFzZSBkaWQgbm90IGZhaWwgdGhlIHNlY29uZCB0aW1lLCBzZXQgdGhpcyBwb2ludGVyXG4gICAgICAvLyBiYWNrIHRvIHRoZSBvcmlnaW5hbCB2YWx1ZS5cbiAgICAgIG5leHRVbml0T2ZXb3JrID0gZmFpbGVkVW5pdE9mV29yaztcbiAgICB9XG4gIH07XG4gIHJldGhyb3dPcmlnaW5hbEVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG9yaWdpbmFsUmVwbGF5RXJyb3I7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RhY2soKSB7XG4gIGlmIChuZXh0VW5pdE9mV29yayAhPT0gbnVsbCkge1xuICAgIHZhciBpbnRlcnJ1cHRlZFdvcmsgPSBuZXh0VW5pdE9mV29yay5yZXR1cm47XG4gICAgd2hpbGUgKGludGVycnVwdGVkV29yayAhPT0gbnVsbCkge1xuICAgICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrKGludGVycnVwdGVkV29yayk7XG4gICAgICBpbnRlcnJ1cHRlZFdvcmsgPSBpbnRlcnJ1cHRlZFdvcmsucmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHtcbiAgICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5kaXNjYXJkUGVuZGluZ1dhcm5pbmdzKCk7XG4gICAgY2hlY2tUaGF0U3RhY2tJc0VtcHR5KCk7XG4gIH1cblxuICBuZXh0Um9vdCA9IG51bGw7XG4gIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zID0gLTE7XG4gIG5leHRSZW5kZXJEaWRFcnJvciA9IGZhbHNlO1xuICBuZXh0VW5pdE9mV29yayA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvbW1pdEFsbEhvc3RFZmZlY3RzKCkge1xuICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgIHtcbiAgICAgIHNldEN1cnJlbnRGaWJlcihuZXh0RWZmZWN0KTtcbiAgICB9XG4gICAgcmVjb3JkRWZmZWN0KCk7XG5cbiAgICB2YXIgZWZmZWN0VGFnID0gbmV4dEVmZmVjdC5lZmZlY3RUYWc7XG5cbiAgICBpZiAoZWZmZWN0VGFnICYgQ29udGVudFJlc2V0KSB7XG4gICAgICBjb21taXRSZXNldFRleHRDb250ZW50KG5leHRFZmZlY3QpO1xuICAgIH1cblxuICAgIGlmIChlZmZlY3RUYWcgJiBSZWYpIHtcbiAgICAgIHZhciBjdXJyZW50JCQxID0gbmV4dEVmZmVjdC5hbHRlcm5hdGU7XG4gICAgICBpZiAoY3VycmVudCQkMSAhPT0gbnVsbCkge1xuICAgICAgICBjb21taXREZXRhY2hSZWYoY3VycmVudCQkMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBzd2l0Y2ggc3RhdGVtZW50IGlzIG9ubHkgY29uY2VybmVkIGFib3V0IHBsYWNlbWVudCxcbiAgICAvLyB1cGRhdGVzLCBhbmQgZGVsZXRpb25zLiBUbyBhdm9pZCBuZWVkaW5nIHRvIGFkZCBhIGNhc2UgZm9yIGV2ZXJ5XG4gICAgLy8gcG9zc2libGUgYml0bWFwIHZhbHVlLCB3ZSByZW1vdmUgdGhlIHNlY29uZGFyeSBlZmZlY3RzIGZyb20gdGhlXG4gICAgLy8gZWZmZWN0IHRhZyBhbmQgc3dpdGNoIG9uIHRoYXQgdmFsdWUuXG4gICAgdmFyIHByaW1hcnlFZmZlY3RUYWcgPSBlZmZlY3RUYWcgJiAoUGxhY2VtZW50IHwgVXBkYXRlIHwgRGVsZXRpb24pO1xuICAgIHN3aXRjaCAocHJpbWFyeUVmZmVjdFRhZykge1xuICAgICAgY2FzZSBQbGFjZW1lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICBjb21taXRQbGFjZW1lbnQobmV4dEVmZmVjdCk7XG4gICAgICAgICAgLy8gQ2xlYXIgdGhlIFwicGxhY2VtZW50XCIgZnJvbSBlZmZlY3QgdGFnIHNvIHRoYXQgd2Uga25vdyB0aGF0IHRoaXMgaXMgaW5zZXJ0ZWQsIGJlZm9yZVxuICAgICAgICAgIC8vIGFueSBsaWZlLWN5Y2xlcyBsaWtlIGNvbXBvbmVudERpZE1vdW50IGdldHMgY2FsbGVkLlxuICAgICAgICAgIC8vIFRPRE86IGZpbmRET01Ob2RlIGRvZXNuJ3QgcmVseSBvbiB0aGlzIGFueSBtb3JlIGJ1dCBpc01vdW50ZWRcbiAgICAgICAgICAvLyBkb2VzIGFuZCBpc01vdW50ZWQgaXMgZGVwcmVjYXRlZCBhbnl3YXkgc28gd2Ugc2hvdWxkIGJlIGFibGVcbiAgICAgICAgICAvLyB0byBraWxsIHRoaXMuXG4gICAgICAgICAgbmV4dEVmZmVjdC5lZmZlY3RUYWcgJj0gflBsYWNlbWVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBQbGFjZW1lbnRBbmRVcGRhdGU6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBQbGFjZW1lbnRcbiAgICAgICAgICBjb21taXRQbGFjZW1lbnQobmV4dEVmZmVjdCk7XG4gICAgICAgICAgLy8gQ2xlYXIgdGhlIFwicGxhY2VtZW50XCIgZnJvbSBlZmZlY3QgdGFnIHNvIHRoYXQgd2Uga25vdyB0aGF0IHRoaXMgaXMgaW5zZXJ0ZWQsIGJlZm9yZVxuICAgICAgICAgIC8vIGFueSBsaWZlLWN5Y2xlcyBsaWtlIGNvbXBvbmVudERpZE1vdW50IGdldHMgY2FsbGVkLlxuICAgICAgICAgIG5leHRFZmZlY3QuZWZmZWN0VGFnICY9IH5QbGFjZW1lbnQ7XG5cbiAgICAgICAgICAvLyBVcGRhdGVcbiAgICAgICAgICB2YXIgX2N1cnJlbnQgPSBuZXh0RWZmZWN0LmFsdGVybmF0ZTtcbiAgICAgICAgICBjb21taXRXb3JrKF9jdXJyZW50LCBuZXh0RWZmZWN0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBVcGRhdGU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2N1cnJlbnQyID0gbmV4dEVmZmVjdC5hbHRlcm5hdGU7XG4gICAgICAgICAgY29tbWl0V29yayhfY3VycmVudDIsIG5leHRFZmZlY3QpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIERlbGV0aW9uOlxuICAgICAgICB7XG4gICAgICAgICAgY29tbWl0RGVsZXRpb24obmV4dEVmZmVjdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdDtcbiAgfVxuXG4gIHtcbiAgICByZXNldEN1cnJlbnRGaWJlcigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZWN5Y2xlcygpIHtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB7XG4gICAgICBzZXRDdXJyZW50RmliZXIobmV4dEVmZmVjdCk7XG4gICAgfVxuXG4gICAgdmFyIGVmZmVjdFRhZyA9IG5leHRFZmZlY3QuZWZmZWN0VGFnO1xuICAgIGlmIChlZmZlY3RUYWcgJiBTbmFwc2hvdCkge1xuICAgICAgcmVjb3JkRWZmZWN0KCk7XG4gICAgICB2YXIgY3VycmVudCQkMSA9IG5leHRFZmZlY3QuYWx0ZXJuYXRlO1xuICAgICAgY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzKGN1cnJlbnQkJDEsIG5leHRFZmZlY3QpO1xuICAgIH1cblxuICAgIG5leHRFZmZlY3QgPSBuZXh0RWZmZWN0Lm5leHRFZmZlY3Q7XG4gIH1cblxuICB7XG4gICAgcmVzZXRDdXJyZW50RmliZXIoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRBbGxMaWZlQ3ljbGVzKGZpbmlzaGVkUm9vdCwgY29tbWl0dGVkRXhwaXJhdGlvblRpbWUpIHtcbiAge1xuICAgIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmZsdXNoUGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzKCk7XG4gICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MuZmx1c2hMZWdhY3lDb250ZXh0V2FybmluZygpO1xuXG4gICAgaWYgKHdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzKSB7XG4gICAgICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5mbHVzaFBlbmRpbmdEZXByZWNhdGlvbldhcm5pbmdzKCk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAge1xuICAgICAgc2V0Q3VycmVudEZpYmVyKG5leHRFZmZlY3QpO1xuICAgIH1cbiAgICB2YXIgZWZmZWN0VGFnID0gbmV4dEVmZmVjdC5lZmZlY3RUYWc7XG5cbiAgICBpZiAoZWZmZWN0VGFnICYgKFVwZGF0ZSB8IENhbGxiYWNrKSkge1xuICAgICAgcmVjb3JkRWZmZWN0KCk7XG4gICAgICB2YXIgY3VycmVudCQkMSA9IG5leHRFZmZlY3QuYWx0ZXJuYXRlO1xuICAgICAgY29tbWl0TGlmZUN5Y2xlcyhmaW5pc2hlZFJvb3QsIGN1cnJlbnQkJDEsIG5leHRFZmZlY3QsIGNvbW1pdHRlZEV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICBpZiAoZWZmZWN0VGFnICYgUmVmKSB7XG4gICAgICByZWNvcmRFZmZlY3QoKTtcbiAgICAgIGNvbW1pdEF0dGFjaFJlZihuZXh0RWZmZWN0KTtcbiAgICB9XG5cbiAgICBpZiAoZWZmZWN0VGFnICYgUGFzc2l2ZSkge1xuICAgICAgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBmaW5pc2hlZFJvb3Q7XG4gICAgfVxuXG4gICAgbmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdDtcbiAgfVxuICB7XG4gICAgcmVzZXRDdXJyZW50RmliZXIoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRQYXNzaXZlRWZmZWN0cyhyb290LCBmaXJzdEVmZmVjdCkge1xuICByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyA9IG51bGw7XG4gIHBhc3NpdmVFZmZlY3RDYWxsYmFja0hhbmRsZSA9IG51bGw7XG4gIHBhc3NpdmVFZmZlY3RDYWxsYmFjayA9IG51bGw7XG5cbiAgLy8gU2V0IHRoaXMgdG8gdHJ1ZSB0byBwcmV2ZW50IHJlLWVudHJhbmN5XG4gIHZhciBwcmV2aW91c0lzUmVuZGVyaW5nID0gaXNSZW5kZXJpbmc7XG4gIGlzUmVuZGVyaW5nID0gdHJ1ZTtcblxuICB2YXIgZWZmZWN0ID0gZmlyc3RFZmZlY3Q7XG4gIGRvIHtcbiAgICB7XG4gICAgICBzZXRDdXJyZW50RmliZXIoZWZmZWN0KTtcbiAgICB9XG5cbiAgICBpZiAoZWZmZWN0LmVmZmVjdFRhZyAmIFBhc3NpdmUpIHtcbiAgICAgIHZhciBkaWRFcnJvciA9IGZhbHNlO1xuICAgICAgdmFyIGVycm9yID0gdm9pZCAwO1xuICAgICAge1xuICAgICAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2sobnVsbCwgY29tbWl0UGFzc2l2ZUhvb2tFZmZlY3RzLCBudWxsLCBlZmZlY3QpO1xuICAgICAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgICAgIGRpZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICBlcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRpZEVycm9yKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGVmZmVjdCwgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBlZmZlY3QgPSBlZmZlY3QubmV4dEVmZmVjdDtcbiAgfSB3aGlsZSAoZWZmZWN0ICE9PSBudWxsKTtcbiAge1xuICAgIHJlc2V0Q3VycmVudEZpYmVyKCk7XG4gIH1cblxuICBpc1JlbmRlcmluZyA9IHByZXZpb3VzSXNSZW5kZXJpbmc7XG5cbiAgLy8gQ2hlY2sgaWYgd29yayB3YXMgc2NoZWR1bGVkIGJ5IG9uZSBvZiB0aGUgZWZmZWN0c1xuICB2YXIgcm9vdEV4cGlyYXRpb25UaW1lID0gcm9vdC5leHBpcmF0aW9uVGltZTtcbiAgaWYgKHJvb3RFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrKSB7XG4gICAgcmVxdWVzdFdvcmsocm9vdCwgcm9vdEV4cGlyYXRpb25UaW1lKTtcbiAgfVxuICAvLyBGbHVzaCBhbnkgc3luYyB3b3JrIHRoYXQgd2FzIHNjaGVkdWxlZCBieSBlZmZlY3RzXG4gIGlmICghaXNCYXRjaGluZ1VwZGF0ZXMgJiYgIWlzUmVuZGVyaW5nKSB7XG4gICAgcGVyZm9ybVN5bmNXb3JrKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNBbHJlYWR5RmFpbGVkTGVnYWN5RXJyb3JCb3VuZGFyeShpbnN0YW5jZSkge1xuICByZXR1cm4gbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgIT09IG51bGwgJiYgbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKGluc3RhbmNlKTtcbn1cblxuZnVuY3Rpb24gbWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZChpbnN0YW5jZSkge1xuICBpZiAobGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPT09IG51bGwpIHtcbiAgICBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG5ldyBTZXQoW2luc3RhbmNlXSk7XG4gIH0gZWxzZSB7XG4gICAgbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuYWRkKGluc3RhbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmbHVzaFBhc3NpdmVFZmZlY3RzKCkge1xuICBpZiAocGFzc2l2ZUVmZmVjdENhbGxiYWNrSGFuZGxlICE9PSBudWxsKSB7XG4gICAgY2FuY2VsUGFzc2l2ZUVmZmVjdHMocGFzc2l2ZUVmZmVjdENhbGxiYWNrSGFuZGxlKTtcbiAgfVxuICBpZiAocGFzc2l2ZUVmZmVjdENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgLy8gV2UgY2FsbCB0aGUgc2NoZWR1bGVkIGNhbGxiYWNrIGluc3RlYWQgb2YgY29tbWl0UGFzc2l2ZUVmZmVjdHMgZGlyZWN0bHlcbiAgICAvLyB0byBlbnN1cmUgdHJhY2luZyB3b3JrcyBjb3JyZWN0bHkuXG4gICAgcGFzc2l2ZUVmZmVjdENhbGxiYWNrKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0Um9vdChyb290LCBmaW5pc2hlZFdvcmspIHtcbiAgaXNXb3JraW5nID0gdHJ1ZTtcbiAgaXNDb21taXR0aW5nJDEgPSB0cnVlO1xuICBzdGFydENvbW1pdFRpbWVyKCk7XG5cbiAgIShyb290LmN1cnJlbnQgIT09IGZpbmlzaGVkV29yaykgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY29tbWl0IHRoZSBzYW1lIHRyZWUgYXMgYmVmb3JlLiBUaGlzIGlzIHByb2JhYmx5IGEgYnVnIHJlbGF0ZWQgdG8gdGhlIHJldHVybiBmaWVsZC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgdmFyIGNvbW1pdHRlZEV4cGlyYXRpb25UaW1lID0gcm9vdC5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7XG4gICEoY29tbWl0dGVkRXhwaXJhdGlvblRpbWUgIT09IE5vV29yaykgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY29tbWl0IGFuIGluY29tcGxldGUgcm9vdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgcm9vdC5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG5cbiAgLy8gVXBkYXRlIHRoZSBwZW5kaW5nIHByaW9yaXR5IGxldmVscyB0byBhY2NvdW50IGZvciB0aGUgd29yayB0aGF0IHdlIGFyZVxuICAvLyBhYm91dCB0byBjb21taXQuIFRoaXMgbmVlZHMgdG8gaGFwcGVuIGJlZm9yZSBjYWxsaW5nIHRoZSBsaWZlY3ljbGVzLCBzaW5jZVxuICAvLyB0aGV5IG1heSBzY2hlZHVsZSBhZGRpdGlvbmFsIHVwZGF0ZXMuXG4gIHZhciB1cGRhdGVFeHBpcmF0aW9uVGltZUJlZm9yZUNvbW1pdCA9IGZpbmlzaGVkV29yay5leHBpcmF0aW9uVGltZTtcbiAgdmFyIGNoaWxkRXhwaXJhdGlvblRpbWVCZWZvcmVDb21taXQgPSBmaW5pc2hlZFdvcmsuY2hpbGRFeHBpcmF0aW9uVGltZTtcbiAgdmFyIGVhcmxpZXN0UmVtYWluaW5nVGltZUJlZm9yZUNvbW1pdCA9IGNoaWxkRXhwaXJhdGlvblRpbWVCZWZvcmVDb21taXQgPiB1cGRhdGVFeHBpcmF0aW9uVGltZUJlZm9yZUNvbW1pdCA/IGNoaWxkRXhwaXJhdGlvblRpbWVCZWZvcmVDb21taXQgOiB1cGRhdGVFeHBpcmF0aW9uVGltZUJlZm9yZUNvbW1pdDtcbiAgbWFya0NvbW1pdHRlZFByaW9yaXR5TGV2ZWxzKHJvb3QsIGVhcmxpZXN0UmVtYWluaW5nVGltZUJlZm9yZUNvbW1pdCk7XG5cbiAgdmFyIHByZXZJbnRlcmFjdGlvbnMgPSBudWxsO1xuICBpZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICAgIC8vIFJlc3RvcmUgYW55IHBlbmRpbmcgaW50ZXJhY3Rpb25zIGF0IHRoaXMgcG9pbnQsXG4gICAgLy8gU28gdGhhdCBjYXNjYWRpbmcgd29yayB0cmlnZ2VyZWQgZHVyaW5nIHRoZSByZW5kZXIgcGhhc2Ugd2lsbCBiZSBhY2NvdW50ZWQgZm9yLlxuICAgIHByZXZJbnRlcmFjdGlvbnMgPSB0cmFjaW5nLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQ7XG4gICAgdHJhY2luZy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50ID0gcm9vdC5tZW1vaXplZEludGVyYWN0aW9ucztcbiAgfVxuXG4gIC8vIFJlc2V0IHRoaXMgdG8gbnVsbCBiZWZvcmUgY2FsbGluZyBsaWZlY3ljbGVzXG4gIFJlYWN0Q3VycmVudE93bmVyJDIuY3VycmVudCA9IG51bGw7XG5cbiAgdmFyIGZpcnN0RWZmZWN0ID0gdm9pZCAwO1xuICBpZiAoZmluaXNoZWRXb3JrLmVmZmVjdFRhZyA+IFBlcmZvcm1lZFdvcmspIHtcbiAgICAvLyBBIGZpYmVyJ3MgZWZmZWN0IGxpc3QgY29uc2lzdHMgb25seSBvZiBpdHMgY2hpbGRyZW4sIG5vdCBpdHNlbGYuIFNvIGlmXG4gICAgLy8gdGhlIHJvb3QgaGFzIGFuIGVmZmVjdCwgd2UgbmVlZCB0byBhZGQgaXQgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdC4gVGhlXG4gICAgLy8gcmVzdWx0aW5nIGxpc3QgaXMgdGhlIHNldCB0aGF0IHdvdWxkIGJlbG9uZyB0byB0aGUgcm9vdCdzIHBhcmVudCwgaWZcbiAgICAvLyBpdCBoYWQgb25lOyB0aGF0IGlzLCBhbGwgdGhlIGVmZmVjdHMgaW4gdGhlIHRyZWUgaW5jbHVkaW5nIHRoZSByb290LlxuICAgIGlmIChmaW5pc2hlZFdvcmsubGFzdEVmZmVjdCAhPT0gbnVsbCkge1xuICAgICAgZmluaXNoZWRXb3JrLmxhc3RFZmZlY3QubmV4dEVmZmVjdCA9IGZpbmlzaGVkV29yaztcbiAgICAgIGZpcnN0RWZmZWN0ID0gZmluaXNoZWRXb3JrLmZpcnN0RWZmZWN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdEVmZmVjdCA9IGZpbmlzaGVkV29yaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlcmUgaXMgbm8gZWZmZWN0IG9uIHRoZSByb290LlxuICAgIGZpcnN0RWZmZWN0ID0gZmluaXNoZWRXb3JrLmZpcnN0RWZmZWN0O1xuICB9XG5cbiAgcHJlcGFyZUZvckNvbW1pdChyb290LmNvbnRhaW5lckluZm8pO1xuXG4gIC8vIEludm9rZSBpbnN0YW5jZXMgb2YgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgYmVmb3JlIG11dGF0aW9uLlxuICBuZXh0RWZmZWN0ID0gZmlyc3RFZmZlY3Q7XG4gIHN0YXJ0Q29tbWl0U25hcHNob3RFZmZlY3RzVGltZXIoKTtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgZGlkRXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgZXJyb3IgPSB2b2lkIDA7XG4gICAge1xuICAgICAgaW52b2tlR3VhcmRlZENhbGxiYWNrKG51bGwsIGNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZWN5Y2xlcywgbnVsbCk7XG4gICAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgICBkaWRFcnJvciA9IHRydWU7XG4gICAgICAgIGVycm9yID0gY2xlYXJDYXVnaHRFcnJvcigpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGlkRXJyb3IpIHtcbiAgICAgICEobmV4dEVmZmVjdCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgaGF2ZSBuZXh0IGVmZmVjdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKG5leHRFZmZlY3QsIGVycm9yKTtcbiAgICAgIC8vIENsZWFuLXVwXG4gICAgICBpZiAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgICAgICBuZXh0RWZmZWN0ID0gbmV4dEVmZmVjdC5uZXh0RWZmZWN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzdG9wQ29tbWl0U25hcHNob3RFZmZlY3RzVGltZXIoKTtcblxuICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgIC8vIE1hcmsgdGhlIGN1cnJlbnQgY29tbWl0IHRpbWUgdG8gYmUgc2hhcmVkIGJ5IGFsbCBQcm9maWxlcnMgaW4gdGhpcyBiYXRjaC5cbiAgICAvLyBUaGlzIGVuYWJsZXMgdGhlbSB0byBiZSBncm91cGVkIGxhdGVyLlxuICAgIHJlY29yZENvbW1pdFRpbWUoKTtcbiAgfVxuXG4gIC8vIENvbW1pdCBhbGwgdGhlIHNpZGUtZWZmZWN0cyB3aXRoaW4gYSB0cmVlLiBXZSdsbCBkbyB0aGlzIGluIHR3byBwYXNzZXMuXG4gIC8vIFRoZSBmaXJzdCBwYXNzIHBlcmZvcm1zIGFsbCB0aGUgaG9zdCBpbnNlcnRpb25zLCB1cGRhdGVzLCBkZWxldGlvbnMgYW5kXG4gIC8vIHJlZiB1bm1vdW50cy5cbiAgbmV4dEVmZmVjdCA9IGZpcnN0RWZmZWN0O1xuICBzdGFydENvbW1pdEhvc3RFZmZlY3RzVGltZXIoKTtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgX2RpZEVycm9yID0gZmFsc2U7XG4gICAgdmFyIF9lcnJvciA9IHZvaWQgMDtcbiAgICB7XG4gICAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2sobnVsbCwgY29tbWl0QWxsSG9zdEVmZmVjdHMsIG51bGwpO1xuICAgICAgaWYgKGhhc0NhdWdodEVycm9yKCkpIHtcbiAgICAgICAgX2RpZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgX2Vycm9yID0gY2xlYXJDYXVnaHRFcnJvcigpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoX2RpZEVycm9yKSB7XG4gICAgICAhKG5leHRFZmZlY3QgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIGhhdmUgbmV4dCBlZmZlY3QuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihuZXh0RWZmZWN0LCBfZXJyb3IpO1xuICAgICAgLy8gQ2xlYW4tdXBcbiAgICAgIGlmIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgICAgIG5leHRFZmZlY3QgPSBuZXh0RWZmZWN0Lm5leHRFZmZlY3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN0b3BDb21taXRIb3N0RWZmZWN0c1RpbWVyKCk7XG5cbiAgcmVzZXRBZnRlckNvbW1pdChyb290LmNvbnRhaW5lckluZm8pO1xuXG4gIC8vIFRoZSB3b3JrLWluLXByb2dyZXNzIHRyZWUgaXMgbm93IHRoZSBjdXJyZW50IHRyZWUuIFRoaXMgbXVzdCBjb21lIGFmdGVyXG4gIC8vIHRoZSBmaXJzdCBwYXNzIG9mIHRoZSBjb21taXQgcGhhc2UsIHNvIHRoYXQgdGhlIHByZXZpb3VzIHRyZWUgaXMgc3RpbGxcbiAgLy8gY3VycmVudCBkdXJpbmcgY29tcG9uZW50V2lsbFVubW91bnQsIGJ1dCBiZWZvcmUgdGhlIHNlY29uZCBwYXNzLCBzbyB0aGF0XG4gIC8vIHRoZSBmaW5pc2hlZCB3b3JrIGlzIGN1cnJlbnQgZHVyaW5nIGNvbXBvbmVudERpZE1vdW50L1VwZGF0ZS5cbiAgcm9vdC5jdXJyZW50ID0gZmluaXNoZWRXb3JrO1xuXG4gIC8vIEluIHRoZSBzZWNvbmQgcGFzcyB3ZSdsbCBwZXJmb3JtIGFsbCBsaWZlLWN5Y2xlcyBhbmQgcmVmIGNhbGxiYWNrcy5cbiAgLy8gTGlmZS1jeWNsZXMgaGFwcGVuIGFzIGEgc2VwYXJhdGUgcGFzcyBzbyB0aGF0IGFsbCBwbGFjZW1lbnRzLCB1cGRhdGVzLFxuICAvLyBhbmQgZGVsZXRpb25zIGluIHRoZSBlbnRpcmUgdHJlZSBoYXZlIGFscmVhZHkgYmVlbiBpbnZva2VkLlxuICAvLyBUaGlzIHBhc3MgYWxzbyB0cmlnZ2VycyBhbnkgcmVuZGVyZXItc3BlY2lmaWMgaW5pdGlhbCBlZmZlY3RzLlxuICBuZXh0RWZmZWN0ID0gZmlyc3RFZmZlY3Q7XG4gIHN0YXJ0Q29tbWl0TGlmZUN5Y2xlc1RpbWVyKCk7XG4gIHdoaWxlIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyIF9kaWRFcnJvcjIgPSBmYWxzZTtcbiAgICB2YXIgX2Vycm9yMiA9IHZvaWQgMDtcbiAgICB7XG4gICAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2sobnVsbCwgY29tbWl0QWxsTGlmZUN5Y2xlcywgbnVsbCwgcm9vdCwgY29tbWl0dGVkRXhwaXJhdGlvblRpbWUpO1xuICAgICAgaWYgKGhhc0NhdWdodEVycm9yKCkpIHtcbiAgICAgICAgX2RpZEVycm9yMiA9IHRydWU7XG4gICAgICAgIF9lcnJvcjIgPSBjbGVhckNhdWdodEVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChfZGlkRXJyb3IyKSB7XG4gICAgICAhKG5leHRFZmZlY3QgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIGhhdmUgbmV4dCBlZmZlY3QuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihuZXh0RWZmZWN0LCBfZXJyb3IyKTtcbiAgICAgIGlmIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgICAgIG5leHRFZmZlY3QgPSBuZXh0RWZmZWN0Lm5leHRFZmZlY3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGZpcnN0RWZmZWN0ICE9PSBudWxsICYmIHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzICE9PSBudWxsKSB7XG4gICAgLy8gVGhpcyBjb21taXQgaW5jbHVkZWQgYSBwYXNzaXZlIGVmZmVjdC4gVGhlc2UgZG8gbm90IG5lZWQgdG8gZmlyZSB1bnRpbFxuICAgIC8vIGFmdGVyIHRoZSBuZXh0IHBhaW50LiBTY2hlZHVsZSBhbiBjYWxsYmFjayB0byBmaXJlIHRoZW0gaW4gYW4gYXN5bmNcbiAgICAvLyBldmVudC4gVG8gZW5zdXJlIHNlcmlhbCBleGVjdXRpb24sIHRoZSBjYWxsYmFjayB3aWxsIGJlIGZsdXNoZWQgZWFybHkgaWZcbiAgICAvLyB3ZSBlbnRlciByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyBjb21taXQgcGhhc2UgYmVmb3JlIHRoZW4uXG4gICAgdmFyIGNhbGxiYWNrID0gY29tbWl0UGFzc2l2ZUVmZmVjdHMuYmluZChudWxsLCByb290LCBmaXJzdEVmZmVjdCk7XG4gICAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICAgIC8vIFRPRE86IEF2b2lkIHRoaXMgZXh0cmEgY2FsbGJhY2sgYnkgbXV0YXRpbmcgdGhlIHRyYWNpbmcgcmVmIGRpcmVjdGx5LFxuICAgICAgLy8gbGlrZSB3ZSBkbyBhdCB0aGUgYmVnaW5uaW5nIG9mIGNvbW1pdFJvb3QuIEkndmUgb3B0ZWQgbm90IHRvIGRvIHRoYXRcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0aGF0IGNvZGUgaXMgc3RpbGwgaW4gZmx1eC5cbiAgICAgIGNhbGxiYWNrID0gdHJhY2luZy51bnN0YWJsZV93cmFwKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgcGFzc2l2ZUVmZmVjdENhbGxiYWNrSGFuZGxlID0gc2NoZWR1bGVyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShzY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzY2hlZHVsZVBhc3NpdmVFZmZlY3RzKGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgICBwYXNzaXZlRWZmZWN0Q2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgfVxuXG4gIGlzQ29tbWl0dGluZyQxID0gZmFsc2U7XG4gIGlzV29ya2luZyA9IGZhbHNlO1xuICBzdG9wQ29tbWl0TGlmZUN5Y2xlc1RpbWVyKCk7XG4gIHN0b3BDb21taXRUaW1lcigpO1xuICBvbkNvbW1pdFJvb3QoZmluaXNoZWRXb3JrLnN0YXRlTm9kZSk7XG4gIGlmICh0cnVlICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wpIHtcbiAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uQ29tbWl0V29yayhmaW5pc2hlZFdvcmspO1xuICB9XG5cbiAgdmFyIHVwZGF0ZUV4cGlyYXRpb25UaW1lQWZ0ZXJDb21taXQgPSBmaW5pc2hlZFdvcmsuZXhwaXJhdGlvblRpbWU7XG4gIHZhciBjaGlsZEV4cGlyYXRpb25UaW1lQWZ0ZXJDb21taXQgPSBmaW5pc2hlZFdvcmsuY2hpbGRFeHBpcmF0aW9uVGltZTtcbiAgdmFyIGVhcmxpZXN0UmVtYWluaW5nVGltZUFmdGVyQ29tbWl0ID0gY2hpbGRFeHBpcmF0aW9uVGltZUFmdGVyQ29tbWl0ID4gdXBkYXRlRXhwaXJhdGlvblRpbWVBZnRlckNvbW1pdCA/IGNoaWxkRXhwaXJhdGlvblRpbWVBZnRlckNvbW1pdCA6IHVwZGF0ZUV4cGlyYXRpb25UaW1lQWZ0ZXJDb21taXQ7XG4gIGlmIChlYXJsaWVzdFJlbWFpbmluZ1RpbWVBZnRlckNvbW1pdCA9PT0gTm9Xb3JrKSB7XG4gICAgLy8gSWYgdGhlcmUncyBubyByZW1haW5pbmcgd29yaywgd2UgY2FuIGNsZWFyIHRoZSBzZXQgb2YgYWxyZWFkeSBmYWlsZWRcbiAgICAvLyBlcnJvciBib3VuZGFyaWVzLlxuICAgIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbDtcbiAgfVxuICBvbkNvbW1pdChyb290LCBlYXJsaWVzdFJlbWFpbmluZ1RpbWVBZnRlckNvbW1pdCk7XG5cbiAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICB0cmFjaW5nLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQgPSBwcmV2SW50ZXJhY3Rpb25zO1xuXG4gICAgdmFyIHN1YnNjcmliZXIgPSB2b2lkIDA7XG5cbiAgICB0cnkge1xuICAgICAgc3Vic2NyaWJlciA9IHRyYWNpbmcuX19zdWJzY3JpYmVyUmVmLmN1cnJlbnQ7XG4gICAgICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCAmJiByb290Lm1lbW9pemVkSW50ZXJhY3Rpb25zLnNpemUgPiAwKSB7XG4gICAgICAgIHZhciB0aHJlYWRJRCA9IGNvbXB1dGVUaHJlYWRJRChjb21taXR0ZWRFeHBpcmF0aW9uVGltZSwgcm9vdC5pbnRlcmFjdGlvblRocmVhZElEKTtcbiAgICAgICAgc3Vic2NyaWJlci5vbldvcmtTdG9wcGVkKHJvb3QubWVtb2l6ZWRJbnRlcmFjdGlvbnMsIHRocmVhZElEKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSXQncyBub3Qgc2FmZSBmb3IgY29tbWl0Um9vdCgpIHRvIHRocm93LlxuICAgICAgLy8gU3RvcmUgdGhlIGVycm9yIGZvciBub3cgYW5kIHdlJ2xsIHJlLXRocm93IGluIGZpbmlzaFJlbmRlcmluZygpLlxuICAgICAgaWYgKCFoYXNVbmhhbmRsZWRFcnJvcikge1xuICAgICAgICBoYXNVbmhhbmRsZWRFcnJvciA9IHRydWU7XG4gICAgICAgIHVuaGFuZGxlZEVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIENsZWFyIGNvbXBsZXRlZCBpbnRlcmFjdGlvbnMgZnJvbSB0aGUgcGVuZGluZyBNYXAuXG4gICAgICAvLyBVbmxlc3MgdGhlIHJlbmRlciB3YXMgc3VzcGVuZGVkIG9yIGNhc2NhZGluZyB3b3JrIHdhcyBzY2hlZHVsZWQsXG4gICAgICAvLyBJbiB3aGljaCBjYXNl4oCTIGxlYXZlIHBlbmRpbmcgaW50ZXJhY3Rpb25zIHVudGlsIHRoZSBzdWJzZXF1ZW50IHJlbmRlci5cbiAgICAgIHZhciBwZW5kaW5nSW50ZXJhY3Rpb25NYXAgPSByb290LnBlbmRpbmdJbnRlcmFjdGlvbk1hcDtcbiAgICAgIHBlbmRpbmdJbnRlcmFjdGlvbk1hcC5mb3JFYWNoKGZ1bmN0aW9uIChzY2hlZHVsZWRJbnRlcmFjdGlvbnMsIHNjaGVkdWxlZEV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIC8vIE9ubHkgZGVjcmVtZW50IHRoZSBwZW5kaW5nIGludGVyYWN0aW9uIGNvdW50IGlmIHdlJ3JlIGRvbmUuXG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgc3RpbGwgd29yayBhdCB0aGUgY3VycmVudCBwcmlvcml0eSxcbiAgICAgICAgLy8gVGhhdCBpbmRpY2F0ZXMgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igc3VzcGVuc2UgZGF0YS5cbiAgICAgICAgaWYgKHNjaGVkdWxlZEV4cGlyYXRpb25UaW1lID4gZWFybGllc3RSZW1haW5pbmdUaW1lQWZ0ZXJDb21taXQpIHtcbiAgICAgICAgICBwZW5kaW5nSW50ZXJhY3Rpb25NYXAuZGVsZXRlKHNjaGVkdWxlZEV4cGlyYXRpb25UaW1lKTtcblxuICAgICAgICAgIHNjaGVkdWxlZEludGVyYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgaW50ZXJhY3Rpb24uX19jb3VudC0tO1xuXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCAmJiBpbnRlcmFjdGlvbi5fX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5vbkludGVyYWN0aW9uU2NoZWR1bGVkV29ya0NvbXBsZXRlZChpbnRlcmFjdGlvbik7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBub3Qgc2FmZSBmb3IgY29tbWl0Um9vdCgpIHRvIHRocm93LlxuICAgICAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBlcnJvciBmb3Igbm93IGFuZCB3ZSdsbCByZS10aHJvdyBpbiBmaW5pc2hSZW5kZXJpbmcoKS5cbiAgICAgICAgICAgICAgICBpZiAoIWhhc1VuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBoYXNVbmhhbmRsZWRFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB1bmhhbmRsZWRFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRDaGlsZEV4cGlyYXRpb25UaW1lKHdvcmtJblByb2dyZXNzLCByZW5kZXJUaW1lKSB7XG4gIGlmIChyZW5kZXJUaW1lICE9PSBOZXZlciAmJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZEV4cGlyYXRpb25UaW1lID09PSBOZXZlcikge1xuICAgIC8vIFRoZSBjaGlsZHJlbiBvZiB0aGlzIGNvbXBvbmVudCBhcmUgaGlkZGVuLiBEb24ndCBidWJibGUgdGhlaXJcbiAgICAvLyBleHBpcmF0aW9uIHRpbWVzLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBuZXdDaGlsZEV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuXG4gIC8vIEJ1YmJsZSB1cCB0aGUgZWFybGllc3QgZXhwaXJhdGlvbiB0aW1lLlxuICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lciAmJiB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgUHJvZmlsZU1vZGUpIHtcbiAgICAvLyBXZSdyZSBpbiBwcm9maWxpbmcgbW9kZS5cbiAgICAvLyBMZXQncyB1c2UgdGhpcyBzYW1lIHRyYXZlcnNhbCB0byB1cGRhdGUgdGhlIHJlbmRlciBkdXJhdGlvbnMuXG4gICAgdmFyIGFjdHVhbER1cmF0aW9uID0gd29ya0luUHJvZ3Jlc3MuYWN0dWFsRHVyYXRpb247XG4gICAgdmFyIHRyZWVCYXNlRHVyYXRpb24gPSB3b3JrSW5Qcm9ncmVzcy5zZWxmQmFzZUR1cmF0aW9uO1xuXG4gICAgLy8gV2hlbiBhIGZpYmVyIGlzIGNsb25lZCwgaXRzIGFjdHVhbER1cmF0aW9uIGlzIHJlc2V0IHRvIDAuXG4gICAgLy8gVGhpcyB2YWx1ZSB3aWxsIG9ubHkgYmUgdXBkYXRlZCBpZiB3b3JrIGlzIGRvbmUgb24gdGhlIGZpYmVyIChpLmUuIGl0IGRvZXNuJ3QgYmFpbG91dCkuXG4gICAgLy8gV2hlbiB3b3JrIGlzIGRvbmUsIGl0IHNob3VsZCBidWJibGUgdG8gdGhlIHBhcmVudCdzIGFjdHVhbER1cmF0aW9uLlxuICAgIC8vIElmIHRoZSBmaWJlciBoYXMgbm90IGJlZW4gY2xvbmVkIHRob3VnaCwgKG1lYW5pbmcgbm8gd29yayB3YXMgZG9uZSksXG4gICAgLy8gVGhlbiB0aGlzIHZhbHVlIHdpbGwgcmVmbGVjdCB0aGUgYW1vdW50IG9mIHRpbWUgc3BlbnQgd29ya2luZyBvbiBhIHByZXZpb3VzIHJlbmRlci5cbiAgICAvLyBJbiB0aGF0IGNhc2UgaXQgc2hvdWxkIG5vdCBidWJibGUuXG4gICAgLy8gV2UgZGV0ZXJtaW5lIHdoZXRoZXIgaXQgd2FzIGNsb25lZCBieSBjb21wYXJpbmcgdGhlIGNoaWxkIHBvaW50ZXIuXG4gICAgdmFyIHNob3VsZEJ1YmJsZUFjdHVhbER1cmF0aW9ucyA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9PT0gbnVsbCB8fCB3b3JrSW5Qcm9ncmVzcy5jaGlsZCAhPT0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlLmNoaWxkO1xuXG4gICAgdmFyIGNoaWxkID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICB2YXIgY2hpbGRVcGRhdGVFeHBpcmF0aW9uVGltZSA9IGNoaWxkLmV4cGlyYXRpb25UaW1lO1xuICAgICAgdmFyIGNoaWxkQ2hpbGRFeHBpcmF0aW9uVGltZSA9IGNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7XG4gICAgICBpZiAoY2hpbGRVcGRhdGVFeHBpcmF0aW9uVGltZSA+IG5ld0NoaWxkRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgbmV3Q2hpbGRFeHBpcmF0aW9uVGltZSA9IGNoaWxkVXBkYXRlRXhwaXJhdGlvblRpbWU7XG4gICAgICB9XG4gICAgICBpZiAoY2hpbGRDaGlsZEV4cGlyYXRpb25UaW1lID4gbmV3Q2hpbGRFeHBpcmF0aW9uVGltZSkge1xuICAgICAgICBuZXdDaGlsZEV4cGlyYXRpb25UaW1lID0gY2hpbGRDaGlsZEV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZEJ1YmJsZUFjdHVhbER1cmF0aW9ucykge1xuICAgICAgICBhY3R1YWxEdXJhdGlvbiArPSBjaGlsZC5hY3R1YWxEdXJhdGlvbjtcbiAgICAgIH1cbiAgICAgIHRyZWVCYXNlRHVyYXRpb24gKz0gY2hpbGQudHJlZUJhc2VEdXJhdGlvbjtcbiAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgICB9XG4gICAgd29ya0luUHJvZ3Jlc3MuYWN0dWFsRHVyYXRpb24gPSBhY3R1YWxEdXJhdGlvbjtcbiAgICB3b3JrSW5Qcm9ncmVzcy50cmVlQmFzZUR1cmF0aW9uID0gdHJlZUJhc2VEdXJhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX2NoaWxkID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgd2hpbGUgKF9jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgdmFyIF9jaGlsZFVwZGF0ZUV4cGlyYXRpb25UaW1lID0gX2NoaWxkLmV4cGlyYXRpb25UaW1lO1xuICAgICAgdmFyIF9jaGlsZENoaWxkRXhwaXJhdGlvblRpbWUgPSBfY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbiAgICAgIGlmIChfY2hpbGRVcGRhdGVFeHBpcmF0aW9uVGltZSA+IG5ld0NoaWxkRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgbmV3Q2hpbGRFeHBpcmF0aW9uVGltZSA9IF9jaGlsZFVwZGF0ZUV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgICAgaWYgKF9jaGlsZENoaWxkRXhwaXJhdGlvblRpbWUgPiBuZXdDaGlsZEV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIG5ld0NoaWxkRXhwaXJhdGlvblRpbWUgPSBfY2hpbGRDaGlsZEV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgICAgX2NoaWxkID0gX2NoaWxkLnNpYmxpbmc7XG4gICAgfVxuICB9XG5cbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGRFeHBpcmF0aW9uVGltZSA9IG5ld0NoaWxkRXhwaXJhdGlvblRpbWU7XG59XG5cbmZ1bmN0aW9uIGNvbXBsZXRlVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcykge1xuICAvLyBBdHRlbXB0IHRvIGNvbXBsZXRlIHRoZSBjdXJyZW50IHVuaXQgb2Ygd29yaywgdGhlbiBtb3ZlIHRvIHRoZVxuICAvLyBuZXh0IHNpYmxpbmcuIElmIHRoZXJlIGFyZSBubyBtb3JlIHNpYmxpbmdzLCByZXR1cm4gdG8gdGhlXG4gIC8vIHBhcmVudCBmaWJlci5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBUaGUgY3VycmVudCwgZmx1c2hlZCwgc3RhdGUgb2YgdGhpcyBmaWJlciBpcyB0aGUgYWx0ZXJuYXRlLlxuICAgIC8vIElkZWFsbHkgbm90aGluZyBzaG91bGQgcmVseSBvbiB0aGlzLCBidXQgcmVseWluZyBvbiBpdCBoZXJlXG4gICAgLy8gbWVhbnMgdGhhdCB3ZSBkb24ndCBuZWVkIGFuIGFkZGl0aW9uYWwgZmllbGQgb24gdGhlIHdvcmsgaW5cbiAgICAvLyBwcm9ncmVzcy5cbiAgICB2YXIgY3VycmVudCQkMSA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgICB7XG4gICAgICBzZXRDdXJyZW50RmliZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIHZhciByZXR1cm5GaWJlciA9IHdvcmtJblByb2dyZXNzLnJldHVybjtcbiAgICB2YXIgc2libGluZ0ZpYmVyID0gd29ya0luUHJvZ3Jlc3Muc2libGluZztcblxuICAgIGlmICgod29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnICYgSW5jb21wbGV0ZSkgPT09IE5vRWZmZWN0KSB7XG4gICAgICBpZiAodHJ1ZSAmJiByZXBsYXlGYWlsZWRVbml0T2ZXb3JrV2l0aEludm9rZUd1YXJkZWRDYWxsYmFjaykge1xuICAgICAgICAvLyBEb24ndCByZXBsYXkgaWYgaXQgZmFpbHMgZHVyaW5nIGNvbXBsZXRpb24gcGhhc2UuXG4gICAgICAgIG1heVJlcGxheUZhaWxlZFVuaXRPZldvcmsgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoaXMgZmliZXIgY29tcGxldGVkLlxuICAgICAgLy8gUmVtZW1iZXIgd2UncmUgY29tcGxldGluZyB0aGlzIHVuaXQgc28gd2UgY2FuIGZpbmQgYSBib3VuZGFyeSBpZiBpdCBmYWlscy5cbiAgICAgIG5leHRVbml0T2ZXb3JrID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgICAgICAgc3RhcnRQcm9maWxlclRpbWVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0VW5pdE9mV29yayA9IGNvbXBsZXRlV29yayhjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAgIC8vIFVwZGF0ZSByZW5kZXIgZHVyYXRpb24gYXNzdW1pbmcgd2UgZGlkbid0IGVycm9yLlxuICAgICAgICAgIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nQW5kUmVjb3JkRGVsdGEod29ya0luUHJvZ3Jlc3MsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dFVuaXRPZldvcmsgPSBjb21wbGV0ZVdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAodHJ1ZSAmJiByZXBsYXlGYWlsZWRVbml0T2ZXb3JrV2l0aEludm9rZUd1YXJkZWRDYWxsYmFjaykge1xuICAgICAgICAvLyBXZSdyZSBvdXQgb2YgY29tcGxldGlvbiBwaGFzZSBzbyByZXBsYXlpbmcgaXMgZmluZSBub3cuXG4gICAgICAgIG1heVJlcGxheUZhaWxlZFVuaXRPZldvcmsgPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3RvcFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXNldENoaWxkRXhwaXJhdGlvblRpbWUod29ya0luUHJvZ3Jlc3MsIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB7XG4gICAgICAgIHJlc2V0Q3VycmVudEZpYmVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0VW5pdE9mV29yayAhPT0gbnVsbCkge1xuICAgICAgICAvLyBDb21wbGV0aW5nIHRoaXMgZmliZXIgc3Bhd25lZCBuZXcgd29yay4gV29yayBvbiB0aGF0IG5leHQuXG4gICAgICAgIHJldHVybiBuZXh0VW5pdE9mV29yaztcbiAgICAgIH1cblxuICAgICAgaWYgKHJldHVybkZpYmVyICE9PSBudWxsICYmXG4gICAgICAvLyBEbyBub3QgYXBwZW5kIGVmZmVjdHMgdG8gcGFyZW50cyBpZiBhIHNpYmxpbmcgZmFpbGVkIHRvIGNvbXBsZXRlXG4gICAgICAocmV0dXJuRmliZXIuZWZmZWN0VGFnICYgSW5jb21wbGV0ZSkgPT09IE5vRWZmZWN0KSB7XG4gICAgICAgIC8vIEFwcGVuZCBhbGwgdGhlIGVmZmVjdHMgb2YgdGhlIHN1YnRyZWUgYW5kIHRoaXMgZmliZXIgb250byB0aGUgZWZmZWN0XG4gICAgICAgIC8vIGxpc3Qgb2YgdGhlIHBhcmVudC4gVGhlIGNvbXBsZXRpb24gb3JkZXIgb2YgdGhlIGNoaWxkcmVuIGFmZmVjdHMgdGhlXG4gICAgICAgIC8vIHNpZGUtZWZmZWN0IG9yZGVyLlxuICAgICAgICBpZiAocmV0dXJuRmliZXIuZmlyc3RFZmZlY3QgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9IHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5sYXN0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHJldHVybkZpYmVyLmxhc3RFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QubmV4dEVmZmVjdCA9IHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3MubGFzdEVmZmVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoaXMgZmliZXIgaGFkIHNpZGUtZWZmZWN0cywgd2UgYXBwZW5kIGl0IEFGVEVSIHRoZSBjaGlsZHJlbidzXG4gICAgICAgIC8vIHNpZGUtZWZmZWN0cy4gV2UgY2FuIHBlcmZvcm0gY2VydGFpbiBzaWRlLWVmZmVjdHMgZWFybGllciBpZlxuICAgICAgICAvLyBuZWVkZWQsIGJ5IGRvaW5nIG11bHRpcGxlIHBhc3NlcyBvdmVyIHRoZSBlZmZlY3QgbGlzdC4gV2UgZG9uJ3Qgd2FudFxuICAgICAgICAvLyB0byBzY2hlZHVsZSBvdXIgb3duIHNpZGUtZWZmZWN0IG9uIG91ciBvd24gbGlzdCBiZWNhdXNlIGlmIGVuZCB1cFxuICAgICAgICAvLyByZXVzaW5nIGNoaWxkcmVuIHdlJ2xsIHNjaGVkdWxlIHRoaXMgZWZmZWN0IG9udG8gaXRzZWxmIHNpbmNlIHdlJ3JlXG4gICAgICAgIC8vIGF0IHRoZSBlbmQuXG4gICAgICAgIHZhciBlZmZlY3RUYWcgPSB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWc7XG4gICAgICAgIC8vIFNraXAgYm90aCBOb1dvcmsgYW5kIFBlcmZvcm1lZFdvcmsgdGFncyB3aGVuIGNyZWF0aW5nIHRoZSBlZmZlY3QgbGlzdC5cbiAgICAgICAgLy8gUGVyZm9ybWVkV29yayBlZmZlY3QgaXMgcmVhZCBieSBSZWFjdCBEZXZUb29scyBidXQgc2hvdWxkbid0IGJlIGNvbW1pdHRlZC5cbiAgICAgICAgaWYgKGVmZmVjdFRhZyA+IFBlcmZvcm1lZFdvcmspIHtcbiAgICAgICAgICBpZiAocmV0dXJuRmliZXIubGFzdEVmZmVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdC5uZXh0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHJ1ZSAmJiBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sKSB7XG4gICAgICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wub25Db21wbGV0ZVdvcmsod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2libGluZ0ZpYmVyICE9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG1vcmUgd29yayB0byBkbyBpbiB0aGlzIHJldHVybkZpYmVyLCBkbyB0aGF0IG5leHQuXG4gICAgICAgIHJldHVybiBzaWJsaW5nRmliZXI7XG4gICAgICB9IGVsc2UgaWYgKHJldHVybkZpYmVyICE9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gbW9yZSB3b3JrIGluIHRoaXMgcmV0dXJuRmliZXIuIENvbXBsZXRlIHRoZSByZXR1cm5GaWJlci5cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlcjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSd2ZSByZWFjaGVkIHRoZSByb290LlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgICAgIC8vIFJlY29yZCB0aGUgcmVuZGVyIGR1cmF0aW9uIGZvciB0aGUgZmliZXIgdGhhdCBlcnJvcmVkLlxuICAgICAgICBzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZ0FuZFJlY29yZERlbHRhKHdvcmtJblByb2dyZXNzLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gSW5jbHVkZSB0aGUgdGltZSBzcGVudCB3b3JraW5nIG9uIGZhaWxlZCBjaGlsZHJlbiBiZWZvcmUgY29udGludWluZy5cbiAgICAgICAgdmFyIGFjdHVhbER1cmF0aW9uID0gd29ya0luUHJvZ3Jlc3MuYWN0dWFsRHVyYXRpb247XG4gICAgICAgIHZhciBjaGlsZCA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICBhY3R1YWxEdXJhdGlvbiArPSBjaGlsZC5hY3R1YWxEdXJhdGlvbjtcbiAgICAgICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuYWN0dWFsRHVyYXRpb24gPSBhY3R1YWxEdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhpcyBmaWJlciBkaWQgbm90IGNvbXBsZXRlIGJlY2F1c2Ugc29tZXRoaW5nIHRocmV3LiBQb3AgdmFsdWVzIG9mZlxuICAgICAgLy8gdGhlIHN0YWNrIHdpdGhvdXQgZW50ZXJpbmcgdGhlIGNvbXBsZXRlIHBoYXNlLiBJZiB0aGlzIGlzIGEgYm91bmRhcnksXG4gICAgICAvLyBjYXB0dXJlIHZhbHVlcyBpZiBwb3NzaWJsZS5cbiAgICAgIHZhciBuZXh0ID0gdW53aW5kV29yayh3b3JrSW5Qcm9ncmVzcywgbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIC8vIEJlY2F1c2UgdGhpcyBmaWJlciBkaWQgbm90IGNvbXBsZXRlLCBkb24ndCByZXNldCBpdHMgZXhwaXJhdGlvbiB0aW1lLlxuICAgICAgaWYgKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyAmIERpZENhcHR1cmUpIHtcbiAgICAgICAgLy8gUmVzdGFydGluZyBhbiBlcnJvciBib3VuZGFyeVxuICAgICAgICBzdG9wRmFpbGVkV29ya1RpbWVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0b3BXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuXG4gICAgICB7XG4gICAgICAgIHJlc2V0Q3VycmVudEZpYmVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0ICE9PSBudWxsKSB7XG4gICAgICAgIHN0b3BXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBpZiAodHJ1ZSAmJiBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sKSB7XG4gICAgICAgICAgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbC5vbkNvbXBsZXRlV29yayh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBjb21wbGV0aW5nIHRoaXMgd29yayBzcGF3bmVkIG5ldyB3b3JrLCBkbyB0aGF0IG5leHQuIFdlJ2xsIGNvbWVcbiAgICAgICAgLy8gYmFjayBoZXJlIGFnYWluLlxuICAgICAgICAvLyBTaW5jZSB3ZSdyZSByZXN0YXJ0aW5nLCByZW1vdmUgYW55dGhpbmcgdGhhdCBpcyBub3QgYSBob3N0IGVmZmVjdFxuICAgICAgICAvLyBmcm9tIHRoZSBlZmZlY3QgdGFnLlxuICAgICAgICBuZXh0LmVmZmVjdFRhZyAmPSBIb3N0RWZmZWN0TWFzaztcbiAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXR1cm5GaWJlciAhPT0gbnVsbCkge1xuICAgICAgICAvLyBNYXJrIHRoZSBwYXJlbnQgZmliZXIgYXMgaW5jb21wbGV0ZSBhbmQgY2xlYXIgaXRzIGVmZmVjdCBsaXN0LlxuICAgICAgICByZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9IHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBudWxsO1xuICAgICAgICByZXR1cm5GaWJlci5lZmZlY3RUYWcgfD0gSW5jb21wbGV0ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRydWUgJiYgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbCkge1xuICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uQ29tcGxldGVXb3JrKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNpYmxpbmdGaWJlciAhPT0gbnVsbCkge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBtb3JlIHdvcmsgdG8gZG8gaW4gdGhpcyByZXR1cm5GaWJlciwgZG8gdGhhdCBuZXh0LlxuICAgICAgICByZXR1cm4gc2libGluZ0ZpYmVyO1xuICAgICAgfSBlbHNlIGlmIChyZXR1cm5GaWJlciAhPT0gbnVsbCkge1xuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIG1vcmUgd29yayBpbiB0aGlzIHJldHVybkZpYmVyLiBDb21wbGV0ZSB0aGUgcmV0dXJuRmliZXIuXG4gICAgICAgIHdvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXI7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gV2l0aG91dCB0aGlzIGV4cGxpY2l0IG51bGwgcmV0dXJuIEZsb3cgY29tcGxhaW5zIG9mIGludmFsaWQgcmV0dXJuIHR5cGVcbiAgLy8gVE9ETyBSZW1vdmUgdGhlIGFib3ZlIHdoaWxlKHRydWUpIGxvb3BcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVucmVhY2hhYmxlXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBwZXJmb3JtVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcykge1xuICAvLyBUaGUgY3VycmVudCwgZmx1c2hlZCwgc3RhdGUgb2YgdGhpcyBmaWJlciBpcyB0aGUgYWx0ZXJuYXRlLlxuICAvLyBJZGVhbGx5IG5vdGhpbmcgc2hvdWxkIHJlbHkgb24gdGhpcywgYnV0IHJlbHlpbmcgb24gaXQgaGVyZVxuICAvLyBtZWFucyB0aGF0IHdlIGRvbid0IG5lZWQgYW4gYWRkaXRpb25hbCBmaWVsZCBvbiB0aGUgd29yayBpblxuICAvLyBwcm9ncmVzcy5cbiAgdmFyIGN1cnJlbnQkJDEgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG5cbiAgLy8gU2VlIGlmIGJlZ2lubmluZyB0aGlzIHdvcmsgc3Bhd25zIG1vcmUgd29yay5cbiAgc3RhcnRXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuICB7XG4gICAgc2V0Q3VycmVudEZpYmVyKHdvcmtJblByb2dyZXNzKTtcbiAgfVxuXG4gIGlmICh0cnVlICYmIHJlcGxheUZhaWxlZFVuaXRPZldvcmtXaXRoSW52b2tlR3VhcmRlZENhbGxiYWNrKSB7XG4gICAgc3Rhc2hlZFdvcmtJblByb2dyZXNzUHJvcGVydGllcyA9IGFzc2lnbkZpYmVyUHJvcGVydGllc0luREVWKHN0YXNoZWRXb3JrSW5Qcm9ncmVzc1Byb3BlcnRpZXMsIHdvcmtJblByb2dyZXNzKTtcbiAgfVxuXG4gIHZhciBuZXh0ID0gdm9pZCAwO1xuICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgUHJvZmlsZU1vZGUpIHtcbiAgICAgIHN0YXJ0UHJvZmlsZXJUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgbmV4dCA9IGJlZ2luV29yayhjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuXG4gICAgaWYgKHdvcmtJblByb2dyZXNzLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgLy8gUmVjb3JkIHRoZSByZW5kZXIgZHVyYXRpb24gYXNzdW1pbmcgd2UgZGlkbid0IGJhaWxvdXQgKG9yIGVycm9yKS5cbiAgICAgIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nQW5kUmVjb3JkRGVsdGEod29ya0luUHJvZ3Jlc3MsIHRydWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBuZXh0ID0gYmVnaW5Xb3JrKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIH1cblxuICB7XG4gICAgcmVzZXRDdXJyZW50RmliZXIoKTtcbiAgICBpZiAoaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrKSB7XG4gICAgICAvLyBDdXJyZW50bHkgcmVwbGF5aW5nIGEgZmFpbGVkIHVuaXQgb2Ygd29yay4gVGhpcyBzaG91bGQgYmUgdW5yZWFjaGFibGUsXG4gICAgICAvLyBiZWNhdXNlIHRoZSByZW5kZXIgcGhhc2UgaXMgbWVhbnQgdG8gYmUgaWRlbXBvdGVudCwgYW5kIGl0IHNob3VsZFxuICAgICAgLy8gaGF2ZSB0aHJvd24gYWdhaW4uIFNpbmNlIGl0IGRpZG4ndCwgcmV0aHJvdyB0aGUgb3JpZ2luYWwgZXJyb3IsIHNvXG4gICAgICAvLyBSZWFjdCdzIGludGVybmFsIHN0YWNrIGlzIG5vdCBtaXNhbGlnbmVkLlxuICAgICAgcmV0aHJvd09yaWdpbmFsRXJyb3IoKTtcbiAgICB9XG4gIH1cbiAgaWYgKHRydWUgJiYgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbCkge1xuICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wub25CZWdpbldvcmsod29ya0luUHJvZ3Jlc3MpO1xuICB9XG5cbiAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICAvLyBJZiB0aGlzIGRvZXNuJ3Qgc3Bhd24gbmV3IHdvcmssIGNvbXBsZXRlIHRoZSBjdXJyZW50IHdvcmsuXG4gICAgbmV4dCA9IGNvbXBsZXRlVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcyk7XG4gIH1cblxuICBSZWFjdEN1cnJlbnRPd25lciQyLmN1cnJlbnQgPSBudWxsO1xuXG4gIHJldHVybiBuZXh0O1xufVxuXG5mdW5jdGlvbiB3b3JrTG9vcChpc1lpZWxkeSkge1xuICBpZiAoIWlzWWllbGR5KSB7XG4gICAgLy8gRmx1c2ggd29yayB3aXRob3V0IHlpZWxkaW5nXG4gICAgd2hpbGUgKG5leHRVbml0T2ZXb3JrICE9PSBudWxsKSB7XG4gICAgICBuZXh0VW5pdE9mV29yayA9IHBlcmZvcm1Vbml0T2ZXb3JrKG5leHRVbml0T2ZXb3JrKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRmx1c2ggYXN5bmNocm9ub3VzIHdvcmsgdW50aWwgdGhlcmUncyBhIGhpZ2hlciBwcmlvcml0eSBldmVudFxuICAgIHdoaWxlIChuZXh0VW5pdE9mV29yayAhPT0gbnVsbCAmJiAhc2hvdWxkWWllbGRUb1JlbmRlcmVyKCkpIHtcbiAgICAgIG5leHRVbml0T2ZXb3JrID0gcGVyZm9ybVVuaXRPZldvcmsobmV4dFVuaXRPZldvcmspO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJSb290KHJvb3QsIGlzWWllbGR5KSB7XG4gICEhaXNXb3JraW5nID8gaW52YXJpYW50KGZhbHNlLCAncmVuZGVyUm9vdCB3YXMgY2FsbGVkIHJlY3Vyc2l2ZWx5LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gIGZsdXNoUGFzc2l2ZUVmZmVjdHMoKTtcblxuICBpc1dvcmtpbmcgPSB0cnVlO1xuICB2YXIgcHJldmlvdXNEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50O1xuICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG5cbiAgdmFyIGV4cGlyYXRpb25UaW1lID0gcm9vdC5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtcblxuICAvLyBDaGVjayBpZiB3ZSdyZSBzdGFydGluZyBmcm9tIGEgZnJlc2ggc3RhY2ssIG9yIGlmIHdlJ3JlIHJlc3VtaW5nIGZyb21cbiAgLy8gcHJldmlvdXNseSB5aWVsZGVkIHdvcmsuXG4gIGlmIChleHBpcmF0aW9uVGltZSAhPT0gbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lIHx8IHJvb3QgIT09IG5leHRSb290IHx8IG5leHRVbml0T2ZXb3JrID09PSBudWxsKSB7XG4gICAgLy8gUmVzZXQgdGhlIHN0YWNrIGFuZCBzdGFydCB3b3JraW5nIGZyb20gdGhlIHJvb3QuXG4gICAgcmVzZXRTdGFjaygpO1xuICAgIG5leHRSb290ID0gcm9vdDtcbiAgICBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICBuZXh0VW5pdE9mV29yayA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKG5leHRSb290LmN1cnJlbnQsIG51bGwsIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgcm9vdC5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG5cbiAgICBpZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGludGVyYWN0aW9ucyB0aGlzIGJhdGNoIG9mIHdvcmsgY3VycmVudGx5IGluY2x1ZGVzLFxuICAgICAgLy8gU28gdGhhdCB3ZSBjYW4gYWNjdXJhdGVseSBhdHRyaWJ1dGUgdGltZSBzcGVudCB3b3JraW5nIG9uIGl0LFxuICAgICAgdmFyIGludGVyYWN0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICAgIHJvb3QucGVuZGluZ0ludGVyYWN0aW9uTWFwLmZvckVhY2goZnVuY3Rpb24gKHNjaGVkdWxlZEludGVyYWN0aW9ucywgc2NoZWR1bGVkRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgaWYgKHNjaGVkdWxlZEV4cGlyYXRpb25UaW1lID49IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgICAgc2NoZWR1bGVkSW50ZXJhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJhY3Rpb25zLmFkZChpbnRlcmFjdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCBzZXQgb2YgaW50ZXJhY3Rpb25zIG9uIHRoZSBGaWJlclJvb3QgZm9yIGEgZmV3IHJlYXNvbnM6XG4gICAgICAvLyBXZSBjYW4gcmUtdXNlIGl0IGluIGhvdCBmdW5jdGlvbnMgbGlrZSByZW5kZXJSb290KCkgd2l0aG91dCBoYXZpbmcgdG8gcmVjYWxjdWxhdGUgaXQuXG4gICAgICAvLyBXZSB3aWxsIGFsc28gdXNlIGl0IGluIGNvbW1pdFdvcmsoKSB0byBwYXNzIHRvIGFueSBQcm9maWxlciBvblJlbmRlcigpIGhvb2tzLlxuICAgICAgLy8gVGhpcyBhbHNvIHByb3ZpZGVzIERldlRvb2xzIHdpdGggYSB3YXkgdG8gYWNjZXNzIGl0IHdoZW4gdGhlIG9uQ29tbWl0Um9vdCgpIGhvb2sgaXMgY2FsbGVkLlxuICAgICAgcm9vdC5tZW1vaXplZEludGVyYWN0aW9ucyA9IGludGVyYWN0aW9ucztcblxuICAgICAgaWYgKGludGVyYWN0aW9ucy5zaXplID4gMCkge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IHRyYWNpbmcuX19zdWJzY3JpYmVyUmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIHRocmVhZElEID0gY29tcHV0ZVRocmVhZElEKGV4cGlyYXRpb25UaW1lLCByb290LmludGVyYWN0aW9uVGhyZWFkSUQpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm9uV29ya1N0YXJ0ZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFdvcmsgdGhyb3duIGJ5IGFuIGludGVyYWN0aW9uIHRyYWNpbmcgc3Vic2NyaWJlciBzaG91bGQgYmUgcmV0aHJvd24sXG4gICAgICAgICAgICAvLyBCdXQgb25seSBvbmNlIGl0J3Mgc2FmZSAodG8gYXZvaWQgbGVhdmluZyB0aGUgc2NoZWR1bGVyIGluIGFuIGludmFsaWQgc3RhdGUpLlxuICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGVycm9yIGZvciBub3cgYW5kIHdlJ2xsIHJlLXRocm93IGluIGZpbmlzaFJlbmRlcmluZygpLlxuICAgICAgICAgICAgaWYgKCFoYXNVbmhhbmRsZWRFcnJvcikge1xuICAgICAgICAgICAgICBoYXNVbmhhbmRsZWRFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgIHVuaGFuZGxlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHByZXZJbnRlcmFjdGlvbnMgPSBudWxsO1xuICBpZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICAgIC8vIFdlJ3JlIGFib3V0IHRvIHN0YXJ0IG5ldyB0cmFjZWQgd29yay5cbiAgICAvLyBSZXN0b3JlIHBlbmRpbmcgaW50ZXJhY3Rpb25zIHNvIGNhc2NhZGluZyB3b3JrIHRyaWdnZXJlZCBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZSB3aWxsIGJlIGFjY291bnRlZCBmb3IuXG4gICAgcHJldkludGVyYWN0aW9ucyA9IHRyYWNpbmcuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudDtcbiAgICB0cmFjaW5nLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQgPSByb290Lm1lbW9pemVkSW50ZXJhY3Rpb25zO1xuICB9XG5cbiAgdmFyIGRpZEZhdGFsID0gZmFsc2U7XG5cbiAgc3RhcnRXb3JrTG9vcFRpbWVyKG5leHRVbml0T2ZXb3JrKTtcblxuICBkbyB7XG4gICAgdHJ5IHtcbiAgICAgIHdvcmtMb29wKGlzWWllbGR5KTtcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSkge1xuICAgICAgcmVzZXRDb250ZXh0RGVwZW5kZW5jZXMoKTtcbiAgICAgIHJlc2V0SG9va3MoKTtcblxuICAgICAgLy8gUmVzZXQgaW4gY2FzZSBjb21wbGV0aW9uIHRocm93cy5cbiAgICAgIC8vIFRoaXMgaXMgb25seSB1c2VkIGluIERFViBhbmQgd2hlbiByZXBsYXlpbmcgaXMgb24uXG4gICAgICB2YXIgbWF5UmVwbGF5ID0gdm9pZCAwO1xuICAgICAgaWYgKHRydWUgJiYgcmVwbGF5RmFpbGVkVW5pdE9mV29ya1dpdGhJbnZva2VHdWFyZGVkQ2FsbGJhY2spIHtcbiAgICAgICAgbWF5UmVwbGF5ID0gbWF5UmVwbGF5RmFpbGVkVW5pdE9mV29yaztcbiAgICAgICAgbWF5UmVwbGF5RmFpbGVkVW5pdE9mV29yayA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0VW5pdE9mV29yayA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgZmF0YWwgZXJyb3IuXG4gICAgICAgIGRpZEZhdGFsID0gdHJ1ZTtcbiAgICAgICAgb25VbmNhdWdodEVycm9yKHRocm93blZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbmFibGVQcm9maWxlclRpbWVyICYmIG5leHRVbml0T2ZXb3JrLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAgIC8vIFJlY29yZCB0aGUgdGltZSBzcGVudCByZW5kZXJpbmcgYmVmb3JlIGFuIGVycm9yIHdhcyB0aHJvd24uXG4gICAgICAgICAgLy8gVGhpcyBhdm9pZHMgaW5hY2N1cmF0ZSBQcm9maWxlciBkdXJhdGlvbnMgaW4gdGhlIGNhc2Ugb2YgYSBzdXNwZW5kZWQgcmVuZGVyLlxuICAgICAgICAgIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nQW5kUmVjb3JkRGVsdGEobmV4dFVuaXRPZldvcmssIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAge1xuICAgICAgICAgIC8vIFJlc2V0IGdsb2JhbCBkZWJ1ZyBzdGF0ZVxuICAgICAgICAgIC8vIFdlIGFzc3VtZSB0aGlzIGlzIGRlZmluZWQgaW4gREVWXG4gICAgICAgICAgcmVzZXRDdXJyZW50bHlQcm9jZXNzaW5nUXVldWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cnVlICYmIHJlcGxheUZhaWxlZFVuaXRPZldvcmtXaXRoSW52b2tlR3VhcmRlZENhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKG1heVJlcGxheSkge1xuICAgICAgICAgICAgdmFyIGZhaWxlZFVuaXRPZldvcmsgPSBuZXh0VW5pdE9mV29yaztcbiAgICAgICAgICAgIHJlcGxheVVuaXRPZldvcmsoZmFpbGVkVW5pdE9mV29yaywgdGhyb3duVmFsdWUsIGlzWWllbGR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiB3ZSBhbHJlYWR5IGtub3cgdGhpcyBpc24ndCB0cnVlIGluIHNvbWUgY2FzZXMuXG4gICAgICAgIC8vIEF0IGxlYXN0IHRoaXMgc2hvd3MgYSBuaWNlciBlcnJvciBtZXNzYWdlIHVudGlsIHdlIGZpZ3VyZSBvdXQgdGhlIGNhdXNlLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEyNDQ5I2lzc3VlY29tbWVudC0zODY3Mjc0MzFcbiAgICAgICAgIShuZXh0VW5pdE9mV29yayAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdGYWlsZWQgdG8gcmVwbGF5IHJlbmRlcmluZyBhZnRlciBhbiBlcnJvci4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSB3aXRoIGEgcmVwcm9kdWNpbmcgY2FzZSB0byBoZWxwIHVzIGZpbmQgaXQuJykgOiB2b2lkIDA7XG5cbiAgICAgICAgdmFyIHNvdXJjZUZpYmVyID0gbmV4dFVuaXRPZldvcms7XG4gICAgICAgIHZhciByZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLnJldHVybjtcbiAgICAgICAgaWYgKHJldHVybkZpYmVyID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyB0aGUgcm9vdC4gVGhlIHJvb3QgY291bGQgY2FwdHVyZSBpdHMgb3duIGVycm9ycy4gSG93ZXZlcixcbiAgICAgICAgICAvLyB3ZSBkb24ndCBrbm93IGlmIGl0IGVycm9ycyBiZWZvcmUgb3IgYWZ0ZXIgd2UgcHVzaGVkIHRoZSBob3N0XG4gICAgICAgICAgLy8gY29udGV4dC4gVGhpcyBpbmZvcm1hdGlvbiBpcyBuZWVkZWQgdG8gYXZvaWQgYSBzdGFjayBtaXNtYXRjaC5cbiAgICAgICAgICAvLyBCZWNhdXNlIHdlJ3JlIG5vdCBzdXJlLCB0cmVhdCB0aGlzIGFzIGEgZmF0YWwgZXJyb3IuIFdlIGNvdWxkIHRyYWNrXG4gICAgICAgICAgLy8gd2hpY2ggcGhhc2UgaXQgZmFpbHMgaW4sIGJ1dCBkb2Vzbid0IHNlZW0gd29ydGggaXQuIEF0IGxlYXN0XG4gICAgICAgICAgLy8gZm9yIG5vdy5cbiAgICAgICAgICBkaWRGYXRhbCA9IHRydWU7XG4gICAgICAgICAgb25VbmNhdWdodEVycm9yKHRocm93blZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvd0V4Y2VwdGlvbihyb290LCByZXR1cm5GaWJlciwgc291cmNlRmliZXIsIHRocm93blZhbHVlLCBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgIG5leHRVbml0T2ZXb3JrID0gY29tcGxldGVVbml0T2ZXb3JrKHNvdXJjZUZpYmVyKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBicmVhaztcbiAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICAvLyBUcmFjZWQgd29yayBpcyBkb25lIGZvciBub3c7IHJlc3RvcmUgdGhlIHByZXZpb3VzIGludGVyYWN0aW9ucy5cbiAgICB0cmFjaW5nLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQgPSBwcmV2SW50ZXJhY3Rpb25zO1xuICB9XG5cbiAgLy8gV2UncmUgZG9uZSBwZXJmb3JtaW5nIHdvcmsuIFRpbWUgdG8gY2xlYW4gdXAuXG4gIGlzV29ya2luZyA9IGZhbHNlO1xuICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgPSBwcmV2aW91c0Rpc3BhdGNoZXI7XG4gIHJlc2V0Q29udGV4dERlcGVuZGVuY2VzKCk7XG4gIHJlc2V0SG9va3MoKTtcblxuICAvLyBZaWVsZCBiYWNrIHRvIG1haW4gdGhyZWFkLlxuICBpZiAoZGlkRmF0YWwpIHtcbiAgICB2YXIgX2RpZENvbXBsZXRlUm9vdCA9IGZhbHNlO1xuICAgIHN0b3BXb3JrTG9vcFRpbWVyKGludGVycnVwdGVkQnksIF9kaWRDb21wbGV0ZVJvb3QpO1xuICAgIGludGVycnVwdGVkQnkgPSBudWxsO1xuICAgIC8vIFRoZXJlIHdhcyBhIGZhdGFsIGVycm9yLlxuICAgIHtcbiAgICAgIHJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldigpO1xuICAgIH1cbiAgICAvLyBgbmV4dFJvb3RgIHBvaW50cyB0byB0aGUgaW4tcHJvZ3Jlc3Mgcm9vdC4gQSBub24tbnVsbCB2YWx1ZSBpbmRpY2F0ZXNcbiAgICAvLyB0aGF0IHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYW4gYXN5bmMgcmVuZGVyLiBTZXQgaXQgdG8gbnVsbCB0byBpbmRpY2F0ZVxuICAgIC8vIHRoZXJlJ3Mgbm8gbW9yZSB3b3JrIHRvIGJlIGRvbmUgaW4gdGhlIGN1cnJlbnQgYmF0Y2guXG4gICAgbmV4dFJvb3QgPSBudWxsO1xuICAgIG9uRmF0YWwocm9vdCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5leHRVbml0T2ZXb3JrICE9PSBudWxsKSB7XG4gICAgLy8gVGhlcmUncyBzdGlsbCByZW1haW5pbmcgYXN5bmMgd29yayBpbiB0aGlzIHRyZWUsIGJ1dCB3ZSByYW4gb3V0IG9mIHRpbWVcbiAgICAvLyBpbiB0aGUgY3VycmVudCBmcmFtZS4gWWllbGQgYmFjayB0byB0aGUgcmVuZGVyZXIuIFVubGVzcyB3ZSdyZVxuICAgIC8vIGludGVycnVwdGVkIGJ5IGEgaGlnaGVyIHByaW9yaXR5IHVwZGF0ZSwgd2UnbGwgY29udGludWUgbGF0ZXIgZnJvbSB3aGVyZVxuICAgIC8vIHdlIGxlZnQgb2ZmLlxuICAgIHZhciBfZGlkQ29tcGxldGVSb290MiA9IGZhbHNlO1xuICAgIHN0b3BXb3JrTG9vcFRpbWVyKGludGVycnVwdGVkQnksIF9kaWRDb21wbGV0ZVJvb3QyKTtcbiAgICBpbnRlcnJ1cHRlZEJ5ID0gbnVsbDtcbiAgICBvbllpZWxkKHJvb3QpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdlIGNvbXBsZXRlZCB0aGUgd2hvbGUgdHJlZS5cbiAgdmFyIGRpZENvbXBsZXRlUm9vdCA9IHRydWU7XG4gIHN0b3BXb3JrTG9vcFRpbWVyKGludGVycnVwdGVkQnksIGRpZENvbXBsZXRlUm9vdCk7XG4gIHZhciByb290V29ya0luUHJvZ3Jlc3MgPSByb290LmN1cnJlbnQuYWx0ZXJuYXRlO1xuICAhKHJvb3RXb3JrSW5Qcm9ncmVzcyAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdGaW5pc2hlZCByb290IHNob3VsZCBoYXZlIGEgd29yay1pbi1wcm9ncmVzcy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcblxuICAvLyBgbmV4dFJvb3RgIHBvaW50cyB0byB0aGUgaW4tcHJvZ3Jlc3Mgcm9vdC4gQSBub24tbnVsbCB2YWx1ZSBpbmRpY2F0ZXNcbiAgLy8gdGhhdCB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGFuIGFzeW5jIHJlbmRlci4gU2V0IGl0IHRvIG51bGwgdG8gaW5kaWNhdGVcbiAgLy8gdGhlcmUncyBubyBtb3JlIHdvcmsgdG8gYmUgZG9uZSBpbiB0aGUgY3VycmVudCBiYXRjaC5cbiAgbmV4dFJvb3QgPSBudWxsO1xuICBpbnRlcnJ1cHRlZEJ5ID0gbnVsbDtcblxuICBpZiAobmV4dFJlbmRlckRpZEVycm9yKSB7XG4gICAgLy8gVGhlcmUgd2FzIGFuIGVycm9yXG4gICAgaWYgKGhhc0xvd2VyUHJpb3JpdHlXb3JrKHJvb3QsIGV4cGlyYXRpb25UaW1lKSkge1xuICAgICAgLy8gVGhlcmUncyBsb3dlciBwcmlvcml0eSB3b3JrLiBJZiBzbywgaXQgbWF5IGhhdmUgdGhlIGVmZmVjdCBvZiBmaXhpbmdcbiAgICAgIC8vIHRoZSBleGNlcHRpb24gdGhhdCB3YXMganVzdCB0aHJvd24uIEV4aXQgd2l0aG91dCBjb21taXR0aW5nLiBUaGlzIGlzXG4gICAgICAvLyBzaW1pbGFyIHRvIGEgc3VzcGVuZCwgYnV0IHdpdGhvdXQgYSB0aW1lb3V0IGJlY2F1c2Ugd2UncmUgbm90IHdhaXRpbmdcbiAgICAgIC8vIGZvciBhIHByb21pc2UgdG8gcmVzb2x2ZS4gUmVhY3Qgd2lsbCByZXN0YXJ0IGF0IHRoZSBsb3dlclxuICAgICAgLy8gcHJpb3JpdHkgbGV2ZWwuXG4gICAgICBtYXJrU3VzcGVuZGVkUHJpb3JpdHlMZXZlbChyb290LCBleHBpcmF0aW9uVGltZSk7XG4gICAgICB2YXIgc3VzcGVuZGVkRXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICAgIHZhciByb290RXhwaXJhdGlvblRpbWUgPSByb290LmV4cGlyYXRpb25UaW1lO1xuICAgICAgb25TdXNwZW5kKHJvb3QsIHJvb3RXb3JrSW5Qcm9ncmVzcywgc3VzcGVuZGVkRXhwaXJhdGlvblRpbWUsIHJvb3RFeHBpcmF0aW9uVGltZSwgLTEgLy8gSW5kaWNhdGVzIG5vIHRpbWVvdXRcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChcbiAgICAvLyBUaGVyZSdzIG5vIGxvd2VyIHByaW9yaXR5IHdvcmssIGJ1dCB3ZSdyZSByZW5kZXJpbmcgYXN5bmNocm9ub3VzbHkuXG4gICAgLy8gU3luY2hyb25vdXNseSBhdHRlbXB0IHRvIHJlbmRlciB0aGUgc2FtZSBsZXZlbCBvbmUgbW9yZSB0aW1lLiBUaGlzIGlzXG4gICAgLy8gc2ltaWxhciB0byBhIHN1c3BlbmQsIGJ1dCB3aXRob3V0IGEgdGltZW91dCBiZWNhdXNlIHdlJ3JlIG5vdCB3YWl0aW5nXG4gICAgLy8gZm9yIGEgcHJvbWlzZSB0byByZXNvbHZlLlxuICAgICFyb290LmRpZEVycm9yICYmIGlzWWllbGR5KSB7XG4gICAgICByb290LmRpZEVycm9yID0gdHJ1ZTtcbiAgICAgIHZhciBfc3VzcGVuZGVkRXhwaXJhdGlvblRpbWUgPSByb290Lm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uID0gZXhwaXJhdGlvblRpbWU7XG4gICAgICB2YXIgX3Jvb3RFeHBpcmF0aW9uVGltZSA9IHJvb3QuZXhwaXJhdGlvblRpbWUgPSBTeW5jO1xuICAgICAgb25TdXNwZW5kKHJvb3QsIHJvb3RXb3JrSW5Qcm9ncmVzcywgX3N1c3BlbmRlZEV4cGlyYXRpb25UaW1lLCBfcm9vdEV4cGlyYXRpb25UaW1lLCAtMSAvLyBJbmRpY2F0ZXMgbm8gdGltZW91dFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNZaWVsZHkgJiYgbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zICE9PSAtMSkge1xuICAgIC8vIFRoZSB0cmVlIHdhcyBzdXNwZW5kZWQuXG4gICAgdmFyIF9zdXNwZW5kZWRFeHBpcmF0aW9uVGltZTIgPSBleHBpcmF0aW9uVGltZTtcbiAgICBtYXJrU3VzcGVuZGVkUHJpb3JpdHlMZXZlbChyb290LCBfc3VzcGVuZGVkRXhwaXJhdGlvblRpbWUyKTtcblxuICAgIC8vIEZpbmQgdGhlIGVhcmxpZXN0IHVuY29tbWl0dGVkIGV4cGlyYXRpb24gdGltZSBpbiB0aGUgdHJlZSwgaW5jbHVkaW5nXG4gICAgLy8gd29yayB0aGF0IGlzIHN1c3BlbmRlZC4gVGhlIHRpbWVvdXQgdGhyZXNob2xkIGNhbm5vdCBiZSBsb25nZXIgdGhhblxuICAgIC8vIHRoZSBvdmVyYWxsIGV4cGlyYXRpb24uXG4gICAgdmFyIGVhcmxpZXN0RXhwaXJhdGlvblRpbWUgPSBmaW5kRWFybGllc3RPdXRzdGFuZGluZ1ByaW9yaXR5TGV2ZWwocm9vdCwgZXhwaXJhdGlvblRpbWUpO1xuICAgIHZhciBlYXJsaWVzdEV4cGlyYXRpb25UaW1lTXMgPSBleHBpcmF0aW9uVGltZVRvTXMoZWFybGllc3RFeHBpcmF0aW9uVGltZSk7XG4gICAgaWYgKGVhcmxpZXN0RXhwaXJhdGlvblRpbWVNcyA8IG5leHRMYXRlc3RBYnNvbHV0ZVRpbWVvdXRNcykge1xuICAgICAgbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zID0gZWFybGllc3RFeHBpcmF0aW9uVGltZU1zO1xuICAgIH1cblxuICAgIC8vIFN1YnRyYWN0IHRoZSBjdXJyZW50IHRpbWUgZnJvbSB0aGUgYWJzb2x1dGUgdGltZW91dCB0byBnZXQgdGhlIG51bWJlclxuICAgIC8vIG9mIG1pbGxpc2Vjb25kcyB1bnRpbCB0aGUgdGltZW91dC4gSW4gb3RoZXIgd29yZHMsIGNvbnZlcnQgYW4gYWJzb2x1dGVcbiAgICAvLyB0aW1lc3RhbXAgdG8gYSByZWxhdGl2ZSB0aW1lLiBUaGlzIGlzIHRoZSB2YWx1ZSB0aGF0IGlzIHBhc3NlZFxuICAgIC8vIHRvIGBzZXRUaW1lb3V0YC5cbiAgICB2YXIgY3VycmVudFRpbWVNcyA9IGV4cGlyYXRpb25UaW1lVG9NcyhyZXF1ZXN0Q3VycmVudFRpbWUoKSk7XG4gICAgdmFyIG1zVW50aWxUaW1lb3V0ID0gbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zIC0gY3VycmVudFRpbWVNcztcbiAgICBtc1VudGlsVGltZW91dCA9IG1zVW50aWxUaW1lb3V0IDwgMCA/IDAgOiBtc1VudGlsVGltZW91dDtcblxuICAgIC8vIFRPRE86IEFjY291bnQgZm9yIHRoZSBKdXN0IE5vdGljZWFibGUgRGlmZmVyZW5jZVxuXG4gICAgdmFyIF9yb290RXhwaXJhdGlvblRpbWUyID0gcm9vdC5leHBpcmF0aW9uVGltZTtcbiAgICBvblN1c3BlbmQocm9vdCwgcm9vdFdvcmtJblByb2dyZXNzLCBfc3VzcGVuZGVkRXhwaXJhdGlvblRpbWUyLCBfcm9vdEV4cGlyYXRpb25UaW1lMiwgbXNVbnRpbFRpbWVvdXQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJlYWR5IHRvIGNvbW1pdC5cbiAgb25Db21wbGV0ZShyb290LCByb290V29ya0luUHJvZ3Jlc3MsIGV4cGlyYXRpb25UaW1lKTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3Ioc291cmNlRmliZXIsIHZhbHVlKSB7XG4gIHZhciBleHBpcmF0aW9uVGltZSA9IFN5bmM7XG4gIHZhciBmaWJlciA9IHNvdXJjZUZpYmVyLnJldHVybjtcbiAgd2hpbGUgKGZpYmVyICE9PSBudWxsKSB7XG4gICAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIHZhciBjdG9yID0gZmliZXIudHlwZTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICAgICAgICBpZiAodHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRDYXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNBbHJlYWR5RmFpbGVkTGVnYWN5RXJyb3JCb3VuZGFyeShpbnN0YW5jZSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3JJbmZvID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZSh2YWx1ZSwgc291cmNlRmliZXIpO1xuICAgICAgICAgIHZhciB1cGRhdGUgPSBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKGZpYmVyLCBlcnJvckluZm8sIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICBlbnF1ZXVlVXBkYXRlKGZpYmVyLCB1cGRhdGUpO1xuICAgICAgICAgIHNjaGVkdWxlV29yayhmaWJlciwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2Vycm9ySW5mbyA9IGNyZWF0ZUNhcHR1cmVkVmFsdWUodmFsdWUsIHNvdXJjZUZpYmVyKTtcbiAgICAgICAgICB2YXIgX3VwZGF0ZSA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShmaWJlciwgX2Vycm9ySW5mbywgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgIGVucXVldWVVcGRhdGUoZmliZXIsIF91cGRhdGUpO1xuICAgICAgICAgIHNjaGVkdWxlV29yayhmaWJlciwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaWJlciA9IGZpYmVyLnJldHVybjtcbiAgfVxuXG4gIGlmIChzb3VyY2VGaWJlci50YWcgPT09IEhvc3RSb290KSB7XG4gICAgLy8gRXJyb3Igd2FzIHRocm93biBhdCB0aGUgcm9vdC4gVGhlcmUgaXMgbm8gcGFyZW50LCBzbyB0aGUgcm9vdFxuICAgIC8vIGl0c2VsZiBzaG91bGQgY2FwdHVyZSBpdC5cbiAgICB2YXIgcm9vdEZpYmVyID0gc291cmNlRmliZXI7XG4gICAgdmFyIF9lcnJvckluZm8yID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZSh2YWx1ZSwgcm9vdEZpYmVyKTtcbiAgICB2YXIgX3VwZGF0ZTIgPSBjcmVhdGVSb290RXJyb3JVcGRhdGUocm9vdEZpYmVyLCBfZXJyb3JJbmZvMiwgZXhwaXJhdGlvblRpbWUpO1xuICAgIGVucXVldWVVcGRhdGUocm9vdEZpYmVyLCBfdXBkYXRlMik7XG4gICAgc2NoZWR1bGVXb3JrKHJvb3RGaWJlciwgZXhwaXJhdGlvblRpbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVUaHJlYWRJRChleHBpcmF0aW9uVGltZSwgaW50ZXJhY3Rpb25UaHJlYWRJRCkge1xuICAvLyBJbnRlcmFjdGlvbiB0aHJlYWRzIGFyZSB1bmlxdWUgcGVyIHJvb3QgYW5kIGV4cGlyYXRpb24gdGltZS5cbiAgcmV0dXJuIGV4cGlyYXRpb25UaW1lICogMTAwMCArIGludGVyYWN0aW9uVGhyZWFkSUQ7XG59XG5cbi8vIENyZWF0ZXMgYSB1bmlxdWUgYXN5bmMgZXhwaXJhdGlvbiB0aW1lLlxuZnVuY3Rpb24gY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbigpIHtcbiAgdmFyIGN1cnJlbnRUaW1lID0gcmVxdWVzdEN1cnJlbnRUaW1lKCk7XG4gIHZhciByZXN1bHQgPSBjb21wdXRlQXN5bmNFeHBpcmF0aW9uKGN1cnJlbnRUaW1lKTtcbiAgaWYgKHJlc3VsdCA+PSBsYXN0VW5pcXVlQXN5bmNFeHBpcmF0aW9uKSB7XG4gICAgLy8gU2luY2Ugd2UgYXNzdW1lIHRoZSBjdXJyZW50IHRpbWUgbW9ub3RvbmljYWxseSBpbmNyZWFzZXMsIHdlIG9ubHkgaGl0XG4gICAgLy8gdGhpcyBicmFuY2ggd2hlbiBjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uIGlzIGZpcmVkIG11bHRpcGxlIHRpbWVzXG4gICAgLy8gd2l0aGluIGEgMjAwbXMgd2luZG93IChvciB3aGF0ZXZlciB0aGUgYXN5bmMgYnVja2V0IHNpemUgaXMpLlxuICAgIHJlc3VsdCA9IGxhc3RVbmlxdWVBc3luY0V4cGlyYXRpb24gLSAxO1xuICB9XG4gIGxhc3RVbmlxdWVBc3luY0V4cGlyYXRpb24gPSByZXN1bHQ7XG4gIHJldHVybiBsYXN0VW5pcXVlQXN5bmNFeHBpcmF0aW9uO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyKGN1cnJlbnRUaW1lLCBmaWJlcikge1xuICB2YXIgcHJpb3JpdHlMZXZlbCA9IHNjaGVkdWxlci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpO1xuXG4gIHZhciBleHBpcmF0aW9uVGltZSA9IHZvaWQgMDtcbiAgaWYgKChmaWJlci5tb2RlICYgQ29uY3VycmVudE1vZGUpID09PSBOb0NvbnRleHQpIHtcbiAgICAvLyBPdXRzaWRlIG9mIGNvbmN1cnJlbnQgbW9kZSwgdXBkYXRlcyBhcmUgYWx3YXlzIHN5bmNocm9ub3VzLlxuICAgIGV4cGlyYXRpb25UaW1lID0gU3luYztcbiAgfSBlbHNlIGlmIChpc1dvcmtpbmcgJiYgIWlzQ29tbWl0dGluZyQxKSB7XG4gICAgLy8gRHVyaW5nIHJlbmRlciBwaGFzZSwgdXBkYXRlcyBleHBpcmUgZHVyaW5nIGFzIHRoZSBjdXJyZW50IHJlbmRlci5cbiAgICBleHBpcmF0aW9uVGltZSA9IG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgIGNhc2Ugc2NoZWR1bGVyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5OlxuICAgICAgICBleHBpcmF0aW9uVGltZSA9IFN5bmM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBzY2hlZHVsZXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk6XG4gICAgICAgIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZUludGVyYWN0aXZlRXhwaXJhdGlvbihjdXJyZW50VGltZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBzY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk6XG4gICAgICAgIC8vIFRoaXMgaXMgYSBub3JtYWwsIGNvbmN1cnJlbnQgdXBkYXRlXG4gICAgICAgIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZUFzeW5jRXhwaXJhdGlvbihjdXJyZW50VGltZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBzY2hlZHVsZXIudW5zdGFibGVfTG93UHJpb3JpdHk6XG4gICAgICBjYXNlIHNjaGVkdWxlci51bnN0YWJsZV9JZGxlUHJpb3JpdHk6XG4gICAgICAgIGV4cGlyYXRpb25UaW1lID0gTmV2ZXI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaW52YXJpYW50KGZhbHNlLCAnVW5rbm93biBwcmlvcml0eSBsZXZlbC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIHJlbmRlcmluZyBhIHRyZWUsIGRvIG5vdCB1cGRhdGUgYXQgdGhlIHNhbWVcbiAgICAvLyBleHBpcmF0aW9uIHRpbWUgdGhhdCBpcyBhbHJlYWR5IHJlbmRlcmluZy5cbiAgICBpZiAobmV4dFJvb3QgIT09IG51bGwgJiYgZXhwaXJhdGlvblRpbWUgPT09IG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgICAgZXhwaXJhdGlvblRpbWUgLT0gMTtcbiAgICB9XG4gIH1cblxuICAvLyBLZWVwIHRyYWNrIG9mIHRoZSBsb3dlc3QgcGVuZGluZyBpbnRlcmFjdGl2ZSBleHBpcmF0aW9uIHRpbWUuIFRoaXNcbiAgLy8gYWxsb3dzIHVzIHRvIHN5bmNocm9ub3VzbHkgZmx1c2ggYWxsIGludGVyYWN0aXZlIHVwZGF0ZXNcbiAgLy8gd2hlbiBuZWVkZWQuXG4gIC8vIFRPRE86IE1vdmUgdGhpcyB0byByZW5kZXJlcj9cbiAgaWYgKHByaW9yaXR5TGV2ZWwgPT09IHNjaGVkdWxlci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSAmJiAobG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IGV4cGlyYXRpb25UaW1lIDwgbG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSkpIHtcbiAgICBsb3dlc3RQcmlvcml0eVBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIH1cblxuICByZXR1cm4gZXhwaXJhdGlvblRpbWU7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckRpZFN1c3BlbmQocm9vdCwgYWJzb2x1dGVUaW1lb3V0TXMsIHN1c3BlbmRlZFRpbWUpIHtcbiAgLy8gU2NoZWR1bGUgdGhlIHRpbWVvdXQuXG4gIGlmIChhYnNvbHV0ZVRpbWVvdXRNcyA+PSAwICYmIG5leHRMYXRlc3RBYnNvbHV0ZVRpbWVvdXRNcyA8IGFic29sdXRlVGltZW91dE1zKSB7XG4gICAgbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zID0gYWJzb2x1dGVUaW1lb3V0TXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyRGlkRXJyb3IoKSB7XG4gIG5leHRSZW5kZXJEaWRFcnJvciA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHBpbmdTdXNwZW5kZWRSb290KHJvb3QsIHRoZW5hYmxlLCBwaW5nVGltZSkge1xuICAvLyBBIHByb21pc2UgdGhhdCBwcmV2aW91c2x5IHN1c3BlbmRlZCBSZWFjdCBmcm9tIGNvbW1pdHRpbmcgaGFzIHJlc29sdmVkLlxuICAvLyBJZiBSZWFjdCBpcyBzdGlsbCBzdXNwZW5kZWQsIHRyeSBhZ2FpbiBhdCB0aGUgcHJldmlvdXMgbGV2ZWwgKHBpbmdUaW1lKS5cblxuICB2YXIgcGluZ0NhY2hlID0gcm9vdC5waW5nQ2FjaGU7XG4gIGlmIChwaW5nQ2FjaGUgIT09IG51bGwpIHtcbiAgICAvLyBUaGUgdGhlbmFibGUgcmVzb2x2ZWQsIHNvIHdlIG5vIGxvbmdlciBuZWVkIHRvIG1lbW9pemUsIGJlY2F1c2UgaXQgd2lsbFxuICAgIC8vIG5ldmVyIGJlIHRocm93biBhZ2Fpbi5cbiAgICBwaW5nQ2FjaGUuZGVsZXRlKHRoZW5hYmxlKTtcbiAgfVxuXG4gIGlmIChuZXh0Um9vdCAhPT0gbnVsbCAmJiBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUgPT09IHBpbmdUaW1lKSB7XG4gICAgLy8gUmVjZWl2ZWQgYSBwaW5nIGF0IHRoZSBzYW1lIHByaW9yaXR5IGxldmVsIGF0IHdoaWNoIHdlJ3JlIGN1cnJlbnRseVxuICAgIC8vIHJlbmRlcmluZy4gUmVzdGFydCBmcm9tIHRoZSByb290LlxuICAgIG5leHRSb290ID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICAvLyBDb25maXJtIHRoYXQgdGhlIHJvb3QgaXMgc3RpbGwgc3VzcGVuZGVkIGF0IHRoaXMgbGV2ZWwuIE90aGVyd2lzZSBleGl0LlxuICAgIGlmIChpc1ByaW9yaXR5TGV2ZWxTdXNwZW5kZWQocm9vdCwgcGluZ1RpbWUpKSB7XG4gICAgICAvLyBQaW5nIGF0IHRoZSBvcmlnaW5hbCBsZXZlbFxuICAgICAgbWFya1BpbmdlZFByaW9yaXR5TGV2ZWwocm9vdCwgcGluZ1RpbWUpO1xuICAgICAgdmFyIHJvb3RFeHBpcmF0aW9uVGltZSA9IHJvb3QuZXhwaXJhdGlvblRpbWU7XG4gICAgICBpZiAocm9vdEV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmspIHtcbiAgICAgICAgcmVxdWVzdFdvcmsocm9vdCwgcm9vdEV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHRoZW5hYmxlKSB7XG4gIC8vIFRoZSBib3VuZGFyeSBmaWJlciAoYSBTdXNwZW5zZSBjb21wb25lbnQpIHByZXZpb3VzbHkgdGltZWQgb3V0IGFuZCB3YXNcbiAgLy8gcmVuZGVyZWQgaW4gaXRzIGZhbGxiYWNrIHN0YXRlLiBPbmUgb2YgdGhlIHByb21pc2VzIHRoYXQgc3VzcGVuZGVkIGl0IGhhc1xuICAvLyByZXNvbHZlZCwgd2hpY2ggbWVhbnMgYXQgbGVhc3QgcGFydCBvZiB0aGUgdHJlZSB3YXMgbGlrZWx5IHVuYmxvY2tlZC4gVHJ5XG4gIHZhciByZXRyeUNhY2hlID0gdm9pZCAwO1xuICBpZiAoZW5hYmxlU3VzcGVuc2VTZXJ2ZXJSZW5kZXJlcikge1xuICAgIHN3aXRjaCAoYm91bmRhcnlGaWJlci50YWcpIHtcbiAgICAgIGNhc2UgU3VzcGVuc2VDb21wb25lbnQ6XG4gICAgICAgIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERlaHlkcmF0ZWRTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgICAgcmV0cnlDYWNoZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdQaW5nZWQgdW5rbm93biBzdXNwZW5zZSBib3VuZGFyeSB0eXBlLiBUaGlzIGlzIHByb2JhYmx5IGEgYnVnIGluIFJlYWN0LicpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGU7XG4gIH1cbiAgaWYgKHJldHJ5Q2FjaGUgIT09IG51bGwpIHtcbiAgICAvLyBUaGUgdGhlbmFibGUgcmVzb2x2ZWQsIHNvIHdlIG5vIGxvbmdlciBuZWVkIHRvIG1lbW9pemUsIGJlY2F1c2UgaXQgd2lsbFxuICAgIC8vIG5ldmVyIGJlIHRocm93biBhZ2Fpbi5cbiAgICByZXRyeUNhY2hlLmRlbGV0ZSh0aGVuYWJsZSk7XG4gIH1cblxuICB2YXIgY3VycmVudFRpbWUgPSByZXF1ZXN0Q3VycmVudFRpbWUoKTtcbiAgdmFyIHJldHJ5VGltZSA9IGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIoY3VycmVudFRpbWUsIGJvdW5kYXJ5RmliZXIpO1xuICB2YXIgcm9vdCA9IHNjaGVkdWxlV29ya1RvUm9vdChib3VuZGFyeUZpYmVyLCByZXRyeVRpbWUpO1xuICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgIG1hcmtQZW5kaW5nUHJpb3JpdHlMZXZlbChyb290LCByZXRyeVRpbWUpO1xuICAgIHZhciByb290RXhwaXJhdGlvblRpbWUgPSByb290LmV4cGlyYXRpb25UaW1lO1xuICAgIGlmIChyb290RXhwaXJhdGlvblRpbWUgIT09IE5vV29yaykge1xuICAgICAgcmVxdWVzdFdvcmsocm9vdCwgcm9vdEV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVXb3JrVG9Sb290KGZpYmVyLCBleHBpcmF0aW9uVGltZSkge1xuICByZWNvcmRTY2hlZHVsZVVwZGF0ZSgpO1xuXG4gIHtcbiAgICBpZiAoZmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICAgICAgd2FybkFib3V0SW52YWxpZFVwZGF0ZXMoaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSB0aGUgc291cmNlIGZpYmVyJ3MgZXhwaXJhdGlvbiB0aW1lXG4gIGlmIChmaWJlci5leHBpcmF0aW9uVGltZSA8IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgZmliZXIuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgfVxuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIGFsdGVybmF0ZS5leHBpcmF0aW9uVGltZSA8IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIH1cbiAgLy8gV2FsayB0aGUgcGFyZW50IHBhdGggdG8gdGhlIHJvb3QgYW5kIHVwZGF0ZSB0aGUgY2hpbGQgZXhwaXJhdGlvbiB0aW1lLlxuICB2YXIgbm9kZSA9IGZpYmVyLnJldHVybjtcbiAgdmFyIHJvb3QgPSBudWxsO1xuICBpZiAobm9kZSA9PT0gbnVsbCAmJiBmaWJlci50YWcgPT09IEhvc3RSb290KSB7XG4gICAgcm9vdCA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgYWx0ZXJuYXRlID0gbm9kZS5hbHRlcm5hdGU7XG4gICAgICBpZiAobm9kZS5jaGlsZEV4cGlyYXRpb25UaW1lIDwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgbm9kZS5jaGlsZEV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgICAgIGlmIChhbHRlcm5hdGUgIT09IG51bGwgJiYgYWx0ZXJuYXRlLmNoaWxkRXhwaXJhdGlvblRpbWUgPCBleHBpcmF0aW9uVGltZSkge1xuICAgICAgICAgIGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lIDwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgYWx0ZXJuYXRlLmNoaWxkRXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnJldHVybiA9PT0gbnVsbCAmJiBub2RlLnRhZyA9PT0gSG9zdFJvb3QpIHtcbiAgICAgICAgcm9vdCA9IG5vZGUuc3RhdGVOb2RlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICAgIGlmIChyb290ICE9PSBudWxsKSB7XG4gICAgICB2YXIgaW50ZXJhY3Rpb25zID0gdHJhY2luZy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50O1xuICAgICAgaWYgKGludGVyYWN0aW9ucy5zaXplID4gMCkge1xuICAgICAgICB2YXIgcGVuZGluZ0ludGVyYWN0aW9uTWFwID0gcm9vdC5wZW5kaW5nSW50ZXJhY3Rpb25NYXA7XG4gICAgICAgIHZhciBwZW5kaW5nSW50ZXJhY3Rpb25zID0gcGVuZGluZ0ludGVyYWN0aW9uTWFwLmdldChleHBpcmF0aW9uVGltZSk7XG4gICAgICAgIGlmIChwZW5kaW5nSW50ZXJhY3Rpb25zICE9IG51bGwpIHtcbiAgICAgICAgICBpbnRlcmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIGlmICghcGVuZGluZ0ludGVyYWN0aW9ucy5oYXMoaW50ZXJhY3Rpb24pKSB7XG4gICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcGVuZGluZyBhc3luYyB3b3JrIGNvdW50IGZvciBwcmV2aW91c2x5IHVuc2NoZWR1bGVkIGludGVyYWN0aW9uLlxuICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5fX2NvdW50Kys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBlbmRpbmdJbnRlcmFjdGlvbnMuYWRkKGludGVyYWN0aW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZW5kaW5nSW50ZXJhY3Rpb25NYXAuc2V0KGV4cGlyYXRpb25UaW1lLCBuZXcgU2V0KGludGVyYWN0aW9ucykpO1xuXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBwZW5kaW5nIGFzeW5jIHdvcmsgY291bnQgZm9yIHRoZSBjdXJyZW50IGludGVyYWN0aW9ucy5cbiAgICAgICAgICBpbnRlcmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIGludGVyYWN0aW9uLl9fY291bnQrKztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gdHJhY2luZy5fX3N1YnNjcmliZXJSZWYuY3VycmVudDtcbiAgICAgICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgdGhyZWFkSUQgPSBjb21wdXRlVGhyZWFkSUQoZXhwaXJhdGlvblRpbWUsIHJvb3QuaW50ZXJhY3Rpb25UaHJlYWRJRCk7XG4gICAgICAgICAgc3Vic2NyaWJlci5vbldvcmtTY2hlZHVsZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJvb3Q7XG59XG5cbmZ1bmN0aW9uIHdhcm5JZk5vdEN1cnJlbnRseUJhdGNoaW5nSW5EZXYoZmliZXIpIHtcbiAge1xuICAgIGlmIChpc1JlbmRlcmluZyA9PT0gZmFsc2UgJiYgaXNCYXRjaGluZ1VwZGF0ZXMgPT09IGZhbHNlKSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdBbiB1cGRhdGUgdG8gJXMgaW5zaWRlIGEgdGVzdCB3YXMgbm90IHdyYXBwZWQgaW4gYWN0KC4uLikuXFxuXFxuJyArICdXaGVuIHRlc3RpbmcsIGNvZGUgdGhhdCBjYXVzZXMgUmVhY3Qgc3RhdGUgdXBkYXRlcyBzaG91bGQgYmUgd3JhcHBlZCBpbnRvIGFjdCguLi4pOlxcblxcbicgKyAnYWN0KCgpID0+IHtcXG4nICsgJyAgLyogZmlyZSBldmVudHMgdGhhdCB1cGRhdGUgc3RhdGUgKi9cXG4nICsgJ30pO1xcbicgKyAnLyogYXNzZXJ0IG9uIHRoZSBvdXRwdXQgKi9cXG5cXG4nICsgXCJUaGlzIGVuc3VyZXMgdGhhdCB5b3UncmUgdGVzdGluZyB0aGUgYmVoYXZpb3IgdGhlIHVzZXIgd291bGQgc2VlIGluIHRoZSBicm93c2VyLlwiICsgJyBMZWFybiBtb3JlIGF0IGh0dHBzOi8vZmIubWUvcmVhY3Qtd3JhcC10ZXN0cy13aXRoLWFjdCcgKyAnJXMnLCBnZXRDb21wb25lbnROYW1lKGZpYmVyLnR5cGUpLCBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2QoZmliZXIpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVXb3JrKGZpYmVyLCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgcm9vdCA9IHNjaGVkdWxlV29ya1RvUm9vdChmaWJlciwgZXhwaXJhdGlvblRpbWUpO1xuICBpZiAocm9vdCA9PT0gbnVsbCkge1xuICAgIHtcbiAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAgd2FybkFib3V0VXBkYXRlT25Vbm1vdW50ZWQoZmliZXIsIHRydWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICAgIGNhc2UgTWVtb0NvbXBvbmVudDpcbiAgICAgICAgY2FzZSBTaW1wbGVNZW1vQ29tcG9uZW50OlxuICAgICAgICAgIHdhcm5BYm91dFVwZGF0ZU9uVW5tb3VudGVkKGZpYmVyLCBmYWxzZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghaXNXb3JraW5nICYmIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrICYmIGV4cGlyYXRpb25UaW1lID4gbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhpcyBpcyBhbiBpbnRlcnJ1cHRpb24uIChVc2VkIGZvciBwZXJmb3JtYW5jZSB0cmFja2luZy4pXG4gICAgaW50ZXJydXB0ZWRCeSA9IGZpYmVyO1xuICAgIHJlc2V0U3RhY2soKTtcbiAgfVxuICBtYXJrUGVuZGluZ1ByaW9yaXR5TGV2ZWwocm9vdCwgZXhwaXJhdGlvblRpbWUpO1xuICBpZiAoXG4gIC8vIElmIHdlJ3JlIGluIHRoZSByZW5kZXIgcGhhc2UsIHdlIGRvbid0IG5lZWQgdG8gc2NoZWR1bGUgdGhpcyByb290XG4gIC8vIGZvciBhbiB1cGRhdGUsIGJlY2F1c2Ugd2UnbGwgZG8gaXQgYmVmb3JlIHdlIGV4aXQuLi5cbiAgIWlzV29ya2luZyB8fCBpc0NvbW1pdHRpbmckMSB8fFxuICAvLyAuLi51bmxlc3MgdGhpcyBpcyBhIGRpZmZlcmVudCByb290IHRoYW4gdGhlIG9uZSB3ZSdyZSByZW5kZXJpbmcuXG4gIG5leHRSb290ICE9PSByb290KSB7XG4gICAgdmFyIHJvb3RFeHBpcmF0aW9uVGltZSA9IHJvb3QuZXhwaXJhdGlvblRpbWU7XG4gICAgcmVxdWVzdFdvcmsocm9vdCwgcm9vdEV4cGlyYXRpb25UaW1lKTtcbiAgfVxuICBpZiAobmVzdGVkVXBkYXRlQ291bnQgPiBORVNURURfVVBEQVRFX0xJTUlUKSB7XG4gICAgLy8gUmVzZXQgdGhpcyBiYWNrIHRvIHplcm8gc28gc3Vic2VxdWVudCB1cGRhdGVzIGRvbid0IHRocm93LlxuICAgIG5lc3RlZFVwZGF0ZUNvdW50ID0gMDtcbiAgICBpbnZhcmlhbnQoZmFsc2UsICdNYXhpbXVtIHVwZGF0ZSBkZXB0aCBleGNlZWRlZC4gVGhpcyBjYW4gaGFwcGVuIHdoZW4gYSBjb21wb25lbnQgcmVwZWF0ZWRseSBjYWxscyBzZXRTdGF0ZSBpbnNpZGUgY29tcG9uZW50V2lsbFVwZGF0ZSBvciBjb21wb25lbnREaWRVcGRhdGUuIFJlYWN0IGxpbWl0cyB0aGUgbnVtYmVyIG9mIG5lc3RlZCB1cGRhdGVzIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcHMuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3luY1VwZGF0ZXMoZm4sIGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIHNjaGVkdWxlci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoc2NoZWR1bGVyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuKGEsIGIsIGMsIGQpO1xuICB9KTtcbn1cblxuLy8gVE9ETzogRXZlcnl0aGluZyBiZWxvdyB0aGlzIGlzIHdyaXR0ZW4gYXMgaWYgaXQgaGFzIGJlZW4gbGlmdGVkIHRvIHRoZVxuLy8gcmVuZGVyZXJzLiBJJ2xsIGRvIHRoaXMgaW4gYSBmb2xsb3ctdXAuXG5cbi8vIExpbmtlZC1saXN0IG9mIHJvb3RzXG52YXIgZmlyc3RTY2hlZHVsZWRSb290ID0gbnVsbDtcbnZhciBsYXN0U2NoZWR1bGVkUm9vdCA9IG51bGw7XG5cbnZhciBjYWxsYmFja0V4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xudmFyIGNhbGxiYWNrSUQgPSB2b2lkIDA7XG52YXIgaXNSZW5kZXJpbmcgPSBmYWxzZTtcbnZhciBuZXh0Rmx1c2hlZFJvb3QgPSBudWxsO1xudmFyIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG52YXIgbG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbnZhciBoYXNVbmhhbmRsZWRFcnJvciA9IGZhbHNlO1xudmFyIHVuaGFuZGxlZEVycm9yID0gbnVsbDtcblxudmFyIGlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG52YXIgaXNVbmJhdGNoaW5nVXBkYXRlcyA9IGZhbHNlO1xuXG52YXIgY29tcGxldGVkQmF0Y2hlcyA9IG51bGw7XG5cbnZhciBvcmlnaW5hbFN0YXJ0VGltZU1zID0gc2NoZWR1bGVyLnVuc3RhYmxlX25vdygpO1xudmFyIGN1cnJlbnRSZW5kZXJlclRpbWUgPSBtc1RvRXhwaXJhdGlvblRpbWUob3JpZ2luYWxTdGFydFRpbWVNcyk7XG52YXIgY3VycmVudFNjaGVkdWxlclRpbWUgPSBjdXJyZW50UmVuZGVyZXJUaW1lO1xuXG4vLyBVc2UgdGhlc2UgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIG9mIG5lc3RlZCB1cGRhdGVzXG52YXIgTkVTVEVEX1VQREFURV9MSU1JVCA9IDUwO1xudmFyIG5lc3RlZFVwZGF0ZUNvdW50ID0gMDtcbnZhciBsYXN0Q29tbWl0dGVkUm9vdER1cmluZ1RoaXNCYXRjaCA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlY29tcHV0ZUN1cnJlbnRSZW5kZXJlclRpbWUoKSB7XG4gIHZhciBjdXJyZW50VGltZU1zID0gc2NoZWR1bGVyLnVuc3RhYmxlX25vdygpIC0gb3JpZ2luYWxTdGFydFRpbWVNcztcbiAgY3VycmVudFJlbmRlcmVyVGltZSA9IG1zVG9FeHBpcmF0aW9uVGltZShjdXJyZW50VGltZU1zKTtcbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVDYWxsYmFja1dpdGhFeHBpcmF0aW9uVGltZShyb290LCBleHBpcmF0aW9uVGltZSkge1xuICBpZiAoY2FsbGJhY2tFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrKSB7XG4gICAgLy8gQSBjYWxsYmFjayBpcyBhbHJlYWR5IHNjaGVkdWxlZC4gQ2hlY2sgaXRzIGV4cGlyYXRpb24gdGltZSAodGltZW91dCkuXG4gICAgaWYgKGV4cGlyYXRpb25UaW1lIDwgY2FsbGJhY2tFeHBpcmF0aW9uVGltZSkge1xuICAgICAgLy8gRXhpc3RpbmcgY2FsbGJhY2sgaGFzIHN1ZmZpY2llbnQgdGltZW91dC4gRXhpdC5cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNhbGxiYWNrSUQgIT09IG51bGwpIHtcbiAgICAgICAgLy8gRXhpc3RpbmcgY2FsbGJhY2sgaGFzIGluc3VmZmljaWVudCB0aW1lb3V0LiBDYW5jZWwgYW5kIHNjaGVkdWxlIGFcbiAgICAgICAgLy8gbmV3IG9uZS5cbiAgICAgICAgc2NoZWR1bGVyLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKGNhbGxiYWNrSUQpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBUaGUgcmVxdWVzdCBjYWxsYmFjayB0aW1lciBpcyBhbHJlYWR5IHJ1bm5pbmcuIERvbid0IHN0YXJ0IGEgbmV3IG9uZS5cbiAgfSBlbHNlIHtcbiAgICBzdGFydFJlcXVlc3RDYWxsYmFja1RpbWVyKCk7XG4gIH1cblxuICBjYWxsYmFja0V4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIHZhciBjdXJyZW50TXMgPSBzY2hlZHVsZXIudW5zdGFibGVfbm93KCkgLSBvcmlnaW5hbFN0YXJ0VGltZU1zO1xuICB2YXIgZXhwaXJhdGlvblRpbWVNcyA9IGV4cGlyYXRpb25UaW1lVG9NcyhleHBpcmF0aW9uVGltZSk7XG4gIHZhciB0aW1lb3V0ID0gZXhwaXJhdGlvblRpbWVNcyAtIGN1cnJlbnRNcztcbiAgY2FsbGJhY2tJRCA9IHNjaGVkdWxlci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHBlcmZvcm1Bc3luY1dvcmssIHsgdGltZW91dDogdGltZW91dCB9KTtcbn1cblxuLy8gRm9yIGV2ZXJ5IGNhbGwgdG8gcmVuZGVyUm9vdCwgb25lIG9mIG9uRmF0YWwsIG9uQ29tcGxldGUsIG9uU3VzcGVuZCwgYW5kXG4vLyBvbllpZWxkIGlzIGNhbGxlZCB1cG9uIGV4aXRpbmcuIFdlIHVzZSB0aGVzZSBpbiBsaWV1IG9mIHJldHVybmluZyBhIHR1cGxlLlxuLy8gSSd2ZSBhbHNvIGNob3NlbiBub3QgdG8gaW5saW5lIHRoZW0gaW50byByZW5kZXJSb290IGJlY2F1c2UgdGhlc2Ugd2lsbFxuLy8gZXZlbnR1YWxseSBiZSBsaWZ0ZWQgaW50byB0aGUgcmVuZGVyZXIuXG5mdW5jdGlvbiBvbkZhdGFsKHJvb3QpIHtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBsZXRlKHJvb3QsIGZpbmlzaGVkV29yaywgZXhwaXJhdGlvblRpbWUpIHtcbiAgcm9vdC5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcms7XG59XG5cbmZ1bmN0aW9uIG9uU3VzcGVuZChyb290LCBmaW5pc2hlZFdvcmssIHN1c3BlbmRlZEV4cGlyYXRpb25UaW1lLCByb290RXhwaXJhdGlvblRpbWUsIG1zVW50aWxUaW1lb3V0KSB7XG4gIHJvb3QuZXhwaXJhdGlvblRpbWUgPSByb290RXhwaXJhdGlvblRpbWU7XG4gIGlmIChtc1VudGlsVGltZW91dCA9PT0gMCAmJiAhc2hvdWxkWWllbGRUb1JlbmRlcmVyKCkpIHtcbiAgICAvLyBEb24ndCB3YWl0IGFuIGFkZGl0aW9uYWwgdGljay4gQ29tbWl0IHRoZSB0cmVlIGltbWVkaWF0ZWx5LlxuICAgIHJvb3QucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lID0gc3VzcGVuZGVkRXhwaXJhdGlvblRpbWU7XG4gICAgcm9vdC5maW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcms7XG4gIH0gZWxzZSBpZiAobXNVbnRpbFRpbWVvdXQgPiAwKSB7XG4gICAgLy8gV2FpdCBgbXNVbnRpbFRpbWVvdXRgIG1pbGxpc2Vjb25kcyBiZWZvcmUgY29tbWl0dGluZy5cbiAgICByb290LnRpbWVvdXRIYW5kbGUgPSBzY2hlZHVsZVRpbWVvdXQob25UaW1lb3V0LmJpbmQobnVsbCwgcm9vdCwgZmluaXNoZWRXb3JrLCBzdXNwZW5kZWRFeHBpcmF0aW9uVGltZSksIG1zVW50aWxUaW1lb3V0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbllpZWxkKHJvb3QpIHtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBvblRpbWVvdXQocm9vdCwgZmluaXNoZWRXb3JrLCBzdXNwZW5kZWRFeHBpcmF0aW9uVGltZSkge1xuICAvLyBUaGUgcm9vdCB0aW1lZCBvdXQuIENvbW1pdCBpdC5cbiAgcm9vdC5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUgPSBzdXNwZW5kZWRFeHBpcmF0aW9uVGltZTtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcms7XG4gIC8vIFJlYWQgdGhlIGN1cnJlbnQgdGltZSBiZWZvcmUgZW50ZXJpbmcgdGhlIGNvbW1pdCBwaGFzZS4gV2UgY2FuIGJlXG4gIC8vIGNlcnRhaW4gdGhpcyB3b24ndCBjYXVzZSB0ZWFyaW5nIHJlbGF0ZWQgdG8gYmF0Y2hpbmcgb2YgZXZlbnQgdXBkYXRlc1xuICAvLyBiZWNhdXNlIHdlJ3JlIGF0IHRoZSB0b3Agb2YgYSB0aW1lciBldmVudC5cbiAgcmVjb21wdXRlQ3VycmVudFJlbmRlcmVyVGltZSgpO1xuICBjdXJyZW50U2NoZWR1bGVyVGltZSA9IGN1cnJlbnRSZW5kZXJlclRpbWU7XG4gIGZsdXNoUm9vdChyb290LCBzdXNwZW5kZWRFeHBpcmF0aW9uVGltZSk7XG59XG5cbmZ1bmN0aW9uIG9uQ29tbWl0KHJvb3QsIGV4cGlyYXRpb25UaW1lKSB7XG4gIHJvb3QuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0Q3VycmVudFRpbWUoKSB7XG4gIC8vIHJlcXVlc3RDdXJyZW50VGltZSBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBjb21wdXRlIGFuIGV4cGlyYXRpb25cbiAgLy8gdGltZS5cbiAgLy9cbiAgLy8gRXhwaXJhdGlvbiB0aW1lcyBhcmUgY29tcHV0ZWQgYnkgYWRkaW5nIHRvIHRoZSBjdXJyZW50IHRpbWUgKHRoZSBzdGFydFxuICAvLyB0aW1lKS4gSG93ZXZlciwgaWYgdHdvIHVwZGF0ZXMgYXJlIHNjaGVkdWxlZCB3aXRoaW4gdGhlIHNhbWUgZXZlbnQsIHdlXG4gIC8vIHNob3VsZCB0cmVhdCB0aGVpciBzdGFydCB0aW1lcyBhcyBzaW11bHRhbmVvdXMsIGV2ZW4gaWYgdGhlIGFjdHVhbCBjbG9ja1xuICAvLyB0aW1lIGhhcyBhZHZhbmNlZCBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgc2Vjb25kIGNhbGwuXG5cbiAgLy8gSW4gb3RoZXIgd29yZHMsIGJlY2F1c2UgZXhwaXJhdGlvbiB0aW1lcyBkZXRlcm1pbmUgaG93IHVwZGF0ZXMgYXJlIGJhdGNoZWQsXG4gIC8vIHdlIHdhbnQgYWxsIHVwZGF0ZXMgb2YgbGlrZSBwcmlvcml0eSB0aGF0IG9jY3VyIHdpdGhpbiB0aGUgc2FtZSBldmVudCB0b1xuICAvLyByZWNlaXZlIHRoZSBzYW1lIGV4cGlyYXRpb24gdGltZS4gT3RoZXJ3aXNlIHdlIGdldCB0ZWFyaW5nLlxuICAvL1xuICAvLyBXZSBrZWVwIHRyYWNrIG9mIHR3byBzZXBhcmF0ZSB0aW1lczogdGhlIGN1cnJlbnQgXCJyZW5kZXJlclwiIHRpbWUgYW5kIHRoZVxuICAvLyBjdXJyZW50IFwic2NoZWR1bGVyXCIgdGltZS4gVGhlIHJlbmRlcmVyIHRpbWUgY2FuIGJlIHVwZGF0ZWQgd2hlbmV2ZXI7IGl0XG4gIC8vIG9ubHkgZXhpc3RzIHRvIG1pbmltaXplIHRoZSBjYWxscyBwZXJmb3JtYW5jZS5ub3cuXG4gIC8vXG4gIC8vIEJ1dCB0aGUgc2NoZWR1bGVyIHRpbWUgY2FuIG9ubHkgYmUgdXBkYXRlZCBpZiB0aGVyZSdzIG5vIHBlbmRpbmcgd29yaywgb3JcbiAgLy8gaWYgd2Uga25vdyBmb3IgY2VydGFpbiB0aGF0IHdlJ3JlIG5vdCBpbiB0aGUgbWlkZGxlIG9mIGFuIGV2ZW50LlxuXG4gIGlmIChpc1JlbmRlcmluZykge1xuICAgIC8vIFdlJ3JlIGFscmVhZHkgcmVuZGVyaW5nLiBSZXR1cm4gdGhlIG1vc3QgcmVjZW50bHkgcmVhZCB0aW1lLlxuICAgIHJldHVybiBjdXJyZW50U2NoZWR1bGVyVGltZTtcbiAgfVxuICAvLyBDaGVjayBpZiB0aGVyZSdzIHBlbmRpbmcgd29yay5cbiAgZmluZEhpZ2hlc3RQcmlvcml0eVJvb3QoKTtcbiAgaWYgKG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lID09PSBOZXZlcikge1xuICAgIC8vIElmIHRoZXJlJ3Mgbm8gcGVuZGluZyB3b3JrLCBvciBpZiB0aGUgcGVuZGluZyB3b3JrIGlzIG9mZnNjcmVlbiwgd2UgY2FuXG4gICAgLy8gcmVhZCB0aGUgY3VycmVudCB0aW1lIHdpdGhvdXQgcmlzayBvZiB0ZWFyaW5nLlxuICAgIHJlY29tcHV0ZUN1cnJlbnRSZW5kZXJlclRpbWUoKTtcbiAgICBjdXJyZW50U2NoZWR1bGVyVGltZSA9IGN1cnJlbnRSZW5kZXJlclRpbWU7XG4gICAgcmV0dXJuIGN1cnJlbnRTY2hlZHVsZXJUaW1lO1xuICB9XG4gIC8vIFRoZXJlJ3MgYWxyZWFkeSBwZW5kaW5nIHdvcmsuIFdlIG1pZ2h0IGJlIGluIHRoZSBtaWRkbGUgb2YgYSBicm93c2VyXG4gIC8vIGV2ZW50LiBJZiB3ZSB3ZXJlIHRvIHJlYWQgdGhlIGN1cnJlbnQgdGltZSwgaXQgY291bGQgY2F1c2UgbXVsdGlwbGUgdXBkYXRlc1xuICAvLyB3aXRoaW4gdGhlIHNhbWUgZXZlbnQgdG8gcmVjZWl2ZSBkaWZmZXJlbnQgZXhwaXJhdGlvbiB0aW1lcywgbGVhZGluZyB0b1xuICAvLyB0ZWFyaW5nLiBSZXR1cm4gdGhlIGxhc3QgcmVhZCB0aW1lLiBEdXJpbmcgdGhlIG5leHQgaWRsZSBjYWxsYmFjaywgdGhlXG4gIC8vIHRpbWUgd2lsbCBiZSB1cGRhdGVkLlxuICByZXR1cm4gY3VycmVudFNjaGVkdWxlclRpbWU7XG59XG5cbi8vIHJlcXVlc3RXb3JrIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHdoZW5ldmVyIGEgcm9vdCByZWNlaXZlcyBhbiB1cGRhdGUuXG4vLyBJdCdzIHVwIHRvIHRoZSByZW5kZXJlciB0byBjYWxsIHJlbmRlclJvb3QgYXQgc29tZSBwb2ludCBpbiB0aGUgZnV0dXJlLlxuZnVuY3Rpb24gcmVxdWVzdFdvcmsocm9vdCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgYWRkUm9vdFRvU2NoZWR1bGUocm9vdCwgZXhwaXJhdGlvblRpbWUpO1xuICBpZiAoaXNSZW5kZXJpbmcpIHtcbiAgICAvLyBQcmV2ZW50IHJlZW50cmFuY3kuIFJlbWFpbmluZyB3b3JrIHdpbGwgYmUgc2NoZWR1bGVkIGF0IHRoZSBlbmQgb2ZcbiAgICAvLyB0aGUgY3VycmVudGx5IHJlbmRlcmluZyBiYXRjaC5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaXNCYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICAvLyBGbHVzaCB3b3JrIGF0IHRoZSBlbmQgb2YgdGhlIGJhdGNoLlxuICAgIGlmIChpc1VuYmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgICAvLyAuLi51bmxlc3Mgd2UncmUgaW5zaWRlIHVuYmF0Y2hlZFVwZGF0ZXMsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkXG4gICAgICAvLyBmbHVzaCBpdCBub3cuXG4gICAgICBuZXh0Rmx1c2hlZFJvb3QgPSByb290O1xuICAgICAgbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSA9IFN5bmM7XG4gICAgICBwZXJmb3JtV29ya09uUm9vdChyb290LCBTeW5jLCBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRPRE86IEdldCByaWQgb2YgU3luYyBhbmQgdXNlIGN1cnJlbnQgdGltZT9cbiAgaWYgKGV4cGlyYXRpb25UaW1lID09PSBTeW5jKSB7XG4gICAgcGVyZm9ybVN5bmNXb3JrKCk7XG4gIH0gZWxzZSB7XG4gICAgc2NoZWR1bGVDYWxsYmFja1dpdGhFeHBpcmF0aW9uVGltZShyb290LCBleHBpcmF0aW9uVGltZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkUm9vdFRvU2NoZWR1bGUocm9vdCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgLy8gQWRkIHRoZSByb290IHRvIHRoZSBzY2hlZHVsZS5cbiAgLy8gQ2hlY2sgaWYgdGhpcyByb290IGlzIGFscmVhZHkgcGFydCBvZiB0aGUgc2NoZWR1bGUuXG4gIGlmIChyb290Lm5leHRTY2hlZHVsZWRSb290ID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyByb290IGlzIG5vdCBhbHJlYWR5IHNjaGVkdWxlZC4gQWRkIGl0LlxuICAgIHJvb3QuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICBpZiAobGFzdFNjaGVkdWxlZFJvb3QgPT09IG51bGwpIHtcbiAgICAgIGZpcnN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290ID0gcm9vdDtcbiAgICAgIHJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSByb290O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0U2NoZWR1bGVkUm9vdC5uZXh0U2NoZWR1bGVkUm9vdCA9IHJvb3Q7XG4gICAgICBsYXN0U2NoZWR1bGVkUm9vdCA9IHJvb3Q7XG4gICAgICBsYXN0U2NoZWR1bGVkUm9vdC5uZXh0U2NoZWR1bGVkUm9vdCA9IGZpcnN0U2NoZWR1bGVkUm9vdDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhpcyByb290IGlzIGFscmVhZHkgc2NoZWR1bGVkLCBidXQgaXRzIHByaW9yaXR5IG1heSBoYXZlIGluY3JlYXNlZC5cbiAgICB2YXIgcmVtYWluaW5nRXhwaXJhdGlvblRpbWUgPSByb290LmV4cGlyYXRpb25UaW1lO1xuICAgIGlmIChleHBpcmF0aW9uVGltZSA+IHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lKSB7XG4gICAgICAvLyBVcGRhdGUgdGhlIHByaW9yaXR5LlxuICAgICAgcm9vdC5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCgpIHtcbiAgdmFyIGhpZ2hlc3RQcmlvcml0eVdvcmsgPSBOb1dvcms7XG4gIHZhciBoaWdoZXN0UHJpb3JpdHlSb290ID0gbnVsbDtcbiAgaWYgKGxhc3RTY2hlZHVsZWRSb290ICE9PSBudWxsKSB7XG4gICAgdmFyIHByZXZpb3VzU2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290O1xuICAgIHZhciByb290ID0gZmlyc3RTY2hlZHVsZWRSb290O1xuICAgIHdoaWxlIChyb290ICE9PSBudWxsKSB7XG4gICAgICB2YXIgcmVtYWluaW5nRXhwaXJhdGlvblRpbWUgPSByb290LmV4cGlyYXRpb25UaW1lO1xuICAgICAgaWYgKHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lID09PSBOb1dvcmspIHtcbiAgICAgICAgLy8gVGhpcyByb290IG5vIGxvbmdlciBoYXMgd29yay4gUmVtb3ZlIGl0IGZyb20gdGhlIHNjaGVkdWxlci5cblxuICAgICAgICAvLyBUT0RPOiBUaGlzIGNoZWNrIGlzIHJlZHVkYW50LCBidXQgRmxvdyBpcyBjb25mdXNlZCBieSB0aGUgYnJhbmNoXG4gICAgICAgIC8vIGJlbG93IHdoZXJlIHdlIHNldCBsYXN0U2NoZWR1bGVkUm9vdCB0byBudWxsLCBldmVuIHRob3VnaCB3ZSBicmVha1xuICAgICAgICAvLyBmcm9tIHRoZSBsb29wIHJpZ2h0IGFmdGVyLlxuICAgICAgICAhKHByZXZpb3VzU2NoZWR1bGVkUm9vdCAhPT0gbnVsbCAmJiBsYXN0U2NoZWR1bGVkUm9vdCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgaGF2ZSBhIHByZXZpb3VzIGFuZCBsYXN0IHJvb3QuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICAgIGlmIChyb290ID09PSByb290Lm5leHRTY2hlZHVsZWRSb290KSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyB0aGUgb25seSByb290IGluIHRoZSBsaXN0LlxuICAgICAgICAgIHJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSBudWxsO1xuICAgICAgICAgIGZpcnN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChyb290ID09PSBmaXJzdFNjaGVkdWxlZFJvb3QpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCByb290IGluIHRoZSBsaXN0LlxuICAgICAgICAgIHZhciBuZXh0ID0gcm9vdC5uZXh0U2NoZWR1bGVkUm9vdDtcbiAgICAgICAgICBmaXJzdFNjaGVkdWxlZFJvb3QgPSBuZXh0O1xuICAgICAgICAgIGxhc3RTY2hlZHVsZWRSb290Lm5leHRTY2hlZHVsZWRSb290ID0gbmV4dDtcbiAgICAgICAgICByb290Lm5leHRTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChyb290ID09PSBsYXN0U2NoZWR1bGVkUm9vdCkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGxhc3Qgcm9vdCBpbiB0aGUgbGlzdC5cbiAgICAgICAgICBsYXN0U2NoZWR1bGVkUm9vdCA9IHByZXZpb3VzU2NoZWR1bGVkUm9vdDtcbiAgICAgICAgICBsYXN0U2NoZWR1bGVkUm9vdC5uZXh0U2NoZWR1bGVkUm9vdCA9IGZpcnN0U2NoZWR1bGVkUm9vdDtcbiAgICAgICAgICByb290Lm5leHRTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c1NjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSByb290Lm5leHRTY2hlZHVsZWRSb290O1xuICAgICAgICAgIHJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJvb3QgPSBwcmV2aW91c1NjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVtYWluaW5nRXhwaXJhdGlvblRpbWUgPiBoaWdoZXN0UHJpb3JpdHlXb3JrKSB7XG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBwcmlvcml0eSwgaWYgaXQncyBoaWdoZXJcbiAgICAgICAgICBoaWdoZXN0UHJpb3JpdHlXb3JrID0gcmVtYWluaW5nRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgaGlnaGVzdFByaW9yaXR5Um9vdCA9IHJvb3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvb3QgPT09IGxhc3RTY2hlZHVsZWRSb290KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhpZ2hlc3RQcmlvcml0eVdvcmsgPT09IFN5bmMpIHtcbiAgICAgICAgICAvLyBTeW5jIGlzIGhpZ2hlc3QgcHJpb3JpdHkgYnkgZGVmaW5pdGlvbiBzb1xuICAgICAgICAgIC8vIHdlIGNhbiBzdG9wIHNlYXJjaGluZy5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c1NjaGVkdWxlZFJvb3QgPSByb290O1xuICAgICAgICByb290ID0gcm9vdC5uZXh0U2NoZWR1bGVkUm9vdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZXh0Rmx1c2hlZFJvb3QgPSBoaWdoZXN0UHJpb3JpdHlSb290O1xuICBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lID0gaGlnaGVzdFByaW9yaXR5V29yaztcbn1cblxuLy8gVE9ETzogVGhpcyB3cmFwcGVyIGV4aXN0cyBiZWNhdXNlIG1hbnkgb2YgdGhlIG9sZGVyIHRlc3RzICh0aGUgb25lcyB0aGF0IHVzZVxuLy8gZmx1c2hEZWZlcnJlZFByaSkgcmVseSBvbiB0aGUgbnVtYmVyIG9mIHRpbWVzIGBzaG91bGRZaWVsZGAgaXMgY2FsbGVkLiBXZVxuLy8gc2hvdWxkIGdldCByaWQgb2YgaXQuXG52YXIgZGlkWWllbGQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNob3VsZFlpZWxkVG9SZW5kZXJlcigpIHtcbiAgaWYgKGRpZFlpZWxkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHNjaGVkdWxlci51bnN0YWJsZV9zaG91bGRZaWVsZCgpKSB7XG4gICAgZGlkWWllbGQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcGVyZm9ybUFzeW5jV29yaygpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIXNob3VsZFlpZWxkVG9SZW5kZXJlcigpKSB7XG4gICAgICAvLyBUaGUgY2FsbGJhY2sgdGltZWQgb3V0LiBUaGF0IG1lYW5zIGF0IGxlYXN0IG9uZSB1cGRhdGUgaGFzIGV4cGlyZWQuXG4gICAgICAvLyBJdGVyYXRlIHRocm91Z2ggdGhlIHJvb3Qgc2NoZWR1bGUuIElmIHRoZXkgY29udGFpbiBleHBpcmVkIHdvcmssIHNldFxuICAgICAgLy8gdGhlIG5leHQgcmVuZGVyIGV4cGlyYXRpb24gdGltZSB0byB0aGUgY3VycmVudCB0aW1lLiBUaGlzIGhhcyB0aGUgZWZmZWN0XG4gICAgICAvLyBvZiBmbHVzaGluZyBhbGwgZXhwaXJlZCB3b3JrIGluIGEgc2luZ2xlIGJhdGNoLCBpbnN0ZWFkIG9mIGZsdXNoaW5nIGVhY2hcbiAgICAgIC8vIGxldmVsIG9uZSBhdCBhIHRpbWUuXG4gICAgICBpZiAoZmlyc3RTY2hlZHVsZWRSb290ICE9PSBudWxsKSB7XG4gICAgICAgIHJlY29tcHV0ZUN1cnJlbnRSZW5kZXJlclRpbWUoKTtcbiAgICAgICAgdmFyIHJvb3QgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBkaWRFeHBpcmVBdEV4cGlyYXRpb25UaW1lKHJvb3QsIGN1cnJlbnRSZW5kZXJlclRpbWUpO1xuICAgICAgICAgIC8vIFRoZSByb290IHNjaGVkdWxlIGlzIGNpcmN1bGFyLCBzbyB0aGlzIGlzIG5ldmVyIG51bGwuXG4gICAgICAgICAgcm9vdCA9IHJvb3QubmV4dFNjaGVkdWxlZFJvb3Q7XG4gICAgICAgIH0gd2hpbGUgKHJvb3QgIT09IGZpcnN0U2NoZWR1bGVkUm9vdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHBlcmZvcm1Xb3JrKE5vV29yaywgdHJ1ZSk7XG4gIH0gZmluYWxseSB7XG4gICAgZGlkWWllbGQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwZXJmb3JtU3luY1dvcmsoKSB7XG4gIHBlcmZvcm1Xb3JrKFN5bmMsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gcGVyZm9ybVdvcmsobWluRXhwaXJhdGlvblRpbWUsIGlzWWllbGR5KSB7XG4gIC8vIEtlZXAgd29ya2luZyBvbiByb290cyB1bnRpbCB0aGVyZSdzIG5vIG1vcmUgd29yaywgb3IgdW50aWwgdGhlcmUncyBhIGhpZ2hlclxuICAvLyBwcmlvcml0eSBldmVudC5cbiAgZmluZEhpZ2hlc3RQcmlvcml0eVJvb3QoKTtcblxuICBpZiAoaXNZaWVsZHkpIHtcbiAgICByZWNvbXB1dGVDdXJyZW50UmVuZGVyZXJUaW1lKCk7XG4gICAgY3VycmVudFNjaGVkdWxlclRpbWUgPSBjdXJyZW50UmVuZGVyZXJUaW1lO1xuXG4gICAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICAgIHZhciBkaWRFeHBpcmUgPSBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lID4gY3VycmVudFJlbmRlcmVyVGltZTtcbiAgICAgIHZhciB0aW1lb3V0ID0gZXhwaXJhdGlvblRpbWVUb01zKG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUpO1xuICAgICAgc3RvcFJlcXVlc3RDYWxsYmFja1RpbWVyKGRpZEV4cGlyZSwgdGltZW91dCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG5leHRGbHVzaGVkUm9vdCAhPT0gbnVsbCAmJiBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmsgJiYgbWluRXhwaXJhdGlvblRpbWUgPD0gbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSAmJiAhKGRpZFlpZWxkICYmIGN1cnJlbnRSZW5kZXJlclRpbWUgPiBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lKSkge1xuICAgICAgcGVyZm9ybVdvcmtPblJvb3QobmV4dEZsdXNoZWRSb290LCBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lLCBjdXJyZW50UmVuZGVyZXJUaW1lID4gbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSk7XG4gICAgICBmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCgpO1xuICAgICAgcmVjb21wdXRlQ3VycmVudFJlbmRlcmVyVGltZSgpO1xuICAgICAgY3VycmVudFNjaGVkdWxlclRpbWUgPSBjdXJyZW50UmVuZGVyZXJUaW1lO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAobmV4dEZsdXNoZWRSb290ICE9PSBudWxsICYmIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgIT09IE5vV29yayAmJiBtaW5FeHBpcmF0aW9uVGltZSA8PSBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lKSB7XG4gICAgICBwZXJmb3JtV29ya09uUm9vdChuZXh0Rmx1c2hlZFJvb3QsIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUsIGZhbHNlKTtcbiAgICAgIGZpbmRIaWdoZXN0UHJpb3JpdHlSb290KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gV2UncmUgZG9uZSBmbHVzaGluZyB3b3JrLiBFaXRoZXIgd2UgcmFuIG91dCBvZiB0aW1lIGluIHRoaXMgY2FsbGJhY2ssXG4gIC8vIG9yIHRoZXJlJ3Mgbm8gbW9yZSB3b3JrIGxlZnQgd2l0aCBzdWZmaWNpZW50IHByaW9yaXR5LlxuXG4gIC8vIElmIHdlJ3JlIGluc2lkZSBhIGNhbGxiYWNrLCBzZXQgdGhpcyB0byBmYWxzZSBzaW5jZSB3ZSBqdXN0IGNvbXBsZXRlZCBpdC5cbiAgaWYgKGlzWWllbGR5KSB7XG4gICAgY2FsbGJhY2tFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgICBjYWxsYmFja0lEID0gbnVsbDtcbiAgfVxuICAvLyBJZiB0aGVyZSdzIHdvcmsgbGVmdCBvdmVyLCBzY2hlZHVsZSBhIG5ldyBjYWxsYmFjay5cbiAgaWYgKG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgIT09IE5vV29yaykge1xuICAgIHNjaGVkdWxlQ2FsbGJhY2tXaXRoRXhwaXJhdGlvblRpbWUobmV4dEZsdXNoZWRSb290LCBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lKTtcbiAgfVxuXG4gIC8vIENsZWFuLXVwLlxuICBmaW5pc2hSZW5kZXJpbmcoKTtcbn1cblxuZnVuY3Rpb24gZmx1c2hSb290KHJvb3QsIGV4cGlyYXRpb25UaW1lKSB7XG4gICEhaXNSZW5kZXJpbmcgPyBpbnZhcmlhbnQoZmFsc2UsICd3b3JrLmNvbW1pdCgpOiBDYW5ub3QgY29tbWl0IHdoaWxlIGFscmVhZHkgcmVuZGVyaW5nLiBUaGlzIGxpa2VseSBtZWFucyB5b3UgYXR0ZW1wdGVkIHRvIGNvbW1pdCBmcm9tIGluc2lkZSBhIGxpZmVjeWNsZSBtZXRob2QuJykgOiB2b2lkIDA7XG4gIC8vIFBlcmZvcm0gd29yayBvbiByb290IGFzIGlmIHRoZSBnaXZlbiBleHBpcmF0aW9uIHRpbWUgaXMgdGhlIGN1cnJlbnQgdGltZS5cbiAgLy8gVGhpcyBoYXMgdGhlIGVmZmVjdCBvZiBzeW5jaHJvbm91c2x5IGZsdXNoaW5nIGFsbCB3b3JrIHVwIHRvIGFuZFxuICAvLyBpbmNsdWRpbmcgdGhlIGdpdmVuIHRpbWUuXG4gIG5leHRGbHVzaGVkUm9vdCA9IHJvb3Q7XG4gIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgZXhwaXJhdGlvblRpbWUsIGZhbHNlKTtcbiAgLy8gRmx1c2ggYW55IHN5bmMgd29yayB0aGF0IHdhcyBzY2hlZHVsZWQgYnkgbGlmZWN5Y2xlc1xuICBwZXJmb3JtU3luY1dvcmsoKTtcbn1cblxuZnVuY3Rpb24gZmluaXNoUmVuZGVyaW5nKCkge1xuICBuZXN0ZWRVcGRhdGVDb3VudCA9IDA7XG4gIGxhc3RDb21taXR0ZWRSb290RHVyaW5nVGhpc0JhdGNoID0gbnVsbDtcblxuICBpZiAoY29tcGxldGVkQmF0Y2hlcyAhPT0gbnVsbCkge1xuICAgIHZhciBiYXRjaGVzID0gY29tcGxldGVkQmF0Y2hlcztcbiAgICBjb21wbGV0ZWRCYXRjaGVzID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiYXRjaCA9IGJhdGNoZXNbaV07XG4gICAgICB0cnkge1xuICAgICAgICBiYXRjaC5fb25Db21wbGV0ZSgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKCFoYXNVbmhhbmRsZWRFcnJvcikge1xuICAgICAgICAgIGhhc1VuaGFuZGxlZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICB1bmhhbmRsZWRFcnJvciA9IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGhhc1VuaGFuZGxlZEVycm9yKSB7XG4gICAgdmFyIGVycm9yID0gdW5oYW5kbGVkRXJyb3I7XG4gICAgdW5oYW5kbGVkRXJyb3IgPSBudWxsO1xuICAgIGhhc1VuaGFuZGxlZEVycm9yID0gZmFsc2U7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgZXhwaXJhdGlvblRpbWUsIGlzWWllbGR5KSB7XG4gICEhaXNSZW5kZXJpbmcgPyBpbnZhcmlhbnQoZmFsc2UsICdwZXJmb3JtV29ya09uUm9vdCB3YXMgY2FsbGVkIHJlY3Vyc2l2ZWx5LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gIGlzUmVuZGVyaW5nID0gdHJ1ZTtcblxuICAvLyBDaGVjayBpZiB0aGlzIGlzIGFzeW5jIHdvcmsgb3Igc3luYy9leHBpcmVkIHdvcmsuXG4gIGlmICghaXNZaWVsZHkpIHtcbiAgICAvLyBGbHVzaCB3b3JrIHdpdGhvdXQgeWllbGRpbmcuXG4gICAgLy8gVE9ETzogTm9uLXlpZWxkeSB3b3JrIGRvZXMgbm90IG5lY2Vzc2FyaWx5IGltcGx5IGV4cGlyZWQgd29yay4gQSByZW5kZXJlclxuICAgIC8vIG1heSB3YW50IHRvIHBlcmZvcm0gc29tZSB3b3JrIHdpdGhvdXQgeWllbGRpbmcsIGJ1dCBhbHNvIHdpdGhvdXRcbiAgICAvLyByZXF1aXJpbmcgdGhlIHJvb3QgdG8gY29tcGxldGUgKGJ5IHRyaWdnZXJpbmcgcGxhY2Vob2xkZXJzKS5cblxuICAgIHZhciBmaW5pc2hlZFdvcmsgPSByb290LmZpbmlzaGVkV29yaztcbiAgICBpZiAoZmluaXNoZWRXb3JrICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIHJvb3QgaXMgYWxyZWFkeSBjb21wbGV0ZS4gV2UgY2FuIGNvbW1pdCBpdC5cbiAgICAgIGNvbXBsZXRlUm9vdChyb290LCBmaW5pc2hlZFdvcmssIGV4cGlyYXRpb25UaW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xuICAgICAgLy8gSWYgdGhpcyByb290IHByZXZpb3VzbHkgc3VzcGVuZGVkLCBjbGVhciBpdHMgZXhpc3RpbmcgdGltZW91dCwgc2luY2VcbiAgICAgIC8vIHdlJ3JlIGFib3V0IHRvIHRyeSByZW5kZXJpbmcgYWdhaW4uXG4gICAgICB2YXIgdGltZW91dEhhbmRsZSA9IHJvb3QudGltZW91dEhhbmRsZTtcbiAgICAgIGlmICh0aW1lb3V0SGFuZGxlICE9PSBub1RpbWVvdXQpIHtcbiAgICAgICAgcm9vdC50aW1lb3V0SGFuZGxlID0gbm9UaW1lb3V0O1xuICAgICAgICAvLyAkRmxvd0ZpeE1lIENvbXBsYWlucyBub1RpbWVvdXQgaXMgbm90IGEgVGltZW91dElELCBkZXNwaXRlIHRoZSBjaGVjayBhYm92ZVxuICAgICAgICBjYW5jZWxUaW1lb3V0KHRpbWVvdXRIYW5kbGUpO1xuICAgICAgfVxuICAgICAgcmVuZGVyUm9vdChyb290LCBpc1lpZWxkeSk7XG4gICAgICBmaW5pc2hlZFdvcmsgPSByb290LmZpbmlzaGVkV29yaztcbiAgICAgIGlmIChmaW5pc2hlZFdvcmsgIT09IG51bGwpIHtcbiAgICAgICAgLy8gV2UndmUgY29tcGxldGVkIHRoZSByb290LiBDb21taXQgaXQuXG4gICAgICAgIGNvbXBsZXRlUm9vdChyb290LCBmaW5pc2hlZFdvcmssIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRmx1c2ggYXN5bmMgd29yay5cbiAgICB2YXIgX2ZpbmlzaGVkV29yayA9IHJvb3QuZmluaXNoZWRXb3JrO1xuICAgIGlmIChfZmluaXNoZWRXb3JrICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIHJvb3QgaXMgYWxyZWFkeSBjb21wbGV0ZS4gV2UgY2FuIGNvbW1pdCBpdC5cbiAgICAgIGNvbXBsZXRlUm9vdChyb290LCBfZmluaXNoZWRXb3JrLCBleHBpcmF0aW9uVGltZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3QuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgICAgIC8vIElmIHRoaXMgcm9vdCBwcmV2aW91c2x5IHN1c3BlbmRlZCwgY2xlYXIgaXRzIGV4aXN0aW5nIHRpbWVvdXQsIHNpbmNlXG4gICAgICAvLyB3ZSdyZSBhYm91dCB0byB0cnkgcmVuZGVyaW5nIGFnYWluLlxuICAgICAgdmFyIF90aW1lb3V0SGFuZGxlID0gcm9vdC50aW1lb3V0SGFuZGxlO1xuICAgICAgaWYgKF90aW1lb3V0SGFuZGxlICE9PSBub1RpbWVvdXQpIHtcbiAgICAgICAgcm9vdC50aW1lb3V0SGFuZGxlID0gbm9UaW1lb3V0O1xuICAgICAgICAvLyAkRmxvd0ZpeE1lIENvbXBsYWlucyBub1RpbWVvdXQgaXMgbm90IGEgVGltZW91dElELCBkZXNwaXRlIHRoZSBjaGVjayBhYm92ZVxuICAgICAgICBjYW5jZWxUaW1lb3V0KF90aW1lb3V0SGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIHJlbmRlclJvb3Qocm9vdCwgaXNZaWVsZHkpO1xuICAgICAgX2ZpbmlzaGVkV29yayA9IHJvb3QuZmluaXNoZWRXb3JrO1xuICAgICAgaWYgKF9maW5pc2hlZFdvcmsgIT09IG51bGwpIHtcbiAgICAgICAgLy8gV2UndmUgY29tcGxldGVkIHRoZSByb290LiBDaGVjayB0aGUgaWYgd2Ugc2hvdWxkIHlpZWxkIG9uZSBtb3JlIHRpbWVcbiAgICAgICAgLy8gYmVmb3JlIGNvbW1pdHRpbmcuXG4gICAgICAgIGlmICghc2hvdWxkWWllbGRUb1JlbmRlcmVyKCkpIHtcbiAgICAgICAgICAvLyBTdGlsbCB0aW1lIGxlZnQuIENvbW1pdCB0aGUgcm9vdC5cbiAgICAgICAgICBjb21wbGV0ZVJvb3Qocm9vdCwgX2ZpbmlzaGVkV29yaywgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoZXJlJ3Mgbm8gdGltZSBsZWZ0LiBNYXJrIHRoaXMgcm9vdCBhcyBjb21wbGV0ZS4gV2UnbGwgY29tZVxuICAgICAgICAgIC8vIGJhY2sgYW5kIGNvbW1pdCBpdCBsYXRlci5cbiAgICAgICAgICByb290LmZpbmlzaGVkV29yayA9IF9maW5pc2hlZFdvcms7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpc1JlbmRlcmluZyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb21wbGV0ZVJvb3Qocm9vdCwgZmluaXNoZWRXb3JrLCBleHBpcmF0aW9uVGltZSkge1xuICAvLyBDaGVjayBpZiB0aGVyZSdzIGEgYmF0Y2ggdGhhdCBtYXRjaGVzIHRoaXMgZXhwaXJhdGlvbiB0aW1lLlxuICB2YXIgZmlyc3RCYXRjaCA9IHJvb3QuZmlyc3RCYXRjaDtcbiAgaWYgKGZpcnN0QmF0Y2ggIT09IG51bGwgJiYgZmlyc3RCYXRjaC5fZXhwaXJhdGlvblRpbWUgPj0gZXhwaXJhdGlvblRpbWUpIHtcbiAgICBpZiAoY29tcGxldGVkQmF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgY29tcGxldGVkQmF0Y2hlcyA9IFtmaXJzdEJhdGNoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGVkQmF0Y2hlcy5wdXNoKGZpcnN0QmF0Y2gpO1xuICAgIH1cbiAgICBpZiAoZmlyc3RCYXRjaC5fZGVmZXIpIHtcbiAgICAgIC8vIFRoaXMgcm9vdCBpcyBibG9ja2VkIGZyb20gY29tbWl0dGluZyBieSBhIGJhdGNoLiBVbnNjaGVkdWxlIGl0IHVudGlsXG4gICAgICAvLyB3ZSByZWNlaXZlIGFub3RoZXIgdXBkYXRlLlxuICAgICAgcm9vdC5maW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcms7XG4gICAgICByb290LmV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIC8vIENvbW1pdCB0aGUgcm9vdC5cbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xuXG4gIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBuZXN0ZWQgdXBkYXRlIChhIHN5bmMgdXBkYXRlIHNjaGVkdWxlZCBkdXJpbmcgdGhlXG4gIC8vIGNvbW1pdCBwaGFzZSkuXG4gIGlmIChyb290ID09PSBsYXN0Q29tbWl0dGVkUm9vdER1cmluZ1RoaXNCYXRjaCkge1xuICAgIC8vIElmIHRoZSBuZXh0IHJvb3QgaXMgdGhlIHNhbWUgYXMgdGhlIHByZXZpb3VzIHJvb3QsIHRoaXMgaXMgYSBuZXN0ZWRcbiAgICAvLyB1cGRhdGUuIFRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcCwgaW5jcmVtZW50IHRoZSBuZXN0ZWQgdXBkYXRlIGNvdW50LlxuICAgIG5lc3RlZFVwZGF0ZUNvdW50Kys7XG4gIH0gZWxzZSB7XG4gICAgLy8gUmVzZXQgd2hlbmV2ZXIgd2Ugc3dpdGNoIHJvb3RzLlxuICAgIGxhc3RDb21taXR0ZWRSb290RHVyaW5nVGhpc0JhdGNoID0gcm9vdDtcbiAgICBuZXN0ZWRVcGRhdGVDb3VudCA9IDA7XG4gIH1cbiAgc2NoZWR1bGVyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShzY2hlZHVsZXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICBjb21taXRSb290KHJvb3QsIGZpbmlzaGVkV29yayk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblVuY2F1Z2h0RXJyb3IoZXJyb3IpIHtcbiAgIShuZXh0Rmx1c2hlZFJvb3QgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIGJlIHdvcmtpbmcgb24gYSByb290LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAvLyBVbnNjaGVkdWxlIHRoaXMgcm9vdCBzbyB3ZSBkb24ndCB3b3JrIG9uIGl0IGFnYWluIHVudGlsIHRoZXJlJ3NcbiAgLy8gYW5vdGhlciB1cGRhdGUuXG4gIG5leHRGbHVzaGVkUm9vdC5leHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgaWYgKCFoYXNVbmhhbmRsZWRFcnJvcikge1xuICAgIGhhc1VuaGFuZGxlZEVycm9yID0gdHJ1ZTtcbiAgICB1bmhhbmRsZWRFcnJvciA9IGVycm9yO1xuICB9XG59XG5cbi8vIFRPRE86IEJhdGNoaW5nIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBhdCB0aGUgcmVuZGVyZXIgbGV2ZWwsIG5vdCBpbnNpZGVcbi8vIHRoZSByZWNvbmNpbGVyLlxuZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMkMShmbiwgYSkge1xuICB2YXIgcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcyA9IGlzQmF0Y2hpbmdVcGRhdGVzO1xuICBpc0JhdGNoaW5nVXBkYXRlcyA9IHRydWU7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZuKGEpO1xuICB9IGZpbmFsbHkge1xuICAgIGlzQmF0Y2hpbmdVcGRhdGVzID0gcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcztcbiAgICBpZiAoIWlzQmF0Y2hpbmdVcGRhdGVzICYmICFpc1JlbmRlcmluZykge1xuICAgICAgcGVyZm9ybVN5bmNXb3JrKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIFRPRE86IEJhdGNoaW5nIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBhdCB0aGUgcmVuZGVyZXIgbGV2ZWwsIG5vdCBpbnNpZGVcbi8vIHRoZSByZWNvbmNpbGVyLlxuZnVuY3Rpb24gdW5iYXRjaGVkVXBkYXRlcyhmbiwgYSkge1xuICBpZiAoaXNCYXRjaGluZ1VwZGF0ZXMgJiYgIWlzVW5iYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICBpc1VuYmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKGEpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc1VuYmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBmbihhKTtcbn1cblxuLy8gVE9ETzogQmF0Y2hpbmcgc2hvdWxkIGJlIGltcGxlbWVudGVkIGF0IHRoZSByZW5kZXJlciBsZXZlbCwgbm90IHdpdGhpblxuLy8gdGhlIHJlY29uY2lsZXIuXG5mdW5jdGlvbiBmbHVzaFN5bmMoZm4sIGEpIHtcbiAgISFpc1JlbmRlcmluZyA/IGludmFyaWFudChmYWxzZSwgJ2ZsdXNoU3luYyB3YXMgY2FsbGVkIGZyb20gaW5zaWRlIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgY2Fubm90IGJlIGNhbGxlZCB3aGVuIFJlYWN0IGlzIGFscmVhZHkgcmVuZGVyaW5nLicpIDogdm9pZCAwO1xuICB2YXIgcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcyA9IGlzQmF0Y2hpbmdVcGRhdGVzO1xuICBpc0JhdGNoaW5nVXBkYXRlcyA9IHRydWU7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHN5bmNVcGRhdGVzKGZuLCBhKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpc0JhdGNoaW5nVXBkYXRlcyA9IHByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXM7XG4gICAgcGVyZm9ybVN5bmNXb3JrKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJhY3RpdmVVcGRhdGVzJDEoZm4sIGEsIGIpIHtcbiAgLy8gSWYgdGhlcmUgYXJlIGFueSBwZW5kaW5nIGludGVyYWN0aXZlIHVwZGF0ZXMsIHN5bmNocm9ub3VzbHkgZmx1c2ggdGhlbS5cbiAgLy8gVGhpcyBuZWVkcyB0byBoYXBwZW4gYmVmb3JlIHdlIHJlYWQgYW55IGhhbmRsZXJzLCBiZWNhdXNlIHRoZSBlZmZlY3Qgb2ZcbiAgLy8gdGhlIHByZXZpb3VzIGV2ZW50IG1heSBpbmZsdWVuY2Ugd2hpY2ggaGFuZGxlcnMgYXJlIGNhbGxlZCBkdXJpbmdcbiAgLy8gdGhpcyBldmVudC5cbiAgaWYgKCFpc0JhdGNoaW5nVXBkYXRlcyAmJiAhaXNSZW5kZXJpbmcgJiYgbG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrKSB7XG4gICAgLy8gU3luY2hyb25vdXNseSBmbHVzaCBwZW5kaW5nIGludGVyYWN0aXZlIHVwZGF0ZXMuXG4gICAgcGVyZm9ybVdvcmsobG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSwgZmFsc2UpO1xuICAgIGxvd2VzdFByaW9yaXR5UGVuZGluZ0ludGVyYWN0aXZlRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gIH1cbiAgdmFyIHByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXMgPSBpc0JhdGNoaW5nVXBkYXRlcztcbiAgaXNCYXRjaGluZ1VwZGF0ZXMgPSB0cnVlO1xuICB0cnkge1xuICAgIHJldHVybiBzY2hlZHVsZXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHNjaGVkdWxlci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuKGEsIGIpO1xuICAgIH0pO1xuICB9IGZpbmFsbHkge1xuICAgIGlzQmF0Y2hpbmdVcGRhdGVzID0gcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcztcbiAgICBpZiAoIWlzQmF0Y2hpbmdVcGRhdGVzICYmICFpc1JlbmRlcmluZykge1xuICAgICAgcGVyZm9ybVN5bmNXb3JrKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzJDEoKSB7XG4gIGlmICghaXNSZW5kZXJpbmcgJiYgbG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrKSB7XG4gICAgLy8gU3luY2hyb25vdXNseSBmbHVzaCBwZW5kaW5nIGludGVyYWN0aXZlIHVwZGF0ZXMuXG4gICAgcGVyZm9ybVdvcmsobG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSwgZmFsc2UpO1xuICAgIGxvd2VzdFByaW9yaXR5UGVuZGluZ0ludGVyYWN0aXZlRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmx1c2hDb250cm9sbGVkKGZuKSB7XG4gIHZhciBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzID0gaXNCYXRjaGluZ1VwZGF0ZXM7XG4gIGlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICBzeW5jVXBkYXRlcyhmbik7XG4gIH0gZmluYWxseSB7XG4gICAgaXNCYXRjaGluZ1VwZGF0ZXMgPSBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzO1xuICAgIGlmICghaXNCYXRjaGluZ1VwZGF0ZXMgJiYgIWlzUmVuZGVyaW5nKSB7XG4gICAgICBwZXJmb3JtU3luY1dvcmsoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gMCBpcyBQUk9ELCAxIGlzIERFVi5cbi8vIE1pZ2h0IGFkZCBQUk9GSUxFIGxhdGVyLlxuXG5cbnZhciBkaWRXYXJuQWJvdXROZXN0ZWRVcGRhdGVzID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlID0gdm9pZCAwO1xuXG57XG4gIGRpZFdhcm5BYm91dE5lc3RlZFVwZGF0ZXMgPSBmYWxzZTtcbiAgZGlkV2FybkFib3V0RmluZE5vZGVJblN0cmljdE1vZGUgPSB7fTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dEZvclN1YnRyZWUocGFyZW50Q29tcG9uZW50KSB7XG4gIGlmICghcGFyZW50Q29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGVtcHR5Q29udGV4dE9iamVjdDtcbiAgfVxuXG4gIHZhciBmaWJlciA9IGdldChwYXJlbnRDb21wb25lbnQpO1xuICB2YXIgcGFyZW50Q29udGV4dCA9IGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0KGZpYmVyKTtcblxuICBpZiAoZmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgIHZhciBDb21wb25lbnQgPSBmaWJlci50eXBlO1xuICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzc0NoaWxkQ29udGV4dChmaWJlciwgQ29tcG9uZW50LCBwYXJlbnRDb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyZW50Q29udGV4dDtcbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVSb290VXBkYXRlKGN1cnJlbnQkJDEsIGVsZW1lbnQsIGV4cGlyYXRpb25UaW1lLCBjYWxsYmFjaykge1xuICB7XG4gICAgaWYgKHBoYXNlID09PSAncmVuZGVyJyAmJiBjdXJyZW50ICE9PSBudWxsICYmICFkaWRXYXJuQWJvdXROZXN0ZWRVcGRhdGVzKSB7XG4gICAgICBkaWRXYXJuQWJvdXROZXN0ZWRVcGRhdGVzID0gdHJ1ZTtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1JlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlOyAnICsgJ3RyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyIGlzIG5vdCBhbGxvd2VkLiAnICsgJ0lmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiBjb21wb25lbnREaWRVcGRhdGUuXFxuXFxuJyArICdDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAlcy4nLCBnZXRDb21wb25lbnROYW1lKGN1cnJlbnQudHlwZSkgfHwgJ1Vua25vd24nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGV4cGlyYXRpb25UaW1lKTtcbiAgLy8gQ2F1dGlvbjogUmVhY3QgRGV2VG9vbHMgY3VycmVudGx5IGRlcGVuZHMgb24gdGhpcyBwcm9wZXJ0eVxuICAvLyBiZWluZyBjYWxsZWQgXCJlbGVtZW50XCIuXG4gIHVwZGF0ZS5wYXlsb2FkID0geyBlbGVtZW50OiBlbGVtZW50IH07XG5cbiAgY2FsbGJhY2sgPSBjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNhbGxiYWNrO1xuICBpZiAoY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAhKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdyZW5kZXIoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhICcgKyAnZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNhbGxiYWNrKSA6IHZvaWQgMDtcbiAgICB1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgfVxuXG4gIGZsdXNoUGFzc2l2ZUVmZmVjdHMoKTtcbiAgZW5xdWV1ZVVwZGF0ZShjdXJyZW50JCQxLCB1cGRhdGUpO1xuICBzY2hlZHVsZVdvcmsoY3VycmVudCQkMSwgZXhwaXJhdGlvblRpbWUpO1xuXG4gIHJldHVybiBleHBpcmF0aW9uVGltZTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShlbGVtZW50LCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgZXhwaXJhdGlvblRpbWUsIGNhbGxiYWNrKSB7XG4gIC8vIFRPRE86IElmIHRoaXMgaXMgYSBuZXN0ZWQgY29udGFpbmVyLCB0aGlzIHdvbid0IGJlIHRoZSByb290LlxuICB2YXIgY3VycmVudCQkMSA9IGNvbnRhaW5lci5jdXJyZW50O1xuXG4gIHtcbiAgICBpZiAoUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbCkge1xuICAgICAgaWYgKGN1cnJlbnQkJDEuYWx0ZXJuYXRlID09PSBudWxsKSB7XG4gICAgICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wub25Nb3VudENvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wub25Vbm1vdW50Q29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uVXBkYXRlQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbnRleHQgPSBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpO1xuICBpZiAoY29udGFpbmVyLmNvbnRleHQgPT09IG51bGwpIHtcbiAgICBjb250YWluZXIuY29udGV4dCA9IGNvbnRleHQ7XG4gIH0gZWxzZSB7XG4gICAgY29udGFpbmVyLnBlbmRpbmdDb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIHJldHVybiBzY2hlZHVsZVJvb3RVcGRhdGUoY3VycmVudCQkMSwgZWxlbWVudCwgZXhwaXJhdGlvblRpbWUsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gZmluZEhvc3RJbnN0YW5jZShjb21wb25lbnQpIHtcbiAgdmFyIGZpYmVyID0gZ2V0KGNvbXBvbmVudCk7XG4gIGlmIChmaWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludmFyaWFudChmYWxzZSwgJ0FyZ3VtZW50IGFwcGVhcnMgdG8gbm90IGJlIGEgUmVhY3RDb21wb25lbnQuIEtleXM6ICVzJywgT2JqZWN0LmtleXMoY29tcG9uZW50KSk7XG4gICAgfVxuICB9XG4gIHZhciBob3N0RmliZXIgPSBmaW5kQ3VycmVudEhvc3RGaWJlcihmaWJlcik7XG4gIGlmIChob3N0RmliZXIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gaG9zdEZpYmVyLnN0YXRlTm9kZTtcbn1cblxuZnVuY3Rpb24gZmluZEhvc3RJbnN0YW5jZVdpdGhXYXJuaW5nKGNvbXBvbmVudCwgbWV0aG9kTmFtZSkge1xuICB7XG4gICAgdmFyIGZpYmVyID0gZ2V0KGNvbXBvbmVudCk7XG4gICAgaWYgKGZpYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50LnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdBcmd1bWVudCBhcHBlYXJzIHRvIG5vdCBiZSBhIFJlYWN0Q29tcG9uZW50LiBLZXlzOiAlcycsIE9iamVjdC5rZXlzKGNvbXBvbmVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaG9zdEZpYmVyID0gZmluZEN1cnJlbnRIb3N0RmliZXIoZmliZXIpO1xuICAgIGlmIChob3N0RmliZXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaG9zdEZpYmVyLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ0NvbXBvbmVudCc7XG4gICAgICBpZiAoIWRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgaWYgKGZpYmVyLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMgaXMgZGVwcmVjYXRlZCBpbiBTdHJpY3RNb2RlLiAnICsgJyVzIHdhcyBwYXNzZWQgYW4gaW5zdGFuY2Ugb2YgJXMgd2hpY2ggaXMgaW5zaWRlIFN0cmljdE1vZGUuICcgKyAnSW5zdGVhZCwgYWRkIGEgcmVmIGRpcmVjdGx5IHRvIHRoZSBlbGVtZW50IHlvdSB3YW50IHRvIHJlZmVyZW5jZS4nICsgJ1xcbiVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHVzaW5nIHJlZnMgc2FmZWx5IGhlcmU6JyArICdcXG5odHRwczovL2ZiLm1lL3JlYWN0LXN0cmljdC1tb2RlLWZpbmQtbm9kZScsIG1ldGhvZE5hbWUsIG1ldGhvZE5hbWUsIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChob3N0RmliZXIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyBpcyBkZXByZWNhdGVkIGluIFN0cmljdE1vZGUuICcgKyAnJXMgd2FzIHBhc3NlZCBhbiBpbnN0YW5jZSBvZiAlcyB3aGljaCByZW5kZXJzIFN0cmljdE1vZGUgY2hpbGRyZW4uICcgKyAnSW5zdGVhZCwgYWRkIGEgcmVmIGRpcmVjdGx5IHRvIHRoZSBlbGVtZW50IHlvdSB3YW50IHRvIHJlZmVyZW5jZS4nICsgJ1xcbiVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHVzaW5nIHJlZnMgc2FmZWx5IGhlcmU6JyArICdcXG5odHRwczovL2ZiLm1lL3JlYWN0LXN0cmljdC1tb2RlLWZpbmQtbm9kZScsIG1ldGhvZE5hbWUsIG1ldGhvZE5hbWUsIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChob3N0RmliZXIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaG9zdEZpYmVyLnN0YXRlTm9kZTtcbiAgfVxuICByZXR1cm4gZmluZEhvc3RJbnN0YW5jZShjb21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb250YWluZXIoY29udGFpbmVySW5mbywgaXNDb25jdXJyZW50LCBoeWRyYXRlKSB7XG4gIHJldHVybiBjcmVhdGVGaWJlclJvb3QoY29udGFpbmVySW5mbywgaXNDb25jdXJyZW50LCBoeWRyYXRlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVyKGVsZW1lbnQsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBjYWxsYmFjaykge1xuICB2YXIgY3VycmVudCQkMSA9IGNvbnRhaW5lci5jdXJyZW50O1xuICB2YXIgY3VycmVudFRpbWUgPSByZXF1ZXN0Q3VycmVudFRpbWUoKTtcbiAgdmFyIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcihjdXJyZW50VGltZSwgY3VycmVudCQkMSk7XG4gIHJldHVybiB1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGVsZW1lbnQsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBleHBpcmF0aW9uVGltZSwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBnZXRQdWJsaWNSb290SW5zdGFuY2UoY29udGFpbmVyKSB7XG4gIHZhciBjb250YWluZXJGaWJlciA9IGNvbnRhaW5lci5jdXJyZW50O1xuICBpZiAoIWNvbnRhaW5lckZpYmVyLmNoaWxkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgc3dpdGNoIChjb250YWluZXJGaWJlci5jaGlsZC50YWcpIHtcbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICByZXR1cm4gZ2V0UHVibGljSW5zdGFuY2UoY29udGFpbmVyRmliZXIuY2hpbGQuc3RhdGVOb2RlKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNvbnRhaW5lckZpYmVyLmNoaWxkLnN0YXRlTm9kZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyhmaWJlcikge1xuICB2YXIgaG9zdEZpYmVyID0gZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzKGZpYmVyKTtcbiAgaWYgKGhvc3RGaWJlciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBob3N0RmliZXIuc3RhdGVOb2RlO1xufVxuXG52YXIgb3ZlcnJpZGVQcm9wcyA9IG51bGw7XG5cbntcbiAgdmFyIGNvcHlXaXRoU2V0SW1wbCA9IGZ1bmN0aW9uIChvYmosIHBhdGgsIGlkeCwgdmFsdWUpIHtcbiAgICBpZiAoaWR4ID49IHBhdGgubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHZhciBrZXkgPSBwYXRoW2lkeF07XG4gICAgdmFyIHVwZGF0ZWQgPSBBcnJheS5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF9hc3NpZ24oe30sIG9iaik7XG4gICAgLy8gJEZsb3dGaXhNZSBudW1iZXIgb3Igc3RyaW5nIGlzIGZpbmUgaGVyZVxuICAgIHVwZGF0ZWRba2V5XSA9IGNvcHlXaXRoU2V0SW1wbChvYmpba2V5XSwgcGF0aCwgaWR4ICsgMSwgdmFsdWUpO1xuICAgIHJldHVybiB1cGRhdGVkO1xuICB9O1xuXG4gIHZhciBjb3B5V2l0aFNldCA9IGZ1bmN0aW9uIChvYmosIHBhdGgsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGNvcHlXaXRoU2V0SW1wbChvYmosIHBhdGgsIDAsIHZhbHVlKTtcbiAgfTtcblxuICAvLyBTdXBwb3J0IERldlRvb2xzIHByb3BzIGZvciBmdW5jdGlvbiBjb21wb25lbnRzLCBmb3J3YXJkUmVmLCBtZW1vLCBob3N0IGNvbXBvbmVudHMsIGV0Yy5cbiAgb3ZlcnJpZGVQcm9wcyA9IGZ1bmN0aW9uIChmaWJlciwgcGF0aCwgdmFsdWUpIHtcbiAgICBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gICAgZmliZXIucGVuZGluZ1Byb3BzID0gY29weVdpdGhTZXQoZmliZXIubWVtb2l6ZWRQcm9wcywgcGF0aCwgdmFsdWUpO1xuICAgIGlmIChmaWJlci5hbHRlcm5hdGUpIHtcbiAgICAgIGZpYmVyLmFsdGVybmF0ZS5wZW5kaW5nUHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgfVxuICAgIHNjaGVkdWxlV29yayhmaWJlciwgU3luYyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluamVjdEludG9EZXZUb29scyhkZXZUb29sc0NvbmZpZykge1xuICB2YXIgZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UgPSBkZXZUb29sc0NvbmZpZy5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtcbiAgdmFyIFJlYWN0Q3VycmVudERpc3BhdGNoZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnREaXNwYXRjaGVyO1xuXG5cbiAgcmV0dXJuIGluamVjdEludGVybmFscyhfYXNzaWduKHt9LCBkZXZUb29sc0NvbmZpZywge1xuICAgIG92ZXJyaWRlUHJvcHM6IG92ZXJyaWRlUHJvcHMsXG4gICAgY3VycmVudERpc3BhdGNoZXJSZWY6IFJlYWN0Q3VycmVudERpc3BhdGNoZXIsXG4gICAgZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6IGZ1bmN0aW9uIChmaWJlcikge1xuICAgICAgdmFyIGhvc3RGaWJlciA9IGZpbmRDdXJyZW50SG9zdEZpYmVyKGZpYmVyKTtcbiAgICAgIGlmIChob3N0RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gaG9zdEZpYmVyLnN0YXRlTm9kZTtcbiAgICB9LFxuICAgIGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgIGlmICghZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UpIHtcbiAgICAgICAgLy8gTWlnaHQgbm90IGJlIGltcGxlbWVudGVkIGJ5IHRoZSByZW5kZXJlci5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgIH1cbiAgfSkpO1xufVxuXG4vLyBUaGlzIGZpbGUgaW50ZW50aW9uYWxseSBkb2VzICpub3QqIGhhdmUgdGhlIEZsb3cgYW5ub3RhdGlvbi5cbi8vIERvbid0IGFkZCBpdC4gU2VlIGAuL2lubGluZS10eXBlZC5qc2AgZm9yIGFuIGV4cGxhbmF0aW9uLlxuXG5mdW5jdGlvbiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVySW5mbyxcbi8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIEFQSSBmb3IgY3Jvc3MtcmVuZGVyZXIgaW1wbGVtZW50YXRpb24uXG5pbXBsZW1lbnRhdGlvbikge1xuICB2YXIga2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3cgdXMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBhcyBhIFJlYWN0IFBvcnRhbFxuICAgICQkdHlwZW9mOiBSRUFDVF9QT1JUQUxfVFlQRSxcbiAgICBrZXk6IGtleSA9PSBudWxsID8gbnVsbCA6ICcnICsga2V5LFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBjb250YWluZXJJbmZvOiBjb250YWluZXJJbmZvLFxuICAgIGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvblxuICB9O1xufVxuXG4vLyBUT0RPOiB0aGlzIGlzIHNwZWNpYWwgYmVjYXVzZSBpdCBnZXRzIGltcG9ydGVkIGR1cmluZyBidWlsZC5cblxudmFyIFJlYWN0VmVyc2lvbiA9ICcxNi44LjYnO1xuXG4vLyBUT0RPOiBUaGlzIHR5cGUgaXMgc2hhcmVkIGJldHdlZW4gdGhlIHJlY29uY2lsZXIgYW5kIFJlYWN0RE9NLCBidXQgd2lsbFxuLy8gZXZlbnR1YWxseSBiZSBsaWZ0ZWQgb3V0IHRvIHRoZSByZW5kZXJlci5cblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG5cbnZhciB0b3BMZXZlbFVwZGF0ZVdhcm5pbmdzID0gdm9pZCAwO1xudmFyIHdhcm5PbkludmFsaWRDYWxsYmFjayA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRVbnN0YWJsZUNyZWF0ZVBvcnRhbCA9IGZhbHNlO1xuXG57XG4gIGlmICh0eXBlb2YgTWFwICE9PSAnZnVuY3Rpb24nIHx8XG4gIC8vICRGbG93SXNzdWUgRmxvdyBpbmNvcnJlY3RseSB0aGlua3MgTWFwIGhhcyBubyBwcm90b3R5cGVcbiAgTWFwLnByb3RvdHlwZSA9PSBudWxsIHx8IHR5cGVvZiBNYXAucHJvdG90eXBlLmZvckVhY2ggIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIFNldCAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAvLyAkRmxvd0lzc3VlIEZsb3cgaW5jb3JyZWN0bHkgdGhpbmtzIFNldCBoYXMgbm8gcHJvdG90eXBlXG4gIFNldC5wcm90b3R5cGUgPT0gbnVsbCB8fCB0eXBlb2YgU2V0LnByb3RvdHlwZS5jbGVhciAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgU2V0LnByb3RvdHlwZS5mb3JFYWNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnUmVhY3QgZGVwZW5kcyBvbiBNYXAgYW5kIFNldCBidWlsdC1pbiB0eXBlcy4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSAnICsgJ3BvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxscycpO1xuICB9XG5cbiAgdG9wTGV2ZWxVcGRhdGVXYXJuaW5ncyA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICBpZiAoY29udGFpbmVyLl9yZWFjdFJvb3RDb250YWluZXIgJiYgY29udGFpbmVyLm5vZGVUeXBlICE9PSBDT01NRU5UX05PREUpIHtcbiAgICAgIHZhciBob3N0SW5zdGFuY2UgPSBmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyhjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lci5faW50ZXJuYWxSb290LmN1cnJlbnQpO1xuICAgICAgaWYgKGhvc3RJbnN0YW5jZSkge1xuICAgICAgICAhKGhvc3RJbnN0YW5jZS5wYXJlbnROb2RlID09PSBjb250YWluZXIpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAncmVuZGVyKC4uLik6IEl0IGxvb2tzIGxpa2UgdGhlIFJlYWN0LXJlbmRlcmVkIGNvbnRlbnQgb2YgdGhpcyAnICsgJ2NvbnRhaW5lciB3YXMgcmVtb3ZlZCB3aXRob3V0IHVzaW5nIFJlYWN0LiBUaGlzIGlzIG5vdCAnICsgJ3N1cHBvcnRlZCBhbmQgd2lsbCBjYXVzZSBlcnJvcnMuIEluc3RlYWQsIGNhbGwgJyArICdSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlIHRvIGVtcHR5IGEgY29udGFpbmVyLicpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpc1Jvb3RSZW5kZXJlZEJ5U29tZVJlYWN0ID0gISFjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lcjtcbiAgICB2YXIgcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgdmFyIGhhc05vblJvb3RSZWFjdENoaWxkID0gISEocm9vdEVsICYmIGdldEluc3RhbmNlRnJvbU5vZGUkMShyb290RWwpKTtcblxuICAgICEoIWhhc05vblJvb3RSZWFjdENoaWxkIHx8IGlzUm9vdFJlbmRlcmVkQnlTb21lUmVhY3QpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAncmVuZGVyKC4uLik6IFJlcGxhY2luZyBSZWFjdC1yZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgbmV3IHJvb3QgJyArICdjb21wb25lbnQuIElmIHlvdSBpbnRlbmRlZCB0byB1cGRhdGUgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSwgJyArICd5b3Ugc2hvdWxkIGluc3RlYWQgaGF2ZSB0aGUgZXhpc3RpbmcgY2hpbGRyZW4gdXBkYXRlIHRoZWlyIHN0YXRlICcgKyAnYW5kIHJlbmRlciB0aGUgbmV3IGNvbXBvbmVudHMgaW5zdGVhZCBvZiBjYWxsaW5nIFJlYWN0RE9NLnJlbmRlci4nKSA6IHZvaWQgMDtcblxuICAgICEoY29udGFpbmVyLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUgfHwgIWNvbnRhaW5lci50YWdOYW1lIHx8IGNvbnRhaW5lci50YWdOYW1lLnRvVXBwZXJDYXNlKCkgIT09ICdCT0RZJykgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdyZW5kZXIoKTogUmVuZGVyaW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgaW50byBkb2N1bWVudC5ib2R5IGlzICcgKyAnZGlzY291cmFnZWQsIHNpbmNlIGl0cyBjaGlsZHJlbiBhcmUgb2Z0ZW4gbWFuaXB1bGF0ZWQgYnkgdGhpcmQtcGFydHkgJyArICdzY3JpcHRzIGFuZCBicm93c2VyIGV4dGVuc2lvbnMuIFRoaXMgbWF5IGxlYWQgdG8gc3VidGxlICcgKyAncmVjb25jaWxpYXRpb24gaXNzdWVzLiBUcnkgcmVuZGVyaW5nIGludG8gYSBjb250YWluZXIgZWxlbWVudCBjcmVhdGVkICcgKyAnZm9yIHlvdXIgYXBwLicpIDogdm9pZCAwO1xuICB9O1xuXG4gIHdhcm5PbkludmFsaWRDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgICEoY2FsbGJhY2sgPT09IG51bGwgfHwgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzKC4uLik6IEV4cGVjdGVkIHRoZSBsYXN0IG9wdGlvbmFsIGBjYWxsYmFja2AgYXJndW1lbnQgdG8gYmUgYSAnICsgJ2Z1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcy4nLCBjYWxsZXJOYW1lLCBjYWxsYmFjaykgOiB2b2lkIDA7XG4gIH07XG59XG5cbnNldFJlc3RvcmVJbXBsZW1lbnRhdGlvbihyZXN0b3JlQ29udHJvbGxlZFN0YXRlJDEpO1xuXG5mdW5jdGlvbiBSZWFjdEJhdGNoKHJvb3QpIHtcbiAgdmFyIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbigpO1xuICB0aGlzLl9leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICB0aGlzLl9yb290ID0gcm9vdDtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gIHRoaXMuX2RpZENvbXBsZXRlID0gZmFsc2U7XG4gIHRoaXMuX2hhc0NoaWxkcmVuID0gZmFsc2U7XG4gIHRoaXMuX2NoaWxkcmVuID0gbnVsbDtcbiAgdGhpcy5fZGVmZXIgPSB0cnVlO1xufVxuUmVhY3RCYXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICF0aGlzLl9kZWZlciA/IGludmFyaWFudChmYWxzZSwgJ2JhdGNoLnJlbmRlcjogQ2Fubm90IHJlbmRlciBhIGJhdGNoIHRoYXQgYWxyZWFkeSBjb21taXR0ZWQuJykgOiB2b2lkIDA7XG4gIHRoaXMuX2hhc0NoaWxkcmVuID0gdHJ1ZTtcbiAgdGhpcy5fY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdmFyIGludGVybmFsUm9vdCA9IHRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdDtcbiAgdmFyIGV4cGlyYXRpb25UaW1lID0gdGhpcy5fZXhwaXJhdGlvblRpbWU7XG4gIHZhciB3b3JrID0gbmV3IFJlYWN0V29yaygpO1xuICB1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGNoaWxkcmVuLCBpbnRlcm5hbFJvb3QsIG51bGwsIGV4cGlyYXRpb25UaW1lLCB3b3JrLl9vbkNvbW1pdCk7XG4gIHJldHVybiB3b3JrO1xufTtcblJlYWN0QmF0Y2gucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xuICBpZiAodGhpcy5fZGlkQ29tcGxldGUpIHtcbiAgICBvbkNvbXBsZXRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gIGlmIChjYWxsYmFja3MgPT09IG51bGwpIHtcbiAgICBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgPSBbXTtcbiAgfVxuICBjYWxsYmFja3MucHVzaChvbkNvbXBsZXRlKTtcbn07XG5SZWFjdEJhdGNoLnByb3RvdHlwZS5jb21taXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpbnRlcm5hbFJvb3QgPSB0aGlzLl9yb290Ll9pbnRlcm5hbFJvb3Q7XG4gIHZhciBmaXJzdEJhdGNoID0gaW50ZXJuYWxSb290LmZpcnN0QmF0Y2g7XG4gICEodGhpcy5fZGVmZXIgJiYgZmlyc3RCYXRjaCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdiYXRjaC5jb21taXQ6IENhbm5vdCBjb21taXQgYSBiYXRjaCBtdWx0aXBsZSB0aW1lcy4nKSA6IHZvaWQgMDtcblxuICBpZiAoIXRoaXMuX2hhc0NoaWxkcmVuKSB7XG4gICAgLy8gVGhpcyBiYXRjaCBpcyBlbXB0eS4gUmV0dXJuLlxuICAgIHRoaXMuX25leHQgPSBudWxsO1xuICAgIHRoaXMuX2RlZmVyID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGV4cGlyYXRpb25UaW1lID0gdGhpcy5fZXhwaXJhdGlvblRpbWU7XG5cbiAgLy8gRW5zdXJlIHRoaXMgaXMgdGhlIGZpcnN0IGJhdGNoIGluIHRoZSBsaXN0LlxuICBpZiAoZmlyc3RCYXRjaCAhPT0gdGhpcykge1xuICAgIC8vIFRoaXMgYmF0Y2ggaXMgbm90IHRoZSBlYXJsaWVzdCBiYXRjaC4gV2UgbmVlZCB0byBtb3ZlIGl0IHRvIHRoZSBmcm9udC5cbiAgICAvLyBVcGRhdGUgaXRzIGV4cGlyYXRpb24gdGltZSB0byBiZSB0aGUgZXhwaXJhdGlvbiB0aW1lIG9mIHRoZSBlYXJsaWVzdFxuICAgIC8vIGJhdGNoLCBzbyB0aGF0IHdlIGNhbiBmbHVzaCBpdCB3aXRob3V0IGZsdXNoaW5nIHRoZSBvdGhlciBiYXRjaGVzLlxuICAgIGlmICh0aGlzLl9oYXNDaGlsZHJlbikge1xuICAgICAgZXhwaXJhdGlvblRpbWUgPSB0aGlzLl9leHBpcmF0aW9uVGltZSA9IGZpcnN0QmF0Y2guX2V4cGlyYXRpb25UaW1lO1xuICAgICAgLy8gUmVuZGVyaW5nIHRoaXMgYmF0Y2ggYWdhaW4gZW5zdXJlcyBpdHMgY2hpbGRyZW4gd2lsbCBiZSB0aGUgZmluYWwgc3RhdGVcbiAgICAgIC8vIHdoZW4gd2UgZmx1c2ggKHVwZGF0ZXMgYXJlIHByb2Nlc3NlZCBpbiBpbnNlcnRpb24gb3JkZXI6IGxhc3RcbiAgICAgIC8vIHVwZGF0ZSB3aW5zKS5cbiAgICAgIC8vIFRPRE86IFRoaXMgZm9yY2VzIGEgcmVzdGFydC4gU2hvdWxkIHdlIHByaW50IGEgd2FybmluZz9cbiAgICAgIHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgdGhlIGJhdGNoIGZyb20gdGhlIGxpc3QuXG4gICAgdmFyIHByZXZpb3VzID0gbnVsbDtcbiAgICB2YXIgYmF0Y2ggPSBmaXJzdEJhdGNoO1xuICAgIHdoaWxlIChiYXRjaCAhPT0gdGhpcykge1xuICAgICAgcHJldmlvdXMgPSBiYXRjaDtcbiAgICAgIGJhdGNoID0gYmF0Y2guX25leHQ7XG4gICAgfVxuICAgICEocHJldmlvdXMgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnYmF0Y2guY29tbWl0OiBDYW5ub3QgY29tbWl0IGEgYmF0Y2ggbXVsdGlwbGUgdGltZXMuJykgOiB2b2lkIDA7XG4gICAgcHJldmlvdXMuX25leHQgPSBiYXRjaC5fbmV4dDtcblxuICAgIC8vIEFkZCBpdCB0byB0aGUgZnJvbnQuXG4gICAgdGhpcy5fbmV4dCA9IGZpcnN0QmF0Y2g7XG4gICAgZmlyc3RCYXRjaCA9IGludGVybmFsUm9vdC5maXJzdEJhdGNoID0gdGhpcztcbiAgfVxuXG4gIC8vIFN5bmNocm9ub3VzbHkgZmx1c2ggYWxsIHRoZSB3b3JrIHVwIHRvIHRoaXMgYmF0Y2gncyBleHBpcmF0aW9uIHRpbWUuXG4gIHRoaXMuX2RlZmVyID0gZmFsc2U7XG4gIGZsdXNoUm9vdChpbnRlcm5hbFJvb3QsIGV4cGlyYXRpb25UaW1lKTtcblxuICAvLyBQb3AgdGhlIGJhdGNoIGZyb20gdGhlIGxpc3QuXG4gIHZhciBuZXh0ID0gdGhpcy5fbmV4dDtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIGZpcnN0QmF0Y2ggPSBpbnRlcm5hbFJvb3QuZmlyc3RCYXRjaCA9IG5leHQ7XG5cbiAgLy8gQXBwZW5kIHRoZSBuZXh0IGVhcmxpZXN0IGJhdGNoJ3MgY2hpbGRyZW4gdG8gdGhlIHVwZGF0ZSBxdWV1ZS5cbiAgaWYgKGZpcnN0QmF0Y2ggIT09IG51bGwgJiYgZmlyc3RCYXRjaC5faGFzQ2hpbGRyZW4pIHtcbiAgICBmaXJzdEJhdGNoLnJlbmRlcihmaXJzdEJhdGNoLl9jaGlsZHJlbik7XG4gIH1cbn07XG5SZWFjdEJhdGNoLnByb3RvdHlwZS5fb25Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RpZENvbXBsZXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuX2RpZENvbXBsZXRlID0gdHJ1ZTtcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcztcbiAgaWYgKGNhbGxiYWNrcyA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBUT0RPOiBFcnJvciBoYW5kbGluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2NhbGxiYWNrID0gY2FsbGJhY2tzW2ldO1xuICAgIF9jYWxsYmFjaygpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZWFjdFdvcmsoKSB7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gIHRoaXMuX2RpZENvbW1pdCA9IGZhbHNlO1xuICAvLyBUT0RPOiBBdm9pZCBuZWVkIHRvIGJpbmQgYnkgcmVwbGFjaW5nIGNhbGxiYWNrcyBpbiB0aGUgdXBkYXRlIHF1ZXVlIHdpdGhcbiAgLy8gbGlzdCBvZiBXb3JrIG9iamVjdHMuXG4gIHRoaXMuX29uQ29tbWl0ID0gdGhpcy5fb25Db21taXQuYmluZCh0aGlzKTtcbn1cblJlYWN0V29yay5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChvbkNvbW1pdCkge1xuICBpZiAodGhpcy5fZGlkQ29tbWl0KSB7XG4gICAgb25Db21taXQoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcztcbiAgaWYgKGNhbGxiYWNrcyA9PT0gbnVsbCkge1xuICAgIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyA9IFtdO1xuICB9XG4gIGNhbGxiYWNrcy5wdXNoKG9uQ29tbWl0KTtcbn07XG5SZWFjdFdvcmsucHJvdG90eXBlLl9vbkNvbW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RpZENvbW1pdCkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl9kaWRDb21taXQgPSB0cnVlO1xuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzO1xuICBpZiAoY2FsbGJhY2tzID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFRPRE86IEVycm9yIGhhbmRsaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfY2FsbGJhY2syID0gY2FsbGJhY2tzW2ldO1xuICAgICEodHlwZW9mIF9jYWxsYmFjazIgPT09ICdmdW5jdGlvbicpID8gaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgYXMgY2FsbGJhY2suIEV4cGVjdGVkIGEgZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzJywgX2NhbGxiYWNrMikgOiB2b2lkIDA7XG4gICAgX2NhbGxiYWNrMigpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZWFjdFJvb3QoY29udGFpbmVyLCBpc0NvbmN1cnJlbnQsIGh5ZHJhdGUpIHtcbiAgdmFyIHJvb3QgPSBjcmVhdGVDb250YWluZXIoY29udGFpbmVyLCBpc0NvbmN1cnJlbnQsIGh5ZHJhdGUpO1xuICB0aGlzLl9pbnRlcm5hbFJvb3QgPSByb290O1xufVxuUmVhY3RSb290LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICB2YXIgd29yayA9IG5ldyBSZWFjdFdvcmsoKTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNhbGxiYWNrO1xuICB7XG4gICAgd2Fybk9uSW52YWxpZENhbGxiYWNrKGNhbGxiYWNrLCAncmVuZGVyJyk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgd29yay50aGVuKGNhbGxiYWNrKTtcbiAgfVxuICB1cGRhdGVDb250YWluZXIoY2hpbGRyZW4sIHJvb3QsIG51bGwsIHdvcmsuX29uQ29tbWl0KTtcbiAgcmV0dXJuIHdvcms7XG59O1xuUmVhY3RSb290LnByb3RvdHlwZS51bm1vdW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICB2YXIgd29yayA9IG5ldyBSZWFjdFdvcmsoKTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNhbGxiYWNrO1xuICB7XG4gICAgd2Fybk9uSW52YWxpZENhbGxiYWNrKGNhbGxiYWNrLCAncmVuZGVyJyk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgd29yay50aGVuKGNhbGxiYWNrKTtcbiAgfVxuICB1cGRhdGVDb250YWluZXIobnVsbCwgcm9vdCwgbnVsbCwgd29yay5fb25Db21taXQpO1xuICByZXR1cm4gd29yaztcbn07XG5SZWFjdFJvb3QucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciA9IGZ1bmN0aW9uIChwYXJlbnRDb21wb25lbnQsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcbiAgdmFyIHdvcmsgPSBuZXcgUmVhY3RXb3JrKCk7XG4gIGNhbGxiYWNrID0gY2FsbGJhY2sgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjYWxsYmFjaztcbiAge1xuICAgIHdhcm5PbkludmFsaWRDYWxsYmFjayhjYWxsYmFjaywgJ3JlbmRlcicpO1xuICB9XG4gIGlmIChjYWxsYmFjayAhPT0gbnVsbCkge1xuICAgIHdvcmsudGhlbihjYWxsYmFjayk7XG4gIH1cbiAgdXBkYXRlQ29udGFpbmVyKGNoaWxkcmVuLCByb290LCBwYXJlbnRDb21wb25lbnQsIHdvcmsuX29uQ29tbWl0KTtcbiAgcmV0dXJuIHdvcms7XG59O1xuUmVhY3RSb290LnByb3RvdHlwZS5jcmVhdGVCYXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJhdGNoID0gbmV3IFJlYWN0QmF0Y2godGhpcyk7XG4gIHZhciBleHBpcmF0aW9uVGltZSA9IGJhdGNoLl9leHBpcmF0aW9uVGltZTtcblxuICB2YXIgaW50ZXJuYWxSb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICB2YXIgZmlyc3RCYXRjaCA9IGludGVybmFsUm9vdC5maXJzdEJhdGNoO1xuICBpZiAoZmlyc3RCYXRjaCA9PT0gbnVsbCkge1xuICAgIGludGVybmFsUm9vdC5maXJzdEJhdGNoID0gYmF0Y2g7XG4gICAgYmF0Y2guX25leHQgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIC8vIEluc2VydCBzb3J0ZWQgYnkgZXhwaXJhdGlvbiB0aW1lIHRoZW4gaW5zZXJ0aW9uIG9yZGVyXG4gICAgdmFyIGluc2VydEFmdGVyID0gbnVsbDtcbiAgICB2YXIgaW5zZXJ0QmVmb3JlID0gZmlyc3RCYXRjaDtcbiAgICB3aGlsZSAoaW5zZXJ0QmVmb3JlICE9PSBudWxsICYmIGluc2VydEJlZm9yZS5fZXhwaXJhdGlvblRpbWUgPj0gZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIGluc2VydEFmdGVyID0gaW5zZXJ0QmVmb3JlO1xuICAgICAgaW5zZXJ0QmVmb3JlID0gaW5zZXJ0QmVmb3JlLl9uZXh0O1xuICAgIH1cbiAgICBiYXRjaC5fbmV4dCA9IGluc2VydEJlZm9yZTtcbiAgICBpZiAoaW5zZXJ0QWZ0ZXIgIT09IG51bGwpIHtcbiAgICAgIGluc2VydEFmdGVyLl9uZXh0ID0gYmF0Y2g7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJhdGNoO1xufTtcblxuLyoqXG4gKiBUcnVlIGlmIHRoZSBzdXBwbGllZCBET00gbm9kZSBpcyBhIHZhbGlkIG5vZGUgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlIFRoZSBjYW5kaWRhdGUgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBET00gaXMgYSB2YWxpZCBET00gbm9kZS5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQ29udGFpbmVyKG5vZGUpIHtcbiAgcmV0dXJuICEhKG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFICYmIG5vZGUubm9kZVZhbHVlID09PSAnIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlICcpKTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfTk9ERSkge1xuICAgIHJldHVybiBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRIeWRyYXRlRHVlVG9MZWdhY3lIZXVyaXN0aWMoY29udGFpbmVyKSB7XG4gIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICByZXR1cm4gISEocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJiByb290RWxlbWVudC5oYXNBdHRyaWJ1dGUoUk9PVF9BVFRSSUJVVEVfTkFNRSkpO1xufVxuXG5zZXRCYXRjaGluZ0ltcGxlbWVudGF0aW9uKGJhdGNoZWRVcGRhdGVzJDEsIGludGVyYWN0aXZlVXBkYXRlcyQxLCBmbHVzaEludGVyYWN0aXZlVXBkYXRlcyQxKTtcblxudmFyIHdhcm5lZEFib3V0SHlkcmF0ZUFQSSA9IGZhbHNlO1xuXG5mdW5jdGlvbiBsZWdhY3lDcmVhdGVSb290RnJvbURPTUNvbnRhaW5lcihjb250YWluZXIsIGZvcmNlSHlkcmF0ZSkge1xuICB2YXIgc2hvdWxkSHlkcmF0ZSA9IGZvcmNlSHlkcmF0ZSB8fCBzaG91bGRIeWRyYXRlRHVlVG9MZWdhY3lIZXVyaXN0aWMoY29udGFpbmVyKTtcbiAgLy8gRmlyc3QgY2xlYXIgYW55IGV4aXN0aW5nIGNvbnRlbnQuXG4gIGlmICghc2hvdWxkSHlkcmF0ZSkge1xuICAgIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgICB2YXIgcm9vdFNpYmxpbmcgPSB2b2lkIDA7XG4gICAgd2hpbGUgKHJvb3RTaWJsaW5nID0gY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgICAge1xuICAgICAgICBpZiAoIXdhcm5lZCAmJiByb290U2libGluZy5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFICYmIHJvb3RTaWJsaW5nLmhhc0F0dHJpYnV0ZShST09UX0FUVFJJQlVURV9OQU1FKSkge1xuICAgICAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAncmVuZGVyKCk6IFRhcmdldCBub2RlIGhhcyBtYXJrdXAgcmVuZGVyZWQgYnkgUmVhY3QsIGJ1dCB0aGVyZSAnICsgJ2FyZSB1bnJlbGF0ZWQgbm9kZXMgYXMgd2VsbC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGNhdXNlZCBieSAnICsgJ3doaXRlLXNwYWNlIGluc2VydGVkIGFyb3VuZCBzZXJ2ZXItcmVuZGVyZWQgbWFya3VwLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQocm9vdFNpYmxpbmcpO1xuICAgIH1cbiAgfVxuICB7XG4gICAgaWYgKHNob3VsZEh5ZHJhdGUgJiYgIWZvcmNlSHlkcmF0ZSAmJiAhd2FybmVkQWJvdXRIeWRyYXRlQVBJKSB7XG4gICAgICB3YXJuZWRBYm91dEh5ZHJhdGVBUEkgPSB0cnVlO1xuICAgICAgbG93UHJpb3JpdHlXYXJuaW5nJDEoZmFsc2UsICdyZW5kZXIoKTogQ2FsbGluZyBSZWFjdERPTS5yZW5kZXIoKSB0byBoeWRyYXRlIHNlcnZlci1yZW5kZXJlZCBtYXJrdXAgJyArICd3aWxsIHN0b3Agd29ya2luZyBpbiBSZWFjdCB2MTcuIFJlcGxhY2UgdGhlIFJlYWN0RE9NLnJlbmRlcigpIGNhbGwgJyArICd3aXRoIFJlYWN0RE9NLmh5ZHJhdGUoKSBpZiB5b3Ugd2FudCBSZWFjdCB0byBhdHRhY2ggdG8gdGhlIHNlcnZlciBIVE1MLicpO1xuICAgIH1cbiAgfVxuICAvLyBMZWdhY3kgcm9vdHMgYXJlIG5vdCBhc3luYyBieSBkZWZhdWx0LlxuICB2YXIgaXNDb25jdXJyZW50ID0gZmFsc2U7XG4gIHJldHVybiBuZXcgUmVhY3RSb290KGNvbnRhaW5lciwgaXNDb25jdXJyZW50LCBzaG91bGRIeWRyYXRlKTtcbn1cblxuZnVuY3Rpb24gbGVnYWN5UmVuZGVyU3VidHJlZUludG9Db250YWluZXIocGFyZW50Q29tcG9uZW50LCBjaGlsZHJlbiwgY29udGFpbmVyLCBmb3JjZUh5ZHJhdGUsIGNhbGxiYWNrKSB7XG4gIHtcbiAgICB0b3BMZXZlbFVwZGF0ZVdhcm5pbmdzKGNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBUT0RPOiBXaXRob3V0IGBhbnlgIHR5cGUsIEZsb3cgc2F5cyBcIlByb3BlcnR5IGNhbm5vdCBiZSBhY2Nlc3NlZCBvbiBhbnlcbiAgLy8gbWVtYmVyIG9mIGludGVyc2VjdGlvbiB0eXBlLlwiIFdoeXl5eXl5LlxuICB2YXIgcm9vdCA9IGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyO1xuICBpZiAoIXJvb3QpIHtcbiAgICAvLyBJbml0aWFsIG1vdW50XG4gICAgcm9vdCA9IGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID0gbGVnYWN5Q3JlYXRlUm9vdEZyb21ET01Db250YWluZXIoY29udGFpbmVyLCBmb3JjZUh5ZHJhdGUpO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBvcmlnaW5hbENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZ2V0UHVibGljUm9vdEluc3RhbmNlKHJvb3QuX2ludGVybmFsUm9vdCk7XG4gICAgICAgIG9yaWdpbmFsQ2FsbGJhY2suY2FsbChpbnN0YW5jZSk7XG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBJbml0aWFsIG1vdW50IHNob3VsZCBub3QgYmUgYmF0Y2hlZC5cbiAgICB1bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwYXJlbnRDb21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgICByb290LmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnRDb21wb25lbnQsIGNoaWxkcmVuLCBjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290LnJlbmRlcihjaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBfb3JpZ2luYWxDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGdldFB1YmxpY1Jvb3RJbnN0YW5jZShyb290Ll9pbnRlcm5hbFJvb3QpO1xuICAgICAgICBfb3JpZ2luYWxDYWxsYmFjay5jYWxsKGluc3RhbmNlKTtcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIFVwZGF0ZVxuICAgIGlmIChwYXJlbnRDb21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgcm9vdC5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIocGFyZW50Q29tcG9uZW50LCBjaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LnJlbmRlcihjaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZ2V0UHVibGljUm9vdEluc3RhbmNlKHJvb3QuX2ludGVybmFsUm9vdCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBvcnRhbCQkMShjaGlsZHJlbiwgY29udGFpbmVyKSB7XG4gIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG5cbiAgIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSA/IGludmFyaWFudChmYWxzZSwgJ1RhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiB2b2lkIDA7XG4gIC8vIFRPRE86IHBhc3MgUmVhY3RET00gcG9ydGFsIGltcGxlbWVudGF0aW9uIGFzIHRoaXJkIGFyZ3VtZW50XG4gIHJldHVybiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVyLCBudWxsLCBrZXkpO1xufVxuXG52YXIgUmVhY3RET00gPSB7XG4gIGNyZWF0ZVBvcnRhbDogY3JlYXRlUG9ydGFsJCQxLFxuXG4gIGZpbmRET01Ob2RlOiBmdW5jdGlvbiAoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gICAge1xuICAgICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICAgIGlmIChvd25lciAhPT0gbnVsbCAmJiBvd25lci5zdGF0ZU5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHdhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gb3duZXIuc3RhdGVOb2RlLl93YXJuZWRBYm91dFJlZnNJblJlbmRlcjtcbiAgICAgICAgIXdhcm5lZEFib3V0UmVmc0luUmVuZGVyID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMgaXMgYWNjZXNzaW5nIGZpbmRET01Ob2RlIGluc2lkZSBpdHMgcmVuZGVyKCkuICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBnZXRDb21wb25lbnROYW1lKG93bmVyLnR5cGUpIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICBvd25lci5zdGF0ZU5vZGUuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudE9yRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudE9yRWxlbWVudC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xuICAgIH1cbiAgICB7XG4gICAgICByZXR1cm4gZmluZEhvc3RJbnN0YW5jZVdpdGhXYXJuaW5nKGNvbXBvbmVudE9yRWxlbWVudCwgJ2ZpbmRET01Ob2RlJyk7XG4gICAgfVxuICAgIHJldHVybiBmaW5kSG9zdEluc3RhbmNlKGNvbXBvbmVudE9yRWxlbWVudCk7XG4gIH0sXG4gIGh5ZHJhdGU6IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSA/IGludmFyaWFudChmYWxzZSwgJ1RhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiB2b2lkIDA7XG4gICAge1xuICAgICAgISFjb250YWluZXIuX3JlYWN0SGFzQmVlblBhc3NlZFRvQ3JlYXRlUm9vdERFViA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1lvdSBhcmUgY2FsbGluZyBSZWFjdERPTS5oeWRyYXRlKCkgb24gYSBjb250YWluZXIgdGhhdCB3YXMgcHJldmlvdXNseSAnICsgJ3Bhc3NlZCB0byBSZWFjdERPTS4lcygpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuICcgKyAnRGlkIHlvdSBtZWFuIHRvIGNhbGwgY3JlYXRlUm9vdChjb250YWluZXIsIHtoeWRyYXRlOiB0cnVlfSkucmVuZGVyKGVsZW1lbnQpPycsIGVuYWJsZVN0YWJsZUNvbmN1cnJlbnRNb2RlQVBJcyA/ICdjcmVhdGVSb290JyA6ICd1bnN0YWJsZV9jcmVhdGVSb290JykgOiB2b2lkIDA7XG4gICAgfVxuICAgIC8vIFRPRE86IHRocm93IG9yIHdhcm4gaWYgd2UgY291bGRuJ3QgaHlkcmF0ZT9cbiAgICByZXR1cm4gbGVnYWN5UmVuZGVyU3VidHJlZUludG9Db250YWluZXIobnVsbCwgZWxlbWVudCwgY29udGFpbmVyLCB0cnVlLCBjYWxsYmFjayk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAhaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpID8gaW52YXJpYW50KGZhbHNlLCAnVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC4nKSA6IHZvaWQgMDtcbiAgICB7XG4gICAgICAhIWNvbnRhaW5lci5fcmVhY3RIYXNCZWVuUGFzc2VkVG9DcmVhdGVSb290REVWID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnWW91IGFyZSBjYWxsaW5nIFJlYWN0RE9NLnJlbmRlcigpIG9uIGEgY29udGFpbmVyIHRoYXQgd2FzIHByZXZpb3VzbHkgJyArICdwYXNzZWQgdG8gUmVhY3RET00uJXMoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiAnICsgJ0RpZCB5b3UgbWVhbiB0byBjYWxsIHJvb3QucmVuZGVyKGVsZW1lbnQpPycsIGVuYWJsZVN0YWJsZUNvbmN1cnJlbnRNb2RlQVBJcyA/ICdjcmVhdGVSb290JyA6ICd1bnN0YWJsZV9jcmVhdGVSb290JykgOiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBsZWdhY3lSZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihudWxsLCBlbGVtZW50LCBjb250YWluZXIsIGZhbHNlLCBjYWxsYmFjayk7XG4gIH0sXG4gIHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOiBmdW5jdGlvbiAocGFyZW50Q29tcG9uZW50LCBlbGVtZW50LCBjb250YWluZXJOb2RlLCBjYWxsYmFjaykge1xuICAgICFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lck5vZGUpID8gaW52YXJpYW50KGZhbHNlLCAnVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC4nKSA6IHZvaWQgMDtcbiAgICAhKHBhcmVudENvbXBvbmVudCAhPSBudWxsICYmIGhhcyhwYXJlbnRDb21wb25lbnQpKSA/IGludmFyaWFudChmYWxzZSwgJ3BhcmVudENvbXBvbmVudCBtdXN0IGJlIGEgdmFsaWQgUmVhY3QgQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGxlZ2FjeVJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHBhcmVudENvbXBvbmVudCwgZWxlbWVudCwgY29udGFpbmVyTm9kZSwgZmFsc2UsIGNhbGxiYWNrKTtcbiAgfSxcbiAgdW5tb3VudENvbXBvbmVudEF0Tm9kZTogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikgPyBpbnZhcmlhbnQoZmFsc2UsICd1bm1vdW50Q29tcG9uZW50QXROb2RlKC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiB2b2lkIDA7XG5cbiAgICB7XG4gICAgICAhIWNvbnRhaW5lci5fcmVhY3RIYXNCZWVuUGFzc2VkVG9DcmVhdGVSb290REVWID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnWW91IGFyZSBjYWxsaW5nIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoKSBvbiBhIGNvbnRhaW5lciB0aGF0IHdhcyBwcmV2aW91c2x5ICcgKyAncGFzc2VkIHRvIFJlYWN0RE9NLiVzKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIHRvIGNhbGwgcm9vdC51bm1vdW50KCk/JywgZW5hYmxlU3RhYmxlQ29uY3VycmVudE1vZGVBUElzID8gJ2NyZWF0ZVJvb3QnIDogJ3Vuc3RhYmxlX2NyZWF0ZVJvb3QnKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyLl9yZWFjdFJvb3RDb250YWluZXIpIHtcbiAgICAgIHtcbiAgICAgICAgdmFyIHJvb3RFbCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgICB2YXIgcmVuZGVyZWRCeURpZmZlcmVudFJlYWN0ID0gcm9vdEVsICYmICFnZXRJbnN0YW5jZUZyb21Ob2RlJDEocm9vdEVsKTtcbiAgICAgICAgISFyZW5kZXJlZEJ5RGlmZmVyZW50UmVhY3QgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsIFwidW5tb3VudENvbXBvbmVudEF0Tm9kZSgpOiBUaGUgbm9kZSB5b3UncmUgYXR0ZW1wdGluZyB0byB1bm1vdW50IFwiICsgJ3dhcyByZW5kZXJlZCBieSBhbm90aGVyIGNvcHkgb2YgUmVhY3QuJykgOiB2b2lkIDA7XG4gICAgICB9XG5cbiAgICAgIC8vIFVubW91bnQgc2hvdWxkIG5vdCBiZSBiYXRjaGVkLlxuICAgICAgdW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxlZ2FjeVJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKG51bGwsIG51bGwsIGNvbnRhaW5lciwgZmFsc2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAvLyBJZiB5b3UgY2FsbCB1bm1vdW50Q29tcG9uZW50QXROb2RlIHR3aWNlIGluIHF1aWNrIHN1Y2Nlc3Npb24sIHlvdSdsbFxuICAgICAgLy8gZ2V0IGB0cnVlYCB0d2ljZS4gVGhhdCdzIHByb2JhYmx5IGZpbmU/XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAge1xuICAgICAgICB2YXIgX3Jvb3RFbCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgICB2YXIgaGFzTm9uUm9vdFJlYWN0Q2hpbGQgPSAhIShfcm9vdEVsICYmIGdldEluc3RhbmNlRnJvbU5vZGUkMShfcm9vdEVsKSk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbnRhaW5lciBpdHNlbGYgaXMgYSBSZWFjdCByb290IG5vZGUuXG4gICAgICAgIHZhciBpc0NvbnRhaW5lclJlYWN0Um9vdCA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFICYmIGlzVmFsaWRDb250YWluZXIoY29udGFpbmVyLnBhcmVudE5vZGUpICYmICEhY29udGFpbmVyLnBhcmVudE5vZGUuX3JlYWN0Um9vdENvbnRhaW5lcjtcblxuICAgICAgICAhIWhhc05vblJvb3RSZWFjdENoaWxkID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCBcInVubW91bnRDb21wb25lbnRBdE5vZGUoKTogVGhlIG5vZGUgeW91J3JlIGF0dGVtcHRpbmcgdG8gdW5tb3VudCBcIiArICd3YXMgcmVuZGVyZWQgYnkgUmVhY3QgYW5kIGlzIG5vdCBhIHRvcC1sZXZlbCBjb250YWluZXIuICVzJywgaXNDb250YWluZXJSZWFjdFJvb3QgPyAnWW91IG1heSBoYXZlIGFjY2lkZW50YWxseSBwYXNzZWQgaW4gYSBSZWFjdCByb290IG5vZGUgaW5zdGVhZCAnICsgJ29mIGl0cyBjb250YWluZXIuJyA6ICdJbnN0ZWFkLCBoYXZlIHRoZSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZSBpdHMgc3RhdGUgYW5kICcgKyAncmVyZW5kZXIgaW4gb3JkZXIgdG8gcmVtb3ZlIHRoaXMgY29tcG9uZW50LicpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuXG5cbiAgLy8gVGVtcG9yYXJ5IGFsaWFzIHNpbmNlIHdlIGFscmVhZHkgc2hpcHBlZCBSZWFjdCAxNiBSQyB3aXRoIGl0LlxuICAvLyBUT0RPOiByZW1vdmUgaW4gUmVhY3QgMTcuXG4gIHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghZGlkV2FybkFib3V0VW5zdGFibGVDcmVhdGVQb3J0YWwpIHtcbiAgICAgIGRpZFdhcm5BYm91dFVuc3RhYmxlQ3JlYXRlUG9ydGFsID0gdHJ1ZTtcbiAgICAgIGxvd1ByaW9yaXR5V2FybmluZyQxKGZhbHNlLCAnVGhlIFJlYWN0RE9NLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbCgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxNysuIFVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlICcgKyAnUmVhY3RET00uY3JlYXRlUG9ydGFsKCkgaW5zdGVhZC4gSXQgaGFzIHRoZSBleGFjdCBzYW1lIEFQSSwgJyArICdidXQgd2l0aG91dCB0aGUgXCJ1bnN0YWJsZV9cIiBwcmVmaXguJyk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVQb3J0YWwkJDEuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9LFxuXG5cbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IGJhdGNoZWRVcGRhdGVzJDEsXG5cbiAgdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOiBpbnRlcmFjdGl2ZVVwZGF0ZXMkMSxcblxuICBmbHVzaFN5bmM6IGZsdXNoU3luYyxcblxuICB1bnN0YWJsZV9jcmVhdGVSb290OiBjcmVhdGVSb290LFxuICB1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6IGZsdXNoQ29udHJvbGxlZCxcblxuICBfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDoge1xuICAgIC8vIEtlZXAgaW4gc3luYyB3aXRoIFJlYWN0RE9NVW5zdGFibGVOYXRpdmVEZXBlbmRlbmNpZXMuanNcbiAgICAvLyBhbmQgUmVhY3RUZXN0VXRpbHMuanMuIFRoaXMgaXMgYW4gYXJyYXkgZm9yIGJldHRlciBtaW5pZmljYXRpb24uXG4gICAgRXZlbnRzOiBbZ2V0SW5zdGFuY2VGcm9tTm9kZSQxLCBnZXROb2RlRnJvbUluc3RhbmNlJDEsIGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUkMSwgaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSwgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzLCBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcywgZW5xdWV1ZVN0YXRlUmVzdG9yZSwgcmVzdG9yZVN0YXRlSWZOZWVkZWQsIGRpc3BhdGNoRXZlbnQsIHJ1bkV2ZW50c0luQmF0Y2hdXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvb3QoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gIHZhciBmdW5jdGlvbk5hbWUgPSBlbmFibGVTdGFibGVDb25jdXJyZW50TW9kZUFQSXMgPyAnY3JlYXRlUm9vdCcgOiAndW5zdGFibGVfY3JlYXRlUm9vdCc7XG4gICFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikgPyBpbnZhcmlhbnQoZmFsc2UsICclcyguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicsIGZ1bmN0aW9uTmFtZSkgOiB2b2lkIDA7XG4gIHtcbiAgICAhIWNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnWW91IGFyZSBjYWxsaW5nIFJlYWN0RE9NLiVzKCkgb24gYSBjb250YWluZXIgdGhhdCB3YXMgcHJldmlvdXNseSAnICsgJ3Bhc3NlZCB0byBSZWFjdERPTS5yZW5kZXIoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLicsIGVuYWJsZVN0YWJsZUNvbmN1cnJlbnRNb2RlQVBJcyA/ICdjcmVhdGVSb290JyA6ICd1bnN0YWJsZV9jcmVhdGVSb290JykgOiB2b2lkIDA7XG4gICAgY29udGFpbmVyLl9yZWFjdEhhc0JlZW5QYXNzZWRUb0NyZWF0ZVJvb3RERVYgPSB0cnVlO1xuICB9XG4gIHZhciBoeWRyYXRlID0gb3B0aW9ucyAhPSBudWxsICYmIG9wdGlvbnMuaHlkcmF0ZSA9PT0gdHJ1ZTtcbiAgcmV0dXJuIG5ldyBSZWFjdFJvb3QoY29udGFpbmVyLCB0cnVlLCBoeWRyYXRlKTtcbn1cblxuaWYgKGVuYWJsZVN0YWJsZUNvbmN1cnJlbnRNb2RlQVBJcykge1xuICBSZWFjdERPTS5jcmVhdGVSb290ID0gY3JlYXRlUm9vdDtcbiAgUmVhY3RET00udW5zdGFibGVfY3JlYXRlUm9vdCA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGZvdW5kRGV2VG9vbHMgPSBpbmplY3RJbnRvRGV2VG9vbHMoe1xuICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsXG4gIGJ1bmRsZVR5cGU6IDEsXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcbiAgcmVuZGVyZXJQYWNrYWdlTmFtZTogJ3JlYWN0LWRvbSdcbn0pO1xuXG57XG4gIGlmICghZm91bmREZXZUb29scyAmJiBjYW5Vc2VET00gJiYgd2luZG93LnRvcCA9PT0gd2luZG93LnNlbGYpIHtcbiAgICAvLyBJZiB3ZSdyZSBpbiBDaHJvbWUgb3IgRmlyZWZveCwgcHJvdmlkZSBhIGRvd25sb2FkIGxpbmsgaWYgbm90IGluc3RhbGxlZC5cbiAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IC0xICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRWRnZScpID09PSAtMSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA+IC0xKSB7XG4gICAgICB2YXIgcHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAvLyBEb24ndCB3YXJuIGluIGV4b3RpYyBjYXNlcyBsaWtlIGNocm9tZS1leHRlbnNpb246Ly8uXG4gICAgICBpZiAoL14oaHR0cHM/fGZpbGUpOiQvLnRlc3QocHJvdG9jb2wpKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnJWNEb3dubG9hZCB0aGUgUmVhY3QgRGV2VG9vbHMgJyArICdmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJyArIChwcm90b2NvbCA9PT0gJ2ZpbGU6JyA/ICdcXG5Zb3UgbWlnaHQgbmVlZCB0byB1c2UgYSBsb2NhbCBIVFRQIHNlcnZlciAoaW5zdGVhZCBvZiBmaWxlOi8vKTogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWRldnRvb2xzLWZhcScgOiAnJyksICdmb250LXdlaWdodDpib2xkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG52YXIgUmVhY3RET00kMiA9IE9iamVjdC5mcmVlemUoe1xuXHRkZWZhdWx0OiBSZWFjdERPTVxufSk7XG5cbnZhciBSZWFjdERPTSQzID0gKCBSZWFjdERPTSQyICYmIFJlYWN0RE9NICkgfHwgUmVhY3RET00kMjtcblxuLy8gVE9ETzogZGVjaWRlIG9uIHRoZSB0b3AtbGV2ZWwgZXhwb3J0IGZvcm0uXG4vLyBUaGlzIGlzIGhhY2t5IGJ1dCBtYWtlcyBpdCB3b3JrIHdpdGggYm90aCBSb2xsdXAgYW5kIEplc3QuXG52YXIgcmVhY3REb20gPSBSZWFjdERPTSQzLmRlZmF1bHQgfHwgUmVhY3RET00kMztcblxubW9kdWxlLmV4cG9ydHMgPSByZWFjdERvbTtcbiAgfSkoKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtjLGQsZSxmLGcsaF0saz0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbaysrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHgoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp4KFwiMjI3XCIpO2Z1bmN0aW9uIGNhKGEsYixjLGQsZSxmLGcsaCxsKXt2YXIgaz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxrKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGwpe2RhPSExO2VhPW51bGw7Y2EuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsbCl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGs9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHgoXCIxOThcIiksaz12b2lkIDA7ZmF8fChmYT0hMCxoYT1rKX19dmFyIGxhPW51bGwsbWE9e307XG5mdW5jdGlvbiBuYSgpe2lmKGxhKWZvcih2YXIgYSBpbiBtYSl7dmFyIGI9bWFbYV0sYz1sYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOngoXCI5NlwiLGEpO2lmKCFvYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp4KFwiOTdcIixhKTtvYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3BhLmhhc093blByb3BlcnR5KGgpP3goXCI5OVwiLGgpOnZvaWQgMDtwYVtoXT1mO3ZhciBsPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYobCl7Zm9yKGUgaW4gbClsLmhhc093blByb3BlcnR5KGUpJiZxYShsW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp4KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcWEoYSxiLGMpe3JhW2FdP3goXCIxMDBcIixhKTp2b2lkIDA7cmFbYV09YjtzYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBvYT1bXSxwYT17fSxyYT17fSxzYT17fSx0YT1udWxsLHVhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe251bGw9PWI/eChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB5YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgemE9bnVsbDtmdW5jdGlvbiBBYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspd2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmd2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fVxudmFyIEJhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2xhP3goXCIxMDFcIik6dm9pZCAwO2xhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO25hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTttYS5oYXNPd25Qcm9wZXJ0eShjKSYmbWFbY109PT1kfHwobWFbY10/eChcIjEwMlwiLGMpOnZvaWQgMCxtYVtjXT1kLGI9ITApfWImJm5hKCl9fTtcbmZ1bmN0aW9uIENhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIERhKGEpe251bGwhPT1hJiYoemE9eGEoemEsYSkpO2E9emE7emE9bnVsbDtpZihhJiYoeWEoYSxBYSksemE/eChcIjk1XCIpOnZvaWQgMCxmYSkpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fXZhciBFYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0VhLEdhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRWE7ZnVuY3Rpb24gSGEoYSl7aWYoYVtGYV0pcmV0dXJuIGFbRmFdO2Zvcig7IWFbRmFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRmFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSWEoYSl7YT1hW0ZhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gSmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3goXCIzM1wiKX1mdW5jdGlvbiBLYShhKXtyZXR1cm4gYVtHYV18fG51bGx9ZnVuY3Rpb24gTGEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBNYShhLGIsYyl7aWYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gTmEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1MYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspTWEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylNYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBPYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFBhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmT2EoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gUWEoYSl7eWEoYSxOYSl9dmFyIFJhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gU2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGE9e2FuaW1hdGlvbmVuZDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWE9e30sVmE9e307XG5SYSYmKFZhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2EoYSl7aWYoVWFbYV0pcmV0dXJuIFVhW2FdO2lmKCFUYVthXSlyZXR1cm4gYTt2YXIgYj1UYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYSlyZXR1cm4gVWFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYT1XYShcImFuaW1hdGlvbmVuZFwiKSxZYT1XYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYT1XYShcImFuaW1hdGlvbnN0YXJ0XCIpLCRhPVdhKFwidHJhbnNpdGlvbmVuZFwiKSxhYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmI9bnVsbCxjYj1udWxsLGRiPW51bGw7XG5mdW5jdGlvbiBlYigpe2lmKGRiKXJldHVybiBkYjt2YXIgYSxiPWNiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGRiPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gZmIoKXtyZXR1cm4hMH1mdW5jdGlvbiBnYigpe3JldHVybiExfVxuZnVuY3Rpb24geShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/ZmI6Z2I7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1nYjtyZXR1cm4gdGhpc31cbm4oeS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1mYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1mYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1mYn0saXNQZXJzaXN0ZW50OmdiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWdiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7eS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG55LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2hiKGMpO3JldHVybiBjfTtoYih5KTtmdW5jdGlvbiBpYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBqYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6eChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBoYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1pYjthLnJlbGVhc2U9amJ9dmFyIGtiPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxsYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbWI9WzksMTMsMjcsMzJdLG5iPVJhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxvYj1udWxsO1JhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihvYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHBiPVJhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhb2IscWI9UmEmJighbmJ8fG9iJiY4PG9iJiYxMT49b2IpLHJiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHNiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHRiPSExO1xuZnVuY3Rpb24gdWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1tYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHZiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHdiPSExO2Z1bmN0aW9uIHhiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB2YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7dGI9ITA7cmV0dXJuIHJiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXJiJiZ0Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB5YihhLGIpe2lmKHdiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFuYiYmdWIoYSxiKT8oYT1lYigpLGRiPWNiPWJiPW51bGwsd2I9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHFiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB6Yj17ZXZlbnRUeXBlczpzYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYobmIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT1zYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT1zYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9c2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHdiP3ViKGEsYykmJihlPXNiLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9c2IuY29tcG9zaXRpb25TdGFydCk7ZT8ocWImJlwia29cIiE9PWMubG9jYWxlJiYod2J8fGUhPT1zYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1zYi5jb21wb3NpdGlvbkVuZCYmd2ImJihmPWViKCkpOihiYj1kLGNiPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LHdiPVxuITApKSxlPWtiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXZiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxRYShlKSxmPWUpOmY9bnVsbDsoYT1wYj94YihhLGMpOnliKGEsYykpPyhiPWxiLmdldFBvb2xlZChzYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsUWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sQWI9bnVsbCxCYj1udWxsLENiPW51bGw7ZnVuY3Rpb24gRGIoYSl7aWYoYT11YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIEFiP3goXCIyODBcIik6dm9pZCAwO3ZhciBiPXRhKGEuc3RhdGVOb2RlKTtBYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEViKGEpe0JiP0NiP0NiLnB1c2goYSk6Q2I9W2FdOkJiPWF9ZnVuY3Rpb24gRmIoKXtpZihCYil7dmFyIGE9QmIsYj1DYjtDYj1CYj1udWxsO0RiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylEYihiW2FdKX19XG5mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj0hMTtmdW5jdGlvbiBLYihhLGIpe2lmKEpiKXJldHVybiBhKGIpO0piPSEwO3RyeXtyZXR1cm4gR2IoYSxiKX1maW5hbGx5e2lmKEpiPSExLG51bGwhPT1CYnx8bnVsbCE9PUNiKUliKCksRmIoKX19dmFyIExiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIE1iKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhTGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gTmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIE9iKGEpe2lmKCFSYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBQYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gUWIoYSl7dmFyIGI9UGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFJiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1RYihhKSl9ZnVuY3Rpb24gU2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVBiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9dmFyIFRiPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1RiLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1xudmFyIFViPS9eKC4qKVtcXFxcXFwvXS8sej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFZiPXo/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsV2I9ej9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LFhiPXo/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LFliPXo/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LFpiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LCRiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGFjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsYmM9ej9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGNjPXo/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGRjPXo/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGVjPXo/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxmYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGdjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBoYyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9Z2MmJmFbZ2NdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBpYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGJjOnJldHVyblwiQ29uY3VycmVudE1vZGVcIjtjYXNlIFhiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIFdiOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBaYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBZYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGRjOnJldHVyblwiU3VzcGVuc2VcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgYWM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSAkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGNjOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXG5cIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBlYzpyZXR1cm4gaWMoYS50eXBlKTtjYXNlIGZjOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gaWMoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gamMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPWljKGEudHlwZSk7Yz1udWxsO2QmJihjPWljKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoVWIsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBrYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxtYz17fSxuYz17fTtcbmZ1bmN0aW9uIG9jKGEpe2lmKGxjLmNhbGwobmMsYSkpcmV0dXJuITA7aWYobGMuY2FsbChtYyxhKSlyZXR1cm4hMTtpZihrYy50ZXN0KGEpKXJldHVybiBuY1thXT0hMDttY1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwwLCExLGEsbnVsbCl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQyhiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEsbnVsbCl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMCxhLG51bGwpfSk7XG5bXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw0LCExLGEsbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDYsITEsYSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIHJjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2MoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsXG5zYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbmZ1bmN0aW9uIHRjKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHFjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gdWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIHdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXVjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24geGMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24geWMoYSxiKXt4YyhhLGIpO3ZhciBjPXVjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP3pjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJnpjKGEsYi50eXBlLHVjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gQWMoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gemMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBCYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBDYyhhLGIsYyl7YT15LmdldFBvb2xlZChCYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0ViKGMpO1FhKGEpO3JldHVybiBhfXZhciBEYz1udWxsLEVjPW51bGw7ZnVuY3Rpb24gRmMoYSl7RGEoYSl9XG5mdW5jdGlvbiBHYyhhKXt2YXIgYj1KYShhKTtpZihTYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBIYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBJYz0hMTtSYSYmKEljPU9iKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIEpjKCl7RGMmJihEYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYyksRWM9RGM9bnVsbCl9ZnVuY3Rpb24gS2MoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkdjKEVjKSYmKGE9Q2MoRWMsYSxOYihhKSksS2IoRmMsYSkpfWZ1bmN0aW9uIExjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhKYygpLERjPWIsRWM9YyxEYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYykpOlwiYmx1clwiPT09YSYmSmMoKX1mdW5jdGlvbiBNYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBHYyhFYyl9XG5mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIEdjKGIpfWZ1bmN0aW9uIE9jKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIEdjKGIpfVxudmFyIFBjPXtldmVudFR5cGVzOkJjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6SWMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0phKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxoPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09aHx8XCJpbnB1dFwiPT09aCYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1IYzpNYihlKT9JYz9mPU9jOihmPU1jLGc9TGMpOihoPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1oLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPU5jKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBDYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJnpjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFFjPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxSYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBTYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVJjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gVGMoKXtyZXR1cm4gU2N9XG52YXIgVWM9MCxWYz0wLFdjPSExLFhjPSExLFljPVFjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1VYztVYz1hLnNjcmVlblg7cmV0dXJuIFdjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooV2M9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1WYztWYz1hLnNjcmVlblk7cmV0dXJuIFhjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooWGM9ITAsMCl9fSksWmM9WWMuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLCRjPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxhZD17ZXZlbnRUeXBlczokYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9IYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGw9dm9pZCAwLGs9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9WWMsaD0kYy5tb3VzZUxlYXZlLGw9JGMubW91c2VFbnRlcixrPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9WmMsaD0kYy5wb2ludGVyTGVhdmUsbD0kYy5wb2ludGVyRW50ZXIsaz1cInBvaW50ZXJcIjt2YXIgbT1udWxsPT1mP2U6SmEoZik7ZT1udWxsPT1iP2U6SmEoYik7YT1nLmdldFBvb2xlZChoLGYsYyxkKTthLnR5cGU9aytcImxlYXZlXCI7YS50YXJnZXQ9bTthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGwsYixjLGQpO2MudHlwZT1rK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1tO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7az0wO2ZvcihnPWI7ZztnPUxhKGcpKWsrKztnPTA7Zm9yKGw9ZTtsO2w9TGEobCkpZysrO2Zvcig7MDxrLWc7KWI9TGEoYiksay0tO2Zvcig7MDxnLWs7KWU9TGEoZSksZy0tO2Zvcig7ay0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TGEoYik7ZT1MYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7az1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztiLnB1c2goZik7Zj1MYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2s9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2YucHVzaChkKTtkPUxhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspT2EoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspT2EoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fTtmdW5jdGlvbiBiZChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGNkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBkZChhLGIpe2lmKGJkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighY2QuY2FsbChiLGNbZF0pfHwhYmQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBlZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBmZChhKXsyIT09ZWQoYSk/eChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1lZChhKSwzPT09Yj94KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBmZChlKSxhO2lmKGc9PT1kKXJldHVybiBmZChlKSxiO2c9Zy5zaWJsaW5nfXgoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDp4KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/eChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP3goXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGQoYSl7YT1nZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBpZD15LmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksamQ9eS5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxrZD1RYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIGxkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIG1kPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxuZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sb2Q9UWMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPW1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPWxkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9uZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/bGQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/bGQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxwZD1ZYy5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSkscWQ9UWMuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGN9KSxyZD15LmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD1ZYy5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHRkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW1hhLFwiYW5pbWF0aW9uRW5kXCJdLFtZYSxcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbWmEsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFskYSxcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLHVkPXt9LHZkPXt9O2Z1bmN0aW9uIHdkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07dWRbYV09Yjt2ZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sXG5bXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3dkKGEsITApfSk7dGQuZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCExKX0pO1xudmFyIHhkPXtldmVudFR5cGVzOnVkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPXZkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12ZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWxkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1vZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9a2Q7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1ZYzticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxucGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT1xZDticmVhaztjYXNlIFhhOmNhc2UgWWE6Y2FzZSBaYTphPWlkO2JyZWFrO2Nhc2UgJGE6YT1yZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1RYzticmVhaztjYXNlIFwid2hlZWxcIjphPXNkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9amQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1aYzticmVhaztkZWZhdWx0OmE9eX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1FhKGIpO3JldHVybiBifX0seWQ9eGQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuemQ9W107ZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9SGEoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9TmIoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPW51bGwsaD0wO2g8b2EubGVuZ3RoO2grKyl7dmFyIGw9b2FbaF07bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGc9eGEoZyxsKSl9RGEoZyl9fXZhciBCZD0hMDtcbmZ1bmN0aW9uIEUoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1mdW5jdGlvbiBFZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPSh5ZChhKT9DZDpEZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIENkKGEsYil7SGIoRGQsYSxiKX1cbmZ1bmN0aW9uIERkKGEsYil7aWYoQmQpe3ZhciBjPU5iKGIpO2M9SGEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1lZChjKXx8KGM9bnVsbCk7aWYoemQubGVuZ3RoKXt2YXIgZD16ZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtLYihBZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPnpkLmxlbmd0aCYmemQucHVzaChhKX19fXZhciBGZD17fSxHZD0wLEhkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcbmZ1bmN0aW9uIElkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLEhkKXx8KGFbSGRdPUdkKyssRmRbYVtIZF1dPXt9KTtyZXR1cm4gRmRbYVtIZF1dfWZ1bmN0aW9uIEpkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBLZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZChhLGIpe3ZhciBjPUtkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtkKGMpfX1mdW5jdGlvbiBNZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01kKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5kKCl7Zm9yKHZhciBhPXdpbmRvdyxiPUpkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPUpkKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9kKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBQZCgpe3ZhciBhPU5kKCk7aWYoT2QoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2I9KGI9YS5vd25lckRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBjPWIuZ2V0U2VsZWN0aW9uJiZiLmdldFNlbGVjdGlvbigpO2lmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQSl7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxnPS0xLGg9LTEsbD0wLGs9MCxtPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHQ7Oyl7bSE9PWJ8fDAhPT1kJiYzIT09bS5ub2RlVHlwZXx8KGc9ZitkKTttIT09ZXx8MCE9PWMmJjMhPT1tLm5vZGVUeXBlfHwoaD1mK2MpOzM9PT1tLm5vZGVUeXBlJiYoZis9bS5ub2RlVmFsdWUubGVuZ3RoKTtcbmlmKG51bGw9PT0odD1tLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bTttPXR9Zm9yKDs7KXtpZihtPT09YSlicmVhayBiO3A9PT1iJiYrK2w9PT1kJiYoZz1mKTtwPT09ZSYmKytrPT09YyYmKGg9Zik7aWYobnVsbCE9PSh0PW0ubmV4dFNpYmxpbmcpKWJyZWFrO209cDtwPW0ucGFyZW50Tm9kZX1tPXR9Yj0tMT09PWd8fC0xPT09aD9udWxsOntzdGFydDpnLGVuZDpofX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtyZXR1cm57Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifX1cbmZ1bmN0aW9uIFFkKGEpe3ZhciBiPU5kKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZNZChjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmT2QoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9TGQoYyxmKTt2YXIgZz1MZChjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFJkPVJhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsU2Q9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFRkPW51bGwsVWQ9bnVsbCxWZD1udWxsLFdkPSExO1xuZnVuY3Rpb24gWGQoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihXZHx8bnVsbD09VGR8fFRkIT09SmQoYykpcmV0dXJuIG51bGw7Yz1UZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZPZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBWZCYmZGQoVmQsYyk/bnVsbDooVmQ9YyxhPXkuZ2V0UG9vbGVkKFNkLnNlbGVjdCxVZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVRkLFFhKGEpLGEpfVxudmFyIFlkPXtldmVudFR5cGVzOlNkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPUlkKGUpO2Y9c2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9KYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKE1iKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVRkPWUsVWQ9YixWZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6VmQ9VWQ9VGQ9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6V2Q9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBXZD0hMSxYZChjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihSZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIFhkKGMsZCl9cmV0dXJuIG51bGx9fTtCYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3RhPUthO3VhPUlhO3ZhPUphO0JhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46eGQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmFkLENoYW5nZUV2ZW50UGx1Z2luOlBjLFNlbGVjdEV2ZW50UGx1Z2luOllkLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46emJ9KTtmdW5jdGlvbiBaZChhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRkKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9WmQoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIGFlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit1YyhjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gYmUoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCI5MVwiKTp2b2lkIDA7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gY2UoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz94KFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6eChcIjkzXCIpLGI9YlswXSksYz1iKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6dWMoYyl9fVxuZnVuY3Rpb24gZGUoYSxiKXt2YXIgYz11YyhiLnZhbHVlKSxkPXVjKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gZWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIGZlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGdlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gaGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2dlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGllPXZvaWQgMCxqZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1mZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtpZT1pZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1pZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBrZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIGxlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LG1lPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhsZSkuZm9yRWFjaChmdW5jdGlvbihhKXttZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2xlW2JdPWxlW2FdfSl9KTtmdW5jdGlvbiBuZShhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8bGUuaGFzT3duUHJvcGVydHkoYSkmJmxlW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG9lKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPW5lKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHBlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBxZShhLGIpe2ImJihwZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/eChcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj94KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOngoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3goXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiByZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiBzZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1JZChhKTtiPXNhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpFZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6RWQoXCJmb2N1c1wiLGEpO0VkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpPYihlKSYmRWQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWIuaW5kZXhPZihlKSYmRShlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB0ZSgpe312YXIgdWU9bnVsbCx2ZT1udWxsO1xuZnVuY3Rpb24gd2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIHhlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciB5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQWU9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEJlPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5mdW5jdGlvbiBDZShhLGIsYyxkLGUpe2FbR2FdPWU7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJnhjKGEsZSk7cmUoYyxkKTtkPXJlKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/b2UoYSxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP2plKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9rZShhLGgpOnRjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjp5YyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/YWUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP2FlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLFxuITApOmFlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1mdW5jdGlvbiBEZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIEVlKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBGZT1bXSxHZT0tMTtmdW5jdGlvbiBGKGEpezA+R2V8fChhLmN1cnJlbnQ9RmVbR2VdLEZlW0dlXT1udWxsLEdlLS0pfWZ1bmN0aW9uIEcoYSxiKXtHZSsrO0ZlW0dlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEhlPXt9LEg9e2N1cnJlbnQ6SGV9LEk9e2N1cnJlbnQ6ITF9LEllPUhlO1xuZnVuY3Rpb24gSmUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBIZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBKKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gS2UoYSl7RihJLGEpO0YoSCxhKX1mdW5jdGlvbiBMZShhKXtGKEksYSk7RihILGEpfVxuZnVuY3Rpb24gTWUoYSxiLGMpe0guY3VycmVudCE9PUhlP3goXCIxNjhcIik6dm9pZCAwO0coSCxiLGEpO0coSSxjLGEpfWZ1bmN0aW9uIE5lKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOngoXCIxMDhcIixpYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG4oe30sYyxkKX1mdW5jdGlvbiBPZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEhlO0llPUguY3VycmVudDtHKEgsYixhKTtHKEksSS5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gUGUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOngoXCIxNjlcIik7Yz8oYj1OZShhLGIsSWUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixGKEksYSksRihILGEpLEcoSCxiLGEpKTpGKEksYSk7RyhJLGMsYSl9dmFyIFFlPW51bGwsUmU9bnVsbDtmdW5jdGlvbiBTZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gVGUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7UWU9U2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1JlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBVZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuY29udGV4dERlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBLKGEsYixjLGQpe3JldHVybiBuZXcgVWUoYSxiLGMsZCl9XG5mdW5jdGlvbiBWZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFdlKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBWZShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Y2MpcmV0dXJuIDExO2lmKGE9PT1lYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBYZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUsoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2MuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXM7Yy5zaWJsaW5nPWEuc2libGluZztcbmMuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFllKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlWZShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBYYjpyZXR1cm4gWmUoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBiYzpyZXR1cm4gJGUoYyxlfDMsZixiKTtjYXNlIFliOnJldHVybiAkZShjLGV8MixmLGIpO2Nhc2UgWmI6cmV0dXJuIGE9SygxMixjLGIsZXw0KSxhLmVsZW1lbnRUeXBlPVpiLGEudHlwZT1aYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGRjOnJldHVybiBhPUsoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9ZGMsYS50eXBlPWRjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSAkYjpnPTEwO2JyZWFrIGE7Y2FzZSBhYzpnPTk7YnJlYWsgYTtjYXNlIGNjOmc9MTE7YnJlYWsgYTtjYXNlIGVjOmc9XG4xNDticmVhayBhO2Nhc2UgZmM6Zz0xNjtkPW51bGw7YnJlYWsgYX14KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpfWI9SyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFplKGEsYixjLGQpe2E9Syg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gJGUoYSxiLGMsZCl7YT1LKDgsYSxkLGIpO2I9MD09PShiJjEpP1liOmJjO2EuZWxlbWVudFR5cGU9YjthLnR5cGU9YjthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gYWYoYSxiLGMpe2E9Syg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBiZihhLGIsYyl7Yj1LKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifWZ1bmN0aW9uIGNmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPGI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZT5iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZWYoYSxiKXthLmRpZEVycm9yPSExO2lmKDA9PT1iKWEuZWFybGllc3RQZW5kaW5nVGltZT0wLGEubGF0ZXN0UGVuZGluZ1RpbWU9MCxhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wO2Vsc2V7YjxhLmxhdGVzdFBpbmdlZFRpbWUmJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5sYXRlc3RQZW5kaW5nVGltZTswIT09YyYmKGM+Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5iJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2NmKGEsYik6YjxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsY2YoYSxiKSk6XG5iPmMmJmNmKGEsYil9ZGYoMCxhKX1mdW5jdGlvbiBmZihhLGIpe2EuZGlkRXJyb3I9ITE7YS5sYXRlc3RQaW5nZWRUaW1lPj1iJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZSxkPWEubGF0ZXN0UGVuZGluZ1RpbWU7Yz09PWI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWQ9PT1iP2EubGF0ZXN0UGVuZGluZ1RpbWU9MDpkOmQ9PT1iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1jKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2Q9YS5sYXRlc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWEubGF0ZXN0U3VzcGVuZGVkVGltZT1iOmM8Yj9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1iOmQ+YiYmKGEubGF0ZXN0U3VzcGVuZGVkVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZ2YoYSxiKXt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7YT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtjPmImJihiPWMpO2E+YiYmKGI9YSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZGYoYSxiKXt2YXIgYz1iLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWIubGF0ZXN0U3VzcGVuZGVkVGltZSxlPWIuZWFybGllc3RQZW5kaW5nVGltZSxmPWIubGF0ZXN0UGluZ2VkVGltZTtlPTAhPT1lP2U6ZjswPT09ZSYmKDA9PT1hfHxkPGEpJiYoZT1kKTthPWU7MCE9PWEmJmM+YSYmKGE9Yyk7Yi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1lO2IuZXhwaXJhdGlvblRpbWU9YX1mdW5jdGlvbiBMKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gaGYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OmEuX3N0YXR1cz0wO2I9YS5fY3RvcjtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pO3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVzdWx0O2Nhc2UgMjp0aHJvdyBhLl9yZXN1bHQ7fWEuX3Jlc3VsdD1iO3Rocm93IGI7fX12YXIgamY9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBrZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciB0Zj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWVkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bGYoKTtkPW1mKGQsYSk7dmFyIGU9bmYoZCk7ZS50YWc9cmY7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO29mKCk7cGYoYSxlKTtxZihhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1sZigpO2M9bWYoYyxhKTt2YXIgZD1uZihjKTtkLnRhZz1cbnNmO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtvZigpO3BmKGEsZCk7cWYoYSxjKX19O2Z1bmN0aW9uIHVmKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWRkKGMsZCl8fCFkZChlLGYpOiEwfVxuZnVuY3Rpb24gdmYoYSxiLGMpe3ZhciBkPSExLGU9SGU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TShmKTooZT1KKGIpP0llOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0plKGEsZSk6SGUpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj10ZjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiB3ZihhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmdGYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiB4ZihhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9TShmKTooZj1KKGIpP0llOkguY3VycmVudCxlLmNvbnRleHQ9SmUoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoeWYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgemY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIEFmKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz94KFwiMzA5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp4KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1qZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT94KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6eChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gQmYoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJngoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIENmKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9WGUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1hZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9QWYoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVllKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUFmKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9YmYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WmUoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWFmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjPVllKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPUFmKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBXYjpyZXR1cm4gYj1iZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoemYoYil8fFxuaGMoYikpcmV0dXJuIGI9WmUoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7QmYoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB0KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09WGI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmwoYSxiLGMsZCk6bnVsbDtjYXNlIFdiOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsfWlmKHpmKGMpfHxoYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7QmYoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBBKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PVhiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6bChiLGEsZCxlKTtjYXNlIFdiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpfWlmKHpmKGQpfHxoYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7QmYoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxxPWcsdT1nPTAsQj1udWxsO251bGwhPT1xJiZ1PGgubGVuZ3RoO3UrKyl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdz10KGUscSxoW3VdLGspO2lmKG51bGw9PT13KXtudWxsPT09cSYmKHE9Qik7YnJlYWt9YSYmXG5xJiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodyxnLHUpO251bGw9PT1tP2w9dzptLnNpYmxpbmc9dzttPXc7cT1CfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYocT1wKGUsaFt1XSxrKSlnPWYocSxnLHUpLG51bGw9PT1tP2w9cTptLnNpYmxpbmc9cSxtPXE7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpO3U8aC5sZW5ndGg7dSsrKWlmKEI9QShxLGUsdSxoW3VdLGspKWEmJm51bGwhPT1CLmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PUIua2V5P3U6Qi5rZXkpLGc9ZihCLGcsdSksbnVsbD09PW0/bD1COm0uc2libGluZz1CLG09QjthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIFIoZSxnLGgsayl7dmFyIGw9aGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/eChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD94KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwscT1nLHU9Zz0wLEI9bnVsbCx3PWgubmV4dCgpO251bGwhPT1xJiYhdy5kb25lO3UrKyx3PWgubmV4dCgpKXtxLmluZGV4PnU/KEI9cSxxPW51bGwpOkI9cS5zaWJsaW5nO3ZhciB2PXQoZSxxLHcudmFsdWUsayk7aWYobnVsbD09PXYpe3F8fChxPUIpO2JyZWFrfWEmJnEmJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLHEpO2c9Zih2LGcsdSk7bnVsbD09PW0/bD12Om0uc2libGluZz12O209djtxPUJ9aWYody5kb25lKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9cChlLHcudmFsdWUsayksbnVsbCE9PXcmJihnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO3JldHVybiBsfWZvcihxPWQoZSxxKTshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9QShxLGUsdSx3LnZhbHVlLGspLG51bGwhPT13JiYoYSYmbnVsbCE9PXcuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09dy5rZXk/dTpcbncua2V5KSxnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PVhiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFZiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09WGI6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09WGI/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPUFmKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09WGI/KGQ9WmUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVllKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUFmKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBXYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWJmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1hZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZih6ZihmKSlyZXR1cm4gdihhLGQsZixoKTtpZihoYyhmKSlyZXR1cm4gUihhLGQsZixoKTtsJiZCZihhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHgoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBEZj1DZighMCksRWY9Q2YoITEpLEZmPXt9LE49e2N1cnJlbnQ6RmZ9LEdmPXtjdXJyZW50OkZmfSxIZj17Y3VycmVudDpGZn07ZnVuY3Rpb24gSWYoYSl7YT09PUZmP3goXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gSmYoYSxiKXtHKEhmLGIsYSk7RyhHZixhLGEpO0coTixGZixhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpoZShudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9aGUoYixjKX1GKE4sYSk7RyhOLGIsYSl9ZnVuY3Rpb24gS2YoYSl7RihOLGEpO0YoR2YsYSk7RihIZixhKX1mdW5jdGlvbiBMZihhKXtJZihIZi5jdXJyZW50KTt2YXIgYj1JZihOLmN1cnJlbnQpO3ZhciBjPWhlKGIsYS50eXBlKTtiIT09YyYmKEcoR2YsYSxhKSxHKE4sYyxhKSl9ZnVuY3Rpb24gTWYoYSl7R2YuY3VycmVudD09PWEmJihGKE4sYSksRihHZixhKSl9XG52YXIgTmY9MCxPZj0yLFBmPTQsUWY9OCxSZj0xNixTZj0zMixUZj02NCxVZj0xMjgsVmY9VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixXZj0wLFhmPW51bGwsTz1udWxsLFA9bnVsbCxZZj1udWxsLFE9bnVsbCxaZj1udWxsLCRmPTAsYWc9bnVsbCxiZz0wLGNnPSExLGRnPW51bGwsZWc9MDtmdW5jdGlvbiBmZygpe3goXCIzMjFcIil9ZnVuY3Rpb24gZ2coYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighYmQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIGhnKGEsYixjLGQsZSxmKXtXZj1mO1hmPWI7UD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtWZi5jdXJyZW50PW51bGw9PT1QP2lnOmpnO2I9YyhkLGUpO2lmKGNnKXtkbyBjZz0hMSxlZys9MSxQPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLFpmPVlmLGFnPVE9Tz1udWxsLFZmLmN1cnJlbnQ9amcsYj1jKGQsZSk7d2hpbGUoY2cpO2RnPW51bGw7ZWc9MH1WZi5jdXJyZW50PWtnO2E9WGY7YS5tZW1vaXplZFN0YXRlPVlmO2EuZXhwaXJhdGlvblRpbWU9JGY7YS51cGRhdGVRdWV1ZT1hZzthLmVmZmVjdFRhZ3w9Ymc7YT1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtXZj0wO1pmPVE9WWY9UD1PPVhmPW51bGw7JGY9MDthZz1udWxsO2JnPTA7YT94KFwiMzAwXCIpOnZvaWQgMDtyZXR1cm4gYn1mdW5jdGlvbiBsZygpe1ZmLmN1cnJlbnQ9a2c7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2NnPSExO2RnPW51bGw7ZWc9MH1cbmZ1bmN0aW9uIG1nKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxxdWV1ZTpudWxsLGJhc2VVcGRhdGU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1RP1lmPVE9YTpRPVEubmV4dD1hO3JldHVybiBRfWZ1bmN0aW9uIG5nKCl7aWYobnVsbCE9PVpmKVE9WmYsWmY9US5uZXh0LE89UCxQPW51bGwhPT1PP08ubmV4dDpudWxsO2Vsc2V7bnVsbD09PVA/eChcIjMxMFwiKTp2b2lkIDA7Tz1QO3ZhciBhPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUscXVldWU6Ty5xdWV1ZSxiYXNlVXBkYXRlOk8uYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1E9bnVsbD09PVE/WWY9YTpRLm5leHQ9YTtQPU8ubmV4dH1yZXR1cm4gUX1mdW5jdGlvbiBvZyhhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHBnKGEpe3ZhciBiPW5nKCksYz1iLnF1ZXVlO251bGw9PT1jP3goXCIzMTFcIik6dm9pZCAwO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8ZWcpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PWRnKXt2YXIgZT1kZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7ZGcuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2JkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHFnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGc9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWc/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9Zy5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBoPWU9bnVsbCxsPWQsaz0hMTtkb3t2YXIgbT1sLmV4cGlyYXRpb25UaW1lO208V2Y/KGt8fChrPSEwLGg9ZyxlPWYpLG0+JGYmJigkZj1tKSk6Zj1sLmVhZ2VyUmVkdWNlcj09PWE/bC5lYWdlclN0YXRlOmEoZixsLmFjdGlvbik7Zz1sO2w9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09ZCk7a3x8KGg9ZyxlPWYpO2JkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHFnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9aDtiLmJhc2VTdGF0ZT1lO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gcmcoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O251bGw9PT1hZz8oYWc9e2xhc3RFZmZlY3Q6bnVsbH0sYWcubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGI9YWcubGFzdEVmZmVjdCxudWxsPT09Yj9hZy5sYXN0RWZmZWN0PWEubmV4dD1hOihjPWIubmV4dCxiLm5leHQ9YSxhLm5leHQ9YyxhZy5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzZyhhLGIsYyxkKXt2YXIgZT1tZygpO2JnfD1hO2UubWVtb2l6ZWRTdGF0ZT1yZyhiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHRnKGEsYixjLGQpe3ZhciBlPW5nKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmZ2coZCxnLmRlcHMpKXtyZyhOZixjLGYsZCk7cmV0dXJufX1iZ3w9YTtlLm1lbW9pemVkU3RhdGU9cmcoYixjLGYsZCl9ZnVuY3Rpb24gdWcoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB2Zygpe31cbmZ1bmN0aW9uIHdnKGEsYixjKXsyNT5lZz92b2lkIDA6eChcIjMwMVwiKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09WGZ8fG51bGwhPT1kJiZkPT09WGYpaWYoY2c9ITAsYT17ZXhwaXJhdGlvblRpbWU6V2YsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PWRnJiYoZGc9bmV3IE1hcCksYz1kZy5nZXQoYiksdm9pZCAwPT09YylkZy5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXtvZigpO3ZhciBlPWxmKCk7ZT1tZihlLGEpO3ZhciBmPXtleHBpcmF0aW9uVGltZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5sYXN0O2lmKG51bGw9PT1nKWYubmV4dD1mO2Vsc2V7dmFyIGg9Zy5uZXh0O251bGwhPT1oJiYoZi5uZXh0PWgpO2cubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PVxuZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWQpKXRyeXt2YXIgbD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZChsLGMpO2YuZWFnZXJSZWR1Y2VyPWQ7Zi5lYWdlclN0YXRlPWs7aWYoYmQoayxsKSlyZXR1cm59Y2F0Y2gobSl7fWZpbmFsbHl7fXFmKGEsZSl9fVxudmFyIGtnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZnLHVzZUNvbnRleHQ6ZmcsdXNlRWZmZWN0OmZnLHVzZUltcGVyYXRpdmVIYW5kbGU6ZmcsdXNlTGF5b3V0RWZmZWN0OmZnLHVzZU1lbW86ZmcsdXNlUmVkdWNlcjpmZyx1c2VSZWY6ZmcsdXNlU3RhdGU6ZmcsdXNlRGVidWdWYWx1ZTpmZ30saWc9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXttZygpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHNnKDUxNixVZnxUZixhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gc2coNCxQZnxTZix1Zy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHNnKDQsUGZ8U2YsYSxiKX0sXG51c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9bWcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9bWcoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD13Zy5iaW5kKG51bGwsWGYsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPW1nKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPW1nKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxcbmxhc3RSZW5kZXJlZFJlZHVjZXI6b2csbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXdnLmJpbmQobnVsbCxYZixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfSx1c2VEZWJ1Z1ZhbHVlOnZnfSxqZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPW5nKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZnZyhiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0Zyg1MTYsVWZ8VGYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRnKDQsUGZ8U2YsdWcuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLFxuYil7cmV0dXJuIHRnKDQsUGZ8U2YsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPW5nKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZnZyhiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpwZyx1c2VSZWY6ZnVuY3Rpb24oKXtyZXR1cm4gbmcoKS5tZW1vaXplZFN0YXRlfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gcGcob2csYSl9LHVzZURlYnVnVmFsdWU6dmd9LHhnPW51bGwseWc9bnVsbCx6Zz0hMTtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9Syg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIEJnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBDZyhhKXtpZih6Zyl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQmcoYSxiKSl7Yj1EZShjKTtpZighYnx8IUJnKGEsYikpe2EuZWZmZWN0VGFnfD0yO3pnPSExO3hnPWE7cmV0dXJufUFnKHhnLGMpfXhnPWE7eWc9RWUoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix6Zz0hMSx4Zz1hfX1mdW5jdGlvbiBEZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjE4IT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1mdW5jdGlvbiBFZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIXpnKXJldHVybiBEZyhhKSx6Zz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIXhlKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj15ZztiOylBZyhhLGIpLGI9RGUoYik7RGcoYSk7eWc9eGc/RGUoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gRmcoKXt5Zz14Zz1udWxsO3pnPSExfVxudmFyIEdnPVRiLlJlYWN0Q3VycmVudE93bmVyLHFnPSExO2Z1bmN0aW9uIFMoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9FZihiLG51bGwsYyxkKTpEZihiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBIZyhhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7SWcoYixlKTtkPWhnKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXFnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksSmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBLZyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIVZlKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLExnKGEsYixnLGQsZSxmKTthPVllKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6ZGQsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gSmcoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9WGUoZyxkLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIExnKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmRkKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHFnPSExLGU8Zik/SmcoYSxiLGYpOk1nKGEsYixjLGQsZil9ZnVuY3Rpb24gTmcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBNZyhhLGIsYyxkLGUpe3ZhciBmPUooYyk/SWU6SC5jdXJyZW50O2Y9SmUoYixmKTtJZyhiLGUpO2M9aGcoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxKZyhhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIE9nKGEsYixjLGQsZSl7aWYoSihjKSl7dmFyIGY9ITA7T2UoYil9ZWxzZSBmPSExO0lnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSx2ZihiLGMsZCxlKSx4ZihiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgbD1nLmNvbnRleHQsaz1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1NKGspOihrPUooYyk/SWU6SC5jdXJyZW50LGs9SmUoYixrKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxsIT09aykmJndmKGIsZyxkLGspO1BnPSExO3ZhciB0PWIubWVtb2l6ZWRTdGF0ZTtsPWcuc3RhdGU9dDt2YXIgQT1iLnVwZGF0ZVF1ZXVlO251bGwhPT1BJiYoeWYoYixBLGQsZyxlKSxsPWIubWVtb2l6ZWRTdGF0ZSk7aCE9PWR8fHQhPT1sfHxJLmN1cnJlbnR8fFBnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtmKGIsYyxtLGQpLGw9Yi5tZW1vaXplZFN0YXRlKSwoaD1QZ3x8dWYoYixjLGgsZCx0LGwsaykpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9bCksZy5wcm9wcz1kLGcuc3RhdGU9bCxnLmNvbnRleHQ9ayxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TChiLnR5cGUsaCksbD1nLmNvbnRleHQsaz1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1NKGspOihrPUooYyk/SWU6SC5jdXJyZW50LGs9SmUoYixrKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmd2YoYixnLGQsayksUGc9ITEsbD1iLm1lbW9pemVkU3RhdGUsdD1nLnN0YXRlPWwsQT1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1BJiYoeWYoYixBLGQsZyxlKSx0PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGwhPT10fHxJLmN1cnJlbnR8fFBnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtmKGIsYyxtLGQpLHQ9Yi5tZW1vaXplZFN0YXRlKSwobT1QZ3x8dWYoYixjLGgsZCxsLHQsaykpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsdCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHQsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPVxudCksZy5wcm9wcz1kLGcuc3RhdGU9dCxnLmNvbnRleHQ9ayxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gUWcoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gUWcoYSxiLGMsZCxlLGYpe05nKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZQZShiLGMsITEpLEpnKGEsYixmKTtkPWIuc3RhdGVOb2RlO0dnLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPURmKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9RGYoYixudWxsLGgsZikpOlMoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmUGUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P01lKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJk1lKGEsYi5jb250ZXh0LCExKTtKZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBTZyhhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkU3RhdGU7aWYoMD09PShiLmVmZmVjdFRhZyY2NCkpe2Y9bnVsbDt2YXIgZz0hMX1lbHNlIGY9e3RpbWVkT3V0QXQ6bnVsbCE9PWY/Zi50aW1lZE91dEF0OjB9LGc9ITAsYi5lZmZlY3RUYWcmPS02NTtpZihudWxsPT09YSlpZihnKXt2YXIgaD1lLmZhbGxiYWNrO2E9WmUobnVsbCxkLDAsbnVsbCk7MD09PShiLm1vZGUmMSkmJihhLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKTtkPVplKGgsZCxjLG51bGwpO2Euc2libGluZz1kO2M9YTtjLnJldHVybj1kLnJldHVybj1ifWVsc2UgYz1kPUVmKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2UgbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZT8oZD1hLmNoaWxkLGg9ZC5zaWJsaW5nLGc/KGM9ZS5mYWxsYmFjayxlPVhlKGQsZC5wZW5kaW5nUHJvcHMsMCksMD09PShiLm1vZGUmMSkmJihnPW51bGwhPT1cbmIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWQuY2hpbGQmJihlLmNoaWxkPWcpKSxkPWUuc2libGluZz1YZShoLGMsaC5leHBpcmF0aW9uVGltZSksYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1EZihiLGQuY2hpbGQsZS5jaGlsZHJlbixjKSk6KGg9YS5jaGlsZCxnPyhnPWUuZmFsbGJhY2ssZT1aZShudWxsLGQsMCxudWxsKSxlLmNoaWxkPWgsMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWUuc2libGluZz1aZShnLGQsYyxudWxsKSxkLmVmZmVjdFRhZ3w9MixjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6ZD1jPURmKGIsaCxlLmNoaWxkcmVuLGMpKSxiLnN0YXRlTm9kZT1hLnN0YXRlTm9kZTtiLm1lbW9pemVkU3RhdGU9ZjtiLmNoaWxkPWM7cmV0dXJuIGR9XG5mdW5jdGlvbiBKZyhhLGIsYyl7bnVsbCE9PWEmJihiLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/eChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVhlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVhlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIFRnKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxJLmN1cnJlbnQpcWc9ITA7ZWxzZXtpZihkPGMpe3FnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOlJnKGIpO0ZnKCk7YnJlYWs7Y2FzZSA1OkxmKGIpO2JyZWFrO2Nhc2UgMTpKKGIudHlwZSkmJk9lKGIpO2JyZWFrO2Nhc2UgNDpKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6VWcoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuIFNnKGEsYixjKTtiPUpnKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9fXJldHVybiBKZyhhLGIsYyl9fWVsc2UgcWc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9XG5iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPUplKGIsSC5jdXJyZW50KTtJZyhiLGMpO2U9aGcobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtsZygpO2lmKEooZCkpe3ZhciBmPSEwO09lKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZrZihiLGQsZyxhKTtlLnVwZGF0ZXI9dGY7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9Yjt4ZihiLGQsYSxjKTtiPVFnKG51bGwsYixkLCEwLGYsXG5jKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2Y9Yi5wZW5kaW5nUHJvcHM7YT1oZihlKTtiLnR5cGU9YTtlPWIudGFnPVdlKGEpO2Y9TChhLGYpO2c9dm9pZCAwO3N3aXRjaChlKXtjYXNlIDA6Zz1NZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTpnPU9nKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxMTpnPUhnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxNDpnPUtnKG51bGwsYixhLEwoYS50eXBlLGYpLGQsYyk7YnJlYWs7ZGVmYXVsdDp4KFwiMzA2XCIsYSxcIlwiKX1yZXR1cm4gZztjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxNZyhhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxcbmU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksT2coYSxiLGQsZSxjKTtjYXNlIDM6UmcoYik7ZD1iLnVwZGF0ZVF1ZXVlO251bGw9PT1kP3goXCIyODJcIik6dm9pZCAwO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWYoYixkLGIucGVuZGluZ1Byb3BzLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlGZygpLGI9SmcoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpeWc9RWUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbykseGc9YixlPXpnPSEwO2U/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9RWYoYixudWxsLGQsYykpOihTKGEsYixkLGMpLEZnKCkpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIExmKGIpLG51bGw9PT1hJiZDZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsXG5nPWUuY2hpbGRyZW4seGUoZCxlKT9nPW51bGw6bnVsbCE9PWYmJnhlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLE5nKGEsYiksMSE9PWMmJmIubW9kZSYxJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihTKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZDZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIFNnKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEpmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPURmKGIsbnVsbCxkLGMpOlMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksSGcoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO1VnKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1iZChoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSS5jdXJyZW50KXtiPUpnKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBsPWguY29udGV4dERlcGVuZGVuY2llcztpZihudWxsIT09bCl7Zz1oLmNoaWxkO2Zvcih2YXIgaz1sLmZpcnN0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCYmMCE9PVxuKGsub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihrPW5mKGMpLGsudGFnPXNmLHBmKGgsaykpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7az1oLmFsdGVybmF0ZTtudWxsIT09ayYmay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTtrPWM7Zm9yKHZhciBtPWgucmV0dXJuO251bGwhPT1tOyl7dmFyIHA9bS5hbHRlcm5hdGU7aWYobS5jaGlsZEV4cGlyYXRpb25UaW1lPGspbS5jaGlsZEV4cGlyYXRpb25UaW1lPWssbnVsbCE9PXAmJnAuY2hpbGRFeHBpcmF0aW9uVGltZTxrJiYocC5jaGlsZEV4cGlyYXRpb25UaW1lPWspO2Vsc2UgaWYobnVsbCE9PXAmJnAuY2hpbGRFeHBpcmF0aW9uVGltZTxrKXAuY2hpbGRFeHBpcmF0aW9uVGltZT1rO2Vsc2UgYnJlYWs7bT1tLnJldHVybn1sLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/XG5udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z319UyhhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixJZyhiLGMpLGU9TShlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9TChlLGIucGVuZGluZ1Byb3BzKSxmPUwoZS50eXBlLGYpLEtnKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBMZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1cbmQ/ZTpMKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsSihkKT8oYT0hMCxPZShiKSk6YT0hMSxJZyhiLGMpLHZmKGIsZCxlLGMpLHhmKGIsZCxlLGMpLFFnKG51bGwsYixkLCEwLGEsYyl9eChcIjE1NlwiKX12YXIgVmc9e2N1cnJlbnQ6bnVsbH0sV2c9bnVsbCxYZz1udWxsLFlnPW51bGw7ZnVuY3Rpb24gVWcoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7RyhWZyxjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gWmcoYSl7dmFyIGI9VmcuY3VycmVudDtGKFZnLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSWcoYSxiKXtXZz1hO1lnPVhnPW51bGw7dmFyIGM9YS5jb250ZXh0RGVwZW5kZW5jaWVzO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPj1iJiYocWc9ITApO2EuY29udGV4dERlcGVuZGVuY2llcz1udWxsfVxuZnVuY3Rpb24gTShhLGIpe2lmKFlnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilZZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09WGc/KG51bGw9PT1XZz94KFwiMzA4XCIpOnZvaWQgMCxYZz1iLFdnLmNvbnRleHREZXBlbmRlbmNpZXM9e2ZpcnN0OmIsZXhwaXJhdGlvblRpbWU6MH0pOlhnPVhnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciAkZz0wLHJmPTEsc2Y9MixhaD0zLFBnPSExO2Z1bmN0aW9uIGJoKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIGNoKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBuZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6JGcscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gZGgoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gcGYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWJoKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1jaChlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1jaChkKSk7bnVsbD09PWV8fGQ9PT1lP2RoKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oZGgoZCxiKSxkaChlLGIpKTooZGgoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBlaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSk6ZmgoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1jaChiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBnaChhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIHJmOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSBhaDphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMjA0OXw2NDtjYXNlICRnOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSBzZjpQZz0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIHlmKGEsYixjLGQsZSl7UGc9ITE7Yj1maChhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGw9Yi5maXJzdFVwZGF0ZSxrPWY7bnVsbCE9PWw7KXt2YXIgbT1sLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWwsZj1rKSxoPG0mJihoPW0pKTooaz1naChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1sOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdEVmZmVjdD1sKSkpO2w9bC5uZXh0fW09bnVsbDtmb3IobD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWw7KXt2YXIgcD1sLmV4cGlyYXRpb25UaW1lO3A8ZT8obnVsbD09PW0mJihtPWwsbnVsbD09PWcmJihmPWspKSxoPHAmJihoPXApKTooaz1naChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9XG4zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWw6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RDYXB0dXJlZEVmZmVjdD1sKSkpO2w9bC5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9ayk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1rfVxuZnVuY3Rpb24gaGgoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO2loKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtpaChiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gaWgoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjE5MVwiLGMpOnZvaWQgMDtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gamgoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpqYyhiKX19ZnVuY3Rpb24ga2goYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGxoPXZvaWQgMCxtaD12b2lkIDAsbmg9dm9pZCAwLG9oPXZvaWQgMDtsaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07bWg9ZnVuY3Rpb24oKXt9O1xubmg9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO0lmKE4uY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXZjKGcsZik7ZD12YyhnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9JGQoZyxmKTtkPSRkKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9YmUoZyxmKTtkPWJlKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9dGUpfXFlKGMsZCk7Zz1jPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihjIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoYykmJmYuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPWZbY10paWYoXCJzdHlsZVwiPT09XG5jKXt2YXIgbD1mW2NdO2ZvcihnIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShnKSYmKGh8fChoPXt9KSxoW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1jJiZcImNoaWxkcmVuXCIhPT1jJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJlwiYXV0b0ZvY3VzXCIhPT1jJiYocmEuaGFzT3duUHJvcGVydHkoYyk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGMsbnVsbCkpO2ZvcihjIGluIGQpe3ZhciBrPWRbY107bD1udWxsIT1mP2ZbY106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYykmJmshPT1sJiYobnVsbCE9a3x8bnVsbCE9bCkpaWYoXCJzdHlsZVwiPT09YylpZihsKXtmb3IoZyBpbiBsKSFsLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoaHx8KGg9e30pLGhbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZsW2ddIT09a1tnXSYmKGh8fFxuKGg9e30pLGhbZ109a1tnXSl9ZWxzZSBofHwoYXx8KGE9W10pLGEucHVzaChjLGgpKSxoPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWM/KGs9az9rLl9faHRtbDp2b2lkIDAsbD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1rJiZsIT09ayYmKGE9YXx8W10pLnB1c2goYyxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1jP2w9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGE9YXx8W10pLnB1c2goYyxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmKHJhLmhhc093blByb3BlcnR5KGMpPyhudWxsIT1rJiZzZShlLGMpLGF8fGw9PT1rfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGMsaykpfWgmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJmtoKGIpfX07b2g9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJmtoKGIpfTtcbnZhciBwaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBxaChhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPWpjKGMpKTtudWxsIT09YyYmaWMoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmaWMoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gcmgoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7c2goYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gdGgoYSxiLGMpe2M9Yy51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkb3tpZigoZC50YWcmYSkhPT1OZil7dmFyIGU9ZC5kZXN0cm95O2QuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZSYmZSgpfShkLnRhZyZiKSE9PU5mJiYoZT1kLmNyZWF0ZSxkLmRlc3Ryb3k9ZSgpKTtkPWQubmV4dH13aGlsZShkIT09Yyl9fVxuZnVuY3Rpb24gdWgoYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PW5lKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09Yy50YWcmJm51bGwhPT1jLm1lbW9pemVkU3RhdGUpe2Q9Yy5jaGlsZC5zaWJsaW5nO2QucmV0dXJuPWM7Yz1kO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8XG5jLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiB2aChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgUmUmJlJlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIubGFzdEVmZmVjdCxudWxsIT09Yikpe3ZhciBjPWI9Yi5uZXh0O2Rve3ZhciBkPWMuZGVzdHJveTtpZih2b2lkIDAhPT1kKXt2YXIgZT1hO3RyeXtkKCl9Y2F0Y2goZil7c2goZSxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWIpfWJyZWFrO2Nhc2UgMTpyaChhKTtiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7c2goYSxmKX1icmVhaztjYXNlIDU6cmgoYSk7YnJlYWs7Y2FzZSA0OndoKGEpfX1cbmZ1bmN0aW9uIHhoKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24geWgoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoeGgoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXgoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp4KFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYoa2UoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fHhoKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJlxuMiljb250aW51ZSBiO2lmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhnPWIsaD1lLnN0YXRlTm9kZSw4PT09Zy5ub2RlVHlwZT8oZj1nLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoaCxnKSk6KGY9ZyxmLmFwcGVuZENoaWxkKGgpKSxnPWcuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09ZyYmdm9pZCAwIT09Z3x8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz10ZSkpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIHdoKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP3goXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZih2aChnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWcpe2lmKG51bGwhPT1iLmNoaWxkKXtkPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX19ZWxzZSBpZih2aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiB6aChhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnRoKFBmLFFmLGIpO2JyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJkNlKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjPWIubWVtb2l6ZWRTdGF0ZTtkPXZvaWQgMDthPWI7bnVsbD09PWM/ZD0hMTooZD0hMCxhPWIuY2hpbGQsMD09PWMudGltZWRPdXRBdCYmKGMudGltZWRPdXRBdD1sZigpKSk7bnVsbCE9PWEmJnVoKGEsZCk7Yz1cbmIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMpe2IudXBkYXRlUXVldWU9bnVsbDt2YXIgZz1iLnN0YXRlTm9kZTtudWxsPT09ZyYmKGc9Yi5zdGF0ZU5vZGU9bmV3IHBoKTtjLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGM9QWguYmluZChudWxsLGIsYSk7Zy5oYXMoYSl8fChnLmFkZChhKSxhLnRoZW4oYyxjKSl9KX1icmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6eChcIjE2M1wiKX19dmFyIEJoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIENoKGEsYixjKXtjPW5mKGMpO2MudGFnPWFoO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtEaChkKTtxaChhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIEVoKGEsYixjKXtjPW5mKGMpO2MudGFnPWFoO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1GaD9GaD1uZXcgU2V0KFt0aGlzXSk6RmguYWRkKHRoaXMpKTt2YXIgYz1iLnZhbHVlLGU9Yi5zdGFjaztxaChhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWU/ZTpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIEdoKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkooYS50eXBlKSYmS2UoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gS2YoYSksTGUoYSksYj1hLmVmZmVjdFRhZywwIT09KGImNjQpP3goXCIyODVcIik6dm9pZCAwLGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYTtjYXNlIDU6cmV0dXJuIE1mKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDE4OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gS2YoYSksbnVsbDtjYXNlIDEwOnJldHVybiBaZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEhoPVRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsSWg9VGIuUmVhY3RDdXJyZW50T3duZXIsSmg9MTA3Mzc0MTgyMixLaD0hMSxUPW51bGwsTGg9bnVsbCxVPTAsTWg9LTEsTmg9ITEsVj1udWxsLE9oPSExLFBoPW51bGwsUWg9bnVsbCxSaD1udWxsLEZoPW51bGw7ZnVuY3Rpb24gU2goKXtpZihudWxsIT09VClmb3IodmFyIGE9VC5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnZhciBjPWIudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09YyYmdm9pZCAwIT09YyYmS2UoYik7YnJlYWs7Y2FzZSAzOktmKGIpO0xlKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTticmVhaztjYXNlIDQ6S2YoYik7YnJlYWs7Y2FzZSAxMDpaZyhiKX1hPWEucmV0dXJufUxoPW51bGw7VT0wO01oPS0xO05oPSExO1Q9bnVsbH1cbmZ1bmN0aW9uIFRoKCl7Zm9yKDtudWxsIT09Vjspe3ZhciBhPVYuZWZmZWN0VGFnO2EmMTYmJmtlKFYuc3RhdGVOb2RlLFwiXCIpO2lmKGEmMTI4KXt2YXIgYj1WLmFsdGVybmF0ZTtudWxsIT09YiYmKGI9Yi5yZWYsbnVsbCE9PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKG51bGwpOmIuY3VycmVudD1udWxsKSl9c3dpdGNoKGEmMTQpe2Nhc2UgMjp5aChWKTtWLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OnloKFYpO1YuZWZmZWN0VGFnJj0tMzt6aChWLmFsdGVybmF0ZSxWKTticmVhaztjYXNlIDQ6emgoVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA4OmE9Vix3aChhKSxhLnJldHVybj1udWxsLGEuY2hpbGQ9bnVsbCxhLm1lbW9pemVkU3RhdGU9bnVsbCxhLnVwZGF0ZVF1ZXVlPW51bGwsYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGEucmV0dXJuPW51bGwsYS5jaGlsZD1udWxsLGEubWVtb2l6ZWRTdGF0ZT1udWxsLGEudXBkYXRlUXVldWU9bnVsbCl9Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gVWgoKXtmb3IoO251bGwhPT1WOyl7aWYoVi5lZmZlY3RUYWcmMjU2KWE6e3ZhciBhPVYuYWx0ZXJuYXRlLGI9Vjtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGgoT2YsTmYsYik7YnJlYWsgYTtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpMKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWsgYTtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhayBhO2RlZmF1bHQ6eChcIjE2M1wiKX19Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gVmgoYSxiKXtmb3IoO251bGwhPT1WOyl7dmFyIGM9Vi5lZmZlY3RUYWc7aWYoYyYzNil7dmFyIGQ9Vi5hbHRlcm5hdGUsZT1WLGY9Yjtzd2l0Y2goZS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGgoUmYsU2YsZSk7YnJlYWs7Y2FzZSAxOnZhciBnPWUuc3RhdGVOb2RlO2lmKGUuZWZmZWN0VGFnJjQpaWYobnVsbD09PWQpZy5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGg9ZS5lbGVtZW50VHlwZT09PWUudHlwZT9kLm1lbW9pemVkUHJvcHM6TChlLnR5cGUsZC5tZW1vaXplZFByb3BzKTtnLmNvbXBvbmVudERpZFVwZGF0ZShoLGQubWVtb2l6ZWRTdGF0ZSxnLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1kPWUudXBkYXRlUXVldWU7bnVsbCE9PWQmJmhoKGUsZCxnLGYpO2JyZWFrO2Nhc2UgMzpkPWUudXBkYXRlUXVldWU7aWYobnVsbCE9PWQpe2c9bnVsbDtpZihudWxsIT09ZS5jaGlsZClzd2l0Y2goZS5jaGlsZC50YWcpe2Nhc2UgNTpnPVxuZS5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmc9ZS5jaGlsZC5zdGF0ZU5vZGV9aGgoZSxkLGcsZil9YnJlYWs7Y2FzZSA1OmY9ZS5zdGF0ZU5vZGU7bnVsbD09PWQmJmUuZWZmZWN0VGFnJjQmJndlKGUudHlwZSxlLm1lbW9pemVkUHJvcHMpJiZmLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OngoXCIxNjNcIil9fWMmMTI4JiYoZT1WLnJlZixudWxsIT09ZSYmKGY9Vi5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGU/ZShmKTplLmN1cnJlbnQ9ZikpO2MmNTEyJiYoUGg9YSk7Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gV2goYSxiKXtSaD1RaD1QaD1udWxsO3ZhciBjPVc7Vz0hMDtkb3tpZihiLmVmZmVjdFRhZyY1MTIpe3ZhciBkPSExLGU9dm9pZCAwO3RyeXt2YXIgZj1iO3RoKFVmLE5mLGYpO3RoKE5mLFRmLGYpfWNhdGNoKGcpe2Q9ITAsZT1nfWQmJnNoKGIsZSl9Yj1iLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PWIpO1c9YztjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJlhoKGEsYyk7WHx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9ZnVuY3Rpb24gb2YoKXtudWxsIT09UWgmJkJlKFFoKTtudWxsIT09UmgmJlJoKCl9XG5mdW5jdGlvbiBaaChhLGIpe09oPUtoPSEwO2EuY3VycmVudD09PWI/eChcIjE3N1wiKTp2b2lkIDA7dmFyIGM9YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWM/eChcIjI2MVwiKTp2b2lkIDA7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZD1iLmV4cGlyYXRpb25UaW1lLGU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2VmKGEsZT5kP2U6ZCk7SWguY3VycmVudD1udWxsO2Q9dm9pZCAwOzE8Yi5lZmZlY3RUYWc/bnVsbCE9PWIubGFzdEVmZmVjdD8oYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YixkPWIuZmlyc3RFZmZlY3QpOmQ9YjpkPWIuZmlyc3RFZmZlY3Q7dWU9QmQ7dmU9UGQoKTtCZD0hMTtmb3IoVj1kO251bGwhPT1WOyl7ZT0hMTt2YXIgZj12b2lkIDA7dHJ5e1VoKCl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO1xuZj12b2lkIDA7dHJ5e1RoKCl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfVFkKHZlKTt2ZT1udWxsO0JkPSEhdWU7dWU9bnVsbDthLmN1cnJlbnQ9Yjtmb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtmPXZvaWQgMDt0cnl7VmgoYSxjKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9aWYobnVsbCE9PWQmJm51bGwhPT1QaCl7dmFyIGc9V2guYmluZChudWxsLGEsZCk7UWg9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBBZShnKX0pO1JoPWd9S2g9T2g9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIFFlJiZRZShiLnN0YXRlTm9kZSk7Yz1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9XG5iPmM/YjpjOzA9PT1iJiYoRmg9bnVsbCk7JGgoYSxiKX1cbmZ1bmN0aW9uIGFpKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjEwMjQpKXtUPWE7YTp7dmFyIGU9YjtiPWE7dmFyIGY9VTt2YXIgZz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDE2OmJyZWFrO2Nhc2UgMTU6Y2FzZSAwOmJyZWFrO2Nhc2UgMTpKKGIudHlwZSkmJktlKGIpO2JyZWFrO2Nhc2UgMzpLZihiKTtMZShiKTtnPWIuc3RhdGVOb2RlO2cucGVuZGluZ0NvbnRleHQmJihnLmNvbnRleHQ9Zy5wZW5kaW5nQ29udGV4dCxnLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZClFZyhiKSxiLmVmZmVjdFRhZyY9LTM7bWgoYik7YnJlYWs7Y2FzZSA1Ok1mKGIpO3ZhciBoPUlmKEhmLmN1cnJlbnQpO2Y9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSluaChlLGIsZixnLGgpLGUucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9XG4xMjgpO2Vsc2UgaWYoZyl7dmFyIGw9SWYoTi5jdXJyZW50KTtpZihFZyhiKSl7Zz1iO2U9Zy5zdGF0ZU5vZGU7dmFyIGs9Zy50eXBlLG09Zy5tZW1vaXplZFByb3BzLHA9aDtlW0ZhXT1nO2VbR2FdPW07Zj12b2lkIDA7aD1rO3N3aXRjaChoKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkUoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGs9MDtrPGFiLmxlbmd0aDtrKyspRShhYltrXSxlKTticmVhaztjYXNlIFwic291cmNlXCI6RShcImVycm9yXCIsZSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RShcImVycm9yXCIsZSk7RShcImxvYWRcIixlKTticmVhaztjYXNlIFwiZm9ybVwiOkUoXCJyZXNldFwiLGUpO0UoXCJzdWJtaXRcIixlKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkUoXCJ0b2dnbGVcIixlKTticmVhaztjYXNlIFwiaW5wdXRcIjp3YyhlLG0pO0UoXCJpbnZhbGlkXCIsZSk7c2UocCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtFKFwiaW52YWxpZFwiLGUpO3NlKHAsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjZShlLG0pLEUoXCJpbnZhbGlkXCIsZSksc2UocCxcIm9uQ2hhbmdlXCIpfXFlKGgsbSk7az1udWxsO2ZvcihmIGluIG0pbS5oYXNPd25Qcm9wZXJ0eShmKSYmKGw9bVtmXSxcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD9lLnRleHRDb250ZW50IT09bCYmKGs9W1wiY2hpbGRyZW5cIixsXSk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZlLnRleHRDb250ZW50IT09XCJcIitsJiYoaz1bXCJjaGlsZHJlblwiLFwiXCIrbF0pOnJhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1sJiZzZShwLGYpKTtzd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6UmIoZSk7QWMoZSxtLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpSYihlKTtlZShlLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS5vbkNsaWNrJiZcbihlLm9uY2xpY2s9dGUpfWY9aztnLnVwZGF0ZVF1ZXVlPWY7Zz1udWxsIT09Zj8hMDohMTtnJiZraChiKX1lbHNle209YjtwPWY7ZT1nO2s9OT09PWgubm9kZVR5cGU/aDpoLm93bmVyRG9jdW1lbnQ7bD09PWZlLmh0bWwmJihsPWdlKHApKTtsPT09ZmUuaHRtbD9cInNjcmlwdFwiPT09cD8oZT1rLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixrPWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBlLmlzP2s9ay5jcmVhdGVFbGVtZW50KHAse2lzOmUuaXN9KTooaz1rLmNyZWF0ZUVsZW1lbnQocCksXCJzZWxlY3RcIj09PXAmJihwPWssZS5tdWx0aXBsZT9wLm11bHRpcGxlPSEwOmUuc2l6ZSYmKHAuc2l6ZT1lLnNpemUpKSk6az1rLmNyZWF0ZUVsZW1lbnROUyhsLHApO2U9aztlW0ZhXT1tO2VbR2FdPWc7bGgoZSxiLCExLCExKTtwPWU7az1mO209Zzt2YXIgdD1oLEE9cmUoayxtKTtzd2l0Y2goayl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpFKFwibG9hZFwiLFxucCk7aD1tO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYi5sZW5ndGg7aCsrKUUoYWJbaF0scCk7aD1tO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpFKFwiZXJyb3JcIixwKTtoPW07YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RShcImVycm9yXCIscCk7RShcImxvYWRcIixwKTtoPW07YnJlYWs7Y2FzZSBcImZvcm1cIjpFKFwicmVzZXRcIixwKTtFKFwic3VibWl0XCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RShcInRvZ2dsZVwiLHApO2g9bTticmVhaztjYXNlIFwiaW5wdXRcIjp3YyhwLG0pO2g9dmMocCxtKTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD0kZChwLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpwLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07aD1uKHt9LG0se3ZhbHVlOnZvaWQgMH0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNlKHAsXG5tKTtoPWJlKHAsbSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPW19cWUoayxoKTtsPXZvaWQgMDt2YXIgdj1rLFI9cCx1PWg7Zm9yKGwgaW4gdSlpZih1Lmhhc093blByb3BlcnR5KGwpKXt2YXIgcT11W2xdO1wic3R5bGVcIj09PWw/b2UoUixxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhxPXE/cS5fX2h0bWw6dm9pZCAwLG51bGwhPXEmJmplKFIscSkpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIj09PXR5cGVvZiBxPyhcInRleHRhcmVhXCIhPT12fHxcIlwiIT09cSkmJmtlKFIscSk6XCJudW1iZXJcIj09PXR5cGVvZiBxJiZrZShSLFwiXCIrcSk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKHJhLmhhc093blByb3BlcnR5KGwpP251bGwhPXEmJnNlKHQsbCk6bnVsbCE9cSYmdGMoUixsLHEsQSkpfXN3aXRjaChrKXtjYXNlIFwiaW5wdXRcIjpSYihwKTtcbkFjKHAsbSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UmIocCk7ZWUocCxtKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9bS52YWx1ZSYmcC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrdWMobS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpoPXA7aC5tdWx0aXBsZT0hIW0ubXVsdGlwbGU7cD1tLnZhbHVlO251bGwhPXA/YWUoaCwhIW0ubXVsdGlwbGUscCwhMSk6bnVsbCE9bS5kZWZhdWx0VmFsdWUmJmFlKGgsISFtLm11bHRpcGxlLG0uZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihwLm9uY2xpY2s9dGUpfShnPXdlKGYsZykpJiZraChiKTtiLnN0YXRlTm9kZT1lfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgbnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjZcIik6dm9pZCAwO2JyZWFrO2Nhc2UgNjplJiZudWxsIT1iLnN0YXRlTm9kZT9vaChlLGIsZS5tZW1vaXplZFByb3BzLGcpOihcInN0cmluZ1wiIT09XG50eXBlb2YgZyYmKG51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTY2XCIpOnZvaWQgMCksZT1JZihIZi5jdXJyZW50KSxJZihOLmN1cnJlbnQpLEVnKGIpPyhnPWIsZj1nLnN0YXRlTm9kZSxlPWcubWVtb2l6ZWRQcm9wcyxmW0ZhXT1nLChnPWYubm9kZVZhbHVlIT09ZSkmJmtoKGIpKTooZj1iLGc9KDk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShnKSxnW0ZhXT1iLGYuc3RhdGVOb2RlPWcpKTticmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgMTM6Zz1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpe2IuZXhwaXJhdGlvblRpbWU9ZjtUPWI7YnJlYWsgYX1nPW51bGwhPT1nO2Y9bnVsbCE9PWUmJm51bGwhPT1lLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJiFnJiZmJiYoZT1lLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihoPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWg/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9aCk6KGIuZmlyc3RFZmZlY3Q9XG5iLmxhc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpO2lmKGd8fGYpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpLZihiKTttaChiKTticmVhaztjYXNlIDEwOlpnKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6SihiLnR5cGUpJiZLZShiKTticmVhaztjYXNlIDE4OmJyZWFrO2RlZmF1bHQ6eChcIjE1NlwiKX1UPW51bGx9Yj1hO2lmKDE9PT1VfHwxIT09Yi5jaGlsZEV4cGlyYXRpb25UaW1lKXtnPTA7Zm9yKGY9Yi5jaGlsZDtudWxsIT09ZjspZT1mLmV4cGlyYXRpb25UaW1lLGg9Zi5jaGlsZEV4cGlyYXRpb25UaW1lLGU+ZyYmKGc9ZSksaD5nJiYoZz1oKSxmPWYuc2libGluZztiLmNoaWxkRXhwaXJhdGlvblRpbWU9Z31pZihudWxsIT09VClyZXR1cm4gVDtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyYxMDI0KSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiZcbihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9R2goYSxVKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTEwMjMsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTEwMjQpfWlmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfXJldHVybiBudWxsfVxuZnVuY3Rpb24gYmkoYSl7dmFyIGI9VGcoYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWFpKGEpKTtJaC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBjaShhLGIpe0toP3goXCIyNDNcIik6dm9pZCAwO29mKCk7S2g9ITA7dmFyIGM9SGguY3VycmVudDtIaC5jdXJyZW50PWtnO3ZhciBkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoZCE9PVV8fGEhPT1MaHx8bnVsbD09PVQpU2goKSxMaD1hLFU9ZCxUPVhlKExoLmN1cnJlbnQsbnVsbCxVKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PVQmJiFkaSgpOylUPWJpKFQpO2Vsc2UgZm9yKDtudWxsIT09VDspVD1iaShUKX1jYXRjaCh1KXtpZihZZz1YZz1XZz1udWxsLGxnKCksbnVsbD09PVQpZT0hMCxEaCh1KTtlbHNle251bGw9PT1UP3goXCIyNzFcIik6dm9pZCAwO3ZhciBmPVQsZz1mLnJldHVybjtpZihudWxsPT09ZyllPSEwLERoKHUpO2Vsc2V7YTp7dmFyIGg9YSxsPWcsaz1mLG09dTtnPVU7ay5lZmZlY3RUYWd8PTEwMjQ7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09XG5tJiZcIm9iamVjdFwiPT09dHlwZW9mIG0mJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLnRoZW4pe3ZhciBwPW07bT1sO3ZhciB0PS0xLEE9LTE7ZG97aWYoMTM9PT1tLnRhZyl7dmFyIHY9bS5hbHRlcm5hdGU7aWYobnVsbCE9PXYmJih2PXYubWVtb2l6ZWRTdGF0ZSxudWxsIT09dikpe0E9MTAqKDEwNzM3NDE4MjItdi50aW1lZE91dEF0KTticmVha312PW0ucGVuZGluZ1Byb3BzLm1heER1cmF0aW9uO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgdilpZigwPj12KXQ9MDtlbHNlIGlmKC0xPT09dHx8djx0KXQ9dn1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPWw7ZG97aWYodj0xMz09PW0udGFnKXY9dm9pZCAwPT09bS5tZW1vaXplZFByb3BzLmZhbGxiYWNrPyExOm51bGw9PT1tLm1lbW9pemVkU3RhdGU7aWYodil7bD1tLnVwZGF0ZVF1ZXVlO251bGw9PT1sPyhsPW5ldyBTZXQsbC5hZGQocCksbS51cGRhdGVRdWV1ZT1sKTpsLmFkZChwKTtpZigwPT09KG0ubW9kZSYxKSl7bS5lZmZlY3RUYWd8PVxuNjQ7ay5lZmZlY3RUYWcmPS0xOTU3OzE9PT1rLnRhZyYmKG51bGw9PT1rLmFsdGVybmF0ZT9rLnRhZz0xNzooZz1uZigxMDczNzQxODIzKSxnLnRhZz1zZixwZihrLGcpKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oO2w9Zzt2YXIgUj1rLnBpbmdDYWNoZTtudWxsPT09Uj8oUj1rLnBpbmdDYWNoZT1uZXcgQmgsdj1uZXcgU2V0LFIuc2V0KHAsdikpOih2PVIuZ2V0KHApLHZvaWQgMD09PXYmJih2PW5ldyBTZXQsUi5zZXQocCx2KSkpO3YuaGFzKGwpfHwodi5hZGQobCksaz1laS5iaW5kKG51bGwsayxwLGwpLHAudGhlbihrLGspKTstMT09PXQ/aD0xMDczNzQxODIzOigtMT09PUEmJihBPTEwKigxMDczNzQxODIyLWdmKGgsZykpLTVFMyksaD1BK3QpOzA8PWgmJk1oPGgmJihNaD1oKTttLmVmZmVjdFRhZ3w9MjA0ODttLmV4cGlyYXRpb25UaW1lPWc7YnJlYWsgYX1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPUVycm9yKChpYyhrLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1xuXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitqYyhrKSl9Tmg9ITA7bT1qaChtLGspO2g9bDtkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoLmVmZmVjdFRhZ3w9MjA0ODtoLmV4cGlyYXRpb25UaW1lPWc7Zz1DaChoLG0sZyk7ZWgoaCxnKTticmVhayBhO2Nhc2UgMTppZih0PW0sQT1oLnR5cGUsaz1oLnN0YXRlTm9kZSwwPT09KGguZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBBLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PWsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZofHwhRmguaGFzKGspKSkpe2guZWZmZWN0VGFnfD0yMDQ4O1xuaC5leHBpcmF0aW9uVGltZT1nO2c9RWgoaCx0LGcpO2VoKGgsZyk7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9VD1haShmKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO0toPSExO0hoLmN1cnJlbnQ9YztZZz1YZz1XZz1udWxsO2xnKCk7aWYoZSlMaD1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09VClhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7Yz1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1jP3goXCIyODFcIik6dm9pZCAwO0xoPW51bGw7aWYoTmgpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZTxkfHwwIT09ZiYmZjxkfHwwIT09ZyYmZzxkKXtmZihhLGQpO2ZpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsLTEpO3JldHVybn1pZighYS5kaWRFcnJvciYmYil7YS5kaWRFcnJvcj0hMDtkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZDtcbmI9YS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2ZpKGEsYyxkLGIsLTEpO3JldHVybn19YiYmLTEhPT1NaD8oZmYoYSxkKSxiPTEwKigxMDczNzQxODIyLWdmKGEsZCkpLGI8TWgmJihNaD1iKSxiPTEwKigxMDczNzQxODIyLWxmKCkpLGI9TWgtYixmaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLDA+Yj8wOmIpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9ZCxhLmZpbmlzaGVkV29yaz1jKX19XG5mdW5jdGlvbiBzaChhLGIpe2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GaHx8IUZoLmhhcyhkKSkpe2E9amgoYixhKTthPUVoKGMsYSwxMDczNzQxODIzKTtwZihjLGEpO3FmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWJyZWFrO2Nhc2UgMzphPWpoKGIsYSk7YT1DaChjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtxZihjLDEwNzM3NDE4MjMpO3JldHVybn1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9amgoYixhKSxjPUNoKGEsYywxMDczNzQxODIzKSxwZihhLGMpLHFmKGEsMTA3Mzc0MTgyMykpfVxuZnVuY3Rpb24gbWYoYSxiKXt2YXIgYz1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsKCksZD12b2lkIDA7aWYoMD09PShiLm1vZGUmMSkpZD0xMDczNzQxODIzO2Vsc2UgaWYoS2gmJiFPaClkPVU7ZWxzZXtzd2l0Y2goYyl7Y2FzZSByLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5OmQ9MTA3Mzc0MTgyMzticmVhaztjYXNlIHIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk6ZD0xMDczNzQxODIyLTEwKigoKDEwNzM3NDE4MjItYSsxNSkvMTB8MCkrMSk7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5OmQ9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWErNTAwKS8yNXwwKSsxKTticmVhaztjYXNlIHIudW5zdGFibGVfTG93UHJpb3JpdHk6Y2FzZSByLnVuc3RhYmxlX0lkbGVQcmlvcml0eTpkPTE7YnJlYWs7ZGVmYXVsdDp4KFwiMzEzXCIpfW51bGwhPT1MaCYmZD09PVUmJi0tZH1jPT09ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSYmXG4oMD09PWdpfHxkPGdpKSYmKGdpPWQpO3JldHVybiBkfWZ1bmN0aW9uIGVpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7aWYobnVsbCE9PUxoJiZVPT09YylMaD1udWxsO2Vsc2UgaWYoYj1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWEubGF0ZXN0U3VzcGVuZGVkVGltZSwwIT09YiYmYzw9YiYmYz49ZCl7YS5kaWRFcnJvcj0hMTtiPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwPT09Ynx8Yj5jKWEubGF0ZXN0UGluZ2VkVGltZT1jO2RmKGMsYSk7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZYaChhLGMpfX1mdW5jdGlvbiBBaChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPWxmKCk7Yj1tZihiLGEpO2E9aGkoYSxiKTtudWxsIT09YSYmKGNmKGEsYiksYj1hLmV4cGlyYXRpb25UaW1lLDAhPT1iJiZYaChhLGIpKX1cbmZ1bmN0aW9uIGhpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59cmV0dXJuIGV9XG5mdW5jdGlvbiBxZihhLGIpe2E9aGkoYSxiKTtudWxsIT09YSYmKCFLaCYmMCE9PVUmJmI+VSYmU2goKSxjZihhLGIpLEtoJiYhT2gmJkxoPT09YXx8WGgoYSxhLmV4cGlyYXRpb25UaW1lKSxpaT5qaSYmKGlpPTAseChcIjE4NVwiKSkpfWZ1bmN0aW9uIGtpKGEsYixjLGQsZSl7cmV0dXJuIHIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfXZhciBsaT1udWxsLFk9bnVsbCxtaT0wLG5pPXZvaWQgMCxXPSExLG9pPW51bGwsWj0wLGdpPTAscGk9ITEscWk9bnVsbCxYPSExLHJpPSExLHNpPW51bGwsdGk9ci51bnN0YWJsZV9ub3coKSx1aT0xMDczNzQxODIyLSh0aS8xMHwwKSx2aT11aSxqaT01MCxpaT0wLHdpPW51bGw7ZnVuY3Rpb24geGkoKXt1aT0xMDczNzQxODIyLSgoci51bnN0YWJsZV9ub3coKS10aSkvMTB8MCl9XG5mdW5jdGlvbiB5aShhLGIpe2lmKDAhPT1taSl7aWYoYjxtaSlyZXR1cm47bnVsbCE9PW5pJiZyLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKG5pKX1taT1iO2E9ci51bnN0YWJsZV9ub3coKS10aTtuaT1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soemkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjItYiktYX0pfWZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7YS5leHBpcmF0aW9uVGltZT1kOzAhPT1lfHxkaSgpPzA8ZSYmKGEudGltZW91dEhhbmRsZT15ZShBaS5iaW5kKG51bGwsYSxiLGMpLGUpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1iKX1mdW5jdGlvbiBBaShhLGIsYyl7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YzthLmZpbmlzaGVkV29yaz1iO3hpKCk7dmk9dWk7QmkoYSxjKX1mdW5jdGlvbiAkaChhLGIpe2EuZXhwaXJhdGlvblRpbWU9YjthLmZpbmlzaGVkV29yaz1udWxsfVxuZnVuY3Rpb24gbGYoKXtpZihXKXJldHVybiB2aTtDaSgpO2lmKDA9PT1afHwxPT09Wil4aSgpLHZpPXVpO3JldHVybiB2aX1mdW5jdGlvbiBYaChhLGIpe251bGw9PT1hLm5leHRTY2hlZHVsZWRSb290PyhhLmV4cGlyYXRpb25UaW1lPWIsbnVsbD09PVk/KGxpPVk9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihZPVkubmV4dFNjaGVkdWxlZFJvb3Q9YSxZLm5leHRTY2hlZHVsZWRSb290PWxpKSk6Yj5hLmV4cGlyYXRpb25UaW1lJiYoYS5leHBpcmF0aW9uVGltZT1iKTtXfHwoWD9yaSYmKG9pPWEsWj0xMDczNzQxODIzLERpKGEsMTA3Mzc0MTgyMywhMSkpOjEwNzM3NDE4MjM9PT1iP1loKDEwNzM3NDE4MjMsITEpOnlpKGEsYikpfVxuZnVuY3Rpb24gQ2koKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09WSlmb3IodmFyIGM9WSxkPWxpO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1ZP3goXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsaT1ZPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1saSlsaT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsWS5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1ZKXtZPWM7WS5uZXh0U2NoZWR1bGVkUm9vdD1saTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2U+YSYmKGE9ZSxiPWQpO2lmKGQ9PT1ZKWJyZWFrO2lmKDEwNzM3NDE4MjM9PT1cbmEpYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19b2k9YjtaPWF9dmFyIEVpPSExO2Z1bmN0aW9uIGRpKCl7cmV0dXJuIEVpPyEwOnIudW5zdGFibGVfc2hvdWxkWWllbGQoKT9FaT0hMDohMX1mdW5jdGlvbiB6aSgpe3RyeXtpZighZGkoKSYmbnVsbCE9PWxpKXt4aSgpO3ZhciBhPWxpO2Rve3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7MCE9PWImJnVpPD1iJiYoYS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj11aSk7YT1hLm5leHRTY2hlZHVsZWRSb290fXdoaWxlKGEhPT1saSl9WWgoMCwhMCl9ZmluYWxseXtFaT0hMX19XG5mdW5jdGlvbiBZaChhLGIpe0NpKCk7aWYoYilmb3IoeGkoKSx2aT11aTtudWxsIT09b2kmJjAhPT1aJiZhPD1aJiYhKEVpJiZ1aT5aKTspRGkob2ksWix1aT5aKSxDaSgpLHhpKCksdmk9dWk7ZWxzZSBmb3IoO251bGwhPT1vaSYmMCE9PVomJmE8PVo7KURpKG9pLFosITEpLENpKCk7YiYmKG1pPTAsbmk9bnVsbCk7MCE9PVomJnlpKG9pLFopO2lpPTA7d2k9bnVsbDtpZihudWxsIT09c2kpZm9yKGE9c2ksc2k9bnVsbCxiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtwaXx8KHBpPSEwLHFpPWQpfX1pZihwaSl0aHJvdyBhPXFpLHFpPW51bGwscGk9ITEsYTt9ZnVuY3Rpb24gQmkoYSxiKXtXP3goXCIyNTNcIik6dm9pZCAwO29pPWE7Wj1iO0RpKGEsYiwhMSk7WWgoMTA3Mzc0MTgyMywhMSl9XG5mdW5jdGlvbiBEaShhLGIsYyl7Vz94KFwiMjQ1XCIpOnZvaWQgMDtXPSEwO2lmKGMpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kP0ZpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsemUoZCkpLGNpKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmKGRpKCk/YS5maW5pc2hlZFdvcms9ZDpGaShhLGQsYikpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/RmkoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSx6ZShkKSksY2koYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiZGaShhLGQsYikpO1c9ITF9XG5mdW5jdGlvbiBGaShhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YyYmKG51bGw9PT1zaT9zaT1bZF06c2kucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5leHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO2E9PT13aT9paSsrOih3aT1hLGlpPTApO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZnVuY3Rpb24oKXtaaChhLGIpfSl9ZnVuY3Rpb24gRGgoYSl7bnVsbD09PW9pP3goXCIyNDZcIik6dm9pZCAwO29pLmV4cGlyYXRpb25UaW1lPTA7cGl8fChwaT0hMCxxaT1hKX1mdW5jdGlvbiBHaShhLGIpe3ZhciBjPVg7WD0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoWD1jKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fVxuZnVuY3Rpb24gSGkoYSxiKXtpZihYJiYhcmkpe3JpPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e3JpPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiBJaShhLGIsYyl7WHx8V3x8MD09PWdpfHwoWWgoZ2ksITEpLGdpPTApO3ZhciBkPVg7WD0hMDt0cnl7cmV0dXJuIHIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMpfSl9ZmluYWxseXsoWD1kKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fVxuZnVuY3Rpb24gSmkoYSxiLGMsZCxlKXt2YXIgZj1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOnsyPT09ZWQoYykmJjE9PT1jLnRhZz92b2lkIDA6eChcIjE3MFwiKTt2YXIgZz1jO2Rve3N3aXRjaChnLnRhZyl7Y2FzZSAzOmc9Zy5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihKKGcudHlwZSkpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19Zz1nLnJldHVybn13aGlsZShudWxsIT09Zyk7eChcIjE3MVwiKTtnPXZvaWQgMH1pZigxPT09Yy50YWcpe3ZhciBoPWMudHlwZTtpZihKKGgpKXtjPU5lKGMsaCxnKTticmVhayBhfX1jPWd9ZWxzZSBjPUhlO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPW5mKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtcbm9mKCk7cGYoZixlKTtxZihmLGQpO3JldHVybiBkfWZ1bmN0aW9uIEtpKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPWxmKCk7ZT1tZihmLGUpO3JldHVybiBKaShhLGIsYyxlLGQpfWZ1bmN0aW9uIExpKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gTWkoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpXYixrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkFiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6eWMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUthKGQpO2U/dm9pZCAwOngoXCI5MFwiKTtTYihkKTt5YyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmFlKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBOaShhKXt2YXIgYj0xMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItbGYoKSs1MDApLzI1fDApKzEpO2I+PUpoJiYoYj1KaC0xKTt0aGlzLl9leHBpcmF0aW9uVGltZT1KaD1iO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9TmkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6eChcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IE9pO0ppKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbk5pLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbk5pLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDp4KFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP3goXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7QmkoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07TmkucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIE9pKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9T2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbk9pLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O1xuZnVuY3Rpb24gUGkoYSxiLGMpe2I9SygzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxwaW5nQ2FjaGU6bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLGRpZEVycm9yOiExLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLHRpbWVvdXRIYW5kbGU6LTEsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uOjAsZXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07dGhpcy5faW50ZXJuYWxSb290PWIuc3RhdGVOb2RlPWF9XG5QaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IE9pO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtLaShhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1BpLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBPaTthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7S2kobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtQaS5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgT2k7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO0tpKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5QaS5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTmkodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiBRaShhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9R2I9R2k7SGI9SWk7SWI9ZnVuY3Rpb24oKXtXfHwwPT09Z2l8fChZaChnaSwhMSksZ2k9MCl9O1xuZnVuY3Rpb24gUmkoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBQaShhLCExLGIpfVxuZnVuY3Rpb24gU2koYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPUxpKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9UmkoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9TGkoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fUhpKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBMaShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gVGkoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gTWkoYSxiLG51bGwsYyl9XG52YXIgVmk9e2NyZWF0ZVBvcnRhbDpUaSxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP3goXCIxODhcIik6eChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1oZChiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBTaShudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gU2kobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe1FpKGMpP3ZvaWQgMDp4KFwiMjAwXCIpO251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9cbngoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIFNpKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe1FpKGEpP3ZvaWQgMDp4KFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oSGkoZnVuY3Rpb24oKXtTaShudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBUaS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6R2ksdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOklpLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1c/eChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9WDtYPSEwO3RyeXtyZXR1cm4ga2koYSxiKX1maW5hbGx5e1g9YyxZaCgxMDczNzQxODIzLCExKX19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6VWksdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVxuWDtYPSEwO3RyeXtraShhKX1maW5hbGx5eyhYPWIpfHxXfHxZaCgxMDczNzQxODIzLCExKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0lhLEphLEthLEJhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxwYSxRYSxmdW5jdGlvbihhKXt5YShhLFBhKX0sRWIsRmIsRGQsRGFdfX07ZnVuY3Rpb24gVWkoYSxiKXtRaShhKT92b2lkIDA6eChcIjI5OVwiLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IFBpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfVxuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFRlKG4oe30sYSx7b3ZlcnJpZGVQcm9wczpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOlRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpIYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjguNlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBXaT17ZGVmYXVsdDpWaX0sWGk9V2kmJlZpfHxXaTttb2R1bGUuZXhwb3J0cz1YaS5kZWZhdWx0fHxYaTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKSA6IDB4ZWFjYTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKSA6IDB4ZWFjYjtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKSA6IDB4ZWFjYztcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKSA6IDB4ZWFkMjtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKSA6IDB4ZWFjZDtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb250ZXh0JykgOiAweGVhY2U7XG52YXIgUkVBQ1RfQVNZTkNfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuYXN5bmNfbW9kZScpIDogMHhlYWNmO1xudmFyIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29uY3VycmVudF9tb2RlJykgOiAweGVhY2Y7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJykgOiAweGVhZDA7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlJykgOiAweGVhZDE7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubWVtbycpIDogMHhlYWQzO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKSA6IDB4ZWFkNDtcblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAvLyBOb3RlOiBpdHMgdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgaWYgaXQncyBhIHBvbHlmaWxsLlxuICB0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUpO1xufVxuXG4vKipcbiAqIEZvcmtlZCBmcm9tIGZianMvd2FybmluZzpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvZTY2YmEyMGFkNWJlNDMzZWI1NDQyM2YyYjA5N2Q4MjkzMjRkOWRlNi9wYWNrYWdlcy9mYmpzL3NyYy9fX2ZvcmtzX18vd2FybmluZy5qc1xuICpcbiAqIE9ubHkgY2hhbmdlIGlzIHdlIHVzZSBjb25zb2xlLndhcm4gaW5zdGVhZCBvZiBjb25zb2xlLmVycm9yLFxuICogYW5kIGRvIG5vdGhpbmcgd2hlbiAnY29uc29sZScgaXMgbm90IHN1cHBvcnRlZC5cbiAqIFRoaXMgcmVhbGx5IHNpbXBsaWZpZXMgdGhlIGNvZGUuXG4gKiAtLS1cbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgbG93UHJpb3JpdHlXYXJuaW5nID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgbG93UHJpb3JpdHlXYXJuaW5nID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bsb3dQcmlvcml0eVdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgbG93UHJpb3JpdHlXYXJuaW5nJDEgPSBsb3dQcmlvcml0eVdhcm5pbmc7XG5cbmZ1bmN0aW9uIHR5cGVPZihvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCkge1xuICAgIHZhciAkJHR5cGVvZiA9IG9iamVjdC4kJHR5cGVvZjtcbiAgICBzd2l0Y2ggKCQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgdmFyIHR5cGUgPSBvYmplY3QudHlwZTtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0FTWU5DX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgJCR0eXBlb2ZUeXBlID0gdHlwZSAmJiB0eXBlLiQkdHlwZW9mO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mVHlwZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLy8gQXN5bmNNb2RlIGlzIGRlcHJlY2F0ZWQgYWxvbmcgd2l0aCBpc0FzeW5jTW9kZVxudmFyIEFzeW5jTW9kZSA9IFJFQUNUX0FTWU5DX01PREVfVFlQRTtcbnZhciBDb25jdXJyZW50TW9kZSA9IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFO1xudmFyIENvbnRleHRDb25zdW1lciA9IFJFQUNUX0NPTlRFWFRfVFlQRTtcbnZhciBDb250ZXh0UHJvdmlkZXIgPSBSRUFDVF9QUk9WSURFUl9UWVBFO1xudmFyIEVsZW1lbnQgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG52YXIgRm9yd2FyZFJlZiA9IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG52YXIgRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xudmFyIExhenkgPSBSRUFDVF9MQVpZX1RZUEU7XG52YXIgTWVtbyA9IFJFQUNUX01FTU9fVFlQRTtcbnZhciBQb3J0YWwgPSBSRUFDVF9QT1JUQUxfVFlQRTtcbnZhciBQcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG52YXIgU3RyaWN0TW9kZSA9IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG52YXIgU3VzcGVuc2UgPSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xuXG52YXIgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSBmYWxzZTtcblxuLy8gQXN5bmNNb2RlIHNob3VsZCBiZSBkZXByZWNhdGVkXG5mdW5jdGlvbiBpc0FzeW5jTW9kZShvYmplY3QpIHtcbiAge1xuICAgIGlmICghaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUpIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gdHJ1ZTtcbiAgICAgIGxvd1ByaW9yaXR5V2FybmluZyQxKGZhbHNlLCAnVGhlIFJlYWN0SXMuaXNBc3luY01vZGUoKSBhbGlhcyBoYXMgYmVlbiBkZXByZWNhdGVkLCAnICsgJ2FuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUmVhY3QgMTcrLiBVcGRhdGUgeW91ciBjb2RlIHRvIHVzZSAnICsgJ1JlYWN0SXMuaXNDb25jdXJyZW50TW9kZSgpIGluc3RlYWQuIEl0IGhhcyB0aGUgZXhhY3Qgc2FtZSBBUEkuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpc0NvbmN1cnJlbnRNb2RlKG9iamVjdCkgfHwgdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0FTWU5DX01PREVfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRDb25zdW1lcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05URVhUX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRQcm92aWRlcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9WSURFUl9UWVBFO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNGb3J3YXJkUmVmKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG59XG5mdW5jdGlvbiBpc0ZyYWdtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG59XG5mdW5jdGlvbiBpc0xhenkob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTEFaWV9UWVBFO1xufVxuZnVuY3Rpb24gaXNNZW1vKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX01FTU9fVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUG9ydGFsKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BPUlRBTF9UWVBFO1xufVxuZnVuY3Rpb24gaXNQcm9maWxlcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdHJpY3RNb2RlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc1N1c3BlbnNlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG59XG5cbmV4cG9ydHMudHlwZU9mID0gdHlwZU9mO1xuZXhwb3J0cy5Bc3luY01vZGUgPSBBc3luY01vZGU7XG5leHBvcnRzLkNvbmN1cnJlbnRNb2RlID0gQ29uY3VycmVudE1vZGU7XG5leHBvcnRzLkNvbnRleHRDb25zdW1lciA9IENvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuQ29udGV4dFByb3ZpZGVyID0gQ29udGV4dFByb3ZpZGVyO1xuZXhwb3J0cy5FbGVtZW50ID0gRWxlbWVudDtcbmV4cG9ydHMuRm9yd2FyZFJlZiA9IEZvcndhcmRSZWY7XG5leHBvcnRzLkZyYWdtZW50ID0gRnJhZ21lbnQ7XG5leHBvcnRzLkxhenkgPSBMYXp5O1xuZXhwb3J0cy5NZW1vID0gTWVtbztcbmV4cG9ydHMuUG9ydGFsID0gUG9ydGFsO1xuZXhwb3J0cy5Qcm9maWxlciA9IFByb2ZpbGVyO1xuZXhwb3J0cy5TdHJpY3RNb2RlID0gU3RyaWN0TW9kZTtcbmV4cG9ydHMuU3VzcGVuc2UgPSBTdXNwZW5zZTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlID0gaXNWYWxpZEVsZW1lbnRUeXBlO1xuZXhwb3J0cy5pc0FzeW5jTW9kZSA9IGlzQXN5bmNNb2RlO1xuZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlID0gaXNDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXIgPSBpc0NvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXIgPSBpc0NvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuZXhwb3J0cy5pc0ZvcndhcmRSZWYgPSBpc0ZvcndhcmRSZWY7XG5leHBvcnRzLmlzRnJhZ21lbnQgPSBpc0ZyYWdtZW50O1xuZXhwb3J0cy5pc0xhenkgPSBpc0xhenk7XG5leHBvcnRzLmlzTWVtbyA9IGlzTWVtbztcbmV4cG9ydHMuaXNQb3J0YWwgPSBpc1BvcnRhbDtcbmV4cG9ydHMuaXNQcm9maWxlciA9IGlzUHJvZmlsZXI7XG5leHBvcnRzLmlzU3RyaWN0TW9kZSA9IGlzU3RyaWN0TW9kZTtcbmV4cG9ydHMuaXNTdXNwZW5zZSA9IGlzU3VzcGVuc2U7XG4gIH0pKCk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O2Z1bmN0aW9uIHQoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSByOmNhc2UgcTpjYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiB2KGEpe3JldHVybiB0KGEpPT09bX1leHBvcnRzLnR5cGVPZj10O2V4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtcbmV4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9cjtleHBvcnRzLk1lbW89cTtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1xfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1uKX07ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKXx8dChhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT12O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1rfTtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXJ9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cX07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Zn07XG5leHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1wfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKGZvcm1hdCwgc3Vicykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPVxuICAgICAgXCJXYXJuaW5nOiBcIiArXG4gICAgICAoc3Vicy5sZW5ndGggPiAwXG4gICAgICAgID8gZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNbaW5kZXgrK107XG4gICAgICAgICAgfSlcbiAgICAgICAgOiBmb3JtYXQpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgUm91dGVyIC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGVcbiAgICAgIC8vIHN0YWNrIHRyYWNlIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgdHJpZ2dlcmVkIHRoaXMgd2FybmluZy5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtZW1iZXIpIHtcbiAgcHJpbnRXYXJuaW5nKFxuICAgICdQbGVhc2UgdXNlIGBpbXBvcnQgeyAlcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCJgIGluc3RlYWQgb2YgYGltcG9ydCAlcyBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbS9lcy8lc1wiYC4gJyArXG4gICAgICBcIlN1cHBvcnQgZm9yIHRoZSBsYXR0ZXIgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXCIsXG4gICAgW21lbWJlciwgbWVtYmVyXVxuICApO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL3dhcm5BYm91dERlcHJlY2F0ZWRFU01JbXBvcnQuanMiLCJpbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQkJDEuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQkJDEuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkJDEpIHtcbiAgICAhY29udGV4dCQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dCQkMS5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dCQkMS5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0ge1xuICAgIHBhdGg6IG9wdGlvbnNcbiAgfTtcbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkJDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkJDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbihwcm9wcyk7XG5cbiAgICAgICAgaWYgKGNoaWxkcmVuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IF90aGlzLnByb3BzLnBhdGg7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBjaGlsZHJlbiA6IHByb3BzLm1hdGNoID8gY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0JCQxLm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgICAhY29udGV4dCQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQkJDEsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB3aXRoUm91dGVyLCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyL34vaXNhcnJheS9pbmRleC5qcyIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXJvdXRlci9+L3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xudmFyIGNoZWNrUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcycpO1xuXG4vLyBUT0RPOiB0aGlzIGlzIHNwZWNpYWwgYmVjYXVzZSBpdCBnZXRzIGltcG9ydGVkIGR1cmluZyBidWlsZC5cblxudmFyIFJlYWN0VmVyc2lvbiA9ICcxNi44LjYnO1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxudmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcblxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnBvcnRhbCcpIDogMHhlYWNhO1xudmFyIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5mcmFnbWVudCcpIDogMHhlYWNiO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpIDogMHhlYWNjO1xudmFyIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm9maWxlcicpIDogMHhlYWQyO1xudmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm92aWRlcicpIDogMHhlYWNkO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKSA6IDB4ZWFjZTtcblxudmFyIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29uY3VycmVudF9tb2RlJykgOiAweGVhY2Y7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJykgOiAweGVhZDA7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlJykgOiAweGVhZDE7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubWVtbycpIDogMHhlYWQzO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKSA6IDB4ZWFkNDtcblxudmFyIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuXG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKG1heWJlSXRlcmFibGUgPT09IG51bGwgfHwgdHlwZW9mIG1heWJlSXRlcmFibGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIG1heWJlSXRlcmF0b3IgPSBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdIHx8IG1heWJlSXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdO1xuICBpZiAodHlwZW9mIG1heWJlSXRlcmF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvciA9IHZvaWQgMDtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLy8gUmVseWluZyBvbiB0aGUgYGludmFyaWFudCgpYCBpbXBsZW1lbnRhdGlvbiBsZXRzIHVzXG4vLyBwcmVzZXJ2ZSB0aGUgZm9ybWF0IGFuZCBwYXJhbXMgaW4gdGhlIHd3dyBidWlsZHMuXG5cbi8qKlxuICogRm9ya2VkIGZyb20gZmJqcy93YXJuaW5nOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9lNjZiYTIwYWQ1YmU0MzNlYjU0NDIzZjJiMDk3ZDgyOTMyNGQ5ZGU2L3BhY2thZ2VzL2ZianMvc3JjL19fZm9ya3NfXy93YXJuaW5nLmpzXG4gKlxuICogT25seSBjaGFuZ2UgaXMgd2UgdXNlIGNvbnNvbGUud2FybiBpbnN0ZWFkIG9mIGNvbnNvbGUuZXJyb3IsXG4gKiBhbmQgZG8gbm90aGluZyB3aGVuICdjb25zb2xlJyBpcyBub3Qgc3VwcG9ydGVkLlxuICogVGhpcyByZWFsbHkgc2ltcGxpZmllcyB0aGUgY29kZS5cbiAqIC0tLVxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGxvd1ByaW9yaXR5V2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmckMSA9IGxvd1ByaW9yaXR5V2FybmluZztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmdXaXRob3V0U3RhY2sgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICB3YXJuaW5nV2l0aG91dFN0YWNrID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmdXaXRob3V0U3RhY2soY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmIChhcmdzLmxlbmd0aCA+IDgpIHtcbiAgICAgIC8vIENoZWNrIGJlZm9yZSB0aGUgY29uZGl0aW9uIHRvIGNhdGNoIHZpb2xhdGlvbnMgZWFybHkuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dhcm5pbmdXaXRob3V0U3RhY2soKSBjdXJyZW50bHkgc3VwcG9ydHMgYXQgbW9zdCA4IGFyZ3VtZW50cy4nKTtcbiAgICB9XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgYXJnc1dpdGhGb3JtYXQgPSBhcmdzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gJycgKyBpdGVtO1xuICAgICAgfSk7XG4gICAgICBhcmdzV2l0aEZvcm1hdC51bnNoaWZ0KCdXYXJuaW5nOiAnICsgZm9ybWF0KTtcblxuICAgICAgLy8gV2UgaW50ZW50aW9uYWxseSBkb24ndCB1c2Ugc3ByZWFkIChvciAuYXBwbHkpIGRpcmVjdGx5IGJlY2F1c2UgaXRcbiAgICAgIC8vIGJyZWFrcyBJRTk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTM2MTBcbiAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUuZXJyb3IsIGNvbnNvbGUsIGFyZ3NXaXRoRm9ybWF0KTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxudmFyIHdhcm5pbmdXaXRob3V0U3RhY2skMSA9IHdhcm5pbmdXaXRob3V0U3RhY2s7XG5cbnZhciBkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnQgPSB7fTtcblxuZnVuY3Rpb24gd2Fybk5vb3AocHVibGljSW5zdGFuY2UsIGNhbGxlck5hbWUpIHtcbiAge1xuICAgIHZhciBfY29uc3RydWN0b3IgPSBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IF9jb25zdHJ1Y3RvciAmJiAoX2NvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IF9jb25zdHJ1Y3Rvci5uYW1lKSB8fCAnUmVhY3RDbGFzcyc7XG4gICAgdmFyIHdhcm5pbmdLZXkgPSBjb21wb25lbnROYW1lICsgJy4nICsgY2FsbGVyTmFtZTtcbiAgICBpZiAoZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50W3dhcm5pbmdLZXldKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgXCJDYW4ndCBjYWxsICVzIG9uIGEgY29tcG9uZW50IHRoYXQgaXMgbm90IHlldCBtb3VudGVkLiBcIiArICdUaGlzIGlzIGEgbm8tb3AsIGJ1dCBpdCBtaWdodCBpbmRpY2F0ZSBhIGJ1ZyBpbiB5b3VyIGFwcGxpY2F0aW9uLiAnICsgJ0luc3RlYWQsIGFzc2lnbiB0byBgdGhpcy5zdGF0ZWAgZGlyZWN0bHkgb3IgZGVmaW5lIGEgYHN0YXRlID0ge307YCAnICsgJ2NsYXNzIHByb3BlcnR5IHdpdGggdGhlIGRlc2lyZWQgc3RhdGUgaW4gdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjb21wb25lbnROYW1lKTtcbiAgICBkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnRbd2FybmluZ0tleV0gPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgYWJzdHJhY3QgQVBJIGZvciBhbiB1cGRhdGUgcXVldWUuXG4gKi9cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIGNvbXBvbmVudCBpcyB1cGRhdGVkLlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGNhbGxlck5hbWUgbmFtZSBvZiB0aGUgY2FsbGluZyBmdW5jdGlvbiBpbiB0aGUgcHVibGljIEFQSS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBjYWxsZXJOYW1lIG5hbWUgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24gaW4gdGhlIHB1YmxpYyBBUEkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBOYW1lIG9mIHRoZSBjYWxsaW5nIGZ1bmN0aW9uIGluIHRoZSBwdWJsaWMgQVBJLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICB9XG59O1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcbntcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIC8vIElmIGEgY29tcG9uZW50IGhhcyBzdHJpbmcgcmVmcywgd2Ugd2lsbCBhc3NpZ24gYSBkaWZmZXJlbnQgb2JqZWN0IGxhdGVyLlxuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgLy8gV2UgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCB1cGRhdGVyIGJ1dCB0aGUgcmVhbCBvbmUgZ2V0cyBpbmplY3RlZCBieSB0aGVcbiAgLy8gcmVuZGVyZXIuXG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5cbkNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gICEodHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy4nKSA6IHZvaWQgMDtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCAnc2V0U3RhdGUnKTtcbn07XG5cbi8qKlxuICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gKlxuICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gKlxuICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAqXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHVwZGF0ZSBpcyBjb21wbGV0ZS5cbiAqIEBmaW5hbFxuICogQHByb3RlY3RlZFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcywgY2FsbGJhY2ssICdmb3JjZVVwZGF0ZScpO1xufTtcblxuLyoqXG4gKiBEZXByZWNhdGVkIEFQSXMuIFRoZXNlIEFQSXMgdXNlZCB0byBleGlzdCBvbiBjbGFzc2ljIFJlYWN0IGNsYXNzZXMgYnV0IHNpbmNlXG4gKiB3ZSB3b3VsZCBsaWtlIHRvIGRlcHJlY2F0ZSB0aGVtLCB3ZSdyZSBub3QgZ29pbmcgdG8gbW92ZSB0aGVtIG92ZXIgdG8gdGhpc1xuICogbW9kZXJuIGJhc2UgY2xhc3MuIEluc3RlYWQsIHdlIGRlZmluZSBhIGdldHRlciB0aGF0IHdhcm5zIGlmIGl0J3MgYWNjZXNzZWQuXG4gKi9cbntcbiAgdmFyIGRlcHJlY2F0ZWRBUElzID0ge1xuICAgIGlzTW91bnRlZDogWydpc01vdW50ZWQnLCAnSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gJyArICdjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXVxuICB9O1xuICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGluZm8pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvd1ByaW9yaXR5V2FybmluZyQxKGZhbHNlLCAnJXMoLi4uKSBpcyBkZXByZWNhdGVkIGluIHBsYWluIEphdmFTY3JpcHQgUmVhY3QgY2xhc3Nlcy4gJXMnLCBpbmZvWzBdLCBpbmZvWzFdKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIgZm5OYW1lIGluIGRlcHJlY2F0ZWRBUElzKSB7XG4gICAgaWYgKGRlcHJlY2F0ZWRBUElzLmhhc093blByb3BlcnR5KGZuTmFtZSkpIHtcbiAgICAgIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyhmbk5hbWUsIGRlcHJlY2F0ZWRBUElzW2ZuTmFtZV0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBDb21wb25lbnREdW1teSgpIHt9XG5Db21wb25lbnREdW1teS5wcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuXG4vKipcbiAqIENvbnZlbmllbmNlIGNvbXBvbmVudCB3aXRoIGRlZmF1bHQgc2hhbGxvdyBlcXVhbGl0eSBjaGVjayBmb3Igc0NVLlxuICovXG5mdW5jdGlvbiBQdXJlQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgLy8gSWYgYSBjb21wb25lbnQgaGFzIHN0cmluZyByZWZzLCB3ZSB3aWxsIGFzc2lnbiBhIGRpZmZlcmVudCBvYmplY3QgbGF0ZXIuXG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG52YXIgcHVyZUNvbXBvbmVudFByb3RvdHlwZSA9IFB1cmVDb21wb25lbnQucHJvdG90eXBlID0gbmV3IENvbXBvbmVudER1bW15KCk7XG5wdXJlQ29tcG9uZW50UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUHVyZUNvbXBvbmVudDtcbi8vIEF2b2lkIGFuIGV4dHJhIHByb3RvdHlwZSBqdW1wIGZvciB0aGVzZSBtZXRob2RzLlxuX2Fzc2lnbihwdXJlQ29tcG9uZW50UHJvdG90eXBlLCBDb21wb25lbnQucHJvdG90eXBlKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgPSB0cnVlO1xuXG4vLyBhbiBpbW11dGFibGUgb2JqZWN0IHdpdGggYSBzaW5nbGUgbXV0YWJsZSB2YWx1ZVxuZnVuY3Rpb24gY3JlYXRlUmVmKCkge1xuICB2YXIgcmVmT2JqZWN0ID0ge1xuICAgIGN1cnJlbnQ6IG51bGxcbiAgfTtcbiAge1xuICAgIE9iamVjdC5zZWFsKHJlZk9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlZk9iamVjdDtcbn1cblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBkaXNwYXRjaGVyLlxuICovXG52YXIgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciA9IHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAdHlwZSB7UmVhY3RDb21wb25lbnR9XG4gICAqL1xuICBjdXJyZW50OiBudWxsXG59O1xuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICpcbiAqIFRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBjb21wb25lbnQgd2hvIHNob3VsZCBvd24gYW55IGNvbXBvbmVudHMgdGhhdCBhcmVcbiAqIGN1cnJlbnRseSBiZWluZyBjb25zdHJ1Y3RlZC5cbiAqL1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcbn07XG5cbnZhciBCRUZPUkVfU0xBU0hfUkUgPSAvXiguKilbXFxcXFxcL10vO1xuXG52YXIgZGVzY3JpYmVDb21wb25lbnRGcmFtZSA9IGZ1bmN0aW9uIChuYW1lLCBzb3VyY2UsIG93bmVyTmFtZSkge1xuICB2YXIgc291cmNlSW5mbyA9ICcnO1xuICBpZiAoc291cmNlKSB7XG4gICAgdmFyIHBhdGggPSBzb3VyY2UuZmlsZU5hbWU7XG4gICAgdmFyIGZpbGVOYW1lID0gcGF0aC5yZXBsYWNlKEJFRk9SRV9TTEFTSF9SRSwgJycpO1xuICAgIHtcbiAgICAgIC8vIEluIERFViwgaW5jbHVkZSBjb2RlIGZvciBhIGNvbW1vbiBzcGVjaWFsIGNhc2U6XG4gICAgICAvLyBwcmVmZXIgXCJmb2xkZXIvaW5kZXguanNcIiBpbnN0ZWFkIG9mIGp1c3QgXCJpbmRleC5qc1wiLlxuICAgICAgaWYgKC9eaW5kZXhcXC4vLnRlc3QoZmlsZU5hbWUpKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHBhdGgubWF0Y2goQkVGT1JFX1NMQVNIX1JFKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIHBhdGhCZWZvcmVTbGFzaCA9IG1hdGNoWzFdO1xuICAgICAgICAgIGlmIChwYXRoQmVmb3JlU2xhc2gpIHtcbiAgICAgICAgICAgIHZhciBmb2xkZXJOYW1lID0gcGF0aEJlZm9yZVNsYXNoLnJlcGxhY2UoQkVGT1JFX1NMQVNIX1JFLCAnJyk7XG4gICAgICAgICAgICBmaWxlTmFtZSA9IGZvbGRlck5hbWUgKyAnLycgKyBmaWxlTmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlSW5mbyA9ICcgKGF0ICcgKyBmaWxlTmFtZSArICc6JyArIHNvdXJjZS5saW5lTnVtYmVyICsgJyknO1xuICB9IGVsc2UgaWYgKG93bmVyTmFtZSkge1xuICAgIHNvdXJjZUluZm8gPSAnIChjcmVhdGVkIGJ5ICcgKyBvd25lck5hbWUgKyAnKSc7XG4gIH1cbiAgcmV0dXJuICdcXG4gICAgaW4gJyArIChuYW1lIHx8ICdVbmtub3duJykgKyBzb3VyY2VJbmZvO1xufTtcblxudmFyIFJlc29sdmVkID0gMTtcblxuXG5mdW5jdGlvbiByZWZpbmVSZXNvbHZlZExhenlDb21wb25lbnQobGF6eUNvbXBvbmVudCkge1xuICByZXR1cm4gbGF6eUNvbXBvbmVudC5fc3RhdHVzID09PSBSZXNvbHZlZCA/IGxhenlDb21wb25lbnQuX3Jlc3VsdCA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFdyYXBwZWROYW1lKG91dGVyVHlwZSwgaW5uZXJUeXBlLCB3cmFwcGVyTmFtZSkge1xuICB2YXIgZnVuY3Rpb25OYW1lID0gaW5uZXJUeXBlLmRpc3BsYXlOYW1lIHx8IGlubmVyVHlwZS5uYW1lIHx8ICcnO1xuICByZXR1cm4gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lIHx8IChmdW5jdGlvbk5hbWUgIT09ICcnID8gd3JhcHBlck5hbWUgKyAnKCcgKyBmdW5jdGlvbk5hbWUgKyAnKScgOiB3cmFwcGVyTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUodHlwZSkge1xuICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgLy8gSG9zdCByb290LCB0ZXh0IG5vZGUgb3IganVzdCBpbnZhbGlkIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAge1xuICAgIGlmICh0eXBlb2YgdHlwZS50YWcgPT09ICdudW1iZXInKSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdSZWNlaXZlZCBhbiB1bmV4cGVjdGVkIG9iamVjdCBpbiBnZXRDb21wb25lbnROYW1lKCkuICcgKyAnVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgbnVsbDtcbiAgfVxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTpcbiAgICAgIHJldHVybiAnQ29uY3VycmVudE1vZGUnO1xuICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgIHJldHVybiAnRnJhZ21lbnQnO1xuICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICByZXR1cm4gJ1BvcnRhbCc7XG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuICdQcm9maWxlcic7XG4gICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgcmV0dXJuICdTdHJpY3RNb2RlJztcbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N1c3BlbnNlJztcbiAgfVxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgcmV0dXJuICdDb250ZXh0LkNvbnN1bWVyJztcbiAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgcmV0dXJuICdDb250ZXh0LlByb3ZpZGVyJztcbiAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgcmV0dXJuIGdldFdyYXBwZWROYW1lKHR5cGUsIHR5cGUucmVuZGVyLCAnRm9yd2FyZFJlZicpO1xuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lKHR5cGUudHlwZSk7XG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciB0aGVuYWJsZSA9IHR5cGU7XG4gICAgICAgICAgdmFyIHJlc29sdmVkVGhlbmFibGUgPSByZWZpbmVSZXNvbHZlZExhenlDb21wb25lbnQodGhlbmFibGUpO1xuICAgICAgICAgIGlmIChyZXNvbHZlZFRoZW5hYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZShyZXNvbHZlZFRoZW5hYmxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0ge307XG5cbnZhciBjdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCA9IG51bGw7XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpIHtcbiAge1xuICAgIGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50ID0gZWxlbWVudDtcbiAgfVxufVxuXG57XG4gIC8vIFN0YWNrIGltcGxlbWVudGF0aW9uIGluamVjdGVkIGJ5IHRoZSBjdXJyZW50IHJlbmRlcmVyLlxuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldEN1cnJlbnRTdGFjayA9IG51bGw7XG5cbiAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRTdGFja0FkZGVuZHVtID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGFjayA9ICcnO1xuXG4gICAgLy8gQWRkIGFuIGV4dHJhIHRvcCBmcmFtZSB3aGlsZSBhbiBlbGVtZW50IGlzIGJlaW5nIHZhbGlkYXRlZFxuICAgIGlmIChjdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50LnR5cGUpO1xuICAgICAgdmFyIG93bmVyID0gY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQuX293bmVyO1xuICAgICAgc3RhY2sgKz0gZGVzY3JpYmVDb21wb25lbnRGcmFtZShuYW1lLCBjdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudC5fc291cmNlLCBvd25lciAmJiBnZXRDb21wb25lbnROYW1lKG93bmVyLnR5cGUpKTtcbiAgICB9XG5cbiAgICAvLyBEZWxlZ2F0ZSB0byB0aGUgaW5qZWN0ZWQgcmVuZGVyZXItc3BlY2lmaWMgaW1wbGVtZW50YXRpb25cbiAgICB2YXIgaW1wbCA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0Q3VycmVudFN0YWNrO1xuICAgIGlmIChpbXBsKSB7XG4gICAgICBzdGFjayArPSBpbXBsKCkgfHwgJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrO1xuICB9O1xufVxuXG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSB7XG4gIFJlYWN0Q3VycmVudERpc3BhdGNoZXI6IFJlYWN0Q3VycmVudERpc3BhdGNoZXIsXG4gIFJlYWN0Q3VycmVudE93bmVyOiBSZWFjdEN1cnJlbnRPd25lcixcbiAgLy8gVXNlZCBieSByZW5kZXJlcnMgdG8gYXZvaWQgYnVuZGxpbmcgb2JqZWN0LWFzc2lnbiB0d2ljZSBpbiBVTUQgYnVuZGxlczpcbiAgYXNzaWduOiBfYXNzaWduXG59O1xuXG57XG4gIF9hc3NpZ24oUmVhY3RTaGFyZWRJbnRlcm5hbHMsIHtcbiAgICAvLyBUaGVzZSBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHByb2R1Y3Rpb24uXG4gICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTogUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSxcbiAgICAvLyBTaGltIGZvciBSZWFjdCBET00gMTYuMC4wIHdoaWNoIHN0aWxsIGRlc3RydWN0dXJlZCAoYnV0IG5vdCB1c2VkKSB0aGlzLlxuICAgIC8vIFRPRE86IHJlbW92ZSBpbiBSZWFjdCAxNy4wLlxuICAgIFJlYWN0Q29tcG9uZW50VHJlZUhvb2s6IHt9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IHdhcm5pbmdXaXRob3V0U3RhY2skMTtcblxue1xuICB3YXJuaW5nID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG4gICAgdmFyIHN0YWNrID0gUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRTdGFja0FkZGVuZHVtKCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3dhcm5pbmctYW5kLWludmFyaWFudC1hcmdzXG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMS5hcHBseSh1bmRlZmluZWQsIFtmYWxzZSwgZm9ybWF0ICsgJyVzJ10uY29uY2F0KGFyZ3MsIFtzdGFja10pKTtcbiAgfTtcbn1cblxudmFyIHdhcm5pbmckMSA9IHdhcm5pbmc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAga2V5OiB0cnVlLFxuICByZWY6IHRydWUsXG4gIF9fc2VsZjogdHJ1ZSxcbiAgX19zb3VyY2U6IHRydWVcbn07XG5cbnZhciBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHZvaWQgMDtcbnZhciBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHZvaWQgMDtcblxuZnVuY3Rpb24gaGFzVmFsaWRSZWYoY29uZmlnKSB7XG4gIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdyZWYnKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAncmVmJykuZ2V0O1xuICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEtleShjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ2tleScpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdrZXknKS5nZXQ7XG4gICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb25maWcua2V5ICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgd2FybkFib3V0QWNjZXNzaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24pIHtcbiAgICAgIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKTtcbiAgICB9XG4gIH07XG4gIHdhcm5BYm91dEFjY2Vzc2luZ0tleS5pc1JlYWN0V2FybmluZyA9IHRydWU7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2tleScsIHtcbiAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ0tleSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgd2FybkFib3V0QWNjZXNzaW5nUmVmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24pIHtcbiAgICAgIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKTtcbiAgICB9XG4gIH07XG4gIHdhcm5BYm91dEFjY2Vzc2luZ1JlZi5pc1JlYWN0V2FybmluZyA9IHRydWU7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ3JlZicsIHtcbiAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ1JlZixcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IFJlYWN0IGVsZW1lbnQuIFRoaXMgbm8gbG9uZ2VyIGFkaGVyZXMgdG9cbiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBubyBpbnN0YW5jZW9mIGNoZWNrXG4gKiB3aWxsIHdvcmsuIEluc3RlYWQgdGVzdCAkJHR5cGVvZiBmaWVsZCBhZ2FpbnN0IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSB0byBjaGVja1xuICogaWYgc29tZXRoaW5nIGlzIGEgUmVhY3QgRWxlbWVudC5cbiAqXG4gKiBAcGFyYW0geyp9IHR5cGVcbiAqIEBwYXJhbSB7Kn0ga2V5XG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlZlxuICogQHBhcmFtIHsqfSBzZWxmIEEgKnRlbXBvcmFyeSogaGVscGVyIHRvIGRldGVjdCBwbGFjZXMgd2hlcmUgYHRoaXNgIGlzXG4gKiBkaWZmZXJlbnQgZnJvbSB0aGUgYG93bmVyYCB3aGVuIFJlYWN0LmNyZWF0ZUVsZW1lbnQgaXMgY2FsbGVkLCBzbyB0aGF0IHdlXG4gKiBjYW4gd2Fybi4gV2Ugd2FudCB0byBnZXQgcmlkIG9mIG93bmVyIGFuZCByZXBsYWNlIHN0cmluZyBgcmVmYHMgd2l0aCBhcnJvd1xuICogZnVuY3Rpb25zLCBhbmQgYXMgbG9uZyBhcyBgdGhpc2AgYW5kIG93bmVyIGFyZSB0aGUgc2FtZSwgdGhlcmUgd2lsbCBiZSBub1xuICogY2hhbmdlIGluIGJlaGF2aW9yLlxuICogQHBhcmFtIHsqfSBzb3VyY2UgQW4gYW5ub3RhdGlvbiBvYmplY3QgKGFkZGVkIGJ5IGEgdHJhbnNwaWxlciBvciBvdGhlcndpc2UpXG4gKiBpbmRpY2F0aW5nIGZpbGVuYW1lLCBsaW5lIG51bWJlciwgYW5kL29yIG90aGVyIGluZm9ybWF0aW9uLlxuICogQHBhcmFtIHsqfSBvd25lclxuICogQHBhcmFtIHsqfSBwcm9wc1xuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKSB7XG4gIHZhciBlbGVtZW50ID0ge1xuICAgIC8vIFRoaXMgdGFnIGFsbG93cyB1cyB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzIGFzIGEgUmVhY3QgRWxlbWVudFxuICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG5cbiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50XG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHJlZixcbiAgICBwcm9wczogcHJvcHMsXG5cbiAgICAvLyBSZWNvcmQgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhpcyBlbGVtZW50LlxuICAgIF9vd25lcjogb3duZXJcbiAgfTtcblxuICB7XG4gICAgLy8gVGhlIHZhbGlkYXRpb24gZmxhZyBpcyBjdXJyZW50bHkgbXV0YXRpdmUuIFdlIHB1dCBpdCBvblxuICAgIC8vIGFuIGV4dGVybmFsIGJhY2tpbmcgc3RvcmUgc28gdGhhdCB3ZSBjYW4gZnJlZXplIHRoZSB3aG9sZSBvYmplY3QuXG4gICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIFdlYWtNYXAgb25jZSB0aGV5IGFyZSBpbXBsZW1lbnRlZCBpblxuICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLlxuICAgIGVsZW1lbnQuX3N0b3JlID0ge307XG5cbiAgICAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQuX3N0b3JlLCAndmFsaWRhdGVkJywge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogZmFsc2VcbiAgICB9KTtcbiAgICAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc2VsZicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBzZWxmXG4gICAgfSk7XG4gICAgLy8gVHdvIGVsZW1lbnRzIGNyZWF0ZWQgaW4gdHdvIGRpZmZlcmVudCBwbGFjZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWRcbiAgICAvLyBlcXVhbCBmb3IgdGVzdGluZyBwdXJwb3NlcyBhbmQgdGhlcmVmb3JlIHdlIGhpZGUgaXQgZnJvbSBlbnVtZXJhdGlvbi5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zb3VyY2UnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZTogc291cmNlXG4gICAgfSk7XG4gICAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICAgIE9iamVjdC5mcmVlemUoZWxlbWVudC5wcm9wcyk7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBSZWFjdEVsZW1lbnQgb2YgdGhlIGdpdmVuIHR5cGUuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2NyZWF0ZWVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZSA9IHZvaWQgMDtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBwcm9wcyA9IHt9O1xuXG4gIHZhciBrZXkgPSBudWxsO1xuICB2YXIgcmVmID0gbnVsbDtcbiAgdmFyIHNlbGYgPSBudWxsO1xuICB2YXIgc291cmNlID0gbnVsbDtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICB9XG4gICAgaWYgKGhhc1ZhbGlkS2V5KGNvbmZpZykpIHtcbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG5cbiAgICBzZWxmID0gY29uZmlnLl9fc2VsZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NlbGY7XG4gICAgc291cmNlID0gY29uZmlnLl9fc291cmNlID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc291cmNlO1xuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHtcbiAgICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICAgIE9iamVjdC5mcmVlemUoY2hpbGRBcnJheSk7XG4gICAgICB9XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlLmRlZmF1bHRQcm9wcztcbiAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHtcbiAgICBpZiAoa2V5IHx8IHJlZikge1xuICAgICAgdmFyIGRpc3BsYXlOYW1lID0gdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgPyB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCAnVW5rbm93bicgOiB0eXBlO1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICBkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlZikge1xuICAgICAgICBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIFJlYWN0RWxlbWVudHMgb2YgYSBnaXZlbiB0eXBlLlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNjcmVhdGVmYWN0b3J5XG4gKi9cblxuXG5mdW5jdGlvbiBjbG9uZUFuZFJlcGxhY2VLZXkob2xkRWxlbWVudCwgbmV3S2V5KSB7XG4gIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50KG9sZEVsZW1lbnQudHlwZSwgbmV3S2V5LCBvbGRFbGVtZW50LnJlZiwgb2xkRWxlbWVudC5fc2VsZiwgb2xkRWxlbWVudC5fc291cmNlLCBvbGRFbGVtZW50Ll9vd25lciwgb2xkRWxlbWVudC5wcm9wcyk7XG5cbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59XG5cbi8qKlxuICogQ2xvbmUgYW5kIHJldHVybiBhIG5ldyBSZWFjdEVsZW1lbnQgdXNpbmcgZWxlbWVudCBhcyB0aGUgc3RhcnRpbmcgcG9pbnQuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2Nsb25lZWxlbWVudFxuICovXG5mdW5jdGlvbiBjbG9uZUVsZW1lbnQoZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICAhIShlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IHVuZGVmaW5lZCkgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCAlcy4nLCBlbGVtZW50KSA6IHZvaWQgMDtcblxuICB2YXIgcHJvcE5hbWUgPSB2b2lkIDA7XG5cbiAgLy8gT3JpZ2luYWwgcHJvcHMgYXJlIGNvcGllZFxuICB2YXIgcHJvcHMgPSBfYXNzaWduKHt9LCBlbGVtZW50LnByb3BzKTtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBrZXkgPSBlbGVtZW50LmtleTtcbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICAvLyBTZWxmIGlzIHByZXNlcnZlZCBzaW5jZSB0aGUgb3duZXIgaXMgcHJlc2VydmVkLlxuICB2YXIgc2VsZiA9IGVsZW1lbnQuX3NlbGY7XG4gIC8vIFNvdXJjZSBpcyBwcmVzZXJ2ZWQgc2luY2UgY2xvbmVFbGVtZW50IGlzIHVubGlrZWx5IHRvIGJlIHRhcmdldGVkIGJ5IGFcbiAgLy8gdHJhbnNwaWxlciwgYW5kIHRoZSBvcmlnaW5hbCBzb3VyY2UgaXMgcHJvYmFibHkgYSBiZXR0ZXIgaW5kaWNhdG9yIG9mIHRoZVxuICAvLyB0cnVlIG93bmVyLlxuICB2YXIgc291cmNlID0gZWxlbWVudC5fc291cmNlO1xuXG4gIC8vIE93bmVyIHdpbGwgYmUgcHJlc2VydmVkLCB1bmxlc3MgcmVmIGlzIG92ZXJyaWRkZW5cbiAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgaWYgKGhhc1ZhbGlkUmVmKGNvbmZpZykpIHtcbiAgICAgIC8vIFNpbGVudGx5IHN0ZWFsIHRoZSByZWYgZnJvbSB0aGUgcGFyZW50LlxuICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICAgIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICB9XG4gICAgaWYgKGhhc1ZhbGlkS2V5KGNvbmZpZykpIHtcbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG5cbiAgICAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBvdmVycmlkZSBleGlzdGluZyBwcm9wc1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSB2b2lkIDA7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAmJiBlbGVtZW50LnR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgICBkZWZhdWx0UHJvcHMgPSBlbGVtZW50LnR5cGUuZGVmYXVsdFByb3BzO1xuICAgIH1cbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBpZiAoY29uZmlnW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzXG4gICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hpbGRyZW4gY2FuIGJlIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIGFuZCB0aG9zZSBhcmUgdHJhbnNmZXJyZWQgb250b1xuICAvLyB0aGUgbmV3bHkgYWxsb2NhdGVkIHByb3BzIG9iamVjdC5cbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0RWxlbWVudChlbGVtZW50LnR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcyk7XG59XG5cbi8qKlxuICogVmVyaWZpZXMgdGhlIG9iamVjdCBpcyBhIFJlYWN0RWxlbWVudC5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjaXN2YWxpZGVsZW1lbnRcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgUmVhY3RFbGVtZW50LlxuICogQGZpbmFsXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufVxuXG52YXIgU0VQQVJBVE9SID0gJy4nO1xudmFyIFNVQlNFUEFSQVRPUiA9ICc6JztcblxuLyoqXG4gKiBFc2NhcGUgYW5kIHdyYXAga2V5IHNvIGl0IGlzIHNhZmUgdG8gdXNlIGFzIGEgcmVhY3RpZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdG8gYmUgZXNjYXBlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGVzY2FwZWQga2V5LlxuICovXG5mdW5jdGlvbiBlc2NhcGUoa2V5KSB7XG4gIHZhciBlc2NhcGVSZWdleCA9IC9bPTpdL2c7XG4gIHZhciBlc2NhcGVyTG9va3VwID0ge1xuICAgICc9JzogJz0wJyxcbiAgICAnOic6ICc9MidcbiAgfTtcbiAgdmFyIGVzY2FwZWRTdHJpbmcgPSAoJycgKyBrZXkpLnJlcGxhY2UoZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBlc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgfSk7XG5cbiAgcmV0dXJuICckJyArIGVzY2FwZWRTdHJpbmc7XG59XG5cbi8qKlxuICogVE9ETzogVGVzdCB0aGF0IGEgc2luZ2xlIGNoaWxkIGFuZCBhbiBhcnJheSB3aXRoIG9uZSBpdGVtIGhhdmUgdGhlIHNhbWUga2V5XG4gKiBwYXR0ZXJuLlxuICovXG5cbnZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG5cbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCA9IC9cXC8rL2c7XG5mdW5jdGlvbiBlc2NhcGVVc2VyUHJvdmlkZWRLZXkodGV4dCkge1xuICByZXR1cm4gKCcnICsgdGV4dCkucmVwbGFjZSh1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCwgJyQmLycpO1xufVxuXG52YXIgUE9PTF9TSVpFID0gMTA7XG52YXIgdHJhdmVyc2VDb250ZXh0UG9vbCA9IFtdO1xuZnVuY3Rpb24gZ2V0UG9vbGVkVHJhdmVyc2VDb250ZXh0KG1hcFJlc3VsdCwga2V5UHJlZml4LCBtYXBGdW5jdGlvbiwgbWFwQ29udGV4dCkge1xuICBpZiAodHJhdmVyc2VDb250ZXh0UG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gdHJhdmVyc2VDb250ZXh0UG9vbC5wb3AoKTtcbiAgICB0cmF2ZXJzZUNvbnRleHQucmVzdWx0ID0gbWFwUmVzdWx0O1xuICAgIHRyYXZlcnNlQ29udGV4dC5rZXlQcmVmaXggPSBrZXlQcmVmaXg7XG4gICAgdHJhdmVyc2VDb250ZXh0LmZ1bmMgPSBtYXBGdW5jdGlvbjtcbiAgICB0cmF2ZXJzZUNvbnRleHQuY29udGV4dCA9IG1hcENvbnRleHQ7XG4gICAgdHJhdmVyc2VDb250ZXh0LmNvdW50ID0gMDtcbiAgICByZXR1cm4gdHJhdmVyc2VDb250ZXh0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHQ6IG1hcFJlc3VsdCxcbiAgICAgIGtleVByZWZpeDoga2V5UHJlZml4LFxuICAgICAgZnVuYzogbWFwRnVuY3Rpb24sXG4gICAgICBjb250ZXh0OiBtYXBDb250ZXh0LFxuICAgICAgY291bnQ6IDBcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbGVhc2VUcmF2ZXJzZUNvbnRleHQodHJhdmVyc2VDb250ZXh0KSB7XG4gIHRyYXZlcnNlQ29udGV4dC5yZXN1bHQgPSBudWxsO1xuICB0cmF2ZXJzZUNvbnRleHQua2V5UHJlZml4ID0gbnVsbDtcbiAgdHJhdmVyc2VDb250ZXh0LmZ1bmMgPSBudWxsO1xuICB0cmF2ZXJzZUNvbnRleHQuY29udGV4dCA9IG51bGw7XG4gIHRyYXZlcnNlQ29udGV4dC5jb3VudCA9IDA7XG4gIGlmICh0cmF2ZXJzZUNvbnRleHRQb29sLmxlbmd0aCA8IFBPT0xfU0laRSkge1xuICAgIHRyYXZlcnNlQ29udGV4dFBvb2wucHVzaCh0cmF2ZXJzZUNvbnRleHQpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0geyFzdHJpbmd9IG5hbWVTb0ZhciBOYW1lIG9mIHRoZSBrZXkgcGF0aCBzbyBmYXIuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZWFjaCBjaGlsZCBmb3VuZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBVc2VkIHRvIHBhc3MgaW5mb3JtYXRpb24gdGhyb3VnaG91dCB0aGUgdHJhdmVyc2FsXG4gKiBwcm9jZXNzLlxuICogQHJldHVybiB7IW51bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiBpbiB0aGlzIHN1YnRyZWUuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCBuYW1lU29GYXIsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGRyZW47XG5cbiAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGUgPT09ICdib29sZWFuJykge1xuICAgIC8vIEFsbCBvZiB0aGUgYWJvdmUgYXJlIHBlcmNlaXZlZCBhcyBudWxsLlxuICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgfVxuXG4gIHZhciBpbnZva2VDYWxsYmFjayA9IGZhbHNlO1xuXG4gIGlmIChjaGlsZHJlbiA9PT0gbnVsbCkge1xuICAgIGludm9rZUNhbGxiYWNrID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBpbnZva2VDYWxsYmFjayA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgc3dpdGNoIChjaGlsZHJlbi4kJHR5cGVvZikge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgICBpbnZva2VDYWxsYmFjayA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaW52b2tlQ2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkcmVuLFxuICAgIC8vIElmIGl0J3MgdGhlIG9ubHkgY2hpbGQsIHRyZWF0IHRoZSBuYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIGFuIGFycmF5XG4gICAgLy8gc28gdGhhdCBpdCdzIGNvbnNpc3RlbnQgaWYgdGhlIG51bWJlciBvZiBjaGlsZHJlbiBncm93cy5cbiAgICBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0Zhcik7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICB2YXIgY2hpbGQgPSB2b2lkIDA7XG4gIHZhciBuZXh0TmFtZSA9IHZvaWQgMDtcbiAgdmFyIHN1YnRyZWVDb3VudCA9IDA7IC8vIENvdW50IG9mIGNoaWxkcmVuIGZvdW5kIGluIHRoZSBjdXJyZW50IHN1YnRyZWUuXG4gIHZhciBuZXh0TmFtZVByZWZpeCA9IG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgOiBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1I7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpO1xuICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihjaGlsZHJlbik7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB7XG4gICAgICAgIC8vIFdhcm4gYWJvdXQgdXNpbmcgTWFwcyBhcyBjaGlsZHJlblxuICAgICAgICBpZiAoaXRlcmF0b3JGbiA9PT0gY2hpbGRyZW4uZW50cmllcykge1xuICAgICAgICAgICFkaWRXYXJuQWJvdXRNYXBzID8gd2FybmluZyQxKGZhbHNlLCAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyB1bnN1cHBvcnRlZCBhbmQgd2lsbCBsaWtlbHkgeWllbGQgJyArICd1bmV4cGVjdGVkIHJlc3VsdHMuIENvbnZlcnQgaXQgdG8gYSBzZXF1ZW5jZS9pdGVyYWJsZSBvZiBrZXllZCAnICsgJ1JlYWN0RWxlbWVudHMgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwoY2hpbGRyZW4pO1xuICAgICAgdmFyIHN0ZXAgPSB2b2lkIDA7XG4gICAgICB2YXIgaWkgPSAwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICBjaGlsZCA9IHN0ZXAudmFsdWU7XG4gICAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGlpKyspO1xuICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgYWRkZW5kdW0gPSAnJztcbiAgICAgIHtcbiAgICAgICAgYWRkZW5kdW0gPSAnIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgJyArICdpbnN0ZWFkLicgKyBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9ICcnICsgY2hpbGRyZW47XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsICdPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICVzKS4lcycsIGNoaWxkcmVuU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZHJlblN0cmluZywgYWRkZW5kdW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJ0cmVlQ291bnQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCwgYnV0XG4gKiBtaWdodCBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIGF0dHJpYnV0ZXM6XG4gKlxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCAuLi4pYFxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmxlZnRQYW5lbENoaWxkcmVuLCAuLi4pYFxuICpcbiAqIFRoZSBgdHJhdmVyc2VDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCB0aHJvdWdoIHRoZVxuICogZW50aXJlIHRyYXZlcnNhbC4gSXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgYWNjdW11bGF0aW9ucyBvciBhbnl0aGluZyBlbHNlIHRoYXRcbiAqIHRoZSBjYWxsYmFjayBtaWdodCBmaW5kIHJlbGV2YW50LlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgb2JqZWN0LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIFRvIGludm9rZSB1cG9uIHRyYXZlcnNpbmcgZWFjaCBjaGlsZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IGZvciB0cmF2ZXJzYWwuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCAnJywgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBrZXkgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyBhIGNvbXBvbmVudCB3aXRoaW4gYSBzZXQuXG4gKlxuICogQHBhcmFtIHsqfSBjb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBjb3VsZCBjb250YWluIGEgbWFudWFsIGtleS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCB0aGF0IGlzIHVzZWQgaWYgYSBtYW51YWwga2V5IGlzIG5vdCBwcm92aWRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcbiAgLy8gRG8gc29tZSB0eXBlY2hlY2tpbmcgaGVyZSBzaW5jZSB3ZSBjYWxsIHRoaXMgYmxpbmRseS4gV2Ugd2FudCB0byBlbnN1cmVcbiAgLy8gdGhhdCB3ZSBkb24ndCBibG9jayBwb3RlbnRpYWwgZnV0dXJlIEVTIEFQSXMuXG4gIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSAnb2JqZWN0JyAmJiBjb21wb25lbnQgIT09IG51bGwgJiYgY29tcG9uZW50LmtleSAhPSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXQga2V5XG4gICAgcmV0dXJuIGVzY2FwZShjb21wb25lbnQua2V5KTtcbiAgfVxuICAvLyBJbXBsaWNpdCBrZXkgZGV0ZXJtaW5lZCBieSB0aGUgaW5kZXggaW4gdGhlIHNldFxuICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGQoYm9va0tlZXBpbmcsIGNoaWxkLCBuYW1lKSB7XG4gIHZhciBmdW5jID0gYm9va0tlZXBpbmcuZnVuYyxcbiAgICAgIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuXG4gIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG59XG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdGNoaWxkcmVuZm9yZWFjaFxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmb3JFYWNoRnVuY1xuICogQHBhcmFtIHsqfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IGZvciBmb3JFYWNoQ29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IGdldFBvb2xlZFRyYXZlcnNlQ29udGV4dChudWxsLCBudWxsLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIHJlbGVhc2VUcmF2ZXJzZUNvbnRleHQodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gIHZhciByZXN1bHQgPSBib29rS2VlcGluZy5yZXN1bHQsXG4gICAgICBrZXlQcmVmaXggPSBib29rS2VlcGluZy5rZXlQcmVmaXgsXG4gICAgICBmdW5jID0gYm9va0tlZXBpbmcuZnVuYyxcbiAgICAgIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuXG5cbiAgdmFyIG1hcHBlZENoaWxkID0gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkobWFwcGVkQ2hpbGQpKSB7XG4gICAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChtYXBwZWRDaGlsZCwgcmVzdWx0LCBjaGlsZEtleSwgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKG1hcHBlZENoaWxkICE9IG51bGwpIHtcbiAgICBpZiAoaXNWYWxpZEVsZW1lbnQobWFwcGVkQ2hpbGQpKSB7XG4gICAgICBtYXBwZWRDaGlsZCA9IGNsb25lQW5kUmVwbGFjZUtleShtYXBwZWRDaGlsZCxcbiAgICAgIC8vIEtlZXAgYm90aCB0aGUgKG1hcHBlZCkgYW5kIG9sZCBrZXlzIGlmIHRoZXkgZGlmZmVyLCBqdXN0IGFzXG4gICAgICAvLyB0cmF2ZXJzZUFsbENoaWxkcmVuIHVzZWQgdG8gZG8gZm9yIG9iamVjdHMgYXMgY2hpbGRyZW5cbiAgICAgIGtleVByZWZpeCArIChtYXBwZWRDaGlsZC5rZXkgJiYgKCFjaGlsZCB8fCBjaGlsZC5rZXkgIT09IG1hcHBlZENoaWxkLmtleSkgPyBlc2NhcGVVc2VyUHJvdmlkZWRLZXkobWFwcGVkQ2hpbGQua2V5KSArICcvJyA6ICcnKSArIGNoaWxkS2V5KTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2gobWFwcGVkQ2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIGFycmF5LCBwcmVmaXgsIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGVzY2FwZWRQcmVmaXggPSAnJztcbiAgaWYgKHByZWZpeCAhPSBudWxsKSB7XG4gICAgZXNjYXBlZFByZWZpeCA9IGVzY2FwZVVzZXJQcm92aWRlZEtleShwcmVmaXgpICsgJy8nO1xuICB9XG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBnZXRQb29sZWRUcmF2ZXJzZUNvbnRleHQoYXJyYXksIGVzY2FwZWRQcmVmaXgsIGZ1bmMsIGNvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0LCB0cmF2ZXJzZUNvbnRleHQpO1xuICByZWxlYXNlVHJhdmVyc2VDb250ZXh0KHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbi8qKlxuICogTWFwcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdGNoaWxkcmVubWFwXG4gKlxuICogVGhlIHByb3ZpZGVkIG1hcEZ1bmN0aW9uKGNoaWxkLCBrZXksIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZnVuYyBUaGUgbWFwIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IENvbnRleHQgZm9yIG1hcEZ1bmN0aW9uLlxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGNoaWxkcmVuLCByZXN1bHQsIG51bGwsIGZ1bmMsIGNvbnRleHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvdW50IHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhc1xuICogYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y2hpbGRyZW5jb3VudFxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuLlxuICovXG5mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sIG51bGwpO1xufVxuXG4vKipcbiAqIEZsYXR0ZW4gYSBjaGlsZHJlbiBvYmplY3QgKHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCkgYW5kXG4gKiByZXR1cm4gYW4gYXJyYXkgd2l0aCBhcHByb3ByaWF0ZWx5IHJlLWtleWVkIGNoaWxkcmVuLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbnRvYXJyYXlcbiAqL1xuZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbm9ubHlcbiAqXG4gKiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBhIHNpbmdsZSBjaGlsZCBnZXRzXG4gKiBwYXNzZWQgd2l0aG91dCBhIHdyYXBwZXIsIGJ1dCB0aGUgcHVycG9zZSBvZiB0aGlzIGhlbHBlciBmdW5jdGlvbiBpcyB0b1xuICogYWJzdHJhY3QgYXdheSB0aGUgcGFydGljdWxhciBzdHJ1Y3R1cmUgb2YgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBjaGlsZHJlbiBDaGlsZCBjb2xsZWN0aW9uIHN0cnVjdHVyZS5cbiAqIEByZXR1cm4ge1JlYWN0RWxlbWVudH0gVGhlIGZpcnN0IGFuZCBvbmx5IGBSZWFjdEVsZW1lbnRgIGNvbnRhaW5lZCBpbiB0aGVcbiAqIHN0cnVjdHVyZS5cbiAqL1xuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gICFpc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC4nKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgaWYgKGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAge1xuICAgICAgIShjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gbnVsbCB8fCB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnY3JlYXRlQ29udGV4dDogRXhwZWN0ZWQgdGhlIG9wdGlvbmFsIHNlY29uZCBhcmd1bWVudCB0byBiZSBhICcgKyAnZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzJywgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb250ZXh0ID0ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9DT05URVhUX1RZUEUsXG4gICAgX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBjYWxjdWxhdGVDaGFuZ2VkQml0cyxcbiAgICAvLyBBcyBhIHdvcmthcm91bmQgdG8gc3VwcG9ydCBtdWx0aXBsZSBjb25jdXJyZW50IHJlbmRlcmVycywgd2UgY2F0ZWdvcml6ZVxuICAgIC8vIHNvbWUgcmVuZGVyZXJzIGFzIHByaW1hcnkgYW5kIG90aGVycyBhcyBzZWNvbmRhcnkuIFdlIG9ubHkgZXhwZWN0XG4gICAgLy8gdGhlcmUgdG8gYmUgdHdvIGNvbmN1cnJlbnQgcmVuZGVyZXJzIGF0IG1vc3Q6IFJlYWN0IE5hdGl2ZSAocHJpbWFyeSkgYW5kXG4gICAgLy8gRmFicmljIChzZWNvbmRhcnkpOyBSZWFjdCBET00gKHByaW1hcnkpIGFuZCBSZWFjdCBBUlQgKHNlY29uZGFyeSkuXG4gICAgLy8gU2Vjb25kYXJ5IHJlbmRlcmVycyBzdG9yZSB0aGVpciBjb250ZXh0IHZhbHVlcyBvbiBzZXBhcmF0ZSBmaWVsZHMuXG4gICAgX2N1cnJlbnRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIF9jdXJyZW50VmFsdWUyOiBkZWZhdWx0VmFsdWUsXG4gICAgLy8gVXNlZCB0byB0cmFjayBob3cgbWFueSBjb25jdXJyZW50IHJlbmRlcmVycyB0aGlzIGNvbnRleHQgY3VycmVudGx5XG4gICAgLy8gc3VwcG9ydHMgd2l0aGluIGluIGEgc2luZ2xlIHJlbmRlcmVyLiBTdWNoIGFzIHBhcmFsbGVsIHNlcnZlciByZW5kZXJpbmcuXG4gICAgX3RocmVhZENvdW50OiAwLFxuICAgIC8vIFRoZXNlIGFyZSBjaXJjdWxhclxuICAgIFByb3ZpZGVyOiBudWxsLFxuICAgIENvbnN1bWVyOiBudWxsXG4gIH07XG5cbiAgY29udGV4dC5Qcm92aWRlciA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfUFJPVklERVJfVFlQRSxcbiAgICBfY29udGV4dDogY29udGV4dFxuICB9O1xuXG4gIHZhciBoYXNXYXJuZWRBYm91dFVzaW5nTmVzdGVkQ29udGV4dENvbnN1bWVycyA9IGZhbHNlO1xuICB2YXIgaGFzV2FybmVkQWJvdXRVc2luZ0NvbnN1bWVyUHJvdmlkZXIgPSBmYWxzZTtcblxuICB7XG4gICAgLy8gQSBzZXBhcmF0ZSBvYmplY3QsIGJ1dCBwcm94aWVzIGJhY2sgdG8gdGhlIG9yaWdpbmFsIGNvbnRleHQgb2JqZWN0IGZvclxuICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBJdCBoYXMgYSBkaWZmZXJlbnQgJCR0eXBlb2YsIHNvIHdlIGNhbiBwcm9wZXJseVxuICAgIC8vIHdhcm4gZm9yIHRoZSBpbmNvcnJlY3QgdXNhZ2Ugb2YgQ29udGV4dCBhcyBhIENvbnN1bWVyLlxuICAgIHZhciBDb25zdW1lciA9IHtcbiAgICAgICQkdHlwZW9mOiBSRUFDVF9DT05URVhUX1RZUEUsXG4gICAgICBfY29udGV4dDogY29udGV4dCxcbiAgICAgIF9jYWxjdWxhdGVDaGFuZ2VkQml0czogY29udGV4dC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHNcbiAgICB9O1xuICAgIC8vICRGbG93Rml4TWU6IEZsb3cgY29tcGxhaW5zIGFib3V0IG5vdCBzZXR0aW5nIGEgdmFsdWUsIHdoaWNoIGlzIGludGVudGlvbmFsIGhlcmVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhDb25zdW1lciwge1xuICAgICAgUHJvdmlkZXI6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFoYXNXYXJuZWRBYm91dFVzaW5nQ29uc3VtZXJQcm92aWRlcikge1xuICAgICAgICAgICAgaGFzV2FybmVkQWJvdXRVc2luZ0NvbnN1bWVyUHJvdmlkZXIgPSB0cnVlO1xuICAgICAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVuZGVyaW5nIDxDb250ZXh0LkNvbnN1bWVyLlByb3ZpZGVyPiBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gJyArICdhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gcmVuZGVyIDxDb250ZXh0LlByb3ZpZGVyPiBpbnN0ZWFkPycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29udGV4dC5Qcm92aWRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoX1Byb3ZpZGVyKSB7XG4gICAgICAgICAgY29udGV4dC5Qcm92aWRlciA9IF9Qcm92aWRlcjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF9jdXJyZW50VmFsdWU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuX2N1cnJlbnRWYWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoX2N1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IF9jdXJyZW50VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfY3VycmVudFZhbHVlMjoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5fY3VycmVudFZhbHVlMjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoX2N1cnJlbnRWYWx1ZTIpIHtcbiAgICAgICAgICBjb250ZXh0Ll9jdXJyZW50VmFsdWUyID0gX2N1cnJlbnRWYWx1ZTI7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfdGhyZWFkQ291bnQ6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuX3RocmVhZENvdW50O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChfdGhyZWFkQ291bnQpIHtcbiAgICAgICAgICBjb250ZXh0Ll90aHJlYWRDb3VudCA9IF90aHJlYWRDb3VudDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIENvbnN1bWVyOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRVc2luZ05lc3RlZENvbnRleHRDb25zdW1lcnMpIHtcbiAgICAgICAgICAgIGhhc1dhcm5lZEFib3V0VXNpbmdOZXN0ZWRDb250ZXh0Q29uc3VtZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlbmRlcmluZyA8Q29udGV4dC5Db25zdW1lci5Db25zdW1lcj4gaXMgbm90IHN1cHBvcnRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluICcgKyAnYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gRGlkIHlvdSBtZWFuIHRvIHJlbmRlciA8Q29udGV4dC5Db25zdW1lcj4gaW5zdGVhZD8nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuQ29uc3VtZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyAkRmxvd0ZpeE1lOiBGbG93IGNvbXBsYWlucyBhYm91dCBtaXNzaW5nIHByb3BlcnRpZXMgYmVjYXVzZSBpdCBkb2Vzbid0IHVuZGVyc3RhbmQgZGVmaW5lUHJvcGVydHlcbiAgICBjb250ZXh0LkNvbnN1bWVyID0gQ29uc3VtZXI7XG4gIH1cblxuICB7XG4gICAgY29udGV4dC5fY3VycmVudFJlbmRlcmVyID0gbnVsbDtcbiAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIyID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0O1xufVxuXG5mdW5jdGlvbiBsYXp5KGN0b3IpIHtcbiAgdmFyIGxhenlUeXBlID0ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9MQVpZX1RZUEUsXG4gICAgX2N0b3I6IGN0b3IsXG4gICAgLy8gUmVhY3QgdXNlcyB0aGVzZSBmaWVsZHMgdG8gc3RvcmUgdGhlIHJlc3VsdC5cbiAgICBfc3RhdHVzOiAtMSxcbiAgICBfcmVzdWx0OiBudWxsXG4gIH07XG5cbiAge1xuICAgIC8vIEluIHByb2R1Y3Rpb24sIHRoaXMgd291bGQganVzdCBzZXQgaXQgb24gdGhlIG9iamVjdC5cbiAgICB2YXIgZGVmYXVsdFByb3BzID0gdm9pZCAwO1xuICAgIHZhciBwcm9wVHlwZXMgPSB2b2lkIDA7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobGF6eVR5cGUsIHtcbiAgICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0UHJvcHM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld0RlZmF1bHRQcm9wcykge1xuICAgICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlYWN0LmxhenkoLi4uKTogSXQgaXMgbm90IHN1cHBvcnRlZCB0byBhc3NpZ24gYGRlZmF1bHRQcm9wc2AgdG8gJyArICdhIGxhenkgY29tcG9uZW50IGltcG9ydC4gRWl0aGVyIHNwZWNpZnkgdGhlbSB3aGVyZSB0aGUgY29tcG9uZW50ICcgKyAnaXMgZGVmaW5lZCwgb3IgY3JlYXRlIGEgd3JhcHBpbmcgY29tcG9uZW50IGFyb3VuZCBpdC4nKTtcbiAgICAgICAgICBkZWZhdWx0UHJvcHMgPSBuZXdEZWZhdWx0UHJvcHM7XG4gICAgICAgICAgLy8gTWF0Y2ggcHJvZHVjdGlvbiBiZWhhdmlvciBtb3JlIGNsb3NlbHk6XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGxhenlUeXBlLCAnZGVmYXVsdFByb3BzJywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BUeXBlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3UHJvcFR5cGVzKSB7XG4gICAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVhY3QubGF6eSguLi4pOiBJdCBpcyBub3Qgc3VwcG9ydGVkIHRvIGFzc2lnbiBgcHJvcFR5cGVzYCB0byAnICsgJ2EgbGF6eSBjb21wb25lbnQgaW1wb3J0LiBFaXRoZXIgc3BlY2lmeSB0aGVtIHdoZXJlIHRoZSBjb21wb25lbnQgJyArICdpcyBkZWZpbmVkLCBvciBjcmVhdGUgYSB3cmFwcGluZyBjb21wb25lbnQgYXJvdW5kIGl0LicpO1xuICAgICAgICAgIHByb3BUeXBlcyA9IG5ld1Byb3BUeXBlcztcbiAgICAgICAgICAvLyBNYXRjaCBwcm9kdWN0aW9uIGJlaGF2aW9yIG1vcmUgY2xvc2VseTpcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobGF6eVR5cGUsICdwcm9wVHlwZXMnLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBsYXp5VHlwZTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZFJlZihyZW5kZXIpIHtcbiAge1xuICAgIGlmIChyZW5kZXIgIT0gbnVsbCAmJiByZW5kZXIuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSkge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnZm9yd2FyZFJlZiByZXF1aXJlcyBhIHJlbmRlciBmdW5jdGlvbiBidXQgcmVjZWl2ZWQgYSBgbWVtb2AgJyArICdjb21wb25lbnQuIEluc3RlYWQgb2YgZm9yd2FyZFJlZihtZW1vKC4uLikpLCB1c2UgJyArICdtZW1vKGZvcndhcmRSZWYoLi4uKSkuJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVuZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdmb3J3YXJkUmVmIHJlcXVpcmVzIGEgcmVuZGVyIGZ1bmN0aW9uIGJ1dCB3YXMgZ2l2ZW4gJXMuJywgcmVuZGVyID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHJlbmRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICEoXG4gICAgICAvLyBEbyBub3Qgd2FybiBmb3IgMCBhcmd1bWVudHMgYmVjYXVzZSBpdCBjb3VsZCBiZSBkdWUgdG8gdXNhZ2Ugb2YgdGhlICdhcmd1bWVudHMnIG9iamVjdFxuICAgICAgcmVuZGVyLmxlbmd0aCA9PT0gMCB8fCByZW5kZXIubGVuZ3RoID09PSAyKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2ZvcndhcmRSZWYgcmVuZGVyIGZ1bmN0aW9ucyBhY2NlcHQgZXhhY3RseSB0d28gcGFyYW1ldGVyczogcHJvcHMgYW5kIHJlZi4gJXMnLCByZW5kZXIubGVuZ3RoID09PSAxID8gJ0RpZCB5b3UgZm9yZ2V0IHRvIHVzZSB0aGUgcmVmIHBhcmFtZXRlcj8nIDogJ0FueSBhZGRpdGlvbmFsIHBhcmFtZXRlciB3aWxsIGJlIHVuZGVmaW5lZC4nKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICBpZiAocmVuZGVyICE9IG51bGwpIHtcbiAgICAgICEocmVuZGVyLmRlZmF1bHRQcm9wcyA9PSBudWxsICYmIHJlbmRlci5wcm9wVHlwZXMgPT0gbnVsbCkgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdmb3J3YXJkUmVmIHJlbmRlciBmdW5jdGlvbnMgZG8gbm90IHN1cHBvcnQgcHJvcFR5cGVzIG9yIGRlZmF1bHRQcm9wcy4gJyArICdEaWQgeW91IGFjY2lkZW50YWxseSBwYXNzIGEgUmVhY3QgY29tcG9uZW50PycpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUsXG4gICAgcmVuZGVyOiByZW5kZXJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAvLyBOb3RlOiBpdHMgdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgaWYgaXQncyBhIHBvbHlmaWxsLlxuICB0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUpO1xufVxuXG5mdW5jdGlvbiBtZW1vKHR5cGUsIGNvbXBhcmUpIHtcbiAge1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpKSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdtZW1vOiBUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIGNvbXBvbmVudC4gSW5zdGVhZCAnICsgJ3JlY2VpdmVkOiAlcycsIHR5cGUgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgdHlwZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX01FTU9fVFlQRSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGNvbXBhcmU6IGNvbXBhcmUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb21wYXJlXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVEaXNwYXRjaGVyKCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudDtcbiAgIShkaXNwYXRjaGVyICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgaG9vayBjYWxsLiBIb29rcyBjYW4gb25seSBiZSBjYWxsZWQgaW5zaWRlIG9mIHRoZSBib2R5IG9mIGEgZnVuY3Rpb24gY29tcG9uZW50LiBUaGlzIGNvdWxkIGhhcHBlbiBmb3Igb25lIG9mIHRoZSBmb2xsb3dpbmcgcmVhc29uczpcXG4xLiBZb3UgbWlnaHQgaGF2ZSBtaXNtYXRjaGluZyB2ZXJzaW9ucyBvZiBSZWFjdCBhbmQgdGhlIHJlbmRlcmVyIChzdWNoIGFzIFJlYWN0IERPTSlcXG4yLiBZb3UgbWlnaHQgYmUgYnJlYWtpbmcgdGhlIFJ1bGVzIG9mIEhvb2tzXFxuMy4gWW91IG1pZ2h0IGhhdmUgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0IGluIHRoZSBzYW1lIGFwcFxcblNlZSBodHRwczovL2ZiLm1lL3JlYWN0LWludmFsaWQtaG9vay1jYWxsIGZvciB0aXBzIGFib3V0IGhvdyB0byBkZWJ1ZyBhbmQgZml4IHRoaXMgcHJvYmxlbS4nKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGRpc3BhdGNoZXI7XG59XG5cbmZ1bmN0aW9uIHVzZUNvbnRleHQoQ29udGV4dCwgdW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAge1xuICAgICEodW5zdGFibGVfb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQpID8gd2FybmluZyQxKGZhbHNlLCAndXNlQ29udGV4dCgpIHNlY29uZCBhcmd1bWVudCBpcyByZXNlcnZlZCBmb3IgZnV0dXJlICcgKyAndXNlIGluIFJlYWN0LiBQYXNzaW5nIGl0IGlzIG5vdCBzdXBwb3J0ZWQuICcgKyAnWW91IHBhc3NlZDogJXMuJXMnLCB1bnN0YWJsZV9vYnNlcnZlZEJpdHMsIHR5cGVvZiB1bnN0YWJsZV9vYnNlcnZlZEJpdHMgPT09ICdudW1iZXInICYmIEFycmF5LmlzQXJyYXkoYXJndW1lbnRzWzJdKSA/ICdcXG5cXG5EaWQgeW91IGNhbGwgYXJyYXkubWFwKHVzZUNvbnRleHQpPyAnICsgJ0NhbGxpbmcgSG9va3MgaW5zaWRlIGEgbG9vcCBpcyBub3Qgc3VwcG9ydGVkLiAnICsgJ0xlYXJuIG1vcmUgYXQgaHR0cHM6Ly9mYi5tZS9ydWxlcy1vZi1ob29rcycgOiAnJykgOiB2b2lkIDA7XG5cbiAgICAvLyBUT0RPOiBhZGQgYSBtb3JlIGdlbmVyaWMgd2FybmluZyBmb3IgaW52YWxpZCB2YWx1ZXMuXG4gICAgaWYgKENvbnRleHQuX2NvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHJlYWxDb250ZXh0ID0gQ29udGV4dC5fY29udGV4dDtcbiAgICAgIC8vIERvbid0IGRlZHVwbGljYXRlIGJlY2F1c2UgdGhpcyBsZWdpdGltYXRlbHkgY2F1c2VzIGJ1Z3NcbiAgICAgIC8vIGFuZCBub2JvZHkgc2hvdWxkIGJlIHVzaW5nIHRoaXMgaW4gZXhpc3RpbmcgY29kZS5cbiAgICAgIGlmIChyZWFsQ29udGV4dC5Db25zdW1lciA9PT0gQ29udGV4dCkge1xuICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdDYWxsaW5nIHVzZUNvbnRleHQoQ29udGV4dC5Db25zdW1lcikgaXMgbm90IHN1cHBvcnRlZCwgbWF5IGNhdXNlIGJ1Z3MsIGFuZCB3aWxsIGJlICcgKyAncmVtb3ZlZCBpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gY2FsbCB1c2VDb250ZXh0KENvbnRleHQpIGluc3RlYWQ/Jyk7XG4gICAgICB9IGVsc2UgaWYgKHJlYWxDb250ZXh0LlByb3ZpZGVyID09PSBDb250ZXh0KSB7XG4gICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ0NhbGxpbmcgdXNlQ29udGV4dChDb250ZXh0LlByb3ZpZGVyKSBpcyBub3Qgc3VwcG9ydGVkLiAnICsgJ0RpZCB5b3UgbWVhbiB0byBjYWxsIHVzZUNvbnRleHQoQ29udGV4dCkgaW5zdGVhZD8nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlQ29udGV4dChDb250ZXh0LCB1bnN0YWJsZV9vYnNlcnZlZEJpdHMpO1xufVxuXG5mdW5jdGlvbiB1c2VTdGF0ZShpbml0aWFsU3RhdGUpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VTdGF0ZShpbml0aWFsU3RhdGUpO1xufVxuXG5mdW5jdGlvbiB1c2VSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpO1xufVxuXG5mdW5jdGlvbiB1c2VSZWYoaW5pdGlhbFZhbHVlKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlUmVmKGluaXRpYWxWYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHVzZUVmZmVjdChjcmVhdGUsIGlucHV0cykge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUVmZmVjdChjcmVhdGUsIGlucHV0cyk7XG59XG5cbmZ1bmN0aW9uIHVzZUxheW91dEVmZmVjdChjcmVhdGUsIGlucHV0cykge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUxheW91dEVmZmVjdChjcmVhdGUsIGlucHV0cyk7XG59XG5cbmZ1bmN0aW9uIHVzZUNhbGxiYWNrKGNhbGxiYWNrLCBpbnB1dHMpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VDYWxsYmFjayhjYWxsYmFjaywgaW5wdXRzKTtcbn1cblxuZnVuY3Rpb24gdXNlTWVtbyhjcmVhdGUsIGlucHV0cykge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZU1lbW8oY3JlYXRlLCBpbnB1dHMpO1xufVxuXG5mdW5jdGlvbiB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBpbnB1dHMpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBpbnB1dHMpO1xufVxuXG5mdW5jdGlvbiB1c2VEZWJ1Z1ZhbHVlKHZhbHVlLCBmb3JtYXR0ZXJGbikge1xuICB7XG4gICAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICAgIHJldHVybiBkaXNwYXRjaGVyLnVzZURlYnVnVmFsdWUodmFsdWUsIGZvcm1hdHRlckZuKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlYWN0RWxlbWVudFZhbGlkYXRvciBwcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIGEgZWxlbWVudCBmYWN0b3J5XG4gKiB3aGljaCB2YWxpZGF0ZXMgdGhlIHByb3BzIHBhc3NlZCB0byB0aGUgZWxlbWVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICogdXNlZCBvbmx5IGluIERFViBhbmQgY291bGQgYmUgcmVwbGFjZWQgYnkgYSBzdGF0aWMgdHlwZSBjaGVja2VyIGZvciBsYW5ndWFnZXNcbiAqIHRoYXQgc3VwcG9ydCBpdC5cbiAqL1xuXG52YXIgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24gPSB2b2lkIDA7XG5cbntcbiAgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0oZWxlbWVudFByb3BzKSB7XG4gIGlmIChlbGVtZW50UHJvcHMgIT09IG51bGwgJiYgZWxlbWVudFByb3BzICE9PSB1bmRlZmluZWQgJiYgZWxlbWVudFByb3BzLl9fc291cmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgc291cmNlID0gZWxlbWVudFByb3BzLl9fc291cmNlO1xuICAgIHZhciBmaWxlTmFtZSA9IHNvdXJjZS5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLCAnJyk7XG4gICAgdmFyIGxpbmVOdW1iZXIgPSBzb3VyY2UubGluZU51bWJlcjtcbiAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHlvdXIgY29kZSBhdCAnICsgZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJy4nO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyhwYXJlbnRUeXBlKSB7XG4gIHZhciBpbmZvID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG5cbiAgaWYgKCFpbmZvKSB7XG4gICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG4gICAgaWYgKHBhcmVudE5hbWUpIHtcbiAgICAgIGluZm8gPSAnXFxuXFxuQ2hlY2sgdGhlIHRvcC1sZXZlbCByZW5kZXIgY2FsbCB1c2luZyA8JyArIHBhcmVudE5hbWUgKyAnPi4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW5mbztcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhbiBleHBsaWNpdCBrZXkgYXNzaWduZWQgdG8gaXQuXG4gKiBUaGlzIGVsZW1lbnQgaXMgaW4gYW4gYXJyYXkuIFRoZSBhcnJheSBjb3VsZCBncm93IGFuZCBzaHJpbmsgb3IgYmVcbiAqIHJlb3JkZXJlZC4gQWxsIGNoaWxkcmVuIHRoYXQgaGF2ZW4ndCBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFyZSByZXF1aXJlZCB0b1xuICogaGF2ZSBhIFwia2V5XCIgcHJvcGVydHkgYXNzaWduZWQgdG8gaXQuIEVycm9yIHN0YXR1c2VzIGFyZSBjYWNoZWQgc28gYSB3YXJuaW5nXG4gKiB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFeHBsaWNpdEtleShlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmICghZWxlbWVudC5fc3RvcmUgfHwgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkIHx8IGVsZW1lbnQua2V5ICE9IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcblxuICB2YXIgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9IGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSk7XG4gIGlmIChvd25lckhhc0tleVVzZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgb3duZXJIYXNLZXlVc2VXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dID0gdHJ1ZTtcblxuICAvLyBVc3VhbGx5IHRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBvZmZlbmRlciwgYnV0IGlmIGl0IGFjY2VwdHMgY2hpbGRyZW4gYXMgYVxuICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yXG4gIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cbiAgdmFyIGNoaWxkT3duZXIgPSAnJztcbiAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5fb3duZXIgJiYgZWxlbWVudC5fb3duZXIgIT09IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAvLyBHaXZlIHRoZSBjb21wb25lbnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhpcyBjaGlsZC5cbiAgICBjaGlsZE93bmVyID0gJyBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSAnICsgZ2V0Q29tcG9uZW50TmFtZShlbGVtZW50Ll9vd25lci50eXBlKSArICcuJztcbiAgfVxuXG4gIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpO1xuICB7XG4gICAgd2FybmluZyQxKGZhbHNlLCAnRWFjaCBjaGlsZCBpbiBhIGxpc3Qgc2hvdWxkIGhhdmUgYSB1bmlxdWUgXCJrZXlcIiBwcm9wLicgKyAnJXMlcyBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJywgY3VycmVudENvbXBvbmVudEVycm9ySW5mbywgY2hpbGRPd25lcik7XG4gIH1cbiAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG59XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgZXZlcnkgZWxlbWVudCBlaXRoZXIgaXMgcGFzc2VkIGluIGEgc3RhdGljIGxvY2F0aW9uLCBpbiBhblxuICogYXJyYXkgd2l0aCBhbiBleHBsaWNpdCBrZXlzIHByb3BlcnR5IGRlZmluZWQsIG9yIGluIGFuIG9iamVjdCBsaXRlcmFsXG4gKiB3aXRoIHZhbGlkIGtleSBwcm9wZXJ0eS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlIFN0YXRpY2FsbHkgcGFzc2VkIGNoaWxkIG9mIGFueSB0eXBlLlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIG5vZGUncyBwYXJlbnQncyB0eXBlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLCBwYXJlbnRUeXBlKSB7XG4gIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG4gICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gRW50cnkgaXRlcmF0b3JzIHVzZWQgdG8gcHJvdmlkZSBpbXBsaWNpdCBrZXlzLFxuICAgICAgLy8gYnV0IG5vdyB3ZSBwcmludCBhIHNlcGFyYXRlIHdhcm5pbmcgZm9yIHRoZW0gbGF0ZXIuXG4gICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChub2RlKTtcbiAgICAgICAgdmFyIHN0ZXAgPSB2b2lkIDA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gZWxlbWVudCwgdmFsaWRhdGUgdGhhdCBpdHMgcHJvcHMgZm9sbG93IHRoZSBwcm9wVHlwZXMgZGVmaW5pdGlvbixcbiAqIHByb3ZpZGVkIGJ5IHRoZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpIHtcbiAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG4gIGlmICh0eXBlID09PSBudWxsIHx8IHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHR5cGUpO1xuICB2YXIgcHJvcFR5cGVzID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm9wVHlwZXMgPSB0eXBlLnByb3BUeXBlcztcbiAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHxcbiAgLy8gTm90ZTogTWVtbyBvbmx5IGNoZWNrcyBvdXRlciBwcm9wcyBoZXJlLlxuICAvLyBJbm5lciBwcm9wcyBhcmUgY2hlY2tlZCBpbiB0aGUgcmVjb25jaWxlci5cbiAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFKSkge1xuICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvcFR5cGVzKSB7XG4gICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7XG4gICAgY2hlY2tQcm9wVHlwZXMocHJvcFR5cGVzLCBlbGVtZW50LnByb3BzLCAncHJvcCcsIG5hbWUsIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSk7XG4gICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG4gIH0gZWxzZSBpZiAodHlwZS5Qcm9wVHlwZXMgIT09IHVuZGVmaW5lZCAmJiAhcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24pIHtcbiAgICBwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93biA9IHRydWU7XG4gICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnQ29tcG9uZW50ICVzIGRlY2xhcmVkIGBQcm9wVHlwZXNgIGluc3RlYWQgb2YgYHByb3BUeXBlc2AuIERpZCB5b3UgbWlzc3BlbGwgdGhlIHByb3BlcnR5IGFzc2lnbm1lbnQ/JywgbmFtZSB8fCAnVW5rbm93bicpO1xuICB9XG4gIGlmICh0eXBlb2YgdHlwZS5nZXREZWZhdWx0UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAhdHlwZS5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdnZXREZWZhdWx0UHJvcHMgaXMgb25seSB1c2VkIG9uIGNsYXNzaWMgUmVhY3QuY3JlYXRlQ2xhc3MgJyArICdkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIGZyYWdtZW50LCB2YWxpZGF0ZSB0aGF0IGl0IGNhbiBvbmx5IGJlIHByb3ZpZGVkIHdpdGggZnJhZ21lbnQgcHJvcHNcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBmcmFnbWVudFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZnJhZ21lbnQpIHtcbiAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZnJhZ21lbnQpO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJhZ21lbnQucHJvcHMpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ICE9PSAnY2hpbGRyZW4nICYmIGtleSAhPT0gJ2tleScpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ0ludmFsaWQgcHJvcCBgJXNgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuICcgKyAnUmVhY3QuRnJhZ21lbnQgY2FuIG9ubHkgaGF2ZSBga2V5YCBhbmQgYGNoaWxkcmVuYCBwcm9wcy4nLCBrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGZyYWdtZW50LnJlZiAhPT0gbnVsbCkge1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ0ludmFsaWQgYXR0cmlidXRlIGByZWZgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuJyk7XG4gIH1cblxuICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudFdpdGhWYWxpZGF0aW9uKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICB2YXIgdmFsaWRUeXBlID0gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpO1xuXG4gIC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvXG4gIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG4gIGlmICghdmFsaWRUeXBlKSB7XG4gICAgdmFyIGluZm8gPSAnJztcbiAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKHR5cGUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy5cIjtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlSW5mbyA9IGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHByb3BzKTtcbiAgICBpZiAoc291cmNlSW5mbykge1xuICAgICAgaW5mbyArPSBzb3VyY2VJbmZvO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgIH1cblxuICAgIHZhciB0eXBlU3RyaW5nID0gdm9pZCAwO1xuICAgIGlmICh0eXBlID09PSBudWxsKSB7XG4gICAgICB0eXBlU3RyaW5nID0gJ251bGwnO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZVN0cmluZyA9ICdhcnJheSc7XG4gICAgfSBlbHNlIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgICB0eXBlU3RyaW5nID0gJzwnICsgKGdldENvbXBvbmVudE5hbWUodHlwZS50eXBlKSB8fCAnVW5rbm93bicpICsgJyAvPic7XG4gICAgICBpbmZvID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50Pyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGVTdHJpbmcgPSB0eXBlb2YgdHlwZTtcbiAgICB9XG5cbiAgICB3YXJuaW5nJDEoZmFsc2UsICdSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIGlzIGludmFsaWQgLS0gZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciAnICsgJ2J1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgJyArICdjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIHR5cGVTdHJpbmcsIGluZm8pO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgLy8gVGhlIHJlc3VsdCBjYW4gYmUgbnVsbGlzaCBpZiBhIG1vY2sgb3IgYSBjdXN0b20gZnVuY3Rpb24gaXMgdXNlZC5cbiAgLy8gVE9ETzogRHJvcCB0aGlzIHdoZW4gdGhlc2UgYXJlIG5vIGxvbmdlciBhbGxvd2VkIGFzIHRoZSB0eXBlIGFyZ3VtZW50LlxuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICAvLyBTa2lwIGtleSB3YXJuaW5nIGlmIHRoZSB0eXBlIGlzbid0IHZhbGlkIHNpbmNlIG91ciBrZXkgdmFsaWRhdGlvbiBsb2dpY1xuICAvLyBkb2Vzbid0IGV4cGVjdCBhIG5vbi1zdHJpbmcvZnVuY3Rpb24gdHlwZSBhbmQgY2FuIHRocm93IGNvbmZ1c2luZyBlcnJvcnMuXG4gIC8vIFdlIGRvbid0IHdhbnQgZXhjZXB0aW9uIGJlaGF2aW9yIHRvIGRpZmZlciBiZXR3ZWVuIGRldiBhbmQgcHJvZC5cbiAgLy8gKFJlbmRlcmluZyB3aWxsIHRocm93IHdpdGggYSBoZWxwZnVsIG1lc3NhZ2UgYW5kIGFzIHNvb24gYXMgdGhlIHR5cGUgaXNcbiAgLy8gZml4ZWQsIHRoZSBrZXkgd2FybmluZ3Mgd2lsbCBhcHBlYXIuKVxuICBpZiAodmFsaWRUeXBlKSB7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgdHlwZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZWxlbWVudCk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmFjdG9yeVdpdGhWYWxpZGF0aW9uKHR5cGUpIHtcbiAgdmFyIHZhbGlkYXRlZEZhY3RvcnkgPSBjcmVhdGVFbGVtZW50V2l0aFZhbGlkYXRpb24uYmluZChudWxsLCB0eXBlKTtcbiAgdmFsaWRhdGVkRmFjdG9yeS50eXBlID0gdHlwZTtcbiAgLy8gTGVnYWN5IGhvb2s6IHJlbW92ZSBpdFxuICB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbGlkYXRlZEZhY3RvcnksICd0eXBlJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG93UHJpb3JpdHlXYXJuaW5nJDEoZmFsc2UsICdGYWN0b3J5LnR5cGUgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHRoZSBjbGFzcyBkaXJlY3RseSAnICsgJ2JlZm9yZSBwYXNzaW5nIGl0IHRvIGNyZWF0ZUZhY3RvcnkuJyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndHlwZScsIHtcbiAgICAgICAgICB2YWx1ZTogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsaWRhdGVkRmFjdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xvbmVFbGVtZW50V2l0aFZhbGlkYXRpb24oZWxlbWVudCwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gIHZhciBuZXdFbGVtZW50ID0gY2xvbmVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCBuZXdFbGVtZW50LnR5cGUpO1xuICB9XG4gIHZhbGlkYXRlUHJvcFR5cGVzKG5ld0VsZW1lbnQpO1xuICByZXR1cm4gbmV3RWxlbWVudDtcbn1cblxuLy8gSGVscHMgaWRlbnRpZnkgc2lkZSBlZmZlY3RzIGluIGJlZ2luLXBoYXNlIGxpZmVjeWNsZSBob29rcyBhbmQgc2V0U3RhdGUgcmVkdWNlcnM6XG5cblxuLy8gSW4gc29tZSBjYXNlcywgU3RyaWN0TW9kZSBzaG91bGQgYWxzbyBkb3VibGUtcmVuZGVyIGxpZmVjeWNsZXMuXG4vLyBUaGlzIGNhbiBiZSBjb25mdXNpbmcgZm9yIHRlc3RzIHRob3VnaCxcbi8vIEFuZCBpdCBjYW4gYmUgYmFkIGZvciBwZXJmb3JtYW5jZSBpbiBwcm9kdWN0aW9uLlxuLy8gVGhpcyBmZWF0dXJlIGZsYWcgY2FuIGJlIHVzZWQgdG8gY29udHJvbCB0aGUgYmVoYXZpb3I6XG5cblxuLy8gVG8gcHJlc2VydmUgdGhlIFwiUGF1c2Ugb24gY2F1Z2h0IGV4Y2VwdGlvbnNcIiBiZWhhdmlvciBvZiB0aGUgZGVidWdnZXIsIHdlXG4vLyByZXBsYXkgdGhlIGJlZ2luIHBoYXNlIG9mIGEgZmFpbGVkIGNvbXBvbmVudCBpbnNpZGUgaW52b2tlR3VhcmRlZENhbGxiYWNrLlxuXG5cbi8vIFdhcm4gYWJvdXQgZGVwcmVjYXRlZCwgYXN5bmMtdW5zYWZlIGxpZmVjeWNsZXM7IHJlbGF0ZXMgdG8gUkZDICM2OlxuXG5cbi8vIEdhdGhlciBhZHZhbmNlZCB0aW1pbmcgbWV0cmljcyBmb3IgUHJvZmlsZXIgc3VidHJlZXMuXG5cblxuLy8gVHJhY2Ugd2hpY2ggaW50ZXJhY3Rpb25zIHRyaWdnZXIgZWFjaCBjb21taXQuXG5cblxuLy8gT25seSB1c2VkIGluIHd3dyBidWlsZHMuXG4gLy8gVE9ETzogdHJ1ZT8gSGVyZSBpdCBtaWdodCBqdXN0IGJlIGZhbHNlLlxuXG4vLyBPbmx5IHVzZWQgaW4gd3d3IGJ1aWxkcy5cblxuXG4vLyBPbmx5IHVzZWQgaW4gd3d3IGJ1aWxkcy5cblxuXG4vLyBSZWFjdCBGaXJlOiBwcmV2ZW50IHRoZSB2YWx1ZSBhbmQgY2hlY2tlZCBhdHRyaWJ1dGVzIGZyb20gc3luY2luZ1xuLy8gd2l0aCB0aGVpciByZWxhdGVkIERPTSBwcm9wZXJ0aWVzXG5cblxuLy8gVGhlc2UgQVBJcyB3aWxsIG5vIGxvbmdlciBiZSBcInVuc3RhYmxlXCIgaW4gdGhlIHVwY29taW5nIDE2LjcgcmVsZWFzZSxcbi8vIENvbnRyb2wgdGhpcyBiZWhhdmlvciB3aXRoIGEgZmxhZyB0byBzdXBwb3J0IDE2LjYgbWlub3IgcmVsZWFzZXMgaW4gdGhlIG1lYW53aGlsZS5cbnZhciBlbmFibGVTdGFibGVDb25jdXJyZW50TW9kZUFQSXMgPSBmYWxzZTtcblxudmFyIFJlYWN0ID0ge1xuICBDaGlsZHJlbjoge1xuICAgIG1hcDogbWFwQ2hpbGRyZW4sXG4gICAgZm9yRWFjaDogZm9yRWFjaENoaWxkcmVuLFxuICAgIGNvdW50OiBjb3VudENoaWxkcmVuLFxuICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgb25seTogb25seUNoaWxkXG4gIH0sXG5cbiAgY3JlYXRlUmVmOiBjcmVhdGVSZWYsXG4gIENvbXBvbmVudDogQ29tcG9uZW50LFxuICBQdXJlQ29tcG9uZW50OiBQdXJlQ29tcG9uZW50LFxuXG4gIGNyZWF0ZUNvbnRleHQ6IGNyZWF0ZUNvbnRleHQsXG4gIGZvcndhcmRSZWY6IGZvcndhcmRSZWYsXG4gIGxhenk6IGxhenksXG4gIG1lbW86IG1lbW8sXG5cbiAgdXNlQ2FsbGJhY2s6IHVzZUNhbGxiYWNrLFxuICB1c2VDb250ZXh0OiB1c2VDb250ZXh0LFxuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdXNlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgdXNlRGVidWdWYWx1ZTogdXNlRGVidWdWYWx1ZSxcbiAgdXNlTGF5b3V0RWZmZWN0OiB1c2VMYXlvdXRFZmZlY3QsXG4gIHVzZU1lbW86IHVzZU1lbW8sXG4gIHVzZVJlZHVjZXI6IHVzZVJlZHVjZXIsXG4gIHVzZVJlZjogdXNlUmVmLFxuICB1c2VTdGF0ZTogdXNlU3RhdGUsXG5cbiAgRnJhZ21lbnQ6IFJFQUNUX0ZSQUdNRU5UX1RZUEUsXG4gIFN0cmljdE1vZGU6IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUsXG4gIFN1c3BlbnNlOiBSRUFDVF9TVVNQRU5TRV9UWVBFLFxuXG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbixcbiAgY2xvbmVFbGVtZW50OiBjbG9uZUVsZW1lbnRXaXRoVmFsaWRhdGlvbixcbiAgY3JlYXRlRmFjdG9yeTogY3JlYXRlRmFjdG9yeVdpdGhWYWxpZGF0aW9uLFxuICBpc1ZhbGlkRWxlbWVudDogaXNWYWxpZEVsZW1lbnQsXG5cbiAgdmVyc2lvbjogUmVhY3RWZXJzaW9uLFxuXG4gIHVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOiBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSxcbiAgdW5zdGFibGVfUHJvZmlsZXI6IFJFQUNUX1BST0ZJTEVSX1RZUEUsXG5cbiAgX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6IFJlYWN0U2hhcmVkSW50ZXJuYWxzXG59O1xuXG4vLyBOb3RlOiBzb21lIEFQSXMgYXJlIGFkZGVkIHdpdGggZmVhdHVyZSBmbGFncy5cbi8vIE1ha2Ugc3VyZSB0aGF0IHN0YWJsZSBidWlsZHMgZm9yIG9wZW4gc291cmNlXG4vLyBkb24ndCBtb2RpZnkgdGhlIFJlYWN0IG9iamVjdCB0byBhdm9pZCBkZW9wdHMuXG4vLyBBbHNvIGxldCdzIG5vdCBleHBvc2UgdGhlaXIgbmFtZXMgaW4gc3RhYmxlIGJ1aWxkcy5cblxuaWYgKGVuYWJsZVN0YWJsZUNvbmN1cnJlbnRNb2RlQVBJcykge1xuICBSZWFjdC5Db25jdXJyZW50TW9kZSA9IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFO1xuICBSZWFjdC5Qcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG4gIFJlYWN0LnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlID0gdW5kZWZpbmVkO1xuICBSZWFjdC51bnN0YWJsZV9Qcm9maWxlciA9IHVuZGVmaW5lZDtcbn1cblxuXG5cbnZhciBSZWFjdCQyID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGRlZmF1bHQ6IFJlYWN0XG59KTtcblxudmFyIFJlYWN0JDMgPSAoIFJlYWN0JDIgJiYgUmVhY3QgKSB8fCBSZWFjdCQyO1xuXG4vLyBUT0RPOiBkZWNpZGUgb24gdGhlIHRvcC1sZXZlbCBleHBvcnQgZm9ybS5cbi8vIFRoaXMgaXMgaGFja3kgYnV0IG1ha2VzIGl0IHdvcmsgd2l0aCBib3RoIFJvbGx1cCBhbmQgSmVzdC5cbnZhciByZWFjdCA9IFJlYWN0JDMuZGVmYXVsdCB8fCBSZWFjdCQzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0O1xuICB9KSgpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHo9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGJhPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gY2EoYSxiLGQsYyxlLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bZCxjLGUsZyxoLGZdLG09MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW20rK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZD1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZCs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7Y2EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixkKX12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7ayhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGQpe3ZhciBjPXZvaWQgMCxlPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1lW2NdJiYoZVtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGRhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGQsYyl7aWYoUC5sZW5ndGgpe3ZhciBlPVAucG9wKCk7ZS5yZXN1bHQ9YTtlLmtleVByZWZpeD1iO2UuZnVuYz1kO2UuY29udGV4dD1jO2UuY291bnQ9MDtyZXR1cm4gZX1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpkLGNvbnRleHQ6Yyxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZCxjKXt2YXIgZT10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZXx8XCJib29sZWFuXCI9PT1lKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gZChjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtlPWFbaF07dmFyIGY9YitUKGUsaCk7Zys9UyhlLGYsZCxjKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaD1cbjA7IShlPWEubmV4dCgpKS5kb25lOyllPWUudmFsdWUsZj1iK1QoZSxoKyspLGcrPVMoZSxmLGQsYyk7ZWxzZVwib2JqZWN0XCI9PT1lJiYoZD1cIlwiK2EsQihcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWQ/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZCxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SS5jdXJyZW50O251bGw9PT1hP0IoXCIzMjFcIik6dm9pZCAwO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGQpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixkKTtVKGEsZWEsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6QihcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmJhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOmFhLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixkKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGQpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsZCl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eixjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixkKXtudWxsPT09YXx8dm9pZCAwPT09YT9CKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxlPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9XG5iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi44LjZcIixcbnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpJLFJlYWN0Q3VycmVudE93bmVyOkosYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMy42XG4gKiBzY2hlZHVsZXItdHJhY2luZy5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vLyBIZWxwcyBpZGVudGlmeSBzaWRlIGVmZmVjdHMgaW4gYmVnaW4tcGhhc2UgbGlmZWN5Y2xlIGhvb2tzIGFuZCBzZXRTdGF0ZSByZWR1Y2VyczpcblxuXG4vLyBJbiBzb21lIGNhc2VzLCBTdHJpY3RNb2RlIHNob3VsZCBhbHNvIGRvdWJsZS1yZW5kZXIgbGlmZWN5Y2xlcy5cbi8vIFRoaXMgY2FuIGJlIGNvbmZ1c2luZyBmb3IgdGVzdHMgdGhvdWdoLFxuLy8gQW5kIGl0IGNhbiBiZSBiYWQgZm9yIHBlcmZvcm1hbmNlIGluIHByb2R1Y3Rpb24uXG4vLyBUaGlzIGZlYXR1cmUgZmxhZyBjYW4gYmUgdXNlZCB0byBjb250cm9sIHRoZSBiZWhhdmlvcjpcblxuXG4vLyBUbyBwcmVzZXJ2ZSB0aGUgXCJQYXVzZSBvbiBjYXVnaHQgZXhjZXB0aW9uc1wiIGJlaGF2aW9yIG9mIHRoZSBkZWJ1Z2dlciwgd2Vcbi8vIHJlcGxheSB0aGUgYmVnaW4gcGhhc2Ugb2YgYSBmYWlsZWQgY29tcG9uZW50IGluc2lkZSBpbnZva2VHdWFyZGVkQ2FsbGJhY2suXG5cblxuLy8gV2FybiBhYm91dCBkZXByZWNhdGVkLCBhc3luYy11bnNhZmUgbGlmZWN5Y2xlczsgcmVsYXRlcyB0byBSRkMgIzY6XG5cblxuLy8gR2F0aGVyIGFkdmFuY2VkIHRpbWluZyBtZXRyaWNzIGZvciBQcm9maWxlciBzdWJ0cmVlcy5cblxuXG4vLyBUcmFjZSB3aGljaCBpbnRlcmFjdGlvbnMgdHJpZ2dlciBlYWNoIGNvbW1pdC5cbnZhciBlbmFibGVTY2hlZHVsZXJUcmFjaW5nID0gdHJ1ZTtcblxuLy8gT25seSB1c2VkIGluIHd3dyBidWlsZHMuXG4gLy8gVE9ETzogdHJ1ZT8gSGVyZSBpdCBtaWdodCBqdXN0IGJlIGZhbHNlLlxuXG4vLyBPbmx5IHVzZWQgaW4gd3d3IGJ1aWxkcy5cblxuXG4vLyBPbmx5IHVzZWQgaW4gd3d3IGJ1aWxkcy5cblxuXG4vLyBSZWFjdCBGaXJlOiBwcmV2ZW50IHRoZSB2YWx1ZSBhbmQgY2hlY2tlZCBhdHRyaWJ1dGVzIGZyb20gc3luY2luZ1xuLy8gd2l0aCB0aGVpciByZWxhdGVkIERPTSBwcm9wZXJ0aWVzXG5cblxuLy8gVGhlc2UgQVBJcyB3aWxsIG5vIGxvbmdlciBiZSBcInVuc3RhYmxlXCIgaW4gdGhlIHVwY29taW5nIDE2LjcgcmVsZWFzZSxcbi8vIENvbnRyb2wgdGhpcyBiZWhhdmlvciB3aXRoIGEgZmxhZyB0byBzdXBwb3J0IDE2LjYgbWlub3IgcmVsZWFzZXMgaW4gdGhlIG1lYW53aGlsZS5cblxudmFyIERFRkFVTFRfVEhSRUFEX0lEID0gMDtcblxuLy8gQ291bnRlcnMgdXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLlxudmFyIGludGVyYWN0aW9uSURDb3VudGVyID0gMDtcbnZhciB0aHJlYWRJRENvdW50ZXIgPSAwO1xuXG4vLyBTZXQgb2YgY3VycmVudGx5IHRyYWNlZCBpbnRlcmFjdGlvbnMuXG4vLyBJbnRlcmFjdGlvbnMgXCJzdGFja1wi4oCTXG4vLyBNZWFuaW5nIHRoYXQgbmV3bHkgdHJhY2VkIGludGVyYWN0aW9ucyBhcmUgYXBwZW5kZWQgdG8gdGhlIHByZXZpb3VzbHkgYWN0aXZlIHNldC5cbi8vIFdoZW4gYW4gaW50ZXJhY3Rpb24gZ29lcyBvdXQgb2Ygc2NvcGUsIHRoZSBwcmV2aW91cyBzZXQgKGlmIGFueSkgaXMgcmVzdG9yZWQuXG5leHBvcnRzLl9faW50ZXJhY3Rpb25zUmVmID0gbnVsbDtcblxuLy8gTGlzdGVuZXIocykgdG8gbm90aWZ5IHdoZW4gaW50ZXJhY3Rpb25zIGJlZ2luIGFuZCBlbmQuXG5leHBvcnRzLl9fc3Vic2NyaWJlclJlZiA9IG51bGw7XG5cbmlmIChlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gIGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYgPSB7XG4gICAgY3VycmVudDogbmV3IFNldCgpXG4gIH07XG4gIGV4cG9ydHMuX19zdWJzY3JpYmVyUmVmID0ge1xuICAgIGN1cnJlbnQ6IG51bGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gdW5zdGFibGVfY2xlYXIoY2FsbGJhY2spIHtcbiAgaWYgKCFlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH1cblxuICB2YXIgcHJldkludGVyYWN0aW9ucyA9IGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudDtcbiAgZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50ID0gbmV3IFNldCgpO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50ID0gcHJldkludGVyYWN0aW9ucztcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnN0YWJsZV9nZXRDdXJyZW50KCkge1xuICBpZiAoIWVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50O1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX2dldFRocmVhZElEKCkge1xuICByZXR1cm4gKyt0aHJlYWRJRENvdW50ZXI7XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX3RyYWNlKG5hbWUsIHRpbWVzdGFtcCwgY2FsbGJhY2spIHtcbiAgdmFyIHRocmVhZElEID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBERUZBVUxUX1RIUkVBRF9JRDtcblxuICBpZiAoIWVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIHZhciBpbnRlcmFjdGlvbiA9IHtcbiAgICBfX2NvdW50OiAxLFxuICAgIGlkOiBpbnRlcmFjdGlvbklEQ291bnRlcisrLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgdGltZXN0YW1wOiB0aW1lc3RhbXBcbiAgfTtcblxuICB2YXIgcHJldkludGVyYWN0aW9ucyA9IGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudDtcblxuICAvLyBUcmFjZWQgaW50ZXJhY3Rpb25zIHNob3VsZCBzdGFjay9hY2N1bXVsYXRlLlxuICAvLyBUbyBkbyB0aGF0LCBjbG9uZSB0aGUgY3VycmVudCBpbnRlcmFjdGlvbnMuXG4gIC8vIFRoZSBwcmV2aW91cyBzZXQgd2lsbCBiZSByZXN0b3JlZCB1cG9uIGNvbXBsZXRpb24uXG4gIHZhciBpbnRlcmFjdGlvbnMgPSBuZXcgU2V0KHByZXZJbnRlcmFjdGlvbnMpO1xuICBpbnRlcmFjdGlvbnMuYWRkKGludGVyYWN0aW9uKTtcbiAgZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50ID0gaW50ZXJhY3Rpb25zO1xuXG4gIHZhciBzdWJzY3JpYmVyID0gZXhwb3J0cy5fX3N1YnNjcmliZXJSZWYuY3VycmVudDtcbiAgdmFyIHJldHVyblZhbHVlID0gdm9pZCAwO1xuXG4gIHRyeSB7XG4gICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwpIHtcbiAgICAgIHN1YnNjcmliZXIub25JbnRlcmFjdGlvblRyYWNlZChpbnRlcmFjdGlvbik7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCkge1xuICAgICAgICBzdWJzY3JpYmVyLm9uV29ya1N0YXJ0ZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVyblZhbHVlID0gY2FsbGJhY2soKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudCA9IHByZXZJbnRlcmFjdGlvbnM7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5vbldvcmtTdG9wcGVkKGludGVyYWN0aW9ucywgdGhyZWFkSUQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpbnRlcmFjdGlvbi5fX2NvdW50LS07XG5cbiAgICAgICAgICAvLyBJZiBubyBhc3luYyB3b3JrIHdhcyBzY2hlZHVsZWQgZm9yIHRoaXMgaW50ZXJhY3Rpb24sXG4gICAgICAgICAgLy8gTm90aWZ5IHN1YnNjcmliZXJzIHRoYXQgaXQncyBjb21wbGV0ZWQuXG4gICAgICAgICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwgJiYgaW50ZXJhY3Rpb24uX19jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5vbkludGVyYWN0aW9uU2NoZWR1bGVkV29ya0NvbXBsZXRlZChpbnRlcmFjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5mdW5jdGlvbiB1bnN0YWJsZV93cmFwKGNhbGxiYWNrKSB7XG4gIHZhciB0aHJlYWRJRCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogREVGQVVMVF9USFJFQURfSUQ7XG5cbiAgaWYgKCFlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHdyYXBwZWRJbnRlcmFjdGlvbnMgPSBleHBvcnRzLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIHN1YnNjcmliZXIgPSBleHBvcnRzLl9fc3Vic2NyaWJlclJlZi5jdXJyZW50O1xuICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCkge1xuICAgIHN1YnNjcmliZXIub25Xb3JrU2NoZWR1bGVkKHdyYXBwZWRJbnRlcmFjdGlvbnMsIHRocmVhZElEKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSB0aGUgcGVuZGluZyBhc3luYyB3b3JrIGNvdW50IGZvciB0aGUgY3VycmVudCBpbnRlcmFjdGlvbnMuXG4gIC8vIFVwZGF0ZSBhZnRlciBjYWxsaW5nIHN1YnNjcmliZXJzIGluIGNhc2Ugb2YgZXJyb3IuXG4gIHdyYXBwZWRJbnRlcmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICBpbnRlcmFjdGlvbi5fX2NvdW50Kys7XG4gIH0pO1xuXG4gIHZhciBoYXNSdW4gPSBmYWxzZTtcblxuICBmdW5jdGlvbiB3cmFwcGVkKCkge1xuICAgIHZhciBwcmV2SW50ZXJhY3Rpb25zID0gZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50O1xuICAgIGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudCA9IHdyYXBwZWRJbnRlcmFjdGlvbnM7XG5cbiAgICBzdWJzY3JpYmVyID0gZXhwb3J0cy5fX3N1YnNjcmliZXJSZWYuY3VycmVudDtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSB2b2lkIDA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgc3Vic2NyaWJlci5vbldvcmtTdGFydGVkKHdyYXBwZWRJbnRlcmFjdGlvbnMsIHRocmVhZElEKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm5WYWx1ZSA9IGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBleHBvcnRzLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQgPSBwcmV2SW50ZXJhY3Rpb25zO1xuXG4gICAgICAgICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIub25Xb3JrU3RvcHBlZCh3cmFwcGVkSW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKCFoYXNSdW4pIHtcbiAgICAgICAgLy8gV2Ugb25seSBleHBlY3QgYSB3cmFwcGVkIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIG9uY2UsXG4gICAgICAgIC8vIEJ1dCBpbiB0aGUgZXZlbnQgdGhhdCBpdCdzIGV4ZWN1dGVkIG1vcmUgdGhhbiBvbmNl4oCTXG4gICAgICAgIC8vIE9ubHkgZGVjcmVtZW50IHRoZSBvdXRzdGFuZGluZyBpbnRlcmFjdGlvbiBjb3VudHMgb25jZS5cbiAgICAgICAgaGFzUnVuID0gdHJ1ZTtcblxuICAgICAgICAvLyBVcGRhdGUgcGVuZGluZyBhc3luYyBjb3VudHMgZm9yIGFsbCB3cmFwcGVkIGludGVyYWN0aW9ucy5cbiAgICAgICAgLy8gSWYgdGhpcyB3YXMgdGhlIGxhc3Qgc2NoZWR1bGVkIGFzeW5jIHdvcmsgZm9yIGFueSBvZiB0aGVtLFxuICAgICAgICAvLyBNYXJrIHRoZW0gYXMgY29tcGxldGVkLlxuICAgICAgICB3cmFwcGVkSW50ZXJhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVyYWN0aW9uKSB7XG4gICAgICAgICAgaW50ZXJhY3Rpb24uX19jb3VudC0tO1xuXG4gICAgICAgICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwgJiYgaW50ZXJhY3Rpb24uX19jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5vbkludGVyYWN0aW9uU2NoZWR1bGVkV29ya0NvbXBsZXRlZChpbnRlcmFjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3cmFwcGVkLmNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBzdWJzY3JpYmVyID0gZXhwb3J0cy5fX3N1YnNjcmliZXJSZWYuY3VycmVudDtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCkge1xuICAgICAgICBzdWJzY3JpYmVyLm9uV29ya0NhbmNlbGVkKHdyYXBwZWRJbnRlcmFjdGlvbnMsIHRocmVhZElEKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gVXBkYXRlIHBlbmRpbmcgYXN5bmMgY291bnRzIGZvciBhbGwgd3JhcHBlZCBpbnRlcmFjdGlvbnMuXG4gICAgICAvLyBJZiB0aGlzIHdhcyB0aGUgbGFzdCBzY2hlZHVsZWQgYXN5bmMgd29yayBmb3IgYW55IG9mIHRoZW0sXG4gICAgICAvLyBNYXJrIHRoZW0gYXMgY29tcGxldGVkLlxuICAgICAgd3JhcHBlZEludGVyYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlcmFjdGlvbikge1xuICAgICAgICBpbnRlcmFjdGlvbi5fX2NvdW50LS07XG5cbiAgICAgICAgaWYgKHN1YnNjcmliZXIgJiYgaW50ZXJhY3Rpb24uX19jb3VudCA9PT0gMCkge1xuICAgICAgICAgIHN1YnNjcmliZXIub25JbnRlcmFjdGlvblNjaGVkdWxlZFdvcmtDb21wbGV0ZWQoaW50ZXJhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbnZhciBzdWJzY3JpYmVycyA9IG51bGw7XG5pZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbn1cblxuZnVuY3Rpb24gdW5zdGFibGVfc3Vic2NyaWJlKHN1YnNjcmliZXIpIHtcbiAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoc3Vic2NyaWJlcik7XG5cbiAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMSkge1xuICAgICAgZXhwb3J0cy5fX3N1YnNjcmliZXJSZWYuY3VycmVudCA9IHtcbiAgICAgICAgb25JbnRlcmFjdGlvblNjaGVkdWxlZFdvcmtDb21wbGV0ZWQ6IG9uSW50ZXJhY3Rpb25TY2hlZHVsZWRXb3JrQ29tcGxldGVkLFxuICAgICAgICBvbkludGVyYWN0aW9uVHJhY2VkOiBvbkludGVyYWN0aW9uVHJhY2VkLFxuICAgICAgICBvbldvcmtDYW5jZWxlZDogb25Xb3JrQ2FuY2VsZWQsXG4gICAgICAgIG9uV29ya1NjaGVkdWxlZDogb25Xb3JrU2NoZWR1bGVkLFxuICAgICAgICBvbldvcmtTdGFydGVkOiBvbldvcmtTdGFydGVkLFxuICAgICAgICBvbldvcmtTdG9wcGVkOiBvbldvcmtTdG9wcGVkXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1bnN0YWJsZV91bnN1YnNjcmliZShzdWJzY3JpYmVyKSB7XG4gIGlmIChlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gICAgc3Vic2NyaWJlcnMuZGVsZXRlKHN1YnNjcmliZXIpO1xuXG4gICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgIGV4cG9ydHMuX19zdWJzY3JpYmVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvbkludGVyYWN0aW9uVHJhY2VkKGludGVyYWN0aW9uKSB7XG4gIHZhciBkaWRDYXRjaEVycm9yID0gZmFsc2U7XG4gIHZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbiAgc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpYmVyLm9uSW50ZXJhY3Rpb25UcmFjZWQoaW50ZXJhY3Rpb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoIWRpZENhdGNoRXJyb3IpIHtcbiAgICAgICAgZGlkQ2F0Y2hFcnJvciA9IHRydWU7XG4gICAgICAgIGNhdWdodEVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoZGlkQ2F0Y2hFcnJvcikge1xuICAgIHRocm93IGNhdWdodEVycm9yO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uSW50ZXJhY3Rpb25TY2hlZHVsZWRXb3JrQ29tcGxldGVkKGludGVyYWN0aW9uKSB7XG4gIHZhciBkaWRDYXRjaEVycm9yID0gZmFsc2U7XG4gIHZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbiAgc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpYmVyLm9uSW50ZXJhY3Rpb25TY2hlZHVsZWRXb3JrQ29tcGxldGVkKGludGVyYWN0aW9uKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKCFkaWRDYXRjaEVycm9yKSB7XG4gICAgICAgIGRpZENhdGNoRXJyb3IgPSB0cnVlO1xuICAgICAgICBjYXVnaHRFcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGRpZENhdGNoRXJyb3IpIHtcbiAgICB0aHJvdyBjYXVnaHRFcnJvcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbldvcmtTY2hlZHVsZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCkge1xuICB2YXIgZGlkQ2F0Y2hFcnJvciA9IGZhbHNlO1xuICB2YXIgY2F1Z2h0RXJyb3IgPSBudWxsO1xuXG4gIHN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICB0cnkge1xuICAgICAgc3Vic2NyaWJlci5vbldvcmtTY2hlZHVsZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICghZGlkQ2F0Y2hFcnJvcikge1xuICAgICAgICBkaWRDYXRjaEVycm9yID0gdHJ1ZTtcbiAgICAgICAgY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChkaWRDYXRjaEVycm9yKSB7XG4gICAgdGhyb3cgY2F1Z2h0RXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25Xb3JrU3RhcnRlZChpbnRlcmFjdGlvbnMsIHRocmVhZElEKSB7XG4gIHZhciBkaWRDYXRjaEVycm9yID0gZmFsc2U7XG4gIHZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbiAgc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpYmVyLm9uV29ya1N0YXJ0ZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICghZGlkQ2F0Y2hFcnJvcikge1xuICAgICAgICBkaWRDYXRjaEVycm9yID0gdHJ1ZTtcbiAgICAgICAgY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChkaWRDYXRjaEVycm9yKSB7XG4gICAgdGhyb3cgY2F1Z2h0RXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25Xb3JrU3RvcHBlZChpbnRlcmFjdGlvbnMsIHRocmVhZElEKSB7XG4gIHZhciBkaWRDYXRjaEVycm9yID0gZmFsc2U7XG4gIHZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbiAgc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpYmVyLm9uV29ya1N0b3BwZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICghZGlkQ2F0Y2hFcnJvcikge1xuICAgICAgICBkaWRDYXRjaEVycm9yID0gdHJ1ZTtcbiAgICAgICAgY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChkaWRDYXRjaEVycm9yKSB7XG4gICAgdGhyb3cgY2F1Z2h0RXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25Xb3JrQ2FuY2VsZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCkge1xuICB2YXIgZGlkQ2F0Y2hFcnJvciA9IGZhbHNlO1xuICB2YXIgY2F1Z2h0RXJyb3IgPSBudWxsO1xuXG4gIHN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICB0cnkge1xuICAgICAgc3Vic2NyaWJlci5vbldvcmtDYW5jZWxlZChpbnRlcmFjdGlvbnMsIHRocmVhZElEKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKCFkaWRDYXRjaEVycm9yKSB7XG4gICAgICAgIGRpZENhdGNoRXJyb3IgPSB0cnVlO1xuICAgICAgICBjYXVnaHRFcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGRpZENhdGNoRXJyb3IpIHtcbiAgICB0aHJvdyBjYXVnaHRFcnJvcjtcbiAgfVxufVxuXG5leHBvcnRzLnVuc3RhYmxlX2NsZWFyID0gdW5zdGFibGVfY2xlYXI7XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnQgPSB1bnN0YWJsZV9nZXRDdXJyZW50O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRUaHJlYWRJRCA9IHVuc3RhYmxlX2dldFRocmVhZElEO1xuZXhwb3J0cy51bnN0YWJsZV90cmFjZSA9IHVuc3RhYmxlX3RyYWNlO1xuZXhwb3J0cy51bnN0YWJsZV93cmFwID0gdW5zdGFibGVfd3JhcDtcbmV4cG9ydHMudW5zdGFibGVfc3Vic2NyaWJlID0gdW5zdGFibGVfc3Vic2NyaWJlO1xuZXhwb3J0cy51bnN0YWJsZV91bnN1YnNjcmliZSA9IHVuc3RhYmxlX3Vuc3Vic2NyaWJlO1xuICB9KSgpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci10cmFjaW5nLmRldmVsb3BtZW50LmpzIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjEzLjZcbiAqIHNjaGVkdWxlci10cmFjaW5nLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBiPTA7ZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZj1udWxsO2V4cG9ydHMuX19zdWJzY3JpYmVyUmVmPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9jbGVhcj1mdW5jdGlvbihhKXtyZXR1cm4gYSgpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH07ZXhwb3J0cy51bnN0YWJsZV9nZXRUaHJlYWRJRD1mdW5jdGlvbigpe3JldHVybisrYn07ZXhwb3J0cy51bnN0YWJsZV90cmFjZT1mdW5jdGlvbihhLGQsYyl7cmV0dXJuIGMoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwPWZ1bmN0aW9uKGEpe3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX3N1YnNjcmliZT1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV91bnN1YnNjcmliZT1mdW5jdGlvbigpe307XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NjaGVkdWxlci9janMvc2NoZWR1bGVyLXRyYWNpbmcucHJvZHVjdGlvbi5taW4uanMiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTMuNlxuICogc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBlbmFibGVTY2hlZHVsZXJEZWJ1Z2dpbmcgPSBmYWxzZTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdmFyICovXG5cbi8vIFRPRE86IFVzZSBzeW1ib2xzP1xudmFyIEltbWVkaWF0ZVByaW9yaXR5ID0gMTtcbnZhciBVc2VyQmxvY2tpbmdQcmlvcml0eSA9IDI7XG52YXIgTm9ybWFsUHJpb3JpdHkgPSAzO1xudmFyIExvd1ByaW9yaXR5ID0gNDtcbnZhciBJZGxlUHJpb3JpdHkgPSA1O1xuXG4vLyBNYXggMzEgYml0IGludGVnZXIuIFRoZSBtYXggaW50ZWdlciBzaXplIGluIFY4IGZvciAzMi1iaXQgc3lzdGVtcy5cbi8vIE1hdGgucG93KDIsIDMwKSAtIDFcbi8vIDBiMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExXG52YXIgbWF4U2lnbmVkMzFCaXRJbnQgPSAxMDczNzQxODIzO1xuXG4vLyBUaW1lcyBvdXQgaW1tZWRpYXRlbHlcbnZhciBJTU1FRElBVEVfUFJJT1JJVFlfVElNRU9VVCA9IC0xO1xuLy8gRXZlbnR1YWxseSB0aW1lcyBvdXRcbnZhciBVU0VSX0JMT0NLSU5HX1BSSU9SSVRZID0gMjUwO1xudmFyIE5PUk1BTF9QUklPUklUWV9USU1FT1VUID0gNTAwMDtcbnZhciBMT1dfUFJJT1JJVFlfVElNRU9VVCA9IDEwMDAwO1xuLy8gTmV2ZXIgdGltZXMgb3V0XG52YXIgSURMRV9QUklPUklUWSA9IG1heFNpZ25lZDMxQml0SW50O1xuXG4vLyBDYWxsYmFja3MgYXJlIHN0b3JlZCBhcyBhIGNpcmN1bGFyLCBkb3VibHkgbGlua2VkIGxpc3QuXG52YXIgZmlyc3RDYWxsYmFja05vZGUgPSBudWxsO1xuXG52YXIgY3VycmVudERpZFRpbWVvdXQgPSBmYWxzZTtcbi8vIFBhdXNpbmcgdGhlIHNjaGVkdWxlciBpcyB1c2VmdWwgZm9yIGRlYnVnZ2luZy5cbnZhciBpc1NjaGVkdWxlclBhdXNlZCA9IGZhbHNlO1xuXG52YXIgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBOb3JtYWxQcmlvcml0eTtcbnZhciBjdXJyZW50RXZlbnRTdGFydFRpbWUgPSAtMTtcbnZhciBjdXJyZW50RXhwaXJhdGlvblRpbWUgPSAtMTtcblxuLy8gVGhpcyBpcyBzZXQgd2hlbiBhIGNhbGxiYWNrIGlzIGJlaW5nIGV4ZWN1dGVkLCB0byBwcmV2ZW50IHJlLWVudHJhbmN5LlxudmFyIGlzRXhlY3V0aW5nQ2FsbGJhY2sgPSBmYWxzZTtcblxudmFyIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gZmFsc2U7XG5cbnZhciBoYXNOYXRpdmVQZXJmb3JtYW5jZU5vdyA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJztcblxuZnVuY3Rpb24gZW5zdXJlSG9zdENhbGxiYWNrSXNTY2hlZHVsZWQoKSB7XG4gIGlmIChpc0V4ZWN1dGluZ0NhbGxiYWNrKSB7XG4gICAgLy8gRG9uJ3Qgc2NoZWR1bGUgd29yayB5ZXQ7IHdhaXQgdW50aWwgdGhlIG5leHQgdGltZSB3ZSB5aWVsZC5cbiAgICByZXR1cm47XG4gIH1cbiAgLy8gU2NoZWR1bGUgdGhlIGhvc3QgY2FsbGJhY2sgdXNpbmcgdGhlIGVhcmxpZXN0IGV4cGlyYXRpb24gaW4gdGhlIGxpc3QuXG4gIHZhciBleHBpcmF0aW9uVGltZSA9IGZpcnN0Q2FsbGJhY2tOb2RlLmV4cGlyYXRpb25UaW1lO1xuICBpZiAoIWlzSG9zdENhbGxiYWNrU2NoZWR1bGVkKSB7XG4gICAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIC8vIENhbmNlbCB0aGUgZXhpc3RpbmcgaG9zdCBjYWxsYmFjay5cbiAgICBjYW5jZWxIb3N0Q2FsbGJhY2soKTtcbiAgfVxuICByZXF1ZXN0SG9zdENhbGxiYWNrKGZsdXNoV29yaywgZXhwaXJhdGlvblRpbWUpO1xufVxuXG5mdW5jdGlvbiBmbHVzaEZpcnN0Q2FsbGJhY2soKSB7XG4gIHZhciBmbHVzaGVkTm9kZSA9IGZpcnN0Q2FsbGJhY2tOb2RlO1xuXG4gIC8vIFJlbW92ZSB0aGUgbm9kZSBmcm9tIHRoZSBsaXN0IGJlZm9yZSBjYWxsaW5nIHRoZSBjYWxsYmFjay4gVGhhdCB3YXkgdGhlXG4gIC8vIGxpc3QgaXMgaW4gYSBjb25zaXN0ZW50IHN0YXRlIGV2ZW4gaWYgdGhlIGNhbGxiYWNrIHRocm93cy5cbiAgdmFyIG5leHQgPSBmaXJzdENhbGxiYWNrTm9kZS5uZXh0O1xuICBpZiAoZmlyc3RDYWxsYmFja05vZGUgPT09IG5leHQpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBsYXN0IGNhbGxiYWNrIGluIHRoZSBsaXN0LlxuICAgIGZpcnN0Q2FsbGJhY2tOb2RlID0gbnVsbDtcbiAgICBuZXh0ID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGFzdENhbGxiYWNrTm9kZSA9IGZpcnN0Q2FsbGJhY2tOb2RlLnByZXZpb3VzO1xuICAgIGZpcnN0Q2FsbGJhY2tOb2RlID0gbGFzdENhbGxiYWNrTm9kZS5uZXh0ID0gbmV4dDtcbiAgICBuZXh0LnByZXZpb3VzID0gbGFzdENhbGxiYWNrTm9kZTtcbiAgfVxuXG4gIGZsdXNoZWROb2RlLm5leHQgPSBmbHVzaGVkTm9kZS5wcmV2aW91cyA9IG51bGw7XG5cbiAgLy8gTm93IGl0J3Mgc2FmZSB0byBjYWxsIHRoZSBjYWxsYmFjay5cbiAgdmFyIGNhbGxiYWNrID0gZmx1c2hlZE5vZGUuY2FsbGJhY2s7XG4gIHZhciBleHBpcmF0aW9uVGltZSA9IGZsdXNoZWROb2RlLmV4cGlyYXRpb25UaW1lO1xuICB2YXIgcHJpb3JpdHlMZXZlbCA9IGZsdXNoZWROb2RlLnByaW9yaXR5TGV2ZWw7XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgdmFyIHByZXZpb3VzRXhwaXJhdGlvblRpbWUgPSBjdXJyZW50RXhwaXJhdGlvblRpbWU7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgY3VycmVudEV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIHZhciBjb250aW51YXRpb25DYWxsYmFjaztcbiAgdHJ5IHtcbiAgICBjb250aW51YXRpb25DYWxsYmFjayA9IGNhbGxiYWNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gICAgY3VycmVudEV4cGlyYXRpb25UaW1lID0gcHJldmlvdXNFeHBpcmF0aW9uVGltZTtcbiAgfVxuXG4gIC8vIEEgY2FsbGJhY2sgbWF5IHJldHVybiBhIGNvbnRpbnVhdGlvbi4gVGhlIGNvbnRpbnVhdGlvbiBzaG91bGQgYmUgc2NoZWR1bGVkXG4gIC8vIHdpdGggdGhlIHNhbWUgcHJpb3JpdHkgYW5kIGV4cGlyYXRpb24gYXMgdGhlIGp1c3QtZmluaXNoZWQgY2FsbGJhY2suXG4gIGlmICh0eXBlb2YgY29udGludWF0aW9uQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgY29udGludWF0aW9uTm9kZSA9IHtcbiAgICAgIGNhbGxiYWNrOiBjb250aW51YXRpb25DYWxsYmFjayxcbiAgICAgIHByaW9yaXR5TGV2ZWw6IHByaW9yaXR5TGV2ZWwsXG4gICAgICBleHBpcmF0aW9uVGltZTogZXhwaXJhdGlvblRpbWUsXG4gICAgICBuZXh0OiBudWxsLFxuICAgICAgcHJldmlvdXM6IG51bGxcbiAgICB9O1xuXG4gICAgLy8gSW5zZXJ0IHRoZSBuZXcgY2FsbGJhY2sgaW50byB0aGUgbGlzdCwgc29ydGVkIGJ5IGl0cyBleHBpcmF0aW9uLiBUaGlzIGlzXG4gICAgLy8gYWxtb3N0IHRoZSBzYW1lIGFzIHRoZSBjb2RlIGluIGBzY2hlZHVsZUNhbGxiYWNrYCwgZXhjZXB0IHRoZSBjYWxsYmFja1xuICAgIC8vIGlzIGluc2VydGVkIGludG8gdGhlIGxpc3QgKmJlZm9yZSogY2FsbGJhY2tzIG9mIGVxdWFsIGV4cGlyYXRpb24gaW5zdGVhZFxuICAgIC8vIG9mIGFmdGVyLlxuICAgIGlmIChmaXJzdENhbGxiYWNrTm9kZSA9PT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgY2FsbGJhY2sgaW4gdGhlIGxpc3QuXG4gICAgICBmaXJzdENhbGxiYWNrTm9kZSA9IGNvbnRpbnVhdGlvbk5vZGUubmV4dCA9IGNvbnRpbnVhdGlvbk5vZGUucHJldmlvdXMgPSBjb250aW51YXRpb25Ob2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFmdGVyQ29udGludWF0aW9uID0gbnVsbDtcbiAgICAgIHZhciBub2RlID0gZmlyc3RDYWxsYmFja05vZGU7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChub2RlLmV4cGlyYXRpb25UaW1lID49IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgICAgLy8gVGhpcyBjYWxsYmFjayBleHBpcmVzIGF0IG9yIGFmdGVyIHRoZSBjb250aW51YXRpb24uIFdlIHdpbGwgaW5zZXJ0XG4gICAgICAgICAgLy8gdGhlIGNvbnRpbnVhdGlvbiAqYmVmb3JlKiB0aGlzIGNhbGxiYWNrLlxuICAgICAgICAgIG5leHRBZnRlckNvbnRpbnVhdGlvbiA9IG5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICAgIH0gd2hpbGUgKG5vZGUgIT09IGZpcnN0Q2FsbGJhY2tOb2RlKTtcblxuICAgICAgaWYgKG5leHRBZnRlckNvbnRpbnVhdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAvLyBObyBlcXVhbCBvciBsb3dlciBwcmlvcml0eSBjYWxsYmFjayB3YXMgZm91bmQsIHdoaWNoIG1lYW5zIHRoZSBuZXdcbiAgICAgICAgLy8gY2FsbGJhY2sgaXMgdGhlIGxvd2VzdCBwcmlvcml0eSBjYWxsYmFjayBpbiB0aGUgbGlzdC5cbiAgICAgICAgbmV4dEFmdGVyQ29udGludWF0aW9uID0gZmlyc3RDYWxsYmFja05vZGU7XG4gICAgICB9IGVsc2UgaWYgKG5leHRBZnRlckNvbnRpbnVhdGlvbiA9PT0gZmlyc3RDYWxsYmFja05vZGUpIHtcbiAgICAgICAgLy8gVGhlIG5ldyBjYWxsYmFjayBpcyB0aGUgaGlnaGVzdCBwcmlvcml0eSBjYWxsYmFjayBpbiB0aGUgbGlzdC5cbiAgICAgICAgZmlyc3RDYWxsYmFja05vZGUgPSBjb250aW51YXRpb25Ob2RlO1xuICAgICAgICBlbnN1cmVIb3N0Q2FsbGJhY2tJc1NjaGVkdWxlZCgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldmlvdXMgPSBuZXh0QWZ0ZXJDb250aW51YXRpb24ucHJldmlvdXM7XG4gICAgICBwcmV2aW91cy5uZXh0ID0gbmV4dEFmdGVyQ29udGludWF0aW9uLnByZXZpb3VzID0gY29udGludWF0aW9uTm9kZTtcbiAgICAgIGNvbnRpbnVhdGlvbk5vZGUubmV4dCA9IG5leHRBZnRlckNvbnRpbnVhdGlvbjtcbiAgICAgIGNvbnRpbnVhdGlvbk5vZGUucHJldmlvdXMgPSBwcmV2aW91cztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmx1c2hJbW1lZGlhdGVXb3JrKCkge1xuICBpZiAoXG4gIC8vIENvbmZpcm0gd2UndmUgZXhpdGVkIHRoZSBvdXRlciBtb3N0IGV2ZW50IGhhbmRsZXJcbiAgY3VycmVudEV2ZW50U3RhcnRUaW1lID09PSAtMSAmJiBmaXJzdENhbGxiYWNrTm9kZSAhPT0gbnVsbCAmJiBmaXJzdENhbGxiYWNrTm9kZS5wcmlvcml0eUxldmVsID09PSBJbW1lZGlhdGVQcmlvcml0eSkge1xuICAgIGlzRXhlY3V0aW5nQ2FsbGJhY2sgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICBkbyB7XG4gICAgICAgIGZsdXNoRmlyc3RDYWxsYmFjaygpO1xuICAgICAgfSB3aGlsZSAoXG4gICAgICAvLyBLZWVwIGZsdXNoaW5nIHVudGlsIHRoZXJlIGFyZSBubyBtb3JlIGltbWVkaWF0ZSBjYWxsYmFja3NcbiAgICAgIGZpcnN0Q2FsbGJhY2tOb2RlICE9PSBudWxsICYmIGZpcnN0Q2FsbGJhY2tOb2RlLnByaW9yaXR5TGV2ZWwgPT09IEltbWVkaWF0ZVByaW9yaXR5KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNFeGVjdXRpbmdDYWxsYmFjayA9IGZhbHNlO1xuICAgICAgaWYgKGZpcnN0Q2FsbGJhY2tOb2RlICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFRoZXJlJ3Mgc3RpbGwgd29yayByZW1haW5pbmcuIFJlcXVlc3QgYW5vdGhlciBjYWxsYmFjay5cbiAgICAgICAgZW5zdXJlSG9zdENhbGxiYWNrSXNTY2hlZHVsZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZsdXNoV29yayhkaWRUaW1lb3V0KSB7XG4gIC8vIEV4aXQgcmlnaHQgYXdheSBpZiB3ZSdyZSBjdXJyZW50bHkgcGF1c2VkXG5cbiAgaWYgKGVuYWJsZVNjaGVkdWxlckRlYnVnZ2luZyAmJiBpc1NjaGVkdWxlclBhdXNlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlzRXhlY3V0aW5nQ2FsbGJhY2sgPSB0cnVlO1xuICB2YXIgcHJldmlvdXNEaWRUaW1lb3V0ID0gY3VycmVudERpZFRpbWVvdXQ7XG4gIGN1cnJlbnREaWRUaW1lb3V0ID0gZGlkVGltZW91dDtcbiAgdHJ5IHtcbiAgICBpZiAoZGlkVGltZW91dCkge1xuICAgICAgLy8gRmx1c2ggYWxsIHRoZSBleHBpcmVkIGNhbGxiYWNrcyB3aXRob3V0IHlpZWxkaW5nLlxuICAgICAgd2hpbGUgKGZpcnN0Q2FsbGJhY2tOb2RlICE9PSBudWxsICYmICEoZW5hYmxlU2NoZWR1bGVyRGVidWdnaW5nICYmIGlzU2NoZWR1bGVyUGF1c2VkKSkge1xuICAgICAgICAvLyBUT0RPIFdyYXAgaW4gZmVhdHVyZSBmbGFnXG4gICAgICAgIC8vIFJlYWQgdGhlIGN1cnJlbnQgdGltZS4gRmx1c2ggYWxsIHRoZSBjYWxsYmFja3MgdGhhdCBleHBpcmUgYXQgb3JcbiAgICAgICAgLy8gZWFybGllciB0aGFuIHRoYXQgdGltZS4gVGhlbiByZWFkIHRoZSBjdXJyZW50IHRpbWUgYWdhaW4gYW5kIHJlcGVhdC5cbiAgICAgICAgLy8gVGhpcyBvcHRpbWl6ZXMgZm9yIGFzIGZldyBwZXJmb3JtYW5jZS5ub3cgY2FsbHMgYXMgcG9zc2libGUuXG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG4gICAgICAgIGlmIChmaXJzdENhbGxiYWNrTm9kZS5leHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZSkge1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGZsdXNoRmlyc3RDYWxsYmFjaygpO1xuICAgICAgICAgIH0gd2hpbGUgKGZpcnN0Q2FsbGJhY2tOb2RlICE9PSBudWxsICYmIGZpcnN0Q2FsbGJhY2tOb2RlLmV4cGlyYXRpb25UaW1lIDw9IGN1cnJlbnRUaW1lICYmICEoZW5hYmxlU2NoZWR1bGVyRGVidWdnaW5nICYmIGlzU2NoZWR1bGVyUGF1c2VkKSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEtlZXAgZmx1c2hpbmcgY2FsbGJhY2tzIHVudGlsIHdlIHJ1biBvdXQgb2YgdGltZSBpbiB0aGUgZnJhbWUuXG4gICAgICBpZiAoZmlyc3RDYWxsYmFja05vZGUgIT09IG51bGwpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmIChlbmFibGVTY2hlZHVsZXJEZWJ1Z2dpbmcgJiYgaXNTY2hlZHVsZXJQYXVzZWQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaEZpcnN0Q2FsbGJhY2soKTtcbiAgICAgICAgfSB3aGlsZSAoZmlyc3RDYWxsYmFja05vZGUgIT09IG51bGwgJiYgIXNob3VsZFlpZWxkVG9Ib3N0KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpc0V4ZWN1dGluZ0NhbGxiYWNrID0gZmFsc2U7XG4gICAgY3VycmVudERpZFRpbWVvdXQgPSBwcmV2aW91c0RpZFRpbWVvdXQ7XG4gICAgaWYgKGZpcnN0Q2FsbGJhY2tOb2RlICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGVyZSdzIHN0aWxsIHdvcmsgcmVtYWluaW5nLiBSZXF1ZXN0IGFub3RoZXIgY2FsbGJhY2suXG4gICAgICBlbnN1cmVIb3N0Q2FsbGJhY2tJc1NjaGVkdWxlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBCZWZvcmUgZXhpdGluZywgZmx1c2ggYWxsIHRoZSBpbW1lZGlhdGUgd29yayB0aGF0IHdhcyBzY2hlZHVsZWQuXG4gICAgZmx1c2hJbW1lZGlhdGVXb3JrKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHByaW9yaXR5TGV2ZWwsIGV2ZW50SGFuZGxlcikge1xuICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIEltbWVkaWF0ZVByaW9yaXR5OlxuICAgIGNhc2UgVXNlckJsb2NraW5nUHJpb3JpdHk6XG4gICAgY2FzZSBOb3JtYWxQcmlvcml0eTpcbiAgICBjYXNlIExvd1ByaW9yaXR5OlxuICAgIGNhc2UgSWRsZVByaW9yaXR5OlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByaW9yaXR5TGV2ZWwgPSBOb3JtYWxQcmlvcml0eTtcbiAgfVxuXG4gIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgdmFyIHByZXZpb3VzRXZlbnRTdGFydFRpbWUgPSBjdXJyZW50RXZlbnRTdGFydFRpbWU7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgY3VycmVudEV2ZW50U3RhcnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcblxuICB0cnkge1xuICAgIHJldHVybiBldmVudEhhbmRsZXIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgICBjdXJyZW50RXZlbnRTdGFydFRpbWUgPSBwcmV2aW91c0V2ZW50U3RhcnRUaW1lO1xuXG4gICAgLy8gQmVmb3JlIGV4aXRpbmcsIGZsdXNoIGFsbCB0aGUgaW1tZWRpYXRlIHdvcmsgdGhhdCB3YXMgc2NoZWR1bGVkLlxuICAgIGZsdXNoSW1tZWRpYXRlV29yaygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX25leHQoZXZlbnRIYW5kbGVyKSB7XG4gIHZhciBwcmlvcml0eUxldmVsID0gdm9pZCAwO1xuICBzd2l0Y2ggKGN1cnJlbnRQcmlvcml0eUxldmVsKSB7XG4gICAgY2FzZSBJbW1lZGlhdGVQcmlvcml0eTpcbiAgICBjYXNlIFVzZXJCbG9ja2luZ1ByaW9yaXR5OlxuICAgIGNhc2UgTm9ybWFsUHJpb3JpdHk6XG4gICAgICAvLyBTaGlmdCBkb3duIHRvIG5vcm1hbCBwcmlvcml0eVxuICAgICAgcHJpb3JpdHlMZXZlbCA9IE5vcm1hbFByaW9yaXR5O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIEFueXRoaW5nIGxvd2VyIHRoYW4gbm9ybWFsIHByaW9yaXR5IHNob3VsZCByZW1haW4gYXQgdGhlIGN1cnJlbnQgbGV2ZWwuXG4gICAgICBwcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgdmFyIHByZXZpb3VzRXZlbnRTdGFydFRpbWUgPSBjdXJyZW50RXZlbnRTdGFydFRpbWU7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgY3VycmVudEV2ZW50U3RhcnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcblxuICB0cnkge1xuICAgIHJldHVybiBldmVudEhhbmRsZXIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgICBjdXJyZW50RXZlbnRTdGFydFRpbWUgPSBwcmV2aW91c0V2ZW50U3RhcnRUaW1lO1xuXG4gICAgLy8gQmVmb3JlIGV4aXRpbmcsIGZsdXNoIGFsbCB0aGUgaW1tZWRpYXRlIHdvcmsgdGhhdCB3YXMgc2NoZWR1bGVkLlxuICAgIGZsdXNoSW1tZWRpYXRlV29yaygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX3dyYXBDYWxsYmFjayhjYWxsYmFjaykge1xuICB2YXIgcGFyZW50UHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8vIFRoaXMgaXMgYSBmb3JrIG9mIHJ1bldpdGhQcmlvcml0eSwgaW5saW5lZCBmb3IgcGVyZm9ybWFuY2UuXG4gICAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICAgIHZhciBwcmV2aW91c0V2ZW50U3RhcnRUaW1lID0gY3VycmVudEV2ZW50U3RhcnRUaW1lO1xuICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcGFyZW50UHJpb3JpdHlMZXZlbDtcbiAgICBjdXJyZW50RXZlbnRTdGFydFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgICAgIGN1cnJlbnRFdmVudFN0YXJ0VGltZSA9IHByZXZpb3VzRXZlbnRTdGFydFRpbWU7XG4gICAgICBmbHVzaEltbWVkaWF0ZVdvcmsoKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHJlY2F0ZWRfb3B0aW9ucykge1xuICB2YXIgc3RhcnRUaW1lID0gY3VycmVudEV2ZW50U3RhcnRUaW1lICE9PSAtMSA/IGN1cnJlbnRFdmVudFN0YXJ0VGltZSA6IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG5cbiAgdmFyIGV4cGlyYXRpb25UaW1lO1xuICBpZiAodHlwZW9mIGRlcHJlY2F0ZWRfb3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgZGVwcmVjYXRlZF9vcHRpb25zICE9PSBudWxsICYmIHR5cGVvZiBkZXByZWNhdGVkX29wdGlvbnMudGltZW91dCA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBGSVhNRTogUmVtb3ZlIHRoaXMgYnJhbmNoIG9uY2Ugd2UgbGlmdCBleHBpcmF0aW9uIHRpbWVzIG91dCBvZiBSZWFjdC5cbiAgICBleHBpcmF0aW9uVGltZSA9IHN0YXJ0VGltZSArIGRlcHJlY2F0ZWRfb3B0aW9ucy50aW1lb3V0O1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoY3VycmVudFByaW9yaXR5TGV2ZWwpIHtcbiAgICAgIGNhc2UgSW1tZWRpYXRlUHJpb3JpdHk6XG4gICAgICAgIGV4cGlyYXRpb25UaW1lID0gc3RhcnRUaW1lICsgSU1NRURJQVRFX1BSSU9SSVRZX1RJTUVPVVQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBVc2VyQmxvY2tpbmdQcmlvcml0eTpcbiAgICAgICAgZXhwaXJhdGlvblRpbWUgPSBzdGFydFRpbWUgKyBVU0VSX0JMT0NLSU5HX1BSSU9SSVRZO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgSWRsZVByaW9yaXR5OlxuICAgICAgICBleHBpcmF0aW9uVGltZSA9IHN0YXJ0VGltZSArIElETEVfUFJJT1JJVFk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb3dQcmlvcml0eTpcbiAgICAgICAgZXhwaXJhdGlvblRpbWUgPSBzdGFydFRpbWUgKyBMT1dfUFJJT1JJVFlfVElNRU9VVDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE5vcm1hbFByaW9yaXR5OlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZXhwaXJhdGlvblRpbWUgPSBzdGFydFRpbWUgKyBOT1JNQUxfUFJJT1JJVFlfVElNRU9VVDtcbiAgICB9XG4gIH1cblxuICB2YXIgbmV3Tm9kZSA9IHtcbiAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgcHJpb3JpdHlMZXZlbDogY3VycmVudFByaW9yaXR5TGV2ZWwsXG4gICAgZXhwaXJhdGlvblRpbWU6IGV4cGlyYXRpb25UaW1lLFxuICAgIG5leHQ6IG51bGwsXG4gICAgcHJldmlvdXM6IG51bGxcbiAgfTtcblxuICAvLyBJbnNlcnQgdGhlIG5ldyBjYWxsYmFjayBpbnRvIHRoZSBsaXN0LCBvcmRlcmVkIGZpcnN0IGJ5IGV4cGlyYXRpb24sIHRoZW5cbiAgLy8gYnkgaW5zZXJ0aW9uLiBTbyB0aGUgbmV3IGNhbGxiYWNrIGlzIGluc2VydGVkIGFueSBvdGhlciBjYWxsYmFjayB3aXRoXG4gIC8vIGVxdWFsIGV4cGlyYXRpb24uXG4gIGlmIChmaXJzdENhbGxiYWNrTm9kZSA9PT0gbnVsbCkge1xuICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGNhbGxiYWNrIGluIHRoZSBsaXN0LlxuICAgIGZpcnN0Q2FsbGJhY2tOb2RlID0gbmV3Tm9kZS5uZXh0ID0gbmV3Tm9kZS5wcmV2aW91cyA9IG5ld05vZGU7XG4gICAgZW5zdXJlSG9zdENhbGxiYWNrSXNTY2hlZHVsZWQoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmV4dCA9IG51bGw7XG4gICAgdmFyIG5vZGUgPSBmaXJzdENhbGxiYWNrTm9kZTtcbiAgICBkbyB7XG4gICAgICBpZiAobm9kZS5leHBpcmF0aW9uVGltZSA+IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIC8vIFRoZSBuZXcgY2FsbGJhY2sgZXhwaXJlcyBiZWZvcmUgdGhpcyBvbmUuXG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgfSB3aGlsZSAobm9kZSAhPT0gZmlyc3RDYWxsYmFja05vZGUpO1xuXG4gICAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICAgIC8vIE5vIGNhbGxiYWNrIHdpdGggYSBsYXRlciBleHBpcmF0aW9uIHdhcyBmb3VuZCwgd2hpY2ggbWVhbnMgdGhlIG5ld1xuICAgICAgLy8gY2FsbGJhY2sgaGFzIHRoZSBsYXRlc3QgZXhwaXJhdGlvbiBpbiB0aGUgbGlzdC5cbiAgICAgIG5leHQgPSBmaXJzdENhbGxiYWNrTm9kZTtcbiAgICB9IGVsc2UgaWYgKG5leHQgPT09IGZpcnN0Q2FsbGJhY2tOb2RlKSB7XG4gICAgICAvLyBUaGUgbmV3IGNhbGxiYWNrIGhhcyB0aGUgZWFybGllc3QgZXhwaXJhdGlvbiBpbiB0aGUgZW50aXJlIGxpc3QuXG4gICAgICBmaXJzdENhbGxiYWNrTm9kZSA9IG5ld05vZGU7XG4gICAgICBlbnN1cmVIb3N0Q2FsbGJhY2tJc1NjaGVkdWxlZCgpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91cyA9IG5leHQucHJldmlvdXM7XG4gICAgcHJldmlvdXMubmV4dCA9IG5leHQucHJldmlvdXMgPSBuZXdOb2RlO1xuICAgIG5ld05vZGUubmV4dCA9IG5leHQ7XG4gICAgbmV3Tm9kZS5wcmV2aW91cyA9IHByZXZpb3VzO1xuICB9XG5cbiAgcmV0dXJuIG5ld05vZGU7XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uKCkge1xuICBpc1NjaGVkdWxlclBhdXNlZCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uKCkge1xuICBpc1NjaGVkdWxlclBhdXNlZCA9IGZhbHNlO1xuICBpZiAoZmlyc3RDYWxsYmFja05vZGUgIT09IG51bGwpIHtcbiAgICBlbnN1cmVIb3N0Q2FsbGJhY2tJc1NjaGVkdWxlZCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlKCkge1xuICByZXR1cm4gZmlyc3RDYWxsYmFja05vZGU7XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKGNhbGxiYWNrTm9kZSkge1xuICB2YXIgbmV4dCA9IGNhbGxiYWNrTm9kZS5uZXh0O1xuICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgIC8vIEFscmVhZHkgY2FuY2VsbGVkLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChuZXh0ID09PSBjYWxsYmFja05vZGUpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHNjaGVkdWxlZCBjYWxsYmFjay4gQ2xlYXIgdGhlIGxpc3QuXG4gICAgZmlyc3RDYWxsYmFja05vZGUgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIC8vIFJlbW92ZSB0aGUgY2FsbGJhY2sgZnJvbSBpdHMgcG9zaXRpb24gaW4gdGhlIGxpc3QuXG4gICAgaWYgKGNhbGxiYWNrTm9kZSA9PT0gZmlyc3RDYWxsYmFja05vZGUpIHtcbiAgICAgIGZpcnN0Q2FsbGJhY2tOb2RlID0gbmV4dDtcbiAgICB9XG4gICAgdmFyIHByZXZpb3VzID0gY2FsbGJhY2tOb2RlLnByZXZpb3VzO1xuICAgIHByZXZpb3VzLm5leHQgPSBuZXh0O1xuICAgIG5leHQucHJldmlvdXMgPSBwcmV2aW91cztcbiAgfVxuXG4gIGNhbGxiYWNrTm9kZS5uZXh0ID0gY2FsbGJhY2tOb2RlLnByZXZpb3VzID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gdW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwoKSB7XG4gIHJldHVybiBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbn1cblxuZnVuY3Rpb24gdW5zdGFibGVfc2hvdWxkWWllbGQoKSB7XG4gIHJldHVybiAhY3VycmVudERpZFRpbWVvdXQgJiYgKGZpcnN0Q2FsbGJhY2tOb2RlICE9PSBudWxsICYmIGZpcnN0Q2FsbGJhY2tOb2RlLmV4cGlyYXRpb25UaW1lIDwgY3VycmVudEV4cGlyYXRpb25UaW1lIHx8IHNob3VsZFlpZWxkVG9Ib3N0KCkpO1xufVxuXG4vLyBUaGUgcmVtYWluaW5nIGNvZGUgaXMgZXNzZW50aWFsbHkgYSBwb2x5ZmlsbCBmb3IgcmVxdWVzdElkbGVDYWxsYmFjay4gSXRcbi8vIHdvcmtzIGJ5IHNjaGVkdWxpbmcgYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIHN0b3JpbmcgdGhlIHRpbWUgZm9yIHRoZSBzdGFydFxuLy8gb2YgdGhlIGZyYW1lLCB0aGVuIHNjaGVkdWxpbmcgYSBwb3N0TWVzc2FnZSB3aGljaCBnZXRzIHNjaGVkdWxlZCBhZnRlciBwYWludC5cbi8vIFdpdGhpbiB0aGUgcG9zdE1lc3NhZ2UgaGFuZGxlciBkbyBhcyBtdWNoIHdvcmsgYXMgcG9zc2libGUgdW50aWwgdGltZSArIGZyYW1lXG4vLyByYXRlLiBCeSBzZXBhcmF0aW5nIHRoZSBpZGxlIGNhbGwgaW50byBhIHNlcGFyYXRlIGV2ZW50IHRpY2sgd2UgZW5zdXJlIHRoYXRcbi8vIGxheW91dCwgcGFpbnQgYW5kIG90aGVyIGJyb3dzZXIgd29yayBpcyBjb3VudGVkIGFnYWluc3QgdGhlIGF2YWlsYWJsZSB0aW1lLlxuLy8gVGhlIGZyYW1lIHJhdGUgaXMgZHluYW1pY2FsbHkgYWRqdXN0ZWQuXG5cbi8vIFdlIGNhcHR1cmUgYSBsb2NhbCByZWZlcmVuY2UgdG8gYW55IGdsb2JhbCwgaW4gY2FzZSBpdCBnZXRzIHBvbHlmaWxsZWQgYWZ0ZXJcbi8vIHRoaXMgbW9kdWxlIGlzIGluaXRpYWxseSBldmFsdWF0ZWQuIFdlIHdhbnQgdG8gYmUgdXNpbmcgYVxuLy8gY29uc2lzdGVudCBpbXBsZW1lbnRhdGlvbi5cbnZhciBsb2NhbERhdGUgPSBEYXRlO1xuXG4vLyBUaGlzIGluaXRpYWxpemF0aW9uIGNvZGUgbWF5IHJ1biBldmVuIG9uIHNlcnZlciBlbnZpcm9ubWVudHMgaWYgYSBjb21wb25lbnRcbi8vIGp1c3QgaW1wb3J0cyBSZWFjdERPTSAoZS5nLiBmb3IgZmluZERPTU5vZGUpLiBTb21lIGVudmlyb25tZW50cyBtaWdodCBub3Rcbi8vIGhhdmUgc2V0VGltZW91dCBvciBjbGVhclRpbWVvdXQuIEhvd2V2ZXIsIHdlIGFsd2F5cyBleHBlY3QgdGhlbSB0byBiZSBkZWZpbmVkXG4vLyBvbiB0aGUgY2xpZW50LiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8xMzA4OFxudmFyIGxvY2FsU2V0VGltZW91dCA9IHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nID8gc2V0VGltZW91dCA6IHVuZGVmaW5lZDtcbnZhciBsb2NhbENsZWFyVGltZW91dCA9IHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicgPyBjbGVhclRpbWVvdXQgOiB1bmRlZmluZWQ7XG5cbi8vIFdlIGRvbid0IGV4cGVjdCBlaXRoZXIgb2YgdGhlc2UgdG8gbmVjZXNzYXJpbHkgYmUgZGVmaW5lZCwgYnV0IHdlIHdpbGwgZXJyb3Jcbi8vIGxhdGVyIGlmIHRoZXkgYXJlIG1pc3Npbmcgb24gdGhlIGNsaWVudC5cbnZhciBsb2NhbFJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPT09ICdmdW5jdGlvbicgPyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgOiB1bmRlZmluZWQ7XG52YXIgbG9jYWxDYW5jZWxBbmltYXRpb25GcmFtZSA9IHR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJyA/IGNhbmNlbEFuaW1hdGlvbkZyYW1lIDogdW5kZWZpbmVkO1xuXG4vLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZG9lcyBub3QgcnVuIHdoZW4gdGhlIHRhYiBpcyBpbiB0aGUgYmFja2dyb3VuZC4gSWZcbi8vIHdlJ3JlIGJhY2tncm91bmRlZCB3ZSBwcmVmZXIgZm9yIHRoYXQgd29yayB0byBoYXBwZW4gc28gdGhhdCB0aGUgcGFnZVxuLy8gY29udGludWVzIHRvIGxvYWQgaW4gdGhlIGJhY2tncm91bmQuIFNvIHdlIGFsc28gc2NoZWR1bGUgYSAnc2V0VGltZW91dCcgYXNcbi8vIGEgZmFsbGJhY2suXG4vLyBUT0RPOiBOZWVkIGEgYmV0dGVyIGhldXJpc3RpYyBmb3IgYmFja2dyb3VuZGVkIHdvcmsuXG52YXIgQU5JTUFUSU9OX0ZSQU1FX1RJTUVPVVQgPSAxMDA7XG52YXIgckFGSUQ7XG52YXIgckFGVGltZW91dElEO1xudmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZVdpdGhUaW1lb3V0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIC8vIHNjaGVkdWxlIHJBRiBhbmQgYWxzbyBhIHNldFRpbWVvdXRcbiAgckFGSUQgPSBsb2NhbFJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAodGltZXN0YW1wKSB7XG4gICAgLy8gY2FuY2VsIHRoZSBzZXRUaW1lb3V0XG4gICAgbG9jYWxDbGVhclRpbWVvdXQockFGVGltZW91dElEKTtcbiAgICBjYWxsYmFjayh0aW1lc3RhbXApO1xuICB9KTtcbiAgckFGVGltZW91dElEID0gbG9jYWxTZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBjYW5jZWwgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgIGxvY2FsQ2FuY2VsQW5pbWF0aW9uRnJhbWUockFGSUQpO1xuICAgIGNhbGxiYWNrKGV4cG9ydHMudW5zdGFibGVfbm93KCkpO1xuICB9LCBBTklNQVRJT05fRlJBTUVfVElNRU9VVCk7XG59O1xuXG5pZiAoaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cpIHtcbiAgdmFyIFBlcmZvcm1hbmNlID0gcGVyZm9ybWFuY2U7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQZXJmb3JtYW5jZS5ub3coKTtcbiAgfTtcbn0gZWxzZSB7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsb2NhbERhdGUubm93KCk7XG4gIH07XG59XG5cbnZhciByZXF1ZXN0SG9zdENhbGxiYWNrO1xudmFyIGNhbmNlbEhvc3RDYWxsYmFjaztcbnZhciBzaG91bGRZaWVsZFRvSG9zdDtcblxudmFyIGdsb2JhbFZhbHVlID0gbnVsbDtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWxWYWx1ZSA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsVmFsdWUgPSBnbG9iYWw7XG59XG5cbmlmIChnbG9iYWxWYWx1ZSAmJiBnbG9iYWxWYWx1ZS5fc2NoZWRNb2NrKSB7XG4gIC8vIER5bmFtaWMgaW5qZWN0aW9uLCBvbmx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICB2YXIgZ2xvYmFsSW1wbCA9IGdsb2JhbFZhbHVlLl9zY2hlZE1vY2s7XG4gIHJlcXVlc3RIb3N0Q2FsbGJhY2sgPSBnbG9iYWxJbXBsWzBdO1xuICBjYW5jZWxIb3N0Q2FsbGJhY2sgPSBnbG9iYWxJbXBsWzFdO1xuICBzaG91bGRZaWVsZFRvSG9zdCA9IGdsb2JhbEltcGxbMl07XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZ2xvYmFsSW1wbFszXTtcbn0gZWxzZSBpZiAoXG4vLyBJZiBTY2hlZHVsZXIgcnVucyBpbiBhIG5vbi1ET00gZW52aXJvbm1lbnQsIGl0IGZhbGxzIGJhY2sgdG8gYSBuYWl2ZVxuLy8gaW1wbGVtZW50YXRpb24gdXNpbmcgc2V0VGltZW91dC5cbnR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8XG4vLyBDaGVjayBpZiBNZXNzYWdlQ2hhbm5lbCBpcyBzdXBwb3J0ZWQsIHRvby5cbnR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAvLyBJZiB0aGlzIGFjY2lkZW50YWxseSBnZXRzIGltcG9ydGVkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQsIGUuZy4gSmF2YVNjcmlwdENvcmUsXG4gIC8vIGZhbGxiYWNrIHRvIGEgbmFpdmUgaW1wbGVtZW50YXRpb24uXG4gIHZhciBfY2FsbGJhY2sgPSBudWxsO1xuICB2YXIgX2ZsdXNoQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZGlkVGltZW91dCkge1xuICAgIGlmIChfY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIF9jYWxsYmFjayhkaWRUaW1lb3V0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9jYWxsYmFjayA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXF1ZXN0SG9zdENhbGxiYWNrID0gZnVuY3Rpb24gKGNiLCBtcykge1xuICAgIGlmIChfY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIC8vIFByb3RlY3QgYWdhaW5zdCByZS1lbnRyYW5jeS5cbiAgICAgIHNldFRpbWVvdXQocmVxdWVzdEhvc3RDYWxsYmFjaywgMCwgY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfY2FsbGJhY2sgPSBjYjtcbiAgICAgIHNldFRpbWVvdXQoX2ZsdXNoQ2FsbGJhY2ssIDAsIGZhbHNlKTtcbiAgICB9XG4gIH07XG4gIGNhbmNlbEhvc3RDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBfY2FsbGJhY2sgPSBudWxsO1xuICB9O1xuICBzaG91bGRZaWVsZFRvSG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59IGVsc2Uge1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gVE9ETzogUmVtb3ZlIGZiLm1lIGxpbmtcbiAgICBpZiAodHlwZW9mIGxvY2FsUmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIFwiICsgJ01ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgJyArICdwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHMnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBsb2NhbENhbmNlbEFuaW1hdGlvbkZyYW1lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gXCIgKyAnTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSAnICsgJ3BvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxscycpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzY2hlZHVsZWRIb3N0Q2FsbGJhY2sgPSBudWxsO1xuICB2YXIgaXNNZXNzYWdlRXZlbnRTY2hlZHVsZWQgPSBmYWxzZTtcbiAgdmFyIHRpbWVvdXRUaW1lID0gLTE7XG5cbiAgdmFyIGlzQW5pbWF0aW9uRnJhbWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICB2YXIgaXNGbHVzaGluZ0hvc3RDYWxsYmFjayA9IGZhbHNlO1xuXG4gIHZhciBmcmFtZURlYWRsaW5lID0gMDtcbiAgLy8gV2Ugc3RhcnQgb3V0IGFzc3VtaW5nIHRoYXQgd2UgcnVuIGF0IDMwZnBzIGJ1dCB0aGVuIHRoZSBoZXVyaXN0aWMgdHJhY2tpbmdcbiAgLy8gd2lsbCBhZGp1c3QgdGhpcyB2YWx1ZSB0byBhIGZhc3RlciBmcHMgaWYgd2UgZ2V0IG1vcmUgZnJlcXVlbnQgYW5pbWF0aW9uXG4gIC8vIGZyYW1lcy5cbiAgdmFyIHByZXZpb3VzRnJhbWVUaW1lID0gMzM7XG4gIHZhciBhY3RpdmVGcmFtZVRpbWUgPSAzMztcblxuICBzaG91bGRZaWVsZFRvSG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnJhbWVEZWFkbGluZSA8PSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICB9O1xuXG4gIC8vIFdlIHVzZSB0aGUgcG9zdE1lc3NhZ2UgdHJpY2sgdG8gZGVmZXIgaWRsZSB3b3JrIHVudGlsIGFmdGVyIHRoZSByZXBhaW50LlxuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICB2YXIgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaXNNZXNzYWdlRXZlbnRTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAgIHZhciBwcmV2U2NoZWR1bGVkQ2FsbGJhY2sgPSBzY2hlZHVsZWRIb3N0Q2FsbGJhY2s7XG4gICAgdmFyIHByZXZUaW1lb3V0VGltZSA9IHRpbWVvdXRUaW1lO1xuICAgIHNjaGVkdWxlZEhvc3RDYWxsYmFjayA9IG51bGw7XG4gICAgdGltZW91dFRpbWUgPSAtMTtcblxuICAgIHZhciBjdXJyZW50VGltZSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG5cbiAgICB2YXIgZGlkVGltZW91dCA9IGZhbHNlO1xuICAgIGlmIChmcmFtZURlYWRsaW5lIC0gY3VycmVudFRpbWUgPD0gMCkge1xuICAgICAgLy8gVGhlcmUncyBubyB0aW1lIGxlZnQgaW4gdGhpcyBpZGxlIHBlcmlvZC4gQ2hlY2sgaWYgdGhlIGNhbGxiYWNrIGhhc1xuICAgICAgLy8gYSB0aW1lb3V0IGFuZCB3aGV0aGVyIGl0J3MgYmVlbiBleGNlZWRlZC5cbiAgICAgIGlmIChwcmV2VGltZW91dFRpbWUgIT09IC0xICYmIHByZXZUaW1lb3V0VGltZSA8PSBjdXJyZW50VGltZSkge1xuICAgICAgICAvLyBFeGNlZWRlZCB0aGUgdGltZW91dC4gSW52b2tlIHRoZSBjYWxsYmFjayBldmVuIHRob3VnaCB0aGVyZSdzIG5vXG4gICAgICAgIC8vIHRpbWUgbGVmdC5cbiAgICAgICAgZGlkVGltZW91dCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBObyB0aW1lb3V0LlxuICAgICAgICBpZiAoIWlzQW5pbWF0aW9uRnJhbWVTY2hlZHVsZWQpIHtcbiAgICAgICAgICAvLyBTY2hlZHVsZSBhbm90aGVyIGFuaW1hdGlvbiBjYWxsYmFjayBzbyB3ZSByZXRyeSBsYXRlci5cbiAgICAgICAgICBpc0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWVXaXRoVGltZW91dChhbmltYXRpb25UaWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFeGl0IHdpdGhvdXQgaW52b2tpbmcgdGhlIGNhbGxiYWNrLlxuICAgICAgICBzY2hlZHVsZWRIb3N0Q2FsbGJhY2sgPSBwcmV2U2NoZWR1bGVkQ2FsbGJhY2s7XG4gICAgICAgIHRpbWVvdXRUaW1lID0gcHJldlRpbWVvdXRUaW1lO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZTY2hlZHVsZWRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgaXNGbHVzaGluZ0hvc3RDYWxsYmFjayA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICBwcmV2U2NoZWR1bGVkQ2FsbGJhY2soZGlkVGltZW91dCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpc0ZsdXNoaW5nSG9zdENhbGxiYWNrID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBhbmltYXRpb25UaWNrID0gZnVuY3Rpb24gKHJhZlRpbWUpIHtcbiAgICBpZiAoc2NoZWR1bGVkSG9zdENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICAvLyBFYWdlcmx5IHNjaGVkdWxlIHRoZSBuZXh0IGFuaW1hdGlvbiBjYWxsYmFjayBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZVxuICAgICAgLy8gZnJhbWUuIElmIHRoZSBzY2hlZHVsZXIgcXVldWUgaXMgbm90IGVtcHR5IGF0IHRoZSBlbmQgb2YgdGhlIGZyYW1lLCBpdFxuICAgICAgLy8gd2lsbCBjb250aW51ZSBmbHVzaGluZyBpbnNpZGUgdGhhdCBjYWxsYmFjay4gSWYgdGhlIHF1ZXVlICppcyogZW1wdHksXG4gICAgICAvLyB0aGVuIGl0IHdpbGwgZXhpdCBpbW1lZGlhdGVseS4gUG9zdGluZyB0aGUgY2FsbGJhY2sgYXQgdGhlIHN0YXJ0IG9mIHRoZVxuICAgICAgLy8gZnJhbWUgZW5zdXJlcyBpdCdzIGZpcmVkIHdpdGhpbiB0aGUgZWFybGllc3QgcG9zc2libGUgZnJhbWUuIElmIHdlXG4gICAgICAvLyB3YWl0ZWQgdW50aWwgdGhlIGVuZCBvZiB0aGUgZnJhbWUgdG8gcG9zdCB0aGUgY2FsbGJhY2ssIHdlIHJpc2sgdGhlXG4gICAgICAvLyBicm93c2VyIHNraXBwaW5nIGEgZnJhbWUgYW5kIG5vdCBmaXJpbmcgdGhlIGNhbGxiYWNrIHVudGlsIHRoZSBmcmFtZVxuICAgICAgLy8gYWZ0ZXIgdGhhdC5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZVdpdGhUaW1lb3V0KGFuaW1hdGlvblRpY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBObyBwZW5kaW5nIHdvcmsuIEV4aXQuXG4gICAgICBpc0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRGcmFtZVRpbWUgPSByYWZUaW1lIC0gZnJhbWVEZWFkbGluZSArIGFjdGl2ZUZyYW1lVGltZTtcbiAgICBpZiAobmV4dEZyYW1lVGltZSA8IGFjdGl2ZUZyYW1lVGltZSAmJiBwcmV2aW91c0ZyYW1lVGltZSA8IGFjdGl2ZUZyYW1lVGltZSkge1xuICAgICAgaWYgKG5leHRGcmFtZVRpbWUgPCA4KSB7XG4gICAgICAgIC8vIERlZmVuc2l2ZSBjb2RpbmcuIFdlIGRvbid0IHN1cHBvcnQgaGlnaGVyIGZyYW1lIHJhdGVzIHRoYW4gMTIwaHouXG4gICAgICAgIC8vIElmIHRoZSBjYWxjdWxhdGVkIGZyYW1lIHRpbWUgZ2V0cyBsb3dlciB0aGFuIDgsIGl0IGlzIHByb2JhYmx5IGEgYnVnLlxuICAgICAgICBuZXh0RnJhbWVUaW1lID0gODtcbiAgICAgIH1cbiAgICAgIC8vIElmIG9uZSBmcmFtZSBnb2VzIGxvbmcsIHRoZW4gdGhlIG5leHQgb25lIGNhbiBiZSBzaG9ydCB0byBjYXRjaCB1cC5cbiAgICAgIC8vIElmIHR3byBmcmFtZXMgYXJlIHNob3J0IGluIGEgcm93LCB0aGVuIHRoYXQncyBhbiBpbmRpY2F0aW9uIHRoYXQgd2VcbiAgICAgIC8vIGFjdHVhbGx5IGhhdmUgYSBoaWdoZXIgZnJhbWUgcmF0ZSB0aGFuIHdoYXQgd2UncmUgY3VycmVudGx5IG9wdGltaXppbmcuXG4gICAgICAvLyBXZSBhZGp1c3Qgb3VyIGhldXJpc3RpYyBkeW5hbWljYWxseSBhY2NvcmRpbmdseS4gRm9yIGV4YW1wbGUsIGlmIHdlJ3JlXG4gICAgICAvLyBydW5uaW5nIG9uIDEyMGh6IGRpc3BsYXkgb3IgOTBoeiBWUiBkaXNwbGF5LlxuICAgICAgLy8gVGFrZSB0aGUgbWF4IG9mIHRoZSB0d28gaW4gY2FzZSBvbmUgb2YgdGhlbSB3YXMgYW4gYW5vbWFseSBkdWUgdG9cbiAgICAgIC8vIG1pc3NlZCBmcmFtZSBkZWFkbGluZXMuXG4gICAgICBhY3RpdmVGcmFtZVRpbWUgPSBuZXh0RnJhbWVUaW1lIDwgcHJldmlvdXNGcmFtZVRpbWUgPyBwcmV2aW91c0ZyYW1lVGltZSA6IG5leHRGcmFtZVRpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZpb3VzRnJhbWVUaW1lID0gbmV4dEZyYW1lVGltZTtcbiAgICB9XG4gICAgZnJhbWVEZWFkbGluZSA9IHJhZlRpbWUgKyBhY3RpdmVGcmFtZVRpbWU7XG4gICAgaWYgKCFpc01lc3NhZ2VFdmVudFNjaGVkdWxlZCkge1xuICAgICAgaXNNZXNzYWdlRXZlbnRTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgcG9ydC5wb3N0TWVzc2FnZSh1bmRlZmluZWQpO1xuICAgIH1cbiAgfTtcblxuICByZXF1ZXN0SG9zdENhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBhYnNvbHV0ZVRpbWVvdXQpIHtcbiAgICBzY2hlZHVsZWRIb3N0Q2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aW1lb3V0VGltZSA9IGFic29sdXRlVGltZW91dDtcbiAgICBpZiAoaXNGbHVzaGluZ0hvc3RDYWxsYmFjayB8fCBhYnNvbHV0ZVRpbWVvdXQgPCAwKSB7XG4gICAgICAvLyBEb24ndCB3YWl0IGZvciB0aGUgbmV4dCBmcmFtZS4gQ29udGludWUgd29ya2luZyBBU0FQLCBpbiBhIG5ldyBldmVudC5cbiAgICAgIHBvcnQucG9zdE1lc3NhZ2UodW5kZWZpbmVkKTtcbiAgICB9IGVsc2UgaWYgKCFpc0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVkKSB7XG4gICAgICAvLyBJZiByQUYgZGlkbid0IGFscmVhZHkgc2NoZWR1bGUgb25lLCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGEgZnJhbWUuXG4gICAgICAvLyBUT0RPOiBJZiB0aGlzIHJBRiBkb2Vzbid0IG1hdGVyaWFsaXplIGJlY2F1c2UgdGhlIGJyb3dzZXIgdGhyb3R0bGVzLCB3ZVxuICAgICAgLy8gbWlnaHQgd2FudCB0byBzdGlsbCBoYXZlIHNldFRpbWVvdXQgdHJpZ2dlciBySUMgYXMgYSBiYWNrdXAgdG8gZW5zdXJlXG4gICAgICAvLyB0aGF0IHdlIGtlZXAgcGVyZm9ybWluZyB3b3JrLlxuICAgICAgaXNBbmltYXRpb25GcmFtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWVXaXRoVGltZW91dChhbmltYXRpb25UaWNrKTtcbiAgICB9XG4gIH07XG5cbiAgY2FuY2VsSG9zdENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgIHNjaGVkdWxlZEhvc3RDYWxsYmFjayA9IG51bGw7XG4gICAgaXNNZXNzYWdlRXZlbnRTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICB0aW1lb3V0VGltZSA9IC0xO1xuICB9O1xufVxuXG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5ID0gSW1tZWRpYXRlUHJpb3JpdHk7XG5leHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5ID0gVXNlckJsb2NraW5nUHJpb3JpdHk7XG5leHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5ID0gTm9ybWFsUHJpb3JpdHk7XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eSA9IElkbGVQcmlvcml0eTtcbmV4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHkgPSBMb3dQcmlvcml0eTtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5ID0gdW5zdGFibGVfcnVuV2l0aFByaW9yaXR5O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0ID0gdW5zdGFibGVfbmV4dDtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayA9IHVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s7XG5leHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrID0gdW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjayA9IHVuc3RhYmxlX3dyYXBDYWxsYmFjaztcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwgPSB1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbDtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQgPSB1bnN0YWJsZV9zaG91bGRZaWVsZDtcbmV4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb24gPSB1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbjtcbmV4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb24gPSB1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbjtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUgPSB1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZTtcbiAgfSkoKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTMuNlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBkPW51bGwsZT0hMSxnPTMsaz0tMSxsPS0xLG09ITEsbj0hMTtmdW5jdGlvbiBwKCl7aWYoIW0pe3ZhciBhPWQuZXhwaXJhdGlvblRpbWU7bj9xKCk6bj0hMDtyKHQsYSl9fVxuZnVuY3Rpb24gdSgpe3ZhciBhPWQsYj1kLm5leHQ7aWYoZD09PWIpZD1udWxsO2Vsc2V7dmFyIGM9ZC5wcmV2aW91cztkPWMubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsO2M9YS5jYWxsYmFjaztiPWEuZXhwaXJhdGlvblRpbWU7YT1hLnByaW9yaXR5TGV2ZWw7dmFyIGY9ZyxRPWw7Zz1hO2w9Yjt0cnl7dmFyIGg9YygpfWZpbmFsbHl7Zz1mLGw9UX1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaClpZihoPXtjYWxsYmFjazpoLHByaW9yaXR5TGV2ZWw6YSxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfSxudWxsPT09ZClkPWgubmV4dD1oLnByZXZpb3VzPWg7ZWxzZXtjPW51bGw7YT1kO2Rve2lmKGEuZXhwaXJhdGlvblRpbWU+PWIpe2M9YTticmVha31hPWEubmV4dH13aGlsZShhIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1oLHAoKSk7Yj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWg7aC5uZXh0PWM7aC5wcmV2aW91cz1cbmJ9fWZ1bmN0aW9uIHYoKXtpZigtMT09PWsmJm51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKXttPSEwO3RyeXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpfWZpbmFsbHl7bT0hMSxudWxsIT09ZD9wKCk6bj0hMX19fWZ1bmN0aW9uIHQoYSl7bT0hMDt2YXIgYj1lO2U9YTt0cnl7aWYoYSlmb3IoO251bGwhPT1kOyl7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihkLmV4cGlyYXRpb25UaW1lPD1jKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8PWMpfWVsc2UgYnJlYWt9ZWxzZSBpZihudWxsIT09ZCl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYhdygpKX19ZmluYWxseXttPSExLGU9YixudWxsIT09ZD9wKCk6bj0hMSx2KCl9fVxudmFyIHg9RGF0ZSx5PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxDLEQ7ZnVuY3Rpb24gRShhKXtDPUEoZnVuY3Rpb24oYil7eihEKTthKGIpfSk7RD15KGZ1bmN0aW9uKCl7QihDKTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfVxuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIEY9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRi5ub3coKX19ZWxzZSBleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpfTt2YXIgcixxLHcsRz1udWxsO1widW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93P0c9d2luZG93OlwidW5kZWZpbmVkXCIhPT10eXBlb2YgZ2xvYmFsJiYoRz1nbG9iYWwpO1xuaWYoRyYmRy5fc2NoZWRNb2NrKXt2YXIgSD1HLl9zY2hlZE1vY2s7cj1IWzBdO3E9SFsxXTt3PUhbMl07ZXhwb3J0cy51bnN0YWJsZV9ub3c9SFszXX1lbHNlIGlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBJPW51bGwsSj1mdW5jdGlvbihhKXtpZihudWxsIT09SSl0cnl7SShhKX1maW5hbGx5e0k9bnVsbH19O3I9ZnVuY3Rpb24oYSl7bnVsbCE9PUk/c2V0VGltZW91dChyLDAsYSk6KEk9YSxzZXRUaW1lb3V0KEosMCwhMSkpfTtxPWZ1bmN0aW9uKCl7ST1udWxsfTt3PWZ1bmN0aW9uKCl7cmV0dXJuITF9fWVsc2V7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgQiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTt2YXIgSz1udWxsLEw9ITEsTT0tMSxOPSExLE89ITEsUD0wLFI9MzMsUz0zMzt3PWZ1bmN0aW9uKCl7cmV0dXJuIFA8PWV4cG9ydHMudW5zdGFibGVfbm93KCl9O3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtMPSExO3ZhciBhPUssYj1NO0s9bnVsbDtNPS0xO3ZhciBjPWV4cG9ydHMudW5zdGFibGVfbm93KCksZj0hMTtpZigwPj1QLWMpaWYoLTEhPT1iJiZiPD1jKWY9ITA7ZWxzZXtOfHwoTj0hMCxFKFYpKTtLPWE7TT1iO3JldHVybn1pZihudWxsIT09YSl7Tz0hMDt0cnl7YShmKX1maW5hbGx5e089ITF9fX07XG52YXIgVj1mdW5jdGlvbihhKXtpZihudWxsIT09Syl7RShWKTt2YXIgYj1hLVArUztiPFMmJlI8Uz8oOD5iJiYoYj04KSxTPWI8Uj9SOmIpOlI9YjtQPWErUztMfHwoTD0hMCxVLnBvc3RNZXNzYWdlKHZvaWQgMCkpfWVsc2UgTj0hMX07cj1mdW5jdGlvbihhLGIpe0s9YTtNPWI7T3x8MD5iP1UucG9zdE1lc3NhZ2Uodm9pZCAwKTpOfHwoTj0hMCxFKFYpKX07cT1mdW5jdGlvbigpe0s9bnVsbDtMPSExO009LTF9fWV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1nLGY9aztnPWE7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKGcpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPWd9dmFyIGM9ZyxmPWs7Zz1iO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2c9YyxrPWYsdigpfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMSE9PWs/azpleHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0KWI9YytiLnRpbWVvdXQ7ZWxzZSBzd2l0Y2goZyl7Y2FzZSAxOmI9YystMTticmVhaztjYXNlIDI6Yj1jKzI1MDticmVhaztjYXNlIDU6Yj1jKzEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmI9YysxRTQ7YnJlYWs7ZGVmYXVsdDpiPWMrNUUzfWE9e2NhbGxiYWNrOmEscHJpb3JpdHlMZXZlbDpnLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9O2lmKG51bGw9PT1kKWQ9YS5uZXh0PWEucHJldmlvdXM9YSxwKCk7ZWxzZXtjPW51bGw7dmFyIGY9ZDtkb3tpZihmLmV4cGlyYXRpb25UaW1lPmIpe2M9ZjticmVha31mPWYubmV4dH13aGlsZShmIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1hLHAoKSk7XG5iPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9YTthLm5leHQ9YzthLnByZXZpb3VzPWJ9cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9YS5uZXh0O2lmKG51bGwhPT1iKXtpZihiPT09YSlkPW51bGw7ZWxzZXthPT09ZCYmKGQ9Yik7dmFyIGM9YS5wcmV2aW91cztjLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWc7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9ZyxmPWs7Zz1iO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBnfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hZSYmKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPGx8fHcoKSl9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtudWxsIT09ZCYmcCgpfTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGR9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXItdHJhY2luZy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXItdHJhY2luZy5kZXZlbG9wbWVudC5qcycpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zY2hlZHVsZXIvdHJhY2luZy5qcyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi92YWx1ZS1lcXVhbC9pbmRleC5qcyIsImltcG9ydCBSZWFjdCx7Q29tcG9uZW50fSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgTmF2TGluayBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rXCI7XHJcblxyXG5jbGFzcyBIb21lIGV4dGVuZHMgQ29tcG9uZW50e1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcbiAgICAgICAgdGhpcy5zdGF0ZT17XHJcbiAgICAgICAgICAgIHRlYW06W11cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvL+uNsOydtO2EsCDsnb3quLBcclxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgICAgICB2YXIgX3RoaXM9dGhpcztcclxuICAgICAgICBheGlvcy5nZXQoJy90ZWFtJykudGhlbihmdW5jdGlvbihyZXN1bHQpe1xyXG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7dGVhbTpyZXN1bHQuZGF0YX0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICAvLyDtmZTrqbTsl5Ag7Lac66Cl7ZWY64qUIO2VqOyImFxyXG4gICAgcmVuZGVyKClcclxuICAgIHtcclxuICAgICAgICBjb25zdCBodG1sPXRoaXMuc3RhdGUudGVhbS5tYXAoKG0pPT5cclxuICAgICAgICAgICAgPE5hdkxpbmsgdG89e1wiL2RldGFpbC9cIittLnRub30+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJ0ZXh0LWNlbnRlciB0ZWFtXCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2lyY2xlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXttLmVtYmxlbX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDY+e20udGVhbV9uYW1lfTwvaDY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG4gICAgICAgIClcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAge2h0bWx9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEhvbWU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudC9Ib21lLmpzIiwiaW1wb3J0IFJlYWN0LHtDb21wb25lbnR9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCJcclxuaW1wb3J0IHtOYXZMaW5rfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxuY2xhc3MgUGxheWVyIGV4dGVuZHMgQ29tcG9uZW50e1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcbiAgICAgICAgdGhpcy5zdGF0ZT17XHJcbiAgICAgICAgICAgIHBsYXllcjpbXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy/rjbDsnbTthLAg7J296riwXHJcbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcblxyXG4gICAgICAgIHZhciBfdGhpcz10aGlzO1xyXG4gICAgICAgIGF4aW9zLmdldChcIi9wbGF5ZXJcIix7XHJcbiAgICAgICAgICAgIHBhcmFtczp7XHJcbiAgICAgICAgICAgICAgICB0bm86dGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMudG5vXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgLy8gcmVzcG9uc2UuanNvbihkb2NzKTtcclxuICAgICAgICAgICAgLy9be31dXHJcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtwbGF5ZXI6cmVzdWx0LmRhdGF9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICAvLyDtmZTrqbTsl5Ag7Lac66Cl7ZWY64qUIO2VqOyImFxyXG4gICAgcmVuZGVyKClcclxuICAgIHtcclxuICAgICAgICBjb25zdCBodG1sPXRoaXMuc3RhdGUucGxheWVyLm1hcCgobSk9PlxyXG4gICAgICAgICAgICA8TmF2TGluayB0bz17XCIvcGxheWVyX2RldGFpbC9cIittLnRubytcIi9cIittLnBub30gc3R5bGU9e3tcImNvbG9yXCI6XCJibGFja1wifX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1zbS0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aHVtYm5haWxcIiBzdHlsZT17e1wiaGVpZ2h0XCI6XCIyNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXttLnBsYXllcl9waWN0dXJlfSB3aWR0aD1cIjE1MHB4XCIgaGVpZ2h0PVwiMTUwcHhcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9e3tcImZvbnQtc2l6ZVwiOlwiMjBweFwifX0+e20ucGxheWVyX251bWJlcn0gLyA8c3Ryb25nPnttLnBsYXllcl9uYW1lfTwvc3Ryb25nPjwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnttLnBvc2l0aW9ufTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgKVxyXG4gICAgICAgIHJldHVybiAoXHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wicm93XCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9e1wicGxheWVyX0xpc3RcIn0gc3R5bGU9e3tcIm1hcmdpbi10b3BcIjpcIjgwMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT17XCJ0ZXh0LWxlZnRcIn0+UGxheWVyIExpc3Q8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7aHRtbH1cclxuICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFBsYXllcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50L1BsYXllci5qcyIsImltcG9ydCBSZWFjdCx7Q29tcG9uZW50fSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiXHJcbmltcG9ydCB7TmF2TGlua30gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmNsYXNzIFBsYXllckRldGFpbCBleHRlbmRzIENvbXBvbmVudHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG4gICAgICAgIHRoaXMuc3RhdGU9e1xyXG4gICAgICAgICAgICBwbGF5ZXI6e30sXHJcbiAgICAgICAgICAgIHBubzoxLFxyXG4gICAgICAgICAgICB0bm86MVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy/rjbDsnbTthLAg7J296riwXHJcbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzPXRoaXM7XHJcbiAgICAgICAgYXhpb3MuZ2V0KFwiL3BsYXllcl9kZXRhaWxcIix7XHJcbiAgICAgICAgICAgIHBhcmFtczp7XHJcbiAgICAgICAgICAgICAgICB0bm86dGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMudG5vLFxyXG4gICAgICAgICAgICAgICAgcG5vOnRoaXMucHJvcHMubWF0Y2gucGFyYW1zLnBub1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIC8vIHJlc3BvbnNlLmpzb24oZG9jcyk7XHJcbiAgICAgICAgICAgIC8vW3t9XVxyXG4gICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7cGxheWVyOnJlc3VsdC5kYXRhWzBdfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgLy8g7ZmU66m07JeQIOy2nOugpe2VmOuKlCDtlajsiJhcclxuICAgIHJlbmRlcigpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgcCA9IHRoaXMuc3RhdGUucGxheWVyLnBvc2l0aW9uO1xyXG4gICAgICAgIGxldCBwcD1udWxsO1xyXG4gICAgICAgIGlmKHA9PVwiR29hbGtlZXBlclwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcHA9PHRoIGNsYXNzTmFtZT17XCJ0ZXh0LWNlbnRlclwifT5DbGVhbiBzaGVldHMgPC90aD47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBwPTx0aCBjbGFzc05hbWU9e1widGV4dC1jZW50ZXJcIn0+R29hbHM8L3RoPjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wicm93XCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcInBsYXllcl9kZXRhaWxcIn0gc3R5bGU9e3tcIm1hcmdpbi10b3BcIjpcIjgwMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiY29sLXNtLTVcIn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRodW1ibmFpbFwiIHN0eWxlPXt7XCJoZWlnaHRcIjpcIjQ1MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17dGhpcy5zdGF0ZS5wbGF5ZXIucGxheWVyX3BpY3R1cmV9IHdpZHRoPVwiMzUwcHhcIiBoZWlnaHQ9XCIzNTBweFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9e3tcImZvbnQtc2l6ZVwiOlwiMjBweFwifX0+e3RoaXMuc3RhdGUucGxheWVyLnBsYXllcl9udW1iZXJ9IC8gPHN0cm9uZz57dGhpcy5zdGF0ZS5wbGF5ZXIucGxheWVyX25hbWV9PC9zdHJvbmc+PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt0aGlzLnN0YXRlLnBsYXllci5wb3NpdGlvbn08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImNvbC1zbS03XCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1ncm91cFwiIHN0eWxlPXt7XCJmb250LXNpemVcIjpcIjIwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWhlYWRpbmdcIj7qta3soIE8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1ib2R5XCI+e3RoaXMuc3RhdGUucGxheWVyLm5hdGlvbn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsIHBhbmVsLWRlZmF1bHRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1oZWFkaW5nXCI+7IOd64WE7JuU7J28PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtYm9keVwiPnt0aGlzLnN0YXRlLnBsYXllci5iaXJ0aH08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsIHBhbmVsLWRlZmF1bHRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1oZWFkaW5nXCI+7YKkL+uquOustOqyjDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWJvZHlcIj57dGhpcy5zdGF0ZS5wbGF5ZXIuaGVpZ2h0fSAvIHt0aGlzLnN0YXRlLnBsYXllci53ZWlnaHR9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPXtcInRhYmxlXCJ9IHdpZHRoPXtcIjEwMCVcIn0gc3R5bGU9e3tcImJvcmRlclwiOlwic29saWQgIzZjOTJhMVwiLFwiZm9udC1zaXplXCI6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9e1widGV4dC1jZW50ZXJcIn0+QXBwZWFyYW5jZXM8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3BwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT17XCJ0ZXh0LWNlbnRlclwifT5XaW5zPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9e1widGV4dC1jZW50ZXJcIn0+TG9zc2VzPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLnBsYXllci5hcHBlYXJhbmNlc308L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLnBsYXllci5nb2Fsc308L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLnBsYXllci53aW5zfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3RoaXMuc3RhdGUucGxheWVyLmxvc3Nlc308L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUGxheWVyRGV0YWlsO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnQvUGxheWVyRGV0YWlsLmpzIiwiaW1wb3J0IFJlYWN0LHtDb21wb25lbnR9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCJcclxuaW1wb3J0IE5hdkxpbmsgZnJvbSBcInJlYWN0LXJvdXRlci1kb20vZXMvTmF2TGlua1wiO1xyXG5cclxuY2xhc3MgVGVhbURldGFpbCBleHRlbmRzIENvbXBvbmVudHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICAvL+uzgOyImCDshKDslrhcclxuICAgICAgICB0aGlzLnN0YXRlPXtcclxuICAgICAgICAgICAgbGlzdDp7fSxcclxuICAgICAgICAgICAgdG5vOjFcclxuICAgICAgICB9O1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICAgICAgLy/shJzrsoTsl5DshJwg642w7J207YSwIOydveuKlCDrtoDrtoRcclxuICAgICAgICB2YXIgX3RoaXM9dGhpcztcclxuICAgICAgICBheGlvcy5nZXQoXCIvdGVhbV9kZXRhaWxcIix7XHJcbiAgICAgICAgICAgIHBhcmFtczp7XHJcbiAgICAgICAgICAgICAgICB0bm86dGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMudG5vXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgLy8gcmVzcG9uc2UuanNvbihkb2NzKTtcclxuICAgICAgICAgICAgLy9be31dXHJcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtsaXN0OnJlc3VsdC5kYXRhWzBdfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29tcG9uZW50V2lsbE1vdW50XCIpXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJ0bm9cIilcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICAvL+2ZlOuptOyXkCDstpzroKUg67aA67aEXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiY29udGFpbmVyXCJ9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wicm93XCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcInRlYW1fZGV0YWlsXCJ9IHN0eWxlPXt7XCJtYXJnaW4tdG9wXCI6XCI4MDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImNvbC1zbS02XCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT17XCJ0YWJsZVwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgc3R5bGU9e3tcImZvbnQtc2l6ZVwiOlwiMjBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPXtcInRleHQtY2VudGVyXCJ9IHdpZHRoPXtcIjMwJVwifSByb3dTcGFuPXtcIjVcIn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17dGhpcy5zdGF0ZS5saXN0LmVtYmxlbX0gd2lkdGg9e1wiMTAwJVwifSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPXtcInRleHQtY2VudGVyXCJ9IGNvbFNwYW49e1wiMlwifSBzdHlsZT17e1wiZm9udC1zaXplXCI6XCI1MHB4XCJ9fT57dGhpcy5zdGF0ZS5saXN0LnRlYW1fbmFtZX08L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPXtcInRleHQtcmlnaHRcIn0gd2lkdGg9e1wiMjAlXCJ9PuyKpO2DgOuUlOybgDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9e1widGV4dC1sZWZ0XCJ9IHdpZHRoPXtcIjUwJVwifT57dGhpcy5zdGF0ZS5saXN0LnN0YWRpdW19PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT17XCJ0ZXh0LXJpZ2h0XCJ9IHdpZHRoPXtcIjIwJVwifT7qs7Xsi50g7ZmI7Y6Y7J207KeAPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT17XCJ0ZXh0LWxlZnRcIn0gd2lkdGg9e1wiNTAlXCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17dGhpcy5zdGF0ZS5saXN0LmhvbWVQYWdlTGlua30+e3RoaXMuc3RhdGUubGlzdC5ob21lUGFnZUxpbmt9PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sU3Bhbj17XCIzXCJ9IGNsYXNzTmFtZT17XCJ0ZXh0LXJpZ2h0XCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89e1wiL3BsYXllci9cIit0aGlzLnN0YXRlLmxpc3QudG5vfT48dGQgc3R5bGU9e3tcImNvbG9yXCI6XCJibHVlXCJ9fT48c3Ryb25nPuyEoOyImOuLqCDsoJXrs7Q8L3N0cm9uZz48L3RkPjwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbFNwYW49e1wiM1wifSBjbGFzc05hbWU9e1widGV4dC1yaWdodFwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPXtcIi9cIn0gY2xhc3M9e1wiYnRuIGJ0bi1zbSBidG4tZGFuZ2VyXCJ9PuuqqeuhnTwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImNvbC1zbS02XCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT17XCJ0YWJsZVwifSB3aWR0aD17XCIxMDAlXCJ9IHN0eWxlPXt7XCJib3JkZXJcIjpcInNvbGlkICM2YzkyYTFcIixcImZvbnQtc2l6ZVwiOlwiMjBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPXtcInRleHQtY2VudGVyXCJ9Pk1hdGNoZXMgcGxheWVkPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9e1widGV4dC1jZW50ZXJcIn0+V2luczwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPXtcInRleHQtY2VudGVyXCJ9Pkxvc3NlczwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPXtcInRleHQtY2VudGVyXCJ9PkdvYWxzPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9e1widGV4dC1jZW50ZXJcIn0+R29hbHMgY29uY2VkZWQ8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT17XCJ0ZXh0LWNlbnRlclwifT5DbGVhbiBzaGVldHM8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3RoaXMuc3RhdGUubGlzdC5tYXRjaGVzX3BsYXl9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5saXN0LndpbnN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5saXN0Lmxvc3Nlc308L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLmxpc3QuZ29hbHN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5saXN0LmdvYWxzX2NvbmNlZGVkfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3RoaXMuc3RhdGUubGlzdC5jbGVhbl9zaGVldHN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJjb2wtc20tNlwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRodW1ibmFpbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17dGhpcy5zdGF0ZS5saXN0LmhvbWVfa2l0fSB3aWR0aD1cIjIwMFwiIGhlaWdodD1cIjE1MFwiLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5Ib21lIEtpdDwvc3Ryb25nPjwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiY29sLXNtLTZcIn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aHVtYm5haWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3RoaXMuc3RhdGUubGlzdC5hd2F5X2tpdH0gd2lkdGg9XCIyMDBcIiBoZWlnaHQ9XCIxNTBcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+QXdheSBLaXQ8L3N0cm9uZz48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFRlYW1EZXRhaWw7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudC9UZWFtRGV0YWlsLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG4vLyBpbXBvcnQgKiBhcyBzZXJ2aWNlV29ya2VyIGZyb20gJy4vc2VydmljZVdvcmtlcic7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTtcblxuLy8gSWYgeW91IHdhbnQgeW91ciBhcHAgdG8gd29yayBvZmZsaW5lIGFuZCBsb2FkIGZhc3RlciwgeW91IGNhbiBjaGFuZ2Vcbi8vIHVucmVnaXN0ZXIoKSB0byByZWdpc3RlcigpIGJlbG93LiBOb3RlIHRoaXMgY29tZXMgd2l0aCBzb21lIHBpdGZhbGxzLlxuLy8gTGVhcm4gbW9yZSBhYm91dCBzZXJ2aWNlIHdvcmtlcnM6IGh0dHBzOi8vYml0Lmx5L0NSQS1QV0Fcbi8vIHNlcnZpY2VXb3JrZXIudW5yZWdpc3RlcigpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==